function parseNumArrayString(t) {
    if (t.length <= 1) return [];
    t = t.substring(1);
    for (var e = [], a = t.split("|"), i = 0, n = a; i < n.length; i++) {
        var s = n[i];
        e.push(parseInt(s))
    }
    return e
}

function parseStrArrayString(t) {
    t = t.substring(1);
    var e = t.split("|");
    return e
}

function on_wx_share_succ() {
    Toast.launch("分享成功!")
}
var AssetAdapter = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getAsset = function(t, e, a) {
            function i(i) {
                e.call(a, i, t)
            }
            if (RES.hasRes(t)) {
                var n = RES.getRes(t);
                n ? i(n) : RES.getResAsync(t, i, this)
            } else RES.getResByUrl(t, i, this, RES.ResourceItem.TYPE_IMAGE)
        },
        t
}();
egret.registerClass(AssetAdapter, "AssetAdapter", ["eui.IAssetAdapter"]);
var AutoScreenAdapter = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.calculateStageSize = function(t, e, a, i, n) {
            t = egret.MainContext.deviceType == egret.MainContext.DEVICE_MOBILE ? egret.StageScaleMode.SHOW_ALL : a > n && e > i ? egret.StageScaleMode.NO_SCALE : egret.StageScaleMode.SHOW_ALL;
            var s = i,
                r = n,
                o = i,
                l = n,
                h = e / o || 0,
                c = a / l || 0;
            switch (t) {
                case egret.StageScaleMode.SHOW_ALL:
                    h > c ? (s = Math.round(o * c), r = Math.round(l * c)) : (s = Math.round(o * h), r = Math.round(l * h))
            }
            return {
                stageWidth: o,
                stageHeight: l,
                displayWidth: s,
                displayHeight: r
            }
        },
        e
}(egret.HashObject);
egret.registerClass(AutoScreenAdapter, "AutoScreenAdapter", ["egret.sys.IScreenAdapter"]);
var ActivityitemItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.type = t[2],
            this.quality = t[3],
            this.canStack = t[4],
            this.pvTime = t[5],
            this.pvDate = t[6],
            this.saleType = t[7],
            this.saleValue = t[8],
            this.autoUse = t[9],
            this.icon = t[10],
            this.desc_l = t[11]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ActivityitemItem, "ActivityitemItem");
var ActivityitemParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ActivityitemItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ActivityitemParser, "ActivityitemParser");
var ActivityluckywheelItem = function() {
    function t(t) {
        this.id = t[0],
            this.score = t[1],
            this.costNum = t[2],
            this.dropDataID = t[3]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ActivityluckywheelItem, "ActivityluckywheelItem");
var ActivityluckywheelParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ActivityluckywheelItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ActivityluckywheelParser, "ActivityluckywheelParser");
var ActivityoltimeItem = function() {
    function t(t) {
        this.id = t[0],
            this.timeCount = t[1],
            this.type = t[2],
            this.item = t[3],
            this.count = t[4],
            this.remarks = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ActivityoltimeItem, "ActivityoltimeItem");
var ActivityoltimeParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ActivityoltimeItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ActivityoltimeParser, "ActivityoltimeParser");
var AdvancedbuffdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.buffType1 = t[1],
            this.buffValue1 = t[2],
            this.des_l = t[3],
            this.buffType2 = t[4],
            this.buffValue2 = t[5],
            this.buffType3 = t[6],
            this.buffValue3 = t[7]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(AdvancedbuffdataItem, "AdvancedbuffdataItem");
var AdvancedbuffdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new AdvancedbuffdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(AdvancedbuffdataParser, "AdvancedbuffdataParser");
var AreadataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.icon = t[2],
            this.desc_l = t[3],
            this.posX = t[4],
            this.posY = t[5],
            this.unlockpicture = t[6],
            this.unlocktalk_l = t[7]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(AreadataItem, "AreadataItem");
var AreadataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new AreadataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(AreadataParser, "AreadataParser");
var ArenaexchangedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.itemId = t[2],
            this.itemCount = t[3],
            this.itemCost = t[4],
            this.buyRank = t[5],
            this.buyTimeLimited = t[6],
            this.buyLevelLimited = t[7],
            this.rank = t[8],
            this.desc_l = t[9]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ArenaexchangedataItem, "ArenaexchangedataItem");
var ArenaexchangedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ArenaexchangedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ArenaexchangedataParser, "ArenaexchangedataParser");
var ArenanpcdataItem = function() {
    function t(t) {
        this.index = t[0],
            this.level = t[1],
            this.name_l = t[2],
            this.pos1 = t[3],
            this.pos2 = t[4],
            this.pos3 = t[5],
            this.pos4 = t[6],
            this.pos5 = t[7],
            this.pos6 = t[8],
            this.pos7 = t[9],
            this.pos8 = t[10]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ArenanpcdataItem, "ArenanpcdataItem");
var ArenanpcdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ArenanpcdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ArenanpcdataParser, "ArenanpcdataParser");
var ArenascoredataItem = function() {
    function t(t) {
        this.rank = t[0],
            this.score = t[1],
            this.match = t[2],
            this.honor = t[3]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ArenascoredataItem, "ArenascoredataItem");
var ArenascoredataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ArenascoredataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ArenascoredataParser, "ArenascoredataParser");
var AwardcenterdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.desc_l = t[2],
            this.color = t[3]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(AwardcenterdataItem, "AwardcenterdataItem");
var AwardcenterdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new AwardcenterdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(AwardcenterdataParser, "AwardcenterdataParser");
var BattlelostItem = function() {
    function t(t) {
        this.id = t[0],
            this.startLv = t[1],
            this.endLv = t[2],
            this.content1 = t[3],
            this.content2 = t[4],
            this.content3 = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(BattlelostItem, "BattlelostItem");
var BattlelostParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new BattlelostItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(BattlelostParser, "BattlelostParser");
var BigsevenrewardItem = function() {
    function t(t) {
        this.id = t[0],
            this.rankup = t[1],
            this.rankdown = t[2],
            this.giftid = t[3]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(BigsevenrewardItem, "BigsevenrewardItem");
var BigsevenrewardParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new BigsevenrewardItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(BigsevenrewardParser, "BigsevenrewardParser");
var BroadcastItem = function() {
    function t(t) {
        this.id = t[0],
            this.target = t[1],
            this.trigger = t[2],
            this.priority = t[3],
            this.instant = t[4],
            this.content_l = t[5],
            this.color = t[6]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(BroadcastItem, "BroadcastItem");
var BroadcastParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new BroadcastItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(BroadcastParser, "BroadcastParser");
var BuffdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name = t[1],
            this.icon = t[2],
            this.buffType1 = t[3],
            this.buffValue1 = t[4],
            this.buffType2 = t[5],
            this.buffValue2 = t[6],
            this.buffType3 = t[7],
            this.buffValue3 = t[8],
            this.buffTime = t[9]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(BuffdataItem, "BuffdataItem");
var BuffdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new BuffdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(BuffdataParser, "BuffdataParser");
var CampaigndataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.team_l = t[2],
            this.icon = t[3],
            this.desc_l = t[4],
            this.posX = t[5],
            this.posY = t[6],
            this.iconX = t[7],
            this.iconY = t[8],
            this.arrowIcon = t[9],
            this.arrowIconX = t[10],
            this.arrowIconY = t[11],
            this.flipType = t[12],
            this.angle = t[13],
            this.count = t[14],
            this.unlockpicture = t[15],
            this.unlocktalk_l = t[16]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CampaigndataItem, "CampaigndataItem");
var CampaigndataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CampaigndataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampaigndataParser, "CampaigndataParser");
var CampbattlebasedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.reqLevel = t[1],
            this.beginDay = t[2],
            this.startTime = t[3],
            this.endTime = t[4],
            this.produceRewardTime = t[5],
            this.produceRewardCount = t[6],
            this.battleCD = t[7],
            this.moveCD = t[8],
            this.deadCD = t[9],
            this.clearCDCost = t[10],
            this.produceElapse = t[11],
            this.homePortId = t[12],
            this.oilPortId = t[13],
            this.moraleLimit = t[14],
            this.rewardcoefficient = t[15],
            this.rankreward = t[16],
            this.rankbuffmorale = t[17],
            this.rankbuffdefence = t[18],
            this.openDay = t[19],
            this.bossStage = t[20],
            this.normalStage = t[21],
            this.extraNpcScore = t[22],
            this.killBossScore = t[23],
            this.npcStartTime = t[24],
            this.bossAppearTime = t[25],
            this.bossStartTime = t[26],
            this.detectTime = t[27],
            this.detectCost = t[28],
            this.bloodTimes = t[29],
            this.bloodCost = t[30],
            this.bloodCostPlus = t[31],
            this.bloodCostMorale = t[32]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CampbattlebasedataItem, "CampbattlebasedataItem");
var CampbattlebasedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CampbattlebasedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampbattlebasedataParser, "CampbattlebasedataParser");
var CampbattlelimitscoredataItem = function() {
    function t(t) {
        this.id = t[0],
            this.socre = t[1]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CampbattlelimitscoredataItem, "CampbattlelimitscoredataItem");
var CampbattlelimitscoredataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CampbattlelimitscoredataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampbattlelimitscoredataParser, "CampbattlelimitscoredataParser");
var CampbattlemapdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.position = t[2],
            this.portType = t[3],
            this.canAtk = t[4],
            this.canMov = t[5],
            this.oilReward = t[6],
            this.moraleReward = t[7],
            this.produce = t[8],
            this.nearList = t[9]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CampbattlemapdataItem, "CampbattlemapdataItem");
var CampbattlemapdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CampbattlemapdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampbattlemapdataParser, "CampbattlemapdataParser");
var CampbattlenpcdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.type = t[1],
            this.path = t[2],
            this.name_l = t[3],
            this.camp = t[4],
            this.icon = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CampbattlenpcdataItem, "CampbattlenpcdataItem");
var CampbattlenpcdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CampbattlenpcdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampbattlenpcdataParser, "CampbattlenpcdataParser");
var CampbattlescoredataItem = function() {
    function t(t) {
        this.id = t[0],
            this.score = t[1],
            this.goldAward = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CampbattlescoredataItem, "CampbattlescoredataItem");
var CampbattlescoredataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CampbattlescoredataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampbattlescoredataParser, "CampbattlescoredataParser");
var CaptainchargecountItem = function() {
    function t(t) {
        this.count = t[0],
            this.per = t[1]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptainchargecountItem, "CaptainchargecountItem");
var CaptainchargecountParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptainchargecountItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptainchargecountParser, "CaptainchargecountParser");
var CaptainchargedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.type = t[1],
            this.count = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptainchargedataItem, "CaptainchargedataItem");
var CaptainchargedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptainchargedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptainchargedataParser, "CaptainchargedataParser");
var CaptaincollectionItem = function() {
    function t(t) {
        this.id = t[0],
            this.captian_name_l = t[1],
            this.collectbuff = t[2],
            this.collectbuffvalue = t[3],
            this.english_name_l = t[4],
            this.birth_death_l = t[5],
            this.order = t[6]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptaincollectionItem, "CaptaincollectionItem");
var CaptaincollectionParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptaincollectionItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptaincollectionParser, "CaptaincollectionParser");
var CaptaindataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.picture = t[2],
            this.country = t[3],
            this.goodat = t[4],
            this.quality = t[5],
            this.basicHp = t[6],
            this.upgradeAddHp = t[7],
            this.basicFireAttack = t[8],
            this.upgradeAddFireAttack = t[9],
            this.basicExplosionAttack = t[10],
            this.upgradeAddExplosionAttack = t[11],
            this.basicFireDefen = t[12],
            this.upgradeAddFireDefen = t[13],
            this.basicExpDefen = t[14],
            this.upgradeAddExpDefen = t[15],
            this.promoteType = t[16],
            this.promoteValue = t[17],
            this.activeType1 = t[18],
            this.activeValue1 = t[19],
            this.activeType2 = t[20],
            this.activeValue2 = t[21],
            this.promoteCostSoul = t[22],
            this.promoteCostGold = t[23],
            this.turnPiece = t[24],
            this.pieceId = t[25],
            this.pieceNum = t[26],
            this.introduction_l = t[27],
            this.activeLvLimit1 = t[28],
            this.activeLvLimit2 = t[29],
            this.pictureSmall = t[30],
            this.promoteType2 = t[31],
            this.matchShip = t[32]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptaindataItem, "CaptaindataItem");
var CaptaindataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptaindataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptaindataParser, "CaptaindataParser");
var CaptainpiecedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.captainCountry = t[2],
            this.icon = t[3],
            this.quality = t[4],
            this.desc_l = t[5],
            this.fullname_l = t[6],
            this.captainId = t[7]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptainpiecedataItem, "CaptainpiecedataItem");
var CaptainpiecedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptainpiecedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptainpiecedataParser, "CaptainpiecedataParser");
var CaptainrecruitdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.freeCount = t[2],
            this.cd = t[3],
            this.itemId = t[4],
            this.freeItemId = t[5],
            this.credit = t[6],
            this.creditforten = t[7],
            this.gamblegold = t[8]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptainrecruitdataItem, "CaptainrecruitdataItem");
var CaptainrecruitdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptainrecruitdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptainrecruitdataParser, "CaptainrecruitdataParser");
var CaptainretiredataItem = function() {
    function t(t) {
        this.quality = t[0],
            this.type = t[1],
            this.count = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptainretiredataItem, "CaptainretiredataItem");
var CaptainretiredataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptainretiredataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptainretiredataParser, "CaptainretiredataParser");
var CaptainupgradedataItem = function() {
    function t(t) {
        this.level = t[0],
            this.upgradeCost1 = t[1],
            this.upgradeCost2 = t[2],
            this.upgradeCost3 = t[3],
            this.upgradeCost4 = t[4],
            this.upgradeCost5 = t[5],
            this.upgradeCost6 = t[6],
            this.upgradeCostSoul1 = t[7],
            this.upgradeCostSoul2 = t[8],
            this.upgradeCostSoul3 = t[9],
            this.upgradeCostSoul4 = t[10],
            this.upgradeCostSoul5 = t[11],
            this.upgradeCostSoul6 = t[12]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CaptainupgradedataItem, "CaptainupgradedataItem");
var CaptainupgradedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CaptainupgradedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CaptainupgradedataParser, "CaptainupgradedataParser");
var CashdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.sale = t[2],
            this.cash = t[3],
            this.firstGet = t[4],
            this.activeGet = t[5],
            this.icon = t[6],
            this.dayCount = t[7],
            this.dayGet = t[8],
            this.dayLimit = t[9],
            this.activitySwitch = t[10],
            this.startTime = t[11],
            this.endTime = t[12],
            this.platform = t[13],
            this.giftidlist = t[14],
            this.state = t[15],
            this.renew = t[16]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CashdataItem, "CashdataItem");
var CashdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CashdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CashdataParser, "CashdataParser");
var CenteradddataItem = function() {
    function t(t) {
        this.count = t[0],
            this.cash = t[1]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CenteradddataItem, "CenteradddataItem");
var CenteradddataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CenteradddataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CenteradddataParser, "CenteradddataParser");
var ClientdropdataItem = function() {
    function t(t) {
        this.index = t[0],
            this.id = t[1],
            this.type = t[2],
            this.item = t[3],
            this.count = t[4],
            this.remarks = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ClientdropdataItem, "ClientdropdataItem");
var ClientdropdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ClientdropdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ClientdropdataParser, "ClientdropdataParser");
var CodeItem = function() {
    function t(t) {
        this.id = t[0],
            this.type = t[1],
            this.code = t[2],
            this.starttime = t[3],
            this.endtime = t[4]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(CodeItem, "CodeItem");
var CodeParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new CodeItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(CodeParser, "CodeParser");
var ConfigData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.load = function(e, a, i) {
            void 0 === i && (i = ""),
                t.data[e] ? a("" == i ? t.data[e] : t.data[e][i]) : new DataLoader(e,
                    function(n) {
                        t.data[e] = {};
                        for (var s = new Array,
                                r = n.split("\r\n"), o = 0; o < r.length; o++) {
                            var l = r[o];
                            "" != l && "#" != l.substring(0, 1) && s.push(l.split("	"))
                        }
                        for (var o = 2; o < s.length; o++) {
                            t.data[e][s[o][0]] = {};
                            for (var h = 0; h < s[o].length; h++) t.data[e][s[o][0]][s[1][h]] = s[o][h]
                        }
                        t.data[e].length = s.length - 2,
                            a && a("" == i ? t.data[e] : t.data[e][i])
                    })
        },
        t.getAllData = function(e, a) {
            if (void 0 === a && (a = null), t.data[e]) {
                if (!a) return t.data[e];
                a(t.data[e])
            } else t.load(e, a)
        },
        t.getDataByKey = function(e, a, i) {
            if (void 0 === i && (i = null), t.data[e]) {
                if (null == i) return t.data[e][a];
                i(t.data[e][a])
            } else t.load(e, i, a)
        },
        t.preLoadList = function(e, a) {
            t.loadLength && 0 != t.loadLength || (t.loadLength = e.length),
                t.load(e[0],
                    function(i) {
                        e.shift(),
                            e.length > 0 ? (GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CONFIG_PROGRESS, {
                                itemsLoaded: t.loadLength - e.length - 1,
                                itemsTotal: t.loadLength
                            })), t.preLoadList(e, a)) : (GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CONFIG_COMPLETE)), t.loadLength = 0, a())
                    })
        },
        t.preLoadDats = function(t, e, a, i) {
            if (0 != t.length) {
                t.length != e.length && Log.logWarning("[ConfigData.preLoadDats]datFileNames' length is not equal to parserClasses's length");
                var n = [],
                    s = [];
                for (var r in t) {
                    var o = t[r],
                        l = e[r];
                    l.GetInstance().getDatas() || (n.push("resource/config/jsons/" + o + ".json"), s.push(l))
                }
                ResLoader.instance.preLoadResList(n,
                    function(e) {
                        for (var n in e) {
                            var r = e[n];
                            if (r) {
                                var o = (t[n], s[n]);
                                o.GetInstance().ProcessData(r)
                            } else Log.logError("load dat failed", t[n])
                        }
                        Utils.call(a, i)
                    })
            }
        },
        t.data = {},
        t
}();
egret.registerClass(ConfigData, "ConfigData");
var DataLoader = function() {
    function t(t, e) {
        var a = "resource/config/" + t + ".txt";
        RES.getResByUrl(Transport.loginPanelBool ? Path.cdnURL + a : a, e, this, RES.ResourceItem.TYPE_TEXT)
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(DataLoader, "DataLoader");
var ConfigHelper = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getPaperChargeCount = function() {
            var t = void 0,
                e = void 0,
                a = PaperchargecountParser.GetInstance().getDatas();
            for (var i in a) {
                var n = a[i],
                    s = 0;
                1 == n.chargeType && (t ? t > s && (t = s) : t = s),
                    2 == n.chargeType && (e ? e > s && (e = s) : e = s)
            }
            return t
        },
        t.instance = new t,
        t
}();
egret.registerClass(ConfigHelper, "ConfigHelper");
var DecorationItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.decorationType = t[2],
            this.buff = t[3],
            this.buffValue = t[4],
            this.costType = t[5],
            this.costStars = t[6],
            this.costGold = t[7],
            this.icon = t[8]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(DecorationItem, "DecorationItem");
var DecorationParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new DecorationItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(DecorationParser, "DecorationParser");
var DefencestagedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.conditionsType = t[1],
            this.coefficient = t[2],
            this.pos1 = t[3],
            this.pos2 = t[4],
            this.pos3 = t[5],
            this.pos4 = t[6],
            this.pos5 = t[7],
            this.pos6 = t[8],
            this.pos7 = t[9],
            this.pos8 = t[10]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(DefencestagedataItem, "DefencestagedataItem");
var DefencestagedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new DefencestagedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(DefencestagedataParser, "DefencestagedataParser");
var DefencestagerewarddataItem = function() {
    function t(t) {
        this.id = t[0],
            this.gold = t[1],
            this.drop = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(DefencestagerewarddataItem, "DefencestagerewarddataItem");
var DefencestagerewarddataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new DefencestagerewarddataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(DefencestagerewarddataParser, "DefencestagerewarddataParser");
var ExpItem = function() {
    function t(t) {
        this.level = t[0],
            this.exp = t[1],
            this.poslevel = t[2],
            this.centerAddGold = t[3],
            this.yardNumLimit = t[4],
            this.shipFactorylvlLimit = t[5],
            this.techLimit = t[6],
            this.partLevelLimit = t[7],
            this.restoreOil = t[8],
            this.speedUpLv = t[9],
            this.desc_l = t[10],
            this.medalLevelLimit = t[11],
            this.captainLevelLimit = t[12],
            this.seikoLevelLimit = t[13],
            this.robberyDrop = t[14],
            this.guideGift = t[15]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ExpItem, "ExpItem");
var ExpParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ExpItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ExpParser, "ExpParser");
var GameData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.skipShipGuide = !1,
        t.funSwitch = !0,
        t.uid = "72902027558016813",
        t.secret = "8613910246800ll",
        t.longId = "",
        t.designWidth = 640,
        t.designHeight = 960,
        t.shipURL = "resource/assets/ShipIcons/",
        t.captainIconURL = "resource/assets/Icon/captain/",
        t.shipTypeIconURL = "resource/assets/Icon/shipType/",
        t.countryURL = "resource/assets/Icon/country/",
        t.partsIconURL = "resource/assets/Icon/parts/",
        t.soulIconURL = "resource/assets/Icon/medal/",
        t.itemIconURL = "resource/assets/Icon/item/",
        t.openid = "",
        t.pf = "play68",
        t
}();
egret.registerClass(GameData, "GameData");
var GiftdataItem = function() {
    function t(t) {
        this.index = t[0],
            this.id = t[1],
            this.type = t[2],
            this.item = t[3],
            this.count = t[4],
            this.remarks = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(GiftdataItem, "GiftdataItem");
var GiftdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new GiftdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(GiftdataParser, "GiftdataParser");
var GuildcontributeItem = function() {
    function t(t) {
        this.id = t[0],
            this.name = t[1],
            this.costType = t[2],
            this.costValue = t[3],
            this.addGuildExp = t[4],
            this.addGuildPoint = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(GuildcontributeItem, "GuildcontributeItem");
var GuildcontributeParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new GuildcontributeItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(GuildcontributeParser, "GuildcontributeParser");
var GuildItem = function() {
    function t(t) {
        this.level = t[0],
            this.exp = t[1],
            this.count = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(GuildItem, "GuildItem");
var GuildParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new GuildItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(GuildParser, "GuildParser");
var GuildsciencedataItem = function() {
    function t(t) {
        this.level = t[0],
            this.guildscience1Cost = t[1],
            this.guildscience1Effect = t[2],
            this.guildscience2Cost = t[3],
            this.guildscience2Effect = t[4],
            this.guildscience3Cost = t[5],
            this.guildscience3Effect = t[6],
            this.guildscience4Cost = t[7],
            this.guildscience4Effect = t[8],
            this.guildscience5Cost = t[9],
            this.guildscience5Effect = t[10],
            this.guildscience6Cost = t[11],
            this.guildscience6Effect = t[12],
            this.guildscience7Cost = t[13],
            this.guildscience7Effect = t[14],
            this.guildscience8Cost = t[15],
            this.guildscience8Effect = t[16]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(GuildsciencedataItem, "GuildsciencedataItem");
var GuildsciencedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new GuildsciencedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(GuildsciencedataParser, "GuildsciencedataParser");
var GuildscienceItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.desc1_l = t[2],
            this.desc2_l = t[3],
            this.icon = t[4],
            this.ratio = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(GuildscienceItem, "GuildscienceItem");
var GuildscienceParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new GuildscienceItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(GuildscienceParser, "GuildscienceParser");
var HegemonyunlockItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.needlvl = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(HegemonyunlockItem, "HegemonyunlockItem");
var HegemonyunlockParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new HegemonyunlockItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(HegemonyunlockParser, "HegemonyunlockParser");
var ArenaScoreDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getRankData = function(t) {
            for (var e = ArenascoredataParser.GetInstance().getDataArr(), a = e[e.length - 1], i = 0; i < e.length; ++i) {
                var n = e[i];
                if (n.rank <= t && e[i + 1].rank > t) {
                    a = n;
                    break
                }
            }
            return a
        },
        t.instance = new t,
        t
}();
egret.registerClass(ArenaScoreDataLib, "ArenaScoreDataLib");
var BattleLostDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getDataBylvl = function(t) {
            for (var e = BattlelostParser.GetInstance().getDataArr(), a = null, i = 0, n = e; i < n.length; i++) {
                var s = n[i];
                Math.floor(t) >= Math.floor(s.startLv) && Math.floor(t) <= Math.floor(s.endLv) && (a = s)
            }
            return a
        },
        t.instance = new t,
        t
}();
egret.registerClass(BattleLostDataLib, "BattleLostDataLib");
var BroadCastDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getContent = function(t) {
            if (this.contentList) return this.contentList[t - 1];
            this.contentList = [];
            for (var e = 0,
                    a = BroadcastParser.GetInstance().getDataArr(); e < a.length; e++) {
                var i = a[e],
                    n = i.content_l,
                    s = n.split("#");
                this.contentList.push(s)
            }
            return this.contentList[t - 1]
        },
        t.instance = new t,
        t
}();
egret.registerClass(BroadCastDataLib, "BroadCastDataLib");
var CampBattleBaseDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.checkIsOpen = function(t) {
            for (var e = CampbattlebasedataParser.GetInstance().getDataArr()[0], a = 0, i = e.openDay; a < i.length; a++) {
                var n = i[a];
                if (Math.floor(n) == t) return !0
            }
            return !1
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampBattleBaseDataLib, "CampBattleBaseDataLib");
var ClientDropDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getDataBy = function() {
            for (var t = [], e = 0, a = ClientdropdataParser.GetInstance().getDataArr(); e < a.length; e++) {
                var i = a[e];
                10101 == i.id && t.push(i)
            }
            return t[Utils.randInt(0, t.length - 1)]
        },
        a.sortList = function(t, e) {
            return t.index < e.index
        },
        a.getTanBaoDataById = function(t) {
            this.tanbaoList = [];
            for (var e = 0,
                    a = ClientdropdataParser.GetInstance().getDataArr(); e < a.length; e++) {
                var i = a[e];
                if (i.id == t) {
                    var n = GlobalFunction.getDropDataByTypeAndId(i.type, i.item, i.count);
                    n && this.tanbaoList.push(n)
                }
            }
            return this.tanbaoList
        },
        a.getTanBaoList = function() {
            return this.tanbaoList
        },
        t.instance = new t,
        t
}();
egret.registerClass(ClientDropDataLib, "ClientDropDataLib");
var ShopDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getDataById = function(t) {
            for (var e = ShopdataParser.GetInstance().getDataArr(), a = 0, i = e; a < i.length; a++) {
                var n = i[a];
                if (n.itemId == t) return n
            }
        },
        a.getShopDataById = function(t) {
            return ShopdataParser.GetInstance().getItemById(t)
        },
        a.getShopDataByCampType = function() {
            for (var t = [], e = ShopdataParser.GetInstance().getDataArr(), a = 0, i = e; a < i.length; a++) {
                var n = i[a];
                4 == n.type && t.push(n)
            }
            return t
        },
        a.getShopDataByBiwuType = function() {
            for (var t = [], e = ShopdataParser.GetInstance().getDataArr(), a = 0, i = e; a < i.length; a++) {
                var n = i[a];
                5 == n.type && t.push(n)
            }
            return t
        },
        t.instance = new t,
        t
}();
egret.registerClass(ShopDataLib, "ShopDataLib");
var StageDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getAreaIdById = function(t) {
            var e = Math.floor(t / 1e4),
                a = Math.floor(t / 100 % 100),
                i = Math.floor(t % 100);
            return {
                areaId: e,
                campaignId: a,
                stageIndex: i
            }
        },
        a.InitPVEMapInfo = function() {
            if (!this._pveAreaInfo) {
                this._pveAreaInfo = {},
                    this._campaignData = {};
                var t = StagedataParser.GetInstance().getDatas();
                for (var e in t) {
                    var a = t[e],
                        i = this.getAreaIdById(e),
                        n = this._pveAreaInfo[i.areaId];
                    if (n) {
                        for (var s = !1,
                                r = 0,
                                o = n.length; o > r; ++r) n[r] == i.campaignId && (s = !0);
                        s || n.push(i.campaignId)
                    } else this._pveAreaInfo[i.areaId] = [i.campaignId];
                    this._campaignData[i.campaignId] ? this._campaignData[i.campaignId].push(a) : this._campaignData[i.campaignId] = [a]
                }
            }
        },
        a.getIdByInfo = function(t, e, a) {
            return 1e4 * t + 100 * e + a
        },
        a.getFirstStage = function() {
            return StagedataParser.GetInstance().getDataArr()[0]
        },
        a.getNextInfoByCurrent = function(t, e) {
            var a = StagedataParser.GetInstance().getItemById[this.getIdByInfo(t, e + 1, 1)];
            return null != a ? {
                area: t,
                campain: e + 1
            } : (a = StagedataParser.GetInstance().getItemById(this.getIdByInfo(t + 1, e + 1, 1)), void 0 != a ? {
                area: t + 1,
                campain: 1
            } : null)
        },
        a.checkCampainIsLast = function(t, e) {
            var a = this._pveAreaInfo[t];
            if (a) {
                if (a[a.length - 1] == e) return !0
            } else Log.logWarning("##########Error:AreaID is not Exist, id:", t);
            return !1
        },
        a.getAreaAllStarByArea = function(t) {
            for (var e = 0,
                    a = 0,
                    i = MainWorldManager.instance.getStarList(), n = 0, s = this._pveAreaInfo[t]; n < s.length; n++) {
                var r = s[n],
                    o = this._campaignData[r];
                if (o && o.length > 0)
                    for (var l = 0,
                            h = o; l < h.length; l++) {
                        var c = h[l];
                        if (e++, c.id <= MainWorldManager.instance.getLastStagaID()) {
                            for (var d = !1,
                                    g = 0,
                                    u = i.length; u > g; ++g)
                                if (c.id == i[g].stageID) {
                                    a += i[g].star,
                                        d = !0;
                                    break
                                }
                            d || (a += 3)
                        }
                    }
                return 3 * e
            }
        },
        a.getAreaAllStarByCampaign = function(t) {
            for (var e = 0,
                    a = 0,
                    i = MainWorldManager.instance.getStarList(), n = 0, s = this._campaignData[t]; n < s.length; n++) {
                var r = s[n];
                if (e += 1, r.id <= MainWorldManager.instance.getLastStagaID()) {
                    for (var o = !1,
                            l = 0,
                            h = i; l < h.length; l++) {
                        var c = h[l];
                        if (r.id == c.stageID) {
                            a += c.star,
                                o = !0;
                            break
                        }
                    }
                    o || (a += 3)
                }
            }
            return {
                getStar: a,
                totalStar: 3 * e
            }
        },
        a.getCurrentActiveArea = function(t, e) {
            t = Number(t);
            var a = -1;
            return a = 1 == this.checkCampainIsLast(t, e) && AreadataParser.GetInstance().getItemById(t + 1) ? t + 1 : t
        },
        a.getCampaignListByArea = function(t) {
            return this._pveAreaInfo[t]
        },
        a.getStageListByCampaign = function(t) {
            return this._campaignData[t]
        },
        a.getAreaByCampaign = function(t) {
            var e = null;
            for (var a in this._pveAreaInfo) {
                for (var i = 0,
                        n = this._pveAreaInfo[a]; i < n.length; i++) {
                    var s = n[i];
                    if (s == t) {
                        e = a;
                        break
                    }
                }
                if (null != e) break
            }
            return e
        },
        t.instance = new t,
        t
}();
egret.registerClass(StageDataLib, "StageDataLib");
var StageSpecialDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getFirstData = function() {
            return StagespecialdataParser.GetInstance().getDataArr()[0]
        },
        a.getCampaignIdBySpecialId = function(t) {
            return t % 100
        },
        a.getDataByCampaignId = function(t) {
            for (var e = StagespecialdataParser.GetInstance().getDataArr(), a = 0, i = e; a < i.length; a++) {
                var n = i[a];
                if (10 == Math.floor(n.id / 1e4) && this.getCampaignIdBySpecialId(n.id) == t) return n
            }
        },
        t.instance = new t,
        t
}();
egret.registerClass(StageSpecialDataLib, "StageSpecialDataLib");
var UserExpDataLib = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getMaxExpByLevel = function(t) {
            var e = ExpParser.GetInstance().getItemById(t + 1);
            return e ? e.exp : 0
        },
        a.getDataBylevel = function(t) {
            return ExpParser.GetInstance().getItemById(t)
        },
        a.getSpeedUpLv = function(t) {
            var e = ExpParser.GetInstance().getItemById(t).speedUpLv;
            return e
        },
        a.checkSpeedUpLv = function(t, e) {
            var a = !1,
                i = 0,
                n = ExpParser.GetInstance().getItemById(t).speedUpLv;
            if (e > n)
                for (var s = 0,
                        r = ExpParser.GetInstance().getDataArr(); s < r.length; s++) {
                    var o = r[s];
                    if (o.speedUpLv == e) {
                        i = o.level;
                        break
                    }
                } else a = !0;
            return [a, i]
        },
        t.instance = new t,
        t
}();
egret.registerClass(UserExpDataLib, "UserExpDataLib");
var VirtualBattleRoundDataLib = function() {
    function t() {
        this.roundData = {
            info: {
                roundlist: []
            }
        };
        for (var t = 0,
                e = VirtualbattlerounddataParser.GetInstance().getDataArr(); t < e.length; t++) {
            var a = e[t],
                i = this.roundData.info.roundlist[a.round];
            null == i && (this.roundData.info.roundlist[a.round] = {
                roundid: a.round,
                actionlist: {}
            });
            var n = {
                actionshipid: a.actionId,
                skillid: a.skill,
                targetlist: [],
                actionshipdata: {}
            };
            this.roundData.info.roundlist[a.round].actionlist[a.anction] = n;
            var s = {
                id: a.actionId
            };
            n.actionshipdata = s;
            for (var r = null,
                    o = 0; o < a.target.length; ++o) r = {
                    id: a.target[o],
                    hp: a.hp[o],
                    maxhp: a.hp[a.hp.length - 1],
                    cri: !1,
                    hit: !1,
                    damage: a.damage[o]
                },
                1 == a.status[o] ? r.hit = !0 : 2 == a.status[o] ? (r.cri = !0, r.hit = !0) : 3 == a.status[o] && (r.hit = !1),
                n.targetlist.push(r)
        }
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(t, "instance",
            function() {
                return t._instance = new t,
                    t._instance
            }),
        i.getRoundData = function() {
            return this.roundData
        },
        t
}();
egret.registerClass(VirtualBattleRoundDataLib, "VirtualBattleRoundDataLib");
var ItemItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.type = t[2],
            this.quality = t[3],
            this.randomId = t[4],
            this.canStack = t[5],
            this.pvTime = t[6],
            this.pvDate = t[7],
            this.saleType = t[8],
            this.saleValue = t[9],
            this.keyId = t[10],
            this.keyCount = t[11],
            this.autoUse = t[12],
            this.luckyBoxType = t[13],
            this.twinLukcyBoxId = t[14],
            this.icon = t[15],
            this.desc_l = t[16],
            this.iskey = t[17],
            this.iswallet = t[18],
            this.useten = t[19],
            this.gamblegold = t[20],
            this.rank = t[21]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ItemItem, "ItemItem");
var ItemParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ItemItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ItemParser, "ItemParser");
var MaildataItem = function() {
    function t(t) {
        this.id = t[0],
            this.type = t[1],
            this.content_l = t[2],
            this.item1 = t[3],
            this.count1 = t[4],
            this.item2 = t[5],
            this.count2 = t[6],
            this.item3 = t[7],
            this.count3 = t[8],
            this.color = t[9],
            this.typeTwo = t[10]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(MaildataItem, "MaildataItem");
var MaildataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new MaildataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(MaildataParser, "MaildataParser");
var ManualItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.targetType1 = t[2],
            this.buff1 = t[3],
            this.value1 = t[4],
            this.value1rate = t[5],
            this.intro1_l = t[6],
            this.targetType2 = t[7],
            this.buff2 = t[8],
            this.value2 = t[9],
            this.value2rate = t[10],
            this.intro2_l = t[11],
            this.stage = t[12],
            this.desc1_l = t[13],
            this.desc2_l = t[14],
            this.icon = t[15]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ManualItem, "ManualItem");
var ManualParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ManualItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ManualParser, "ManualParser");
var MedaldataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.equipfor = t[2],
            this.quality = t[3],
            this.medalType = t[4],
            this.buff = t[5],
            this.buffValue = t[6],
            this.exp = t[7],
            this.icon = t[8],
            this.desc_l = t[9],
            this.collectid = t[10],
            this.collectbuff = t[11],
            this.collectbuffvalue = t[12],
            this.desc_collect_l = t[13],
            this.collecticon = t[14],
            this.icon_1 = t[15],
            this.remouldType = t[16],
            this.remouldValue = t[17],
            this.remouldCostPoint = t[18],
            this.decomposepoints = t[19],
            this.desc_collect_abbr_l = t[20],
            this.equip_priority = t[21],
            this.dec_l = t[22]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(MedaldataItem, "MedaldataItem");
var MedaldataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new MedaldataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(MedaldataParser, "MedaldataParser");
var MedalexpdataItem = function() {
    function t(t) {
        this.level = t[0],
            this.exp1 = t[1],
            this.exp2 = t[2],
            this.exp3 = t[3],
            this.exp4 = t[4]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(MedalexpdataItem, "MedalexpdataItem");
var MedalexpdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new MedalexpdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(MedalexpdataParser, "MedalexpdataParser");
var MedalpieceItem = function() {
    function t(t) {
        this.id = t[0],
            this.medal_id = t[1],
            this.name_l = t[2],
            this.icon = t[3],
            this.npc_rate = t[4],
            this.user_rate = t[5],
            this.desc_l = t[6],
            this.user_pos1_rate = t[7],
            this.user_pos2_rate = t[8]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(MedalpieceItem, "MedalpieceItem");
var MedalpieceParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new MedalpieceItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(MedalpieceParser, "MedalpieceParser");
var MilitaryrankItem = function() {
    function t(t) {
        this.index = t[0],
            this.id = t[1],
            this.nextrank = t[2],
            this.name_l = t[3],
            this.picture = t[4],
            this.pic_ch = t[5],
            this.pic_ch_s = t[6],
            this.honour = t[7],
            this.gold = t[8],
            this.diamond = t[9],
            this.quality = t[10],
            this.privilege = t[11]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(MilitaryrankItem, "MilitaryrankItem");
var MilitaryrankParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new MilitaryrankItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(MilitaryrankParser, "MilitaryrankParser");
var MilitaryrightsItem = function() {
    function t(t) {
        this.id = t[0],
            this.righttype = t[1],
            this.numtype = t[2],
            this.num = t[3],
            this.rightname_l = t[4]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(MilitaryrightsItem, "MilitaryrightsItem");
var MilitaryrightsParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new MilitaryrightsItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(MilitaryrightsParser, "MilitaryrightsParser");
var MissionData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.init = function(e) {
            t.missionList = e.tasks,
                t.totalscore = e.totalscore,
                t.hasgetscoregiftlist = e.hasgetscoregiftlist,
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.TASK_UPDATE))
        },
        t
}();
egret.registerClass(MissionData, "MissionData");
var NameplayerdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.nametype = t[2],
            this.wordnumber = t[3],
            this.sex = t[4],
            this.firstmatch = t[5]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(NameplayerdataItem, "NameplayerdataItem");
var NameplayerdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new NameplayerdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(NameplayerdataParser, "NameplayerdataParser");
var NpcdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.modelId = t[1],
            this.name_l = t[2],
            this.shipType = t[3],
            this.country = t[4],
            this.level = t[5],
            this.quality = t[6],
            this.fireAtk = t[7],
            this.explAtk = t[8],
            this.fireDef = t[9],
            this.explDef = t[10],
            this.hp = t[11],
            this.spd = t[12],
            this.hit = t[13],
            this.eva = t[14],
            this.cri = t[15],
            this.deCri = t[16],
            this.criDmg = t[17],
            this.skillUse = t[18],
            this.skillDmg = t[19],
            this.skillHit = t[20],
            this.noramlSkill = t[21],
            this.activeSkill = t[22]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(NpcdataItem, "NpcdataItem");
var NpcdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new NpcdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(NpcdataParser, "NpcdataParser");
var PaperchargecountItem = function() {
    function t(t) {
        this.count = t[0],
            this.per = t[1]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PaperchargecountItem, "PaperchargecountItem");
var PaperchargecountParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PaperchargecountItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PaperchargecountParser, "PaperchargecountParser");
var PaperchargedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.chargeType = t[1],
            this.type = t[2],
            this.count = t[3],
            this.vipLevel = t[4]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PaperchargedataItem, "PaperchargedataItem");
var PaperchargedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PaperchargedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PaperchargedataParser, "PaperchargedataParser");
var PaperData = function() {
    function t(t, e, a) {
        this.id = t,
            this.count = e,
            this.islock = a
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PaperData, "PaperData");
var PaperdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.quality = t[2],
            this.shipId = t[3],
            this.pieceId = t[4],
            this.pieceCount = t[5],
            this.shipType = t[6],
            this.icon = t[7],
            this.order = t[8],
            this.buffType = t[9],
            this.buffValue = t[10]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PaperdataItem, "PaperdataItem");
var PaperdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PaperdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PaperdataParser, "PaperdataParser");
var PaperpiecedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.shipType = t[2],
            this.icon = t[3],
            this.quality = t[4],
            this.desc_l = t[5],
            this.fullname_l = t[6],
            this.paperId = t[7]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PaperpiecedataItem, "PaperpiecedataItem");
var PaperpiecedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PaperpiecedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PaperpiecedataParser, "PaperpiecedataParser");
var PapersaledataItem = function() {
    function t(t) {
        this.quality = t[0],
            this.type = t[1],
            this.count = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PapersaledataItem, "PapersaledataItem");
var PapersaledataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PapersaledataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PapersaledataParser, "PapersaledataParser");
var PartsItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.type = t[2],
            this.equipfor = t[3],
            this.quality = t[4],
            this.upgradeType = t[5],
            this.upgradeValue = t[6],
            this.remouldType = t[7],
            this.remouldValue = t[8],
            this.remouldCostPoint = t[9],
            this.decomposepoints = t[10],
            this.icon = t[11],
            this.desc_l = t[12],
            this.basicValue = t[13]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PartsItem, "PartsItem");
var PartsParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PartsItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PartsParser, "PartsParser");
var PartspiecesItem = function() {
    function t(t) {
        this.id = t[0],
            this.part_id = t[1],
            this.name_l = t[2],
            this.icon = t[3],
            this.npc_rate = t[4],
            this.user_rate = t[5],
            this.desc_l = t[6],
            this.user_pos1_rate = t[7],
            this.user_pos2_rate = t[8]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PartspiecesItem, "PartspiecesItem");
var PartspiecesParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PartspiecesItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PartspiecesParser, "PartspiecesParser");
var PartsupgradecridataItem = function() {
    function t(t) {
        this.vipLevel = t[0],
            this.upgradeRange = t[1],
            this.upgradeRnd = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PartsupgradecridataItem, "PartsupgradecridataItem");
var PartsupgradecridataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PartsupgradecridataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PartsupgradecridataParser, "PartsupgradecridataParser");
var PartsupgradedataItem = function() {
    function t(t) {
        this.level = t[0],
            this.upCost1 = t[1],
            this.upCost2 = t[2],
            this.upCost3 = t[3],
            this.upCost4 = t[4],
            this.upCost5 = t[5],
            this.upCost6 = t[6]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PartsupgradedataItem, "PartsupgradedataItem");
var PartsupgradedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PartsupgradedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PartsupgradedataParser, "PartsupgradedataParser");
var PlaygamestagedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.stage = t[1],
            this.weight = t[2]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PlaygamestagedataItem, "PlaygamestagedataItem");
var PlaygamestagedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new PlaygamestagedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(PlaygamestagedataParser, "PlaygamestagedataParser");
var RobnpcdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.pos1 = t[2],
            this.pos2 = t[3],
            this.pos3 = t[4],
            this.pos4 = t[5],
            this.pos5 = t[6],
            this.pos6 = t[7],
            this.pos7 = t[8],
            this.pos8 = t[9],
            this.camp = t[10],
            this.power = t[11]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(RobnpcdataItem, "RobnpcdataItem");
var RobnpcdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new RobnpcdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(RobnpcdataParser, "RobnpcdataParser");
var SciencedataItem = function() {
    function t(t) {
        this.level = t[0],
            this.ironCostGold = t[1],
            this.ironCostItem = t[2],
            this.ironCostCount = t[3],
            this.ammoCostGold = t[4],
            this.ammoCostItem = t[5],
            this.ammoCostCount = t[6],
            this.airCostGold = t[7],
            this.airCostItem = t[8],
            this.airCostCount = t[9],
            this.machineCostGold = t[10],
            this.machineCostItem = t[11],
            this.machineCostCount = t[12],
            this.elecCostGold = t[13],
            this.elecCostItem = t[14],
            this.elecCostCount = t[15]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(SciencedataItem, "SciencedataItem");
var SciencedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new SciencedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(SciencedataParser, "SciencedataParser");
var ScienceItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.desc_l = t[2],
            this.icon = t[3]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ScienceItem, "ScienceItem");
var ScienceParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ScienceItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ScienceParser, "ScienceParser");
var SeikoItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.type = t[2],
            this.quality = t[3],
            this.equipfor = t[4],
            this.upgradeType = t[5],
            this.basicValue = t[6],
            this.upgradeValue = t[7],
            this.remouldType = t[8],
            this.remouldValue = t[9],
            this.remouldcostpoint = t[10],
            this.remouldcostseiko = t[11],
            this.traintype = t[12],
            this.decomposepoints = t[13],
            this.pieceID = t[14],
            this.pieceNum = t[15],
            this.groupID = t[16],
            this.desc_l = t[17],
            this.icon = t[18],
            this.recoverycost = t[19],
            this.descsimp_l = t[20],
            this.gradeLv = t[21]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(SeikoItem, "SeikoItem");
var SeikoParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new SeikoItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(SeikoParser, "SeikoParser");
var SeikopieceItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.seikotype = t[2],
            this.icon = t[3],
            this.quality = t[4],
            this.desc_l = t[5],
            this.fullname_l = t[6],
            this.seikoId = t[7],
            this.pieceNum = t[8]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(SeikopieceItem, "SeikopieceItem");
var SeikopieceParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new SeikopieceItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(SeikopieceParser, "SeikopieceParser");
var ShipdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.shipType = t[2],
            this.atkType = t[3],
            this.quality = t[4],
            this.produceCost = t[5],
            this.remouldCost = t[6],
            this.drawingId = t[7],
            this.remouldCount = t[8],
            this.remouldSeniorPaper = t[9],
            this.remouldMaterial = t[10],
            this.hp = t[11],
            this.fire = t[12],
            this.explosion = t[13],
            this.fireDef = t[14],
            this.explosionDef = t[15],
            this.hpRate = t[16],
            this.fireRate = t[17],
            this.explosionRate = t[18],
            this.fireDefRate = t[19],
            this.explosionDefRate = t[20],
            this.spd = t[21],
            this.hit = t[22],
            this.eva = t[23],
            this.cri = t[24],
            this.deCri = t[25],
            this.normalSkill = t[26],
            this.activeSkill = t[27],
            this.leaderSkill = t[28],
            this.remouldId = t[29],
            this.remouldLv = t[30],
            this.remouldAddId = t[31],
            this.remouldAddValue = t[32],
            this.activateAddId = t[33],
            this.modelId = t[34],
            this.icon = t[35],
            this.dirId = t[36],
            this.country = t[37],
            this.desc_l = t[38]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ShipdataItem, "ShipdataItem");
var ShipdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ShipdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ShipdataParser, "ShipdataParser");
var ShipmodeldataItem = function() {
    function t(t) {
        this.id = t[0],
            this.url = t[1],
            this.classType = t[2],
            this.shipType = t[3],
            this.country = t[4],
            this.deadType = t[5],
            this.centerPos = t[6],
            this.firePos = t[7],
            this.maskRes = t[8],
            this.scale = t[9]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ShipmodeldataItem, "ShipmodeldataItem");
var ShipmodeldataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ShipmodeldataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ShipmodeldataParser, "ShipmodeldataParser");
var ShipnameItem = function() {
    function t(t) {
        this.id = t[0],
            this.chName_l = t[1],
            this.engName = t[2],
            this.country = t[3]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ShipnameItem, "ShipnameItem");
var ShipnameParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ShipnameItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ShipnameParser, "ShipnameParser");
var ShipupgradeItem = function() {
    function t(t) {
        this.level = t[0],
            this.quality1 = t[1],
            this.quality2 = t[2],
            this.quality3 = t[3],
            this.quality4 = t[4],
            this.quality5 = t[5],
            this.quality6 = t[6]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ShipupgradeItem, "ShipupgradeItem");
var ShipupgradeParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ShipupgradeItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ShipupgradeParser, "ShipupgradeParser");
var ShopdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.enable = t[1],
            this.itemType = t[2],
            this.itemId = t[3],
            this.name = t[4],
            this.type = t[5],
            this.saleValue = t[6],
            this.costType = t[7],
            this.order = t[8],
            this.reqLevel = t[9],
            this.reqVIPLevel = t[10],
            this.countLimit = t[11],
            this.countLimitweek = t[12],
            this.discount = t[13]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ShopdataItem, "ShopdataItem");
var ShopdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new ShopdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(ShopdataParser, "ShopdataParser");
var SkilldataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.desc_l = t[2],
            this.icon = t[3],
            this.action = t[4],
            this.quality = t[5],
            this.skillType = t[6],
            this.targetType = t[7],
            this.actionRate = t[8],
            this.hit = t[9],
            this.damage = t[10],
            this.criDmg = t[11],
            this.cri = t[12],
            this.buff = t[13],
            this.level = t[14],
            this.upLevel = t[15],
            this.upgradeCostItem = t[16],
            this.upgradeCostCount = t[17],
            this.profMax = t[18],
            this.atkType = t[19],
            this.skillNameRes = t[20],
            this.skillShake = t[21],
            this.plantUp = t[22],
            this.bulletCount = t[23],
            this.sound = t[24],
            this.attackTimes = t[25],
            this.idType = t[26],
            this.desc2_l = t[27],
            this.targetShipType = t[28]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(SkilldataItem, "SkilldataItem");
var SkilldataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new SkilldataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(SkilldataParser, "SkilldataParser");
var SpybasedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.freeCount = t[2],
            this.cd = t[3],
            this.itemId = t[4],
            this.credit = t[5],
            this.itemId2 = t[6],
            this.spyLv = t[7],
            this.icon = t[8],
            this.color = t[9],
            this.itemIcon = t[10],
            this.desc = t[11]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(SpybasedataItem, "SpybasedataItem");
var SpybasedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new SpybasedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(SpybasedataParser, "SpybasedataParser");
var StagedataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.reqStage = t[2],
            this.type = t[3],
            this.costOil = t[4],
            this.dayAtkCount = t[5],
            this.exp = t[6],
            this.gold = t[7],
            this.mainItem = t[8],
            this.showItem1 = t[9],
            this.showItem2 = t[10],
            this.secondRndId = t[11],
            this.resetCount = t[12],
            this.resetCost = t[13],
            this.icon = t[14],
            this.desc_l = t[15],
            this.pos1 = t[16],
            this.pos2 = t[17],
            this.pos3 = t[18],
            this.pos4 = t[19],
            this.pos5 = t[20],
            this.pos6 = t[21],
            this.pos7 = t[22],
            this.pos8 = t[23],
            this.unlockpicture = t[24],
            this.unlocktalk_l = t[25],
            this.weather = t[26],
            this.background = t[27]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(StagedataItem, "StagedataItem");
var StagedataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new StagedataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(StagedataParser, "StagedataParser");
var StagespecialdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.reqStage = t[1],
            this.costOil = t[2],
            this.pos1 = t[3],
            this.pos2 = t[4],
            this.pos3 = t[5],
            this.pos4 = t[6],
            this.pos5 = t[7],
            this.pos6 = t[8],
            this.pos7 = t[9],
            this.pos8 = t[10],
            this.exp = t[11],
            this.gold = t[12],
            this.dropItem = t[13],
            this.itemType = t[14],
            this.itemId = t[15],
            this.name_l = t[16],
            this.modelId = t[17],
            this.quality = t[18],
            this.desc_l = t[19],
            this.dayAtkCount = t[20],
            this.weather = t[21],
            this.background = t[22]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(StagespecialdataItem, "StagespecialdataItem");
var StagespecialdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new StagespecialdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(StagespecialdataParser, "StagespecialdataParser");
var TalentItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.levelLimit = t[2],
            this.preTalent = t[3],
            this.activateType = t[4],
            this.activateLevel = t[5],
            this.levelUpType = t[6],
            this.levelUpLimit = t[7],
            this.needTalentPoint = t[8],
            this.needgold = t[9],
            this.addBuff1 = t[10],
            this.addValues1 = t[11],
            this.addBuff2 = t[12],
            this.addValues2 = t[13],
            this.getType = t[14],
            this.getValue = t[15],
            this.remarks = t[16]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(TalentItem, "TalentItem");
var TalentParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new TalentItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(TalentParser, "TalentParser");
var TraindataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.costItem = t[2],
            this.costItemCount = t[3],
            this.costType = t[4],
            this.costCredit = t[5],
            this.hpLmt = t[6],
            this.atkLmt = t[7],
            this.fireDefLmt = t[8],
            this.explosionDefLmt = t[9],
            this.hpMin = t[10],
            this.atkMin = t[11],
            this.fireDefMin = t[12],
            this.explosionDefMin = t[13],
            this.hpRange = t[14],
            this.hpRandom = t[15],
            this.atkRange = t[16],
            this.atkRandom = t[17],
            this.fireDefRange = t[18],
            this.fireDefRandom = t[19],
            this.explosionDefRange = t[20],
            this.explosionDefRandom = t[21]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(TraindataItem, "TraindataItem");
var TraindataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new TraindataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(TraindataParser, "TraindataParser");
var VipItem = function() {
    function t(t) {
        this.level = t[0],
            this.costCash = t[1],
            this.dayBuyOilCnt = t[2],
            this.dayCenterAddCnt = t[3],
            this.dayCenterAddPer = t[4],
            this.daySpecialCnt = t[5],
            this.jjcgoumaicishu = t[6],
            this.autoShipUp = t[7],
            this.autoPartUp = t[8],
            this.autoChestOpen = t[9],
            this.desc_l = t[10],
            this.saodangcishu = t[11],
            this.autoTrainTen = t[12],
            this.autoFiftyOpen = t[13],
            this.buyRefresh = t[14],
            this.buyChance = t[15],
            this.autoExplore = t[16],
            this.itemUseTen = t[17],
            this.freeRefresh = t[18],
            this.militaryHonourAdd = t[19],
            this.freeChatTimes = t[20],
            this.fiftyExplore = t[21],
            this.fiftySeniorExplore = t[22],
            this.lostMorale = t[23],
            this.robTen = t[24],
            this.spyFirstDiscount = t[25],
            this.lostMoralless = t[26],
            this.addMoralLimit = t[27],
            this.addArenaTimes = t[28],
            this.recruitFirstDiscount = t[29],
            this.addOilLimit = t[30],
            this.eliteRaids = t[31],
            this.seikoFreeRefresh = t[32],
            this.oilguardskip = t[33]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(VipItem, "VipItem");
var VipParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new VipItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(VipParser, "VipParser");
var VirtualbattlerounddataItem = function() {
    function t(t) {
        this.id = t[0],
            this.round = t[1],
            this.anction = t[2],
            this.actionId = t[3],
            this.skill = t[4],
            this.target = t[5],
            this.status = t[6],
            this.damage = t[7],
            this.hp = t[8]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(VirtualbattlerounddataItem, "VirtualbattlerounddataItem");
var VirtualbattlerounddataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new VirtualbattlerounddataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(VirtualbattlerounddataParser, "VirtualbattlerounddataParser");
var VirtualdataItem = function() {
    function t(t) {
        this.id = t[0],
            this.name_l = t[1],
            this.quality = t[2],
            this.type = t[3],
            this.value = t[4],
            this.icon = t[5],
            this.desc_l = t[6]
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(VirtualdataItem, "VirtualdataItem");
var VirtualdataParser = function() {
    function t() {
        this._length = 0
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        e(i, "length",
            function() {
                return this._length
            }),
        i.ProcessData = function(t) {
            if (void 0 == this.datas) {
                this.datas = new Object,
                    this.dataArr = [],
                    this._length = 0;
                for (var e in t)
                    if ("length" != e) {
                        var a = t[e],
                            i = new VirtualdataItem(a);
                        this.datas[e] = i,
                            this.dataArr.push(i),
                            this._length++
                    }
            }
        },
        i.getItemByField = function(t, e) {
            if (void 0 != this.datas)
                for (var a in this.datas)
                    if (this.datas[a][t] == e) return this.datas[a]
        },
        i.getItemById = function(t) {
            return t = t.toString(),
                void 0 != this.datas ? this.datas[t] : void 0
        },
        i.getDatas = function() {
            return this.datas
        },
        i.getDataArr = function() {
            return this.dataArr
        },
        t.instance = new t,
        t
}();
egret.registerClass(VirtualdataParser, "VirtualdataParser");
var Const = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.FRAME_RATE = 30,
        t.FRAME_INTERVAL = 1e3 / t.FRAME_RATE,
        t.FRAME_24 = .4,
        t.FRAME_30 = .5,
        t.FRAME_NUM_24 = 24,
        t.FRAME_NUM_30 = 30,
        t.FRAME_MAX = 50,
        t.FRAME_MAX1 = 80,
        t.DEFAULT_FONT = "黑体",
        t
}();
egret.registerClass(Const, "Const");
var GameEvent = function(t) {
    function e(e, a) {
        t.call(this, e),
            this.parames = a
    }
    __extends(e, t);
    var a = (__define, e);
    a.prototype;
    return e.CONFIG_PROGRESS = "config_progress",
        e.CONFIG_COMPLETE = "config_complete",
        e.UserData_Update = "UserData_Update",
        e.SHIP_CHANGE_NAME = "ship_change_name",
        e.WindowShipManager_ClickShowOperate = "windowShipManager_ClickShowOperate",
        e.ShipDataUpdate = "shipDataUpdate",
        e.PaperDataUpdate = "paperDataUpdate",
        e.WindowPartsManager_ClickShowOperate = "windowPartsManager_ClickShowOperate",
        e.WindowSoulsManager_ClickShowOperate = "windowSoulsManager_ClickShowOperate",
        e.WindowCaptainsManager_ClickShowOperate = "windowCaptainsManager_ClickShowOperate",
        e.ArrangeWindow_shipSelected = "ArrangeWindow_shipSelected",
        e.SoldierList_update = "SoldierList_update",
        e.WindowChooseItem_chooseNewShip = "WindowChooseItem_chooseNewShip",
        e.WindowChooseItem_chooseNewPart = "WindowChooseItem_chooseNewPart",
        e.WindowChooseItem_chooseNewCaptain = "WindowChooseItem_chooseNewCaptain",
        e.WindowChooseItem_chooseNewMedal = "WindowChooseItem_chooseNewMedal",
        e.SHIP_UPDATE = "ship_update",
        e.CAPTAIN_UPDATE = "captain_update",
        e.PARTS_UPDATE = "parts_update",
        e.SOULS_UPDATE = "souls_update",
        e.SOULS_REMOUDLE = "souls_remodule",
        e.Parts_List_Refresh = "Parts_List_Refresh",
        e.Souls_List_Refresh = "Souls_List_Refresh",
        e.FORMATION_UPDATE = "formation_update",
        e.FORMATION_CHANGE = "formation_change",
        e.SCIENCE_UPDATE = "SCIENCE_UPDATE",
        e.SCIENCE_ITEM_COUNT_UPDATE = "SCIENCE_ITEM_COUNT_UPDATE",
        e.HEGEMONY_NET = "hegemony_net",
        e.CAMP_INIT_COMPLETE = "CAMP_INIT_COMPLETE",
        e.SIDE_ITEM_INIT_COMPLETE = "SIDE_ITEM_INIT_COMPLETE",
        e.ROLE_ITEM_INIT_COMPLETE = "ROLE_ITEM_INIT_COMPLETE",
        e.MEDAL_PIECES = "medal_pieces",
        e.PART_PIECES = "part_pieces",
        e.TASK_UPDATE = "task_update",
        e.ROBBERYLIST_UPDATE = "robberylist_updata",
        e.SELECT_GUILD_BADGE_COMPLETE = "SELECT_GUILD_BADGE_COMPLETE",
        e.CHANGE_GUILD_BADGE_COMPLETE = "CHANGE_GUILD_BADGE_COMPLETE",
        e.REFRESH_MAKE_SHIP_ALERT_COUNT = "REFRESH_MAKE_SHIP_ALERT_COUNT",
        e.REFRESH_PARTS_DATA = "REFRESH_PARTS_DATA",
        e.ACTIVETIPS = "activetips",
        e.REFRESH_SPY_ALERT_COUNT = "REFRESH_SPY_ALERT_COUNT",
        e.GOBACK_SERVER_PAGE = "GOBACK_SERVER_PAGE",
        e.MERGE_COMPLETE = "merge_complete",
        e
}(egret.Event);
egret.registerClass(GameEvent, "GameEvent");
var GameEventDispatcher = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e);
    a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        e
}(egret.EventDispatcher);
egret.registerClass(GameEventDispatcher, "GameEventDispatcher");
var GameTick = function(t) {
    function e() {
        t.apply(this, arguments)
    }
    __extends(e, t);
    var a = (__define, e);
    a.prototype;
    return e.tick = function(t) {
            if (Transport.instance && 1 == Transport.instance.state) {
                var a = egret.getTimer();
                if (a - e.heartBeatDeltaTime > e.heartDeltaTime) {
                    e.heartBeatDeltaTime = a;
                    var i = Transport.getPkg(ProtocolMgr.ID_DceHeartbeat);
                    Transport.instance.send(i)
                }
                a - e.secondTime > 1e3 && (e.secondTime = a, UserData.getInstance().addServerTime(), UserData.getInstance().autosupply());
                for (var n in e.tickFunList) {
                    var s = e.tickFunList[n];
                    void 0 != s.fun && a - s.detal > s.delay && (s.fun(), s.detal = a)
                }
            }
        },
        e.registerHandler = function(t, a) {
            return void 0 === a && (a = e.heartDeltaTime),
                e.tickIndex++,
                e.tickFunList[e.tickIndex] = {
                    fun: t,
                    delay: a,
                    detal: 0
                },
                e.tickIndex
        },
        e.removeHandler = function(t) {
            delete e.tickFunList[t]
        },
        e.clear = function() {
            e.tickFunList = {},
                e.tickIndex = 0
        },
        e.heartBeatDeltaTime = 0,
        e.heartDeltaTime = 12e3,
        e.secondTime = 0,
        e.tickFunList = {},
        e.tickIndex = 0,
        e
}(egret.EventDispatcher);
egret.registerClass(GameTick, "GameTick");
var ParticleType;
!
function(t) {
    t[t.Recharge = 0] = "Recharge",
        t[t.TrailingStar = 1] = "TrailingStar",
        t[t.TrailingLight = 2] = "TrailingLight",
        t[t.LightSpot = 3] = "LightSpot",
        t[t.EquipLvUp = 4] = "EquipLvUp"
}(ParticleType || (ParticleType = {}));
var ShapeType;
!
function(t) {
    t[t.None = 0] = "None",
        t[t.Rectangle = 1] = "Rectangle",
        t[t.Circle = 2] = "Circle"
}(ShapeType || (ShapeType = {}));
var ParticleDisplayObj = function() {
    function t(t, e, a) {
        void 0 === e && (e = ParticleType.Recharge),
            void 0 === a && (a = ShapeType.Rectangle),
            this.speed = 5,
            this.index = 0,
            this.angleNum = 0,
            this.myTarget = t,
            this.sType = a,
            this.pType = e,
            this.init()
    }
    var e = (__define, t),
        a = e.prototype;
    return a.init = function() {
            var t, e, a = this;
            if (this.pType == ParticleType.Recharge ? (t = RES.getRes("star_png"), e = RES.getRes("RechargeButtonEffect_json")) : this.pType == ParticleType.TrailingStar ? (t = RES.getRes("star_png"), e = RES.getRes("TrailingEffect1_json")) : this.pType == ParticleType.TrailingLight ? (t = RES.getRes("light_png"), e = RES.getRes("TrailingEffect2_json")) : this.pType == ParticleType.LightSpot ? (t = RES.getRes("star2_png"), e = RES.getRes("LightSpotEffect_json")) : this.pType == ParticleType.EquipLvUp && (t = RES.getRes("star2_png"), e = RES.getRes("EquipLvUp_json")), this.pasys = new particle.GravityParticleSystem(t, e), this.myTarget.addChild(this.pasys), this.pasys.start(), this.pasys.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clearHandler, this), this.sType == ShapeType.Rectangle) this.recPointList = [new egret.Point(0, 0), new egret.Point(this.myTarget.width, 0), new egret.Point(this.myTarget.width, this.myTarget.height), new egret.Point(0, this.myTarget.height), new egret.Point(0, 0)],
                this.tickId = GameTick.registerHandler(function() {
                        a.tickRect()
                    },
                    10);
            else if (this.sType == ShapeType.Circle) this.tickId = GameTick.registerHandler(function() {
                    a.tickCircle()
                },
                10);
            else if (this.sType == ShapeType.None) {
                var i = this.myTarget.height / 2,
                    n = this.myTarget.width / 2;
                this.pasys.emitterX = n,
                    this.pasys.emitterY = i
            }
        },
        a.destroy = function() {
            this.myTarget.contains(this.pasys) && this.myTarget.removeChild(this.pasys)
        },
        a.tickCircle = function() {
            this.angleNum += 10,
                this.angleNum > 360 && (this.angleNum = 0);
            var t = this.myTarget.width / 2 * Math.sin(this.angleNum) + this.myTarget.height / 2,
                e = this.myTarget.width / 2 * Math.cos(this.angleNum) + this.myTarget.width / 2;
            this.pasys.emitterX = e,
                this.pasys.emitterY = t
        },
        a.clearHandler = function(t) {
            GameTick.removeHandler(this.tickId)
        },
        a.tickRect = function() {
            var t = this.recPointList[this.index],
                e = t.x - this.pasys.emitterX,
                a = t.y - this.pasys.emitterY,
                i = 5,
                n = !1,
                s = !1;
            Math.abs(e) > i ? this.pasys.emitterX += e / Math.abs(e) * this.speed : n = !0,
                Math.abs(a) > i ? this.pasys.emitterY += a / Math.abs(a) * this.speed : s = !0,
                n && s && (this.index += 1, this.index >= this.recPointList.length && (this.index = 0))
        },
        t
}();
egret.registerClass(ParticleDisplayObj, "ParticleDisplayObj");
var Plantform = function() {
    function t() {
        this.jiluBool = !0,
            this.appId = "8e19de856ec46bd643b28d597c202d49",
            this.deviceId = "IMEI",
            this.init()
    }
    var e = (__define, t),
        a = e.prototype;
    return a.init = function() {},
        t.getInstanceOf = function() {
            return t.instance || (t.instance = new t),
                t.instance
        },
        a.openFirst = function() {
            if (this.jiluBool) {
                var t = egret.localStorage.getItem("checkFirst");
                if (t && "checkFirst" == t);
                else {
                    var e = {
                            appid: this.appId,
                            who: PlatformManager.instance.myself.openid,
                            context: {
                                deviceid: this.deviceId,
                                channelid: GetPlatType(),
                                serverid: PlatformManager.instance.myself.serverId || 0
                            }
                        },
                        a = JSON.stringify(e),
                        i = new egret.HttpRequest;
                    i.responseType = egret.HttpResponseType.TEXT,
                        i.open("http://receive.sincetimes.com/receive/rest/install", egret.HttpMethod.POST),
                        i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                        i.send(a),
                        egret.localStorage.setItem("checkFirst", "checkFirst")
                }
            }
        },
        a.openGame = function() {
            if (this.jiluBool) {
                var t = {
                        appid: this.appId,
                        who: PlatformManager.instance.myself.openid,
                        context: {
                            deviceid: this.deviceId,
                            channelid: GetPlatType(),
                            serverid: PlatformManager.instance.myself.serverId || 0
                        }
                    },
                    e = JSON.stringify(t),
                    a = new egret.HttpRequest;
                a.responseType = egret.HttpResponseType.TEXT,
                    a.open("http://receive.sincetimes.com/receive/rest/startup", egret.HttpMethod.POST),
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    a.send(e),
                    a.addEventListener(egret.Event.COMPLETE,
                        function(t) {
                            t.currentTarget
                        },
                        void 0),
                    a.addEventListener(egret.IOErrorEvent.IO_ERROR,
                        function(t) {
                            Log.logError("IOError", Log.objectToString(e))
                        },
                        void 0)
            }
        },
        a.register = function(t) {
            if (this.jiluBool) {
                var e = {
                        appid: this.appId,
                        who: PlatformManager.instance.myself.openid,
                        context: {
                            deviceid: this.deviceId,
                            serverid: PlatformManager.instance.myself.serverId || 0,
                            channelid: GetPlatType()
                        }
                    },
                    a = JSON.stringify(e),
                    i = new egret.HttpRequest;
                i.responseType = egret.HttpResponseType.TEXT,
                    i.addEventListener(egret.Event.COMPLETE,
                        function(t) {
                            t.currentTarget
                        },
                        void 0),
                    i.addEventListener(egret.IOErrorEvent.IO_ERROR,
                        function(t) {
                            Log.logError("IOError", Log.objectToString(a))
                        },
                        void 0),
                    i.open("http://receive.sincetimes.com/receive/rest/register", egret.HttpMethod.POST),
                    i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    i.send(a)
            }
        },
        a.login = function() {
            if (this.jiluBool) {
                var t = {
                        appid: this.appId,
                        who: PlatformManager.instance.myself.openid,
                        context: {
                            deviceid: this.deviceId,
                            serverid: PlatformManager.instance.myself.serverId || 0,
                            channelid: GetPlatType()
                        }
                    },
                    e = JSON.stringify(t),
                    a = new egret.HttpRequest;
                a.responseType = egret.HttpResponseType.TEXT,
                    a.addEventListener(egret.Event.COMPLETE,
                        function(t) {
                            t.currentTarget
                        },
                        void 0),
                    a.addEventListener(egret.IOErrorEvent.IO_ERROR,
                        function(t) {
                            Log.logError("IOError", Log.objectToString(e))
                        },
                        void 0),
                    a.open("http://receive.sincetimes.com/receive/rest/loggedin", egret.HttpMethod.POST),
                    a.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    a.send(e)
            }
        },
        a.pay = function(t, e, a, i) {
            if (GetPlatType() == PlatformType.PF_QQ && (t /= 10), this.jiluBool) {
                var n = {
                        appid: this.appId,
                        who: PlatformManager.instance.myself.openid,
                        context: {
                            currencyAmount: t,
                            currencytype: "CNY",
                            deviceid: this.deviceId,
                            iapamount: e,
                            iapname: a,
                            paymenttype: "rmb",
                            transactionid: Math.floor(1e7 * Math.random()),
                            virtualcoinamount: i,
                            serverid: PlatformManager.instance.myself.serverId,
                            channelid: GetPlatType(),
                            level: UserData.getInstance()._level
                        }
                    },
                    s = JSON.stringify(n),
                    r = new egret.HttpRequest;
                r.responseType = egret.HttpResponseType.TEXT,
                    r.addEventListener(egret.Event.COMPLETE,
                        function(t) {
                            t.currentTarget
                        },
                        void 0),
                    r.addEventListener(egret.IOErrorEvent.IO_ERROR,
                        function(t) {
                            Log.logError("IOError", Log.objectToString(s))
                        },
                        void 0),
                    r.open("http://receive.sincetimes.com/receive/rest/payment", egret.HttpMethod.POST),
                    r.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    r.send(s)
            }
        },
        a.buy = function(t, e, a) {
            if (this.jiluBool) {
                var i = {
                        appid: this.appId,
                        who: PlatformManager.instance.myself.openid,
                        context: {
                            itemtotalprice: t,
                            deviceid: this.deviceId,
                            itemamount: e,
                            itemname: a,
                            serverid: PlatformManager.instance.myself.serverId,
                            channelid: GetPlatType(),
                            level: UserData.getInstance()._level
                        }
                    },
                    n = JSON.stringify(i),
                    s = new egret.HttpRequest;
                s.responseType = egret.HttpResponseType.TEXT,
                    s.addEventListener(egret.Event.COMPLETE,
                        function(t) {
                            t.currentTarget
                        },
                        void 0),
                    s.addEventListener(egret.IOErrorEvent.IO_ERROR,
                        function(t) {
                            Log.logError("IOError", Log.objectToString(n))
                        },
                        void 0),
                    s.open("http://receive.sincetimes.com/receive/rest/economy", egret.HttpMethod.POST),
                    s.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    s.send(n)
            }
        },
        a.mission = function(t) {
            if (this.jiluBool) {
                var e = {
                        appid: this.appId,
                        context: {
                            deviceid: this.deviceId,
                            questid: t,
                            queststatus: "a",
                            questtype: "main",
                            serverid: PlatformManager.instance.myself.serverId,
                            channelid: GetPlatType(),
                            level: UserData.getInstance()._level
                        },
                        who: PlatformManager.instance.myself.openid
                    },
                    a = JSON.stringify(e),
                    i = new egret.HttpRequest;
                i.responseType = egret.HttpResponseType.TEXT,
                    i.addEventListener(egret.Event.COMPLETE,
                        function(t) {
                            t.currentTarget
                        },
                        void 0),
                    i.addEventListener(egret.IOErrorEvent.IO_ERROR,
                        function(t) {
                            Log.logError("IOError", Log.objectToString(a))
                        },
                        void 0),
                    i.open("http://receive.sincetimes.com/receive/rest/quest", egret.HttpMethod.POST),
                    i.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                    i.send(a)
            }
        },
        t
}();
egret.registerClass(Plantform, "Plantform");
var BattleScene = function() {
    function t() {
        this.moveVsToTopNeedTime = .5,
            this.showQijianEffTime = .25,
            this.mineQijianEffNode = null,
            this.enemyQijianEffNode = null,
            this.mineQijianMoveByX = 0,
            this.enemyQijianMoveByX = 0,
            this.mineQijianAnim = null,
            this.enemyQijianAnim = null,
            this.mineQijianAnimSprite = null,
            this.enemyQijianAnimSprite = null,
            this.actionEndId = null,
            this.currentSelectShip = null,
            this.SwallowTouch = null,
            this.benchShadowMine1 = null,
            this.benchShadowMine2 = null,
            this.benchShadowNemy1 = null,
            this.benchShadowNemy2 = null,
            this.benchWordMine1 = null,
            this.benchWordMine2 = null,
            this.benchWordNemy1 = null,
            this.benchWordNemy2 = null,
            this.benchWordSprite = null,
            this._isConsecutiveSkill = !1,
            this._playCount = 0,
            this._units = {},
            this._mineShips = [],
            this._enemyShips = [],
            this._mineList = [],
            this._enemyList = [],
            this._titlePool = {},
            this._bulletPool = {},
            this._startAtk = !1
    }
    var e = (__define, t),
        a = e.prototype;
    return a.toScreen = function(t) {
            return {
                x: t.x + .5 * GameData.designWidth,
                y: .5 * GameData.designHeight - t.y
            }
        },
        a.init = function() {
            this.initLayers(),
                EffectManager.instance.initBattleEff(),
                BattleMapSystem.instance.initBattleMap(this._bgLayer);
            var t = this.initBattle(BattleManager.instance.mine, BattleManager.instance.enemy);
            this._curUI = new BattleUI(t),
                GameLayer.getInstance().uiLayer.addChild(this._curUI),
                WeatherManager.instance.randomWeatherByList(this._descLayer),
                this.initEvents(),
                AudioManager.instance.playMusic(AudioManager.MUSIC_CAMPBATTLE),
                (13 == GuideManager.step || 29 == GuideManager.step) && GuideManager.nextStep()
        },
        a.initLayers = function() {
            this._bgLayer = new egret.DisplayObjectContainer,
                GameLayer.getInstance().bgLayer.addChild(this._bgLayer),
                this._baseEffBottomLayer = new egret.DisplayObjectContainer,
                GameLayer.getInstance().bgLayer.addChild(this._baseEffBottomLayer),
                this._battleEffBottomLayer = new egret.DisplayObjectContainer,
                GameLayer.getInstance().bgLayer.addChild(this._battleEffBottomLayer),
                this._shipLayer = new egret.DisplayObjectContainer,
                GameLayer.getInstance().bgLayer.addChild(this._shipLayer),
                this._descLayer = new egret.DisplayObjectContainer,
                GameLayer.getInstance().bgLayer.addChild(this._descLayer),
                this._battleEffTopLayer = new egret.DisplayObjectContainer,
                GameLayer.getInstance().bgLayer.addChild(this._battleEffTopLayer),
                this._baseEffTopLayer = new egret.DisplayObjectContainer,
                GameLayer.getInstance().bgLayer.addChild(this._baseEffTopLayer)
        },
        a.update = function() {
            for (var t in this._units) this._units[t].update();
            var e = 0;
            for (var t in this._bulletPool) {
                var a = this._bulletPool[t];
                null != a && (a.update(), e += 1)
            }
            1 == this._startAtk && 0 == e && (this._startAtk = !1, this._actionTimer && (Utils.cancalDelayCall(this._actionTimer), this._actionTimer = void 0), this._actionTimer = Utils.delayCall(1 * BattleManager.PLAYFRAMES * 1e3, this.nextAction, this))
        },
        a.destroy = function() {
            GameLayer.getInstance().bgLayer.removeChildren(),
                this._curUI && (GameLayer.getInstance().uiLayer.removeChild(this._curUI), this._curUI = void 0),
                this._actionTimer && (Utils.cancalDelayCall(this._actionTimer), this._actionTimer = void 0),
                EventManager.instance.removeEventListenerByBindObject(this)
        },
        a.addEffToScene = function(e, a) {
            a == t.LAYER_TYPE_BASEEFFBOTTOM ? this._baseEffBottomLayer.addChild(e) : a == t.LAYER_TYPE_BATTLEEFFBOTTOM ? this._battleEffBottomLayer.addChild(e) : a == t.LAYER_TYPE_SHIP ? this._shipLayer.addChild(e) : a == t.LAYER_TYPE_BATTLEEFFTOP ? this._battleEffTopLayer.addChild(e) : a == t.LAYER_TYPE_BASEEFFTOP ? this._baseEffTopLayer.addChild(e) : a == t.LAYER_TYPE_DESC && this._descLayer.addChild(e)
        },
        a.getUnit = function(t) {
            return this._units[t]
        },
        a.initBattle = function(e, a) {
            var i = null,
                n = null;
            this._mineList = e.list,
                this._enemyList = a.list;
            for (var s = null,
                    r = null,
                    o = 0,
                    l = this._mineList.length; l > o; ++o) {
                var h = this._mineList[o];
                if (h.serverData.hp > 0 && 0 == h.isBench) {
                    var c = t.minePos[h.pos];
                    if (c = this.toScreen(c), i = new Ship(h, c, o), this._mineShips.push(i), this._units[i.optData.serverData.id] = i, this.addEffToScene(i, t.LAYER_TYPE_SHIP), n = new ShipTitleItem(i.optData), n.x = i.point.x - 87, n.y = i.point.y - 69, this._titlePool[i.optData.serverData.id] = n, this.addEffToScene(n, t.LAYER_TYPE_DESC), null == s) {
                        var d = h;
                        1 == d.isCaptain && (s = d.serverData.circleskillid)
                    }
                }
            }
            for (var o = 0,
                    l = this._enemyList.length; l > o; ++o) {
                var g = this._enemyList[o];
                if (g.serverData.hp > 0 && 0 == g.isBench) {
                    var c = t.enemyPos[g.pos];
                    if (c = this.toScreen(c), i = new Ship(g, c, o), this._enemyShips.push(i), this._units[i.optData.serverData.id] = i, this.addEffToScene(i, t.LAYER_TYPE_SHIP), n = new ShipTitleItem(i.optData), n.x = i.point.x - 87, n.y = i.point.y - 69, this._titlePool[i.optData.serverData.id] = n, this.addEffToScene(n, t.LAYER_TYPE_DESC), null == r) {
                        var d = g;
                        1 == d.isCaptain && (r = d.serverData.circleskillid)
                    }
                }
            }
            return [s, r]
        },
        a.actionAttack = function(e, a, i) {
            if (e.targetlist.length <= 0) return void Log.logError("##########Error.BattleTarget is null !!!!!");
            a.atkType == t.ATK_TYPE_FIRE && i.moveBack();
            for (var n = 0,
                    s = e.targetlist.length; s > n; ++n) {
                var r = n + 1;
                if (null != this._units[e.targetlist[n].id]) {
                    var o = this._titlePool[e.targetlist[n].id];
                    o.setNameVisible(!0);
                    var l = new BattleUnitActionOptData(i, e.actionshipdata, a, this._units[e.targetlist[n].id], e.targetlist[n]),
                        h = 0;
                    if (a.atkType == t.ATK_TYPE_FIRE) h = BattleManager.PLAYFRAMES * (.1 * (r - 1)) * 1e3;
                    else if (a.atkType == t.ATK_TYPE_EXPL) {
                        var c = r;
                        r - 4 > 0 && (c -= 4),
                            h = BattleManager.PLAYFRAMES * (.3 + .1 * (c - 1)) * 1e3
                    } else a.atkType == t.ATK_TYPE_TORP && (h = BattleManager.PLAYFRAMES * (.1 * (r - 1)) * 1e3);
                    Utils.delayCall(h, this.addBullet, this, [l, a.atkType, a.bulletCount, a])
                } else Log.logError("##########Error.BattleTargetId is not Found, id." + e.targetlist[n].id)
            }
        },
        a.addBullet = function(e, a, i, n) {
            var s = this;
            Log.logZDY("addBullet", a, i);
            var r = e.targetBattleUnit.damage;
            0 == i && (i = 1);
            var o = r;
            a == t.ATK_TYPE_FIRE ? AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_NORMAL_HUOPAO) : a == t.ATK_TYPE_EXPL ? AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_FJQF) : a == t.ATK_TYPE_TORP && AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_NORMAL_YULEI);
            for (var l = 0; i > l; ++l) {
                var h = l + 1,
                    c = 10,
                    d = 10;
                1 == e.actionViewUnit.optData.isMine ? (c = 15, d = 10) : (c = -10, d = -10);
                var g = 0,
                    u = 0,
                    p = 1,
                    m = 1;
                0 == e.targetBattleUnit.hit ? (p = Utils.randInt(0, 100), p > 50 ? (p = 1, m = -1) : (p = -1, m = 1), g = Utils.randInt(40, 50) * p, u = Utils.randInt(20, 30) * m) : (a == t.ATK_TYPE_FIRE && (g = 40), g = Utils.randInt(-g, g), u = Utils.randInt(-u, u));
                var _ = Utils.ccp(e.actionViewUnit.x + Utils.randInt(-5, 5) + c, e.actionViewUnit.y + Utils.randInt(-5, 5) + d),
                    v = Utils.ccp(e.targetViewUnit.x + g, e.targetViewUnit.y + u),
                    f = .05;
                a == t.ATK_TYPE_FIRE || (a == t.ATK_TYPE_EXPL ? f = .2 : a == t.ATK_TYPE_TORP),
                    Utils.delayCall((h - 1) * f * 1e3,
                        function(i, r, l) {
                            var h = null;
                            1 == i && 1 == e.targetBattleUnit.hit && (l = Utils.ccp(e.targetViewUnit.point.x, e.targetViewUnit.point.y)),
                                a == t.ATK_TYPE_FIRE ? (h = new SkillBulletFire(e, r, l, o, i), null != h && (s._bulletPool[e.targetBattleUnit.id + i] = h, s.addEffToScene(h, t.LAYER_TYPE_BATTLEEFFTOP)), s.createShipFire(e, r.x, r.y)) : a == t.ATK_TYPE_EXPL ? (r = Utils.ccp(e.actionViewUnit.x, e.actionViewUnit.y), h = new SkillBulletExplosion(e, r, l, o, i, 1 == n.plantUp), null != h && (s._bulletPool[e.targetBattleUnit.id + i] = h, s.addEffToScene(h, t.LAYER_TYPE_BATTLEEFFTOP))) : a == t.ATK_TYPE_TORP && (h = new SkillBulletTorpedo(e, r, l, o, i), null != h && (s._bulletPool[e.targetBattleUnit.id + i] = h, s.addEffToScene(h, t.LAYER_TYPE_BATTLEEFFBOTTOM))),
                                s._startAtk = !0
                        },
                        this, [h, _, v])
            }
        },
        a.createShipFire = function(t, e, a) {
            var i = Utils.ccp(e, a),
                n = 1 != t.actionViewUnit.optData.isMine,
                s = t.actionViewUnit.optData.isMine ? 0 : -30;
            EffectManager.instance.getShipFireEff(this._battleEffTopLayer, i, n, s)
        },
        a.deleteBullet = function(t) {
            this._bulletPool[t] = null
        },
        a.createSkillNameAction = function(e, a, i) {
            AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_WENZI);
            var n = new eui.Label(e);
            n.size = 24,
                n.textAlign = egret.HorizontalAlign.CENTER,
                n.textColor = 16776960,
                n.verticalAlign = egret.VerticalAlign.MIDDLE,
                n.x = a,
                n.y = i,
                n.bold = !0,
                n.strokeColor = 0,
                n.stroke = 2,
                this.addEffToScene(n, t.LAYER_TYPE_BATTLEEFFTOP);
            var s = egret.Tween.get(n);
            s.to({
                    y: i - 10
                },
                500 * BattleManager.PLAYFRAMES).call(function() {
                Utils.removeNode(n)
            })
        },
        a.getSkillNameSprite = function(t) {
            for (var e = new eui.Group,
                    a = 126,
                    i = 0; i < t.length; ++i) {
                var n = new eui.Image;
                e.addChild(n),
                    SUI.setTextureAsync(n, Path.skillNameIconUrl + t[i] + ".png"),
                    n.x = -t.length * a / 2 + a / 2 + i * a
            }
            return e
        },
        a.OnBattleActionStart = function(e) {
            var a = this;
            if (Log.logZDY("//////////actionShipId." + e.actionshipid + "////////////-"), Log.logZDY("//////////actionSkillId." + e.skillid + "////////////"), BattleManager.isStop) return void Log.logZDY("==//BattleisStop//==");
            if (BattleManager.isDelay) return void Utils.delayCall(2500,
                function() {
                    BattleManager.isDelay = !1,
                        EventManager.instance.dispatchEvent(EventTypes.BATTLE_ACTION_START, e)
                });
            for (var i = 0,
                    n = this._titlePool; i < n.length; i++) {
                var s = n[i];
                s.setNameVisible(!1)
            }
            for (var r = 0,
                    o = this._units; r < o.length; r++) {
                var s = o[r];
                s.showSelect(!1)
            }
            var l = SkilldataParser.GetInstance().getItemById(e.skillid);
            if (null != l) {
                var h = this.getUnit(e.actionshipid),
                    c = this._titlePool[e.actionshipid];
                c.setNameVisible(!0),
                    this.createShipSelect(h.optData.isMine, h.x, h.y),
                    Utils.delayCall(0,
                        function() {
                            var i = !0;
                            if (l.attackTimes > 1 && !a._isConsecutiveSkill && (a._isConsecutiveSkill = !0), a._playCount > 0 && (i = !1), null != l.action && "" != l.action && i)
                                if (h.optData.baseData.quality < QualitySystem.QUALITY_B) {
                                    var n = l.name_l;
                                    a.createSkillNameAction(n, h.point.x, h.point.y),
                                        a.actionAttack(e, l, h)
                                } else {
                                    a.SwallowTouch = new egret.Shape,
                                        a.SwallowTouch.width = GameData.designWidth,
                                        a.SwallowTouch.height = GameData.designHeight,
                                        a.SwallowTouch.touchEnabled = !0,
                                        a.addEffToScene(a.SwallowTouch, t.LAYER_TYPE_BASEEFFTOP);
                                    var s = a.getSkillNameSprite(l.skillNameRes),
                                        r = null;
                                    h.optData.isMine ? (r = {
                                            x: GameData.designWidth - 320,
                                            y: GameData.designHeight - 200
                                        },
                                        s.x = 640, s.y = r.y) : (r = {
                                            x: 200,
                                            y: 100
                                        },
                                        s.x = 0, s.y = r.y);
                                    var o = egret.Tween.get(s);
                                    o.to({
                                                x: r.x,
                                                y: r.y,
                                                alpha: 1
                                            },
                                            200).wait(500).to({
                                                alpha: 0
                                            },
                                            500),
                                        a.addEffToScene(s, t.LAYER_TYPE_BASEEFFTOP),
                                        AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_WENZI);
                                    var c = l.skillShake;
                                    if (c && c.length > 0)
                                        for (var d = 0,
                                                g = c.length; g > d; ++d) {
                                            var u = d;
                                            Utils.delayCall(BattleManager.PLAYFRAMES * c[u] * 10,
                                                function() {
                                                    SceneManager.instance.sceneShake(SceneManager.SHAKE_NORMAL)
                                                })
                                        }
                                    Log.logZDY("==========SkillAnimationStart=============");
                                    var p = void 0;
                                    p = EffectManager.instance.skillPlay(l, h.optData.isMine,
                                            function(t) {
                                                t && t.currentTarget && (Utils.removeNode(a.SwallowTouch), Utils.removeNode(s), Utils.removeNode(t.currentTarget.display), dragonBones.WorldClock.clock.remove(t.currentTarget)),
                                                    a.actionAttack(e, l, h)
                                            }),
                                        AudioManager.instance.playSkillSound(l.sound),
                                        p && (h.optData.isMine ? (p.display.x = 320, p.display.y = 600) : (p.display.x = 320, p.display.y = 400), a.addEffToScene(p.display, t.LAYER_TYPE_BASEEFFTOP)),
                                        Log.logZDY("==========SkillAnimationEnd=============")
                                }
                            else a.actionAttack(e, l, h);
                            1 == a._isConsecutiveSkill && (a._playCount = a._playCount + 1, a._playCount >= l.attackTimes && (a._playCount = 0, a._isConsecutiveSkill = !1))
                        },
                        this)
            } else Log.logError("##########Error.BattleSkill is not found, id." + e.skillid)
        },
        a.createShipSelect = function(t, e, a) {
            if (this.currentSelectShip && Utils.removeNode(this.currentSelectShip), this.currentSelectShip = EffectManager.instance.getTargetSelect(this._battleEffBottomLayer), this.currentSelectShip) {
                this.currentSelectShip.scaleX = this.currentSelectShip.scaleY = .3,
                    this.currentSelectShip.x = e,
                    this.currentSelectShip.y = a;
                var i = egret.Tween.get(this.currentSelectShip);
                i.to({
                        scaleX: .5,
                        scaleY: .5
                    },
                    1e3, egret.Ease.backOut)
            }
        },
        a.OnBattleShipHited = function(e) {
            var a = (e[1], e[2]),
                i = e[3],
                n = e[4];
            if (e = e[0], this.deleteBullet(e.targetBattleUnit.id + n), 1 == e.targetBattleUnit.hit) {
                if (1 == e.targetBattleUnit.cri ? (this.createBulletCri(e, a, i), e.skill.atkType == t.ATK_TYPE_FIRE ? AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_MINGZHONG) : e.skill.atkType == t.ATK_TYPE_EXPL ? AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_MINGZHONG) : e.skill.atkType == t.ATK_TYPE_TORP && AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_YULEI_MZ)) : e.skill.atkType == t.ATK_TYPE_FIRE ? (this.createBulletHit(e, a, i), AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_MINGZHONG)) : e.skill.atkType == t.ATK_TYPE_EXPL ? (this.createBulletHit(e, a, i), AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_MINGZHONG)) : e.skill.atkType == t.ATK_TYPE_TORP && (this.createTorpedoHit(e, a, i), AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_YULEI_MZ)), 1 != n) return;
                this.createDamageNum(e.targetBattleUnit.damage, e.targetViewUnit.x, e.targetViewUnit.y, 1 == e.targetBattleUnit.cri),
                    EventManager.instance.dispatchEvent(EventTypes.BATTLE_SHIP_HP, e.targetBattleUnit),
                    e.targetViewUnit.hurt(e.targetBattleUnit.hp, e.targetBattleUnit.maxhp),
                    e.targetBattleUnit.hp <= 0 ? (this.createShipDead(a, i), SceneManager.instance.sceneShake(), Utils.delayCall(1 * BattleManager.PLAYFRAMES,
                        function() {
                            1 == e.targetViewUnit.optData.isCaptain && 1 == e.targetViewUnit.optData.isMine,
                                0 == e.targetBattleUnit.reserveshipindex ? (e.targetViewUnit.dead(!0), Log.logZDY("***********************上替补船1"), BattleManager.isDelay = !0, Utils.delayCall(1 * BattleManager.PLAYFRAMES,
                                    function() {
                                        EventManager.instance.dispatchEvent(EventTypes.BATTLE_EXCHANGE_BENCH, e)
                                    })) : 1 == e.targetBattleUnit.reserveshipindex ? (e.targetViewUnit.dead(!0), Log.logZDY("***********************上替补船2"), BattleManager.isDelay = !0, Utils.delayCall(1 * BattleManager.PLAYFRAMES,
                                    function() {
                                        EventManager.instance.dispatchEvent(EventTypes.BATTLE_EXCHANGE_BENCH, e)
                                    })) : e.targetViewUnit.dead(!1)
                        })) : e.targetViewUnit.hit()
            } else {
                if (this.createMiss(e, a, i), 1 != n) return;
                this.creatMissFloat(e.targetViewUnit.x, e.targetViewUnit.y)
            }
        },
        a.OnBattleExchangeBench = function(e) {
            var a = this._units[e.targetBattleUnit.id],
                i = this._titlePool[e.targetBattleUnit.id];
            if (!a) return void Log.logZDY("##########Error.BattleTargetId is not Found, id." + e.targetBattleUnit.id);
            var n = 9;
            1 == e.targetBattleUnit.reserveshipindex && (n = 10);
            var s = null,
                r = null;
            a.visible = !1,
                i.visible = !1,
                1 == e.targetViewUnit.optData.isMine ? (s = new Ship(this._mineList[n], t.minePos[this._mineList[a.index].pos], a.index, !0), this._mineShips.push(s), this._units[s.optData.serverData.id] = s, this.addEffToScene(s, t.LAYER_TYPE_SHIP), r = new ShipTitleItem(s.optData), Utils.setPosition(r, s.point.x - 87, s.point.y - 69), this._titlePool[s.optData.serverData.id] = r, this.addEffToScene(r, t.LAYER_TYPE_DESC)) : (s = new Ship(this._enemyList[n], t.enemyPos[this._enemyList[a.index].pos], a.index, !0), this._enemyShips.push(s), this._units[s.optData.serverData.id] = s, this.addEffToScene(s, t.LAYER_TYPE_SHIP), r = new ShipTitleItem(s.optData), Utils.setPosition(r, s.point.x - 87, s.point.y - 69), this._titlePool[s.optData.serverData.id] = r, this.addEffToScene(r, t.LAYER_TYPE_DESC))
        },
        a.OnBattleShipHpChange = function(t) {
            var e = this._titlePool[t.id];
            t.hp <= 0 ? e.visible = !1 : (e.visible = !0, e.updateHP(t.hp, t.maxhp))
        },
        a.initEvents = function() {
            EventManager.instance.addEventListener(EventTypes.BATTLE_ACTION_START, this.OnBattleActionStart, this),
                EventManager.instance.addEventListener(EventTypes.BATTLE_SHIP_HIT, this.OnBattleShipHited, this),
                EventManager.instance.addEventListener(EventTypes.BATTLE_SHIP_HP, this.OnBattleShipHpChange, this),
                EventManager.instance.addEventListener(EventTypes.BATTLE_SKILLBACK_REMOVE,
                    function() {}),
                EventManager.instance.addEventListener(EventTypes.BATTLE_EXCHANGE_BENCH, this.OnBattleExchangeBench, this)
        },
        a.nextAction = function() {
            Log.log("actionTimer1"),
                this._actionTimer && (Utils.cancalDelayCall(this._actionTimer), this._actionTimer = void 0),
                EventManager.instance.dispatchEvent(EventTypes.BATTLE_ACTION_END)
        },
        a.showQijianEffTimeActionFunc = function() {},
        a.createDamageNum = function(e, a, i, n) {
            var s = e,
                r = (s.length, new egret.TextField);
            r.size = 40,
                r.textColor = 16711680,
                r.bold = !0,
                r.text = e,
                r.anchorOffsetX = .5 * r.width,
                r.anchorOffsetY = .5 * r.height,
                r.x = a,
                r.y = i - 50,
                this.addEffToScene(r, t.LAYER_TYPE_BASEEFFTOP);
            var o = .1,
                l = .9,
                h = egret.Tween.get(r),
                c = 0;
            1 == n ? (c = 2, o = .2, l = .8) : c = 1.5,
                h.to({
                        scaleX: c,
                        scaleY: c
                    },
                    .2 * BattleManager.PLAYFRAMES * 1e3).to({
                        scaleX: l,
                        scaleY: l
                    },
                    BattleManager.PLAYFRAMES * o * 1e3).wait(1 * BattleManager.PLAYFRAMES * 1e3).to({
                        scaleX: .5,
                        scaleY: .5
                    },
                    .1 * BattleManager.PLAYFRAMES * 1e3).call(function() {
                    Utils.removeNode(r)
                })
        },
        a.createBulletCri = function(t, e, a) {
            var i = EffectManager.instance.getShipCriEff(this._battleEffTopLayer);
            i && (i.display.x = e, i.display.y = a)
        },
        a.createBulletHit = function(t, e, a) {
            EffectManager.instance.getShipHitEff(this._battleEffTopLayer, void 0, {
                x: e,
                y: a
            })
        },
        a.createTorpedoHit = function(t, e, a) {
            var i = EffectManager.instance.getTorpedoHit(GameLayer.getInstance().topLayer);
            i && (i.display.x = e, i.display.y = a)
        },
        a.createMiss = function(t, e, a) {
            var i = EffectManager.instance.getMissEff(this._battleEffTopLayer);
            i && (i.display.x = e, i.display.y = a)
        },
        a.creatMissFloat = function(e, a) {
            AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_MISS);
            var i = new egret.Bitmap;
            SUI.setTextureAsync(i, Path.battleEffectUrl + "miss.png",
                    function(t) {
                        t && (i.anchorOffsetX = .5 * t.textureWidth, i.anchorOffsetY = .5 * t.textureHeight)
                    }),
                this.addEffToScene(i, t.LAYER_TYPE_BASEEFFTOP),
                i.x = e,
                i.y = a - 25;
            var n = egret.Tween.get(i),
                s = .1,
                r = 1;
            n.to({
                    scaleX: 2,
                    scaleY: 2
                },
                .2 * BattleManager.PLAYFRAMES * 1e3).to({
                    scaleX: r,
                    scaleY: r
                },
                BattleManager.PLAYFRAMES * s * 1e3).wait(1 * BattleManager.PLAYFRAMES * 1e3).to({
                    scaleX: .5,
                    scaleY: .5
                },
                .1 * BattleManager.PLAYFRAMES * 1e3).call(function() {
                Utils.removeNode(i)
            })
        },
        a.createShipDead = function(t, e) {
            var a = this;
            AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_CHENMO);
            for (var i = 1; 4 >= i; ++i) Utils.delayCall(BattleManager.PLAYFRAMES * i * .3 * 1e3,
                function() {
                    var i = Utils.ccp(t + Utils.randInt(-40, 40), e + Utils.randInt(-15, 15));
                    EffectManager.instance.getShipHitEff(a._battleEffTopLayer, void 0, i)
                })
        },
        t.ATK_TYPE_FIRE = 1,
        t.ATK_TYPE_EXPL = 2,
        t.ATK_TYPE_TORP = 3,
        t.ChangeNameType = !1,
        t.LAYER_TYPE_BASEEFFBOTTOM = 1,
        t.LAYER_TYPE_BATTLEEFFBOTTOM = 2,
        t.LAYER_TYPE_SHIP = 3,
        t.LAYER_TYPE_DESC = 4,
        t.LAYER_TYPE_BATTLEEFFTOP = 5,
        t.LAYER_TYPE_BASEEFFTOP = 6,
        t.minePos = [{
                x: -181,
                y: 51
            },
            {
                x: -97,
                y: -61
            },
            {
                x: -16,
                y: -174
            },
            {
                x: 72,
                y: -286
            },
            {
                x: -243,
                y: -24
            },
            {
                x: -163,
                y: -136
            },
            {
                x: -75,
                y: -248
            },
            {
                x: 11,
                y: -361
            }
        ],
        t.enemyPos = [{
                x: -61,
                y: 213
            },
            {
                x: 20,
                y: 105
            },
            {
                x: 101,
                y: -4
            },
            {
                x: 182,
                y: -114
            },
            {
                x: 1,
                y: 288
            },
            {
                x: 82,
                y: 179
            },
            {
                x: 163,
                y: 70
            },
            {
                x: 244,
                y: -39
            }
        ],
        t
}();
egret.registerClass(BattleScene, "BattleScene", ["IScene"]);
var HomeScene = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.init = function() {
            this._mainUI = new MainUI,
                GameLayer.getInstance().uiLayer.addChild(this._mainUI),
                this._homeUI = new HomeUI,
                this._homeUI.name = "HomeUI",
                GameLayer.getInstance().pageLayer.addChild(this._homeUI),
                this._timer = new egret.Timer(3e4, 0),
                this._timer.addEventListener(egret.TimerEvent.TIMER, this.onTick, this),
                this._timer.start(),
                this.onTick()
        },
        a.onTick = function() {
            if (!AudioManager.instance.playMusic(AudioManager.MUSIC_MAIN_UI)) {
                var t = AudioManager.instance.playMusic(AudioManager.MUSIC_MAIN_UI);
                t && this._timer && (this._timer.stop(), this._timer = null)
            }
        },
        a.destroy = function() {
            this._mainUI && (Utils.removeNode(this._mainUI), this._mainUI = void 0),
                this._homeUI && (Utils.removeNode(this._homeUI), this._homeUI = void 0),
                this._timer && (this._timer.stop(), this._timer = null),
                WindowManager.getInstance().hideAll()
        },
        t
}();
egret.registerClass(HomeScene, "HomeScene");
var Ship = function(t) {
    function e(a, i, n, s) {
        var r = this;
        t.call(this),
            this.frame = 0,
            this.optData = a,
            this.point = i,
            this.index = n;
        var o = "",
            l = 1,
            h = 0;
        1 == a.isMine ? o = "z" : (o = "y", h = 5, null != a.modelData.scale && 0 != a.modelData.scale && (l = a.modelData.scale)),
            this.urlType = o,
            this.bg = new egret.Bitmap,
            SUI.setTextureAsync(this.bg, Path.shipModelUrl + a.modelData.url,
                function(t) {
                    r.bg.anchorOffsetX = .5 * t.textureWidth,
                        r.bg.anchorOffsetY = .5 * t.textureHeight,
                        r.bg.scaleX = .8,
                        r.bg.scaleY = .8
                }),
            this.addChild(this.bg),
            this.scaleCopy = this.bg.scaleX,
            this.x = i.x,
            this.y = i.y,
            this.shadow = new egret.Bitmap,
            SUI.setTextureAsync(this.shadow, Path.battleEffectUrl + "battle_ship_shadow.png"),
            this.shadow.x = -85,
            this.shadow.y = -55,
            this.addChildAt(this.shadow, 0),
            this.width = this.bg.width,
            this.height = this.bg.height,
            this.floatFrame = e.FLOATFRAME,
            this.openFloat = !1,
            this.openFloat = !0,
            this.shakeFrame = 0,
            this.hurtType = 0,
            this.hurt(a.serverData.hp, a.serverData.maxhp)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.hurt = function(t, e) {
            if (!(0 >= e || 0 >= t)) {
                var a = t / e * 100;
                80 > a && a >= 40 ? this.hurtType < 1 && (this.hurt1 = EffectManager.instance.getHurtEff(this), this.hurt1 && (this.hurtType = 1, Utils.setPosition(this.hurt1, 0, 0))) : 40 > a && a >= 0 && (this.hurtType < 1 && (this.hurt1 = EffectManager.instance.getHurtEff(this), this.hurt1 && (this.hurtType = 1, Utils.setPosition(this.hurt1, 20, 15))), this.hurtType < 2 && (this.hurt2 = EffectManager.instance.getHurtEff(this), this.hurt2 && (this.hurtType = 2, Utils.setPosition(this.hurt1, -20, -15))))
            }
        },
        i.randomPos = function(t, e) {
            var a = {
                x: 0,
                y: 0
            };
            return e || (e = 3),
                a.x = t.x + Utils.randInt(-e, e),
                a.y = t.y + Utils.randInt(-e, e),
                a
        },
        i.dead = function(t) {
            var e = this;
            if (null == this.isDead || 0 == this.isDead) {
                this.isDead = !0,
                    Utils.removeNode(this.bg),
                    this.bg = null,
                    Utils.removeNode(this.shadow),
                    this.shadow = null,
                    Utils.removeNode(this.hurt1),
                    Utils.removeNode(this.hurt2),
                    Utils.removeNode(this.hurt3),
                    this.hurt1 = null,
                    this.hurt2 = null,
                    this.hurt3 = null,
                    this.bg = new egret.Bitmap,
                    SUI.setTextureAsync(this.bg, "resource/assets/battle/destroy.png"
                        /*tpa=resource/assets/battle/destroy.png*/
                        ,
                        function(t) {
                            e.bg.anchorOffsetX = .5 * t.textureWidth,
                                e.bg.anchorOffsetY = .5 * t.textureHeight
                        }),
                    this.addChild(this.bg),
                    Utils.setScale(this.bg, this.scaleCopy);
                var a = EffectManager.instance.getHurtEff(this, 3);
                a && (Utils.setScale(a, .8), Utils.setPosition(a, -10, -60)),
                    SceneManager.instance.sceneShake(SceneManager.SHAKE_HIGH),
                    1 == t && (this.visible = !1)
            }
        },
        i.hit = function() {
            this.isShake = !0
        },
        i.moveBack = function() {
            var t = this;
            this.openFloat = !1;
            var e = {
                    x: this.x,
                    y: this.y
                },
                a = 0,
                i = 0;
            this.optData.isMine ? (a = -6, i = 7) : (a = 6, i = -7),
                this.x = e.x + a,
                this.y = e.y + i,
                egret.Tween.removeTweens(this);
            var n = egret.Tween.get(this);
            n.to({
                    x: e.x,
                    y: e.y
                },
                1e3 * BattleManager.PLAYFRAMES).call(function() {
                t.openFloat = !0
            })
        },
        i.showSelect = function(t) {
            if (1 == t) {
                if (!this.selected && (this.selected = EffectManager.instance.getTargetSelect(this), this.selected)) {
                    this.selected.scaleX = this.selected.scaleY = 2;
                    var e = egret.Tween.get(this.selected);
                    e.to({
                            scaleX: .5,
                            scaleY: .5
                        },
                        1e3, egret.Ease.backOut)
                }
            } else this.selected && Utils.removeNode(this.selected)
        },
        i.update = function() {
            var t = this;
            if (1 == this.openFloat)
                if (this.floatFrame <= 0) {
                    this.floatFrame = e.FLOATFRAME;
                    var a = this.randomPos(this.point);
                    egret.Tween.removeTweens(this);
                    var i = egret.Tween.get(this);
                    i.to({
                            x: a.x,
                            y: a.y
                        },
                        2e3).call(function() {
                        t.floatFrame = -1
                    })
                } else this.floatFrame--;
            if (1 == this.isShake)
                if (this.openFloat = !1, this.shakeOldPos || (this.shakeOldPos = {
                            x: this.x,
                            y: this.y
                        },
                        this.shakeFrame = e.SHAKEFRAME), this.shakeFrame <= 0) this.isShake = !1,
                    this.shakeFrame = 0,
                    this.openFloat = !0,
                    this.x = this.shakeOldPos.x,
                    this.y = this.shakeOldPos.y,
                    this.shakeOldPos = null;
                else if (this.frame = this.frame + 1, this.frame % 3 == 0) {
                var n = e.SHAKEFRAME - this.shakeFrame + 1;
                this.shakeFrame = this.shakeFrame - 1,
                    n - 4 > 0 && (n -= 4),
                    1 == n ? (this.x = this.shakeOldPos.x - e.SHAKELENGTH, this.y = this.shakeOldPos.y) : 2 == n ? (this.x = this.shakeOldPos.x + e.SHAKELENGTH, this.y = this.shakeOldPos.y) : 3 == n ? (this.x = this.shakeOldPos.x, this.y = this.shakeOldPos.y - e.SHAKELENGTH) : 4 == n && (this.x = this.shakeOldPos.x, this.y = this.shakeOldPos.y + e.SHAKELENGTH)
            }
        },
        i.clear = function() {},
        e.FLOATFRAME = 60,
        e.SHAKEFRAME = 3,
        e.SHAKELENGTH = 3,
        e.frame = 0,
        e
}(egret.DisplayObjectContainer);
egret.registerClass(Ship, "Ship");
var SkillBulletExplosion = function(t) {
    function e(e, a, i, n, s, r) {
        t.call(this),
            this.startX = a.x,
            this.startY = a.y,
            this.targetX = i.x,
            this.targetY = i.y,
            1 == r ? (this.x = a.x, this.y = a.y, this.visible = !1, this.bomb(e, i, .8 * BattleManager.PLAYFRAMES * 1e3)) : this.bomb(e, i, 0),
            this.data = e,
            this.maxLength = Math.sqrt(Math.pow(this.x - this.targetX, 2) + Math.pow(this.y - this.targetY, 2)),
            this.damage = n,
            this.play = !1,
            this.index = s
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.bomb = function(t, e, a) {
            var i = this;
            egret.Tween.removeTweens(this);
            var n = egret.Tween.get(this),
                s = -1 / 1.37,
                r = null,
                o = null,
                l = null,
                h = "",
                c = .52,
                d = 50,
                g = e.x - this.startX + 50,
                u = 200,
                p = 80;
            1 == t.actionViewUnit.optData.isMine ? (h = "resource/assets/battle/projectile/battle_plane_left.png"
                    /*tpa=resource/assets/battle/projectile/battle_plane_left.png*/
                    , o = Utils.ccp(e.x - g, e.y - d + g * Math.tan(c)), l = Utils.ccp(e.x + u, e.y - d - u * Math.tan(c))) : (h = "resource/assets/battle/projectile/battle_plane_right.png"
                    /*tpa=resource/assets/battle/projectile/battle_plane_right.png*/
                    , o = Utils.ccp(e.x + 200, e.y + 200 / s - 50), l = Utils.ccp(e.x - 156, e.y - 78 / s * 2 - 50)),
                this.x = o.x,
                this.y = o.y,
                this.visible = !0,
                AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_NORMAL_FEIJI),
                r = new egret.Bitmap,
                SUI.setTextureAsync(r, h),
                this.removeChildren(),
                this.addChild(r),
                this.x = o.x,
                this.y = o.y,
                Log.logZDY("SkillBulletExplosion"),
                n.to({
                        x: l.x,
                        y: l.y
                    },
                    .7 * BattleManager.PLAYFRAMES * 1e3).call(function() {
                        Log.logZDY("SkillBulletExplosion2"),
                            Utils.removeNode(i)
                    },
                    this);
            var m = Math.abs((p - e.x) / (l.x - o.x)) * BattleManager.PLAYFRAMES * .7 * 1e3;
            Utils.delayCall(m,
                function() {
                    EventManager.instance.dispatchEvent(EventTypes.BATTLE_SHIP_HIT, [i.data, i.damage, i.targetX, i.targetY, i.index])
                },
                this)
        },
        i.update = function() {
            0 == this.play && (this.play = !0)
        },
        e
}(egret.DisplayObjectContainer);
egret.registerClass(SkillBulletExplosion, "SkillBulletExplosion");
var SkillBulletFire = function(t) {
    function e(e, a, i, n, s) {
        var r = this;
        t.call(this),
            this.x = a.x,
            this.y = a.y,
            this.scaleX = this.scaleY = .6,
            SUI.setTextureAsync(this, "resource/assets/battle/projectile/bullet.png"
                /*tpa=resource/assets/battle/projectile/bullet.png*/
                ,
                function(t) {
                    r.anchorOffsetX = t.textureWidth / 2,
                        r.anchorOffsetY = t.textureHeight / 2
                }),
            this.startX = a.x,
            this.startY = a.y,
            this.targetX = i.x,
            this.targetY = i.y,
            this.data = e,
            this.maxLength = Math.sqrt(Math.pow(this.x - this.targetX, 2) + Math.pow(this.y - this.targetY, 2)),
            this.damage = n,
            this.play = !1,
            this.index = s,
            BattleManager.instance.setNodeRotation(e.actionViewUnit.optData.isMine, this.startX, this.startY, this.targetX, this.targetY, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.update = function() {
            var t = this;
            if (0 == this.play) {
                this.play = !0;
                var e = egret.Tween.get(this);
                Log.logZDY("SkillBulletFire"),
                    e.to({
                            x: this.targetX,
                            y: this.targetY
                        },
                        .4 * BattleManager.PLAYFRAMES * 1e3).call(function() {
                        Log.logZDY("SkillBulletFire1"),
                            Utils.removeNode(t),
                            EventManager.instance.dispatchEvent(EventTypes.BATTLE_SHIP_HIT, [t.data, t.damage, t.targetX, t.targetY, t.index])
                    })
            }
        },
        e.SPPED = 40,
        e
}(egret.Bitmap);
egret.registerClass(SkillBulletFire, "SkillBulletFire");
var SkillBulletTorpedo = function(t) {
    function e(e, a, i, n, s) {
        t.call(this);
        var r = new egret.Bitmap;
        SUI.setTextureAsync(r, "resource/assets/battle/projectile/battle_torpedo_body.png"
                /*tpa=resource/assets/battle/projectile/battle_torpedo_body.png*/
                ,
                function(t) {
                    r.anchorOffsetX = 1 * t.textureWidth,
                        r.anchorOffsetY = .5 * t.textureHeight
                }),
            r.scaleX = .3,
            r.scaleY = .2,
            r.alpha = 150 / 255,
            this.addChild(r),
            this.alpha = 150 / 255,
            this.x = a.x,
            this.y = a.y,
            this.startX = a.x,
            this.startY = a.y,
            this.targetX = i.x,
            this.targetY = i.y,
            this.data = e,
            this.maxLength = Math.sqrt(Math.pow(this.x - this.targetX, 2) + Math.pow(this.y - this.targetY, 2)),
            this.damage = n,
            this.play = !1,
            this.index = s,
            BattleManager.instance.setNodeRotation(e.actionViewUnit.optData.isMine, this.startX, this.startY, this.targetX, this.targetY, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.update = function() {
            var t = this;
            if (0 == this.play) {
                this.play = !0;
                var e = egret.Tween.get(this);
                Log.logZDY("SkillBulletTorpedo"),
                    e.to({
                            x: this.targetX,
                            y: this.targetY
                        },
                        .8 * BattleManager.PLAYFRAMES * 1e3).call(function() {
                        Log.logZDY("SkillBulletTorpedo1"),
                            Utils.removeNode(t),
                            EventManager.instance.dispatchEvent(EventTypes.BATTLE_SHIP_HIT, [t.data, t.damage, t.targetX, t.targetY, t.index])
                    })
            }
        },
        e.SPPED = 2,
        e
}(egret.DisplayObjectContainer);
egret.registerClass(SkillBulletTorpedo, "SkillBulletTorpedo");
var GameLayer = function() {
    function t() {}
    var e = __define,
        a = t,
        i = a.prototype;
    return e(i, "root",
            function() {
                return this._root
            }),
        t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        i.setRoot = function() {
            this._root = Main.instance,
                this.bgLayer = new egret.DisplayObjectContainer,
                this._root.addChild(this.bgLayer),
                this.pageLayer = new egret.DisplayObjectContainer,
                this._root.addChild(this.pageLayer),
                this.uiLayer = new egret.DisplayObjectContainer,
                this._root.addChild(this.uiLayer),
                this.windowLayer = new egret.DisplayObjectContainer,
                this._root.addChild(this.windowLayer),
                this.effectLayer = new egret.DisplayObjectContainer,
                this._root.addChild(this.effectLayer),
                this.topLayer = new egret.DisplayObjectContainer,
                this._root.addChild(this.topLayer)
        },
        i.hideAll = function() {
            this.bgLayer.visible = this.pageLayer.visible = this.uiLayer.visible = this.windowLayer.visible = this.effectLayer.visible = this.topLayer.visible = !1
        },
        i.showAll = function() {
            this.bgLayer.visible = this.pageLayer.visible = this.uiLayer.visible = this.windowLayer.visible = this.effectLayer.visible = this.topLayer.visible = !0
        },
        t
}();
egret.registerClass(GameLayer, "GameLayer");
var Interfaces = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(Interfaces, "Interfaces"),
    Number.prototype.toFixedInteger = function(t) {
        for (var e = this.toString(); e.length < t;) e = "0" + e;
        return e
    },
    String.prototype.format = function() {
        for (var t = [], e = 0; e < arguments.length; e++) t[e - 0] = arguments[e];
        for (var a = this,
                i = 0; i < t.length; i++) a = a.replace(RegExp("\\{" + i + "\\}", "g"), t[i].toString());
        return a
    };
var Main = function(t) {
    function e() {
        t.call(this),
            this.isThemeLoadEnd = !1,
            this.isResourceLoadEnd = !1,
            this.themeLoadNum = 0,
            e.instance = this,
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.onAddToStage, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.showOrientationTip = function(t) {
            0 == Number(t) ? e.tipBg && (e.tipBg.visible = !1) : e.tipBg ? (e.tipBg.visible = !0, e.instance.setChildIndex(e.tipBg, e.instance.numChildren)) : (e.tipBg = new egret.Bitmap(RES.getRes("tip_jpg")), e.instance.addChild(e.tipBg))
        },
        i.onAddToStage = function(t) {
            PlatformManager.instance.init(),
                egret.sys.screenAdapter = new AutoScreenAdapter;
            var e = new AssetAdapter;
            this.stage.registerImplementation("eui.IAssetAdapter", e),
                this.stage.registerImplementation("eui.IThemeAdapter", new ThemeAdapter),
                RES.addEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this),
                RES.loadConfig("resource/defaultVersion.res.json"
                    /*tpa=resource/defaultVersion.res.json*/
                    , "resource/"),
                this.stage.scaleMode = egret.StageScaleMode.EXACT_FIT
        },
        i.onConfigComplete = function(t) {
            RES.removeEventListener(RES.ResourceEvent.CONFIG_COMPLETE, this.onConfigComplete, this);
            var e = new eui.Theme("resource/preload.thm.json"
                /*tpa=resource/preload.thm.json*/
                , this.stage);
            e.addEventListener(eui.UIEvent.COMPLETE, this.onThemeLoadComplete, this),
                RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this),
                RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this),
                RES.addEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this),
                RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this)
        },
        i.onThemeLoadComplete = function() {
            this.isThemeLoadEnd = !0,
                RES.loadGroup("Loading")
        },
        i.loadResource = function() {
            Transport.loginPanelBool ? RES.loadGroup("Ui", 0) : RES.loadGroup("Ui", 0)
        },
        i.onResourceLoadComplete = function(t) {
            Transport.loginPanelBool || (Path.resHeadUrl = ""),
                "Loading" == t.groupName ? (changeCol(), this.loadingPanel = new WindowLoading, this.loadingPanel.setLoadLabel("加载新手资源")) : "Tutorial" == t.groupName ? this.loadingPanel.setLoadLabel("加载游戏背景") : "Backgroundimage" == t.groupName ? this.loadingPanel.setLoadLabel("加载游戏UI") : "Ui" == t.groupName && (this.loadingPanel.setLoadLabel("加载游戏数据"), RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.removeEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), RES.removeEventListener(RES.ResourceEvent.GROUP_PROGRESS, this.onResourceProgress, this), RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, this.onItemLoadError, this), this.isResourceLoadEnd = !0, this.OnResOrThemeLoaded()),
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onClickScreen, this, !0)
        },
        i.onClickScreen = function(t) {
            var e = RES.getRes("screenClick_png"),
                a = RES.getRes("screenClick_json"),
                i = RES.getRes("effect_click_json");
            if (e && a && i) {
                var n = new dragonBones.EgretFactory;
                n.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(i)),
                    n.addTextureAtlas(new dragonBones.EgretTextureAtlas(e, a));
                var s = n.buildArmature("click");
                dragonBones.WorldClock.clock.add(s);
                s.animation.gotoAndPlay("normal");
                this.addChild(s.display),
                    s.display.x = t.stageX,
                    s.display.y = t.stageY,
                    s.animation.timeScale = 2,
                    s.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                        function() {
                            Utils.removeDragonBone(s)
                        },
                        void 0)
            }
        },
        i.OnResOrThemeLoaded = function() {
            var t = this;
            this.isThemeLoadEnd && this.isResourceLoadEnd && (new Locales(function() {
                GameEventDispatcher.getInstance().addEventListener(GameEvent.CONFIG_PROGRESS, t.loadConfigProgress, t),
                    t.preloadConfigs(function() {
                        ResLoader.instance.preLoadResList(["resource/proto/proto.json"
                                /*tpa=resource/proto/proto.json*/
                            ],
                            function(e) {
                                GameEventDispatcher.getInstance().removeEventListener(GameEvent.CONFIG_PROGRESS, t.loadConfigProgress, t),
                                    t.loadTheme(),
                                    Transport.protoCache = e[0],
                                    dcodeIO.ProtoBuf.msgs = e[0]
                            },
                            t)
                    })
            }), this.stage.addEventListener(egret.Event.ENTER_FRAME, GameTick.tick, this))
        },
        i.loadTheme = function() {
            var t = this;
            this.loadingPanel.setLoadLabel("加载主题文件");
            var e = new eui.Theme("resource/default.thm.json"
                /*tpa=resource/default.thm.json*/
                , this.stage);
            this.tickId = egret.setInterval(function() {
                        t.thmTick()
                    },
                    this, 50),
                e.addEventListener(eui.UIEvent.COMPLETE, this.startLoginScene, this)
        },
        i.thmTick = function() {
            this.themeLoadNum += 1,
                this.themeLoadNum >= 10 && (this.themeLoadNum = 10, egret.clearInterval(this.tickId)),
                this.loadingPanel && this.loadingPanel.setProgress(this.themeLoadNum, 10)
        },
        i.loadConfigProgress = function(t) {
            this.loadingPanel && this.loadingPanel.setProgress(t.parames.itemsLoaded, t.parames.itemsTotal)
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("activityitem"),
                e.push("arenaNPCData"),
                e.push("buffData"),
                e.push("captainData"),
                e.push("captainPieceData"),
                e.push("exp"),
                e.push("item"),
                e.push("medalData"),
                e.push("medalpiece"),
                e.push("MilitaryRank"),
                e.push("npcData"),
                e.push("paperData"),
                e.push("paperPieceData"),
                e.push("parts"),
                e.push("partspieces"),
                e.push("shipData"),
                e.push("shipModelData"),
                e.push("shopData"),
                e.push("skillData"),
                e.push("virtualData"),
                e.push("vip"),
                e.push("mailData"),
                e.push("MilitaryRights"),
                e.push("guildscience"),
                e.push("guildscienceData"),
                e.push("namePlayerData");
            var a = [];
            a.push(ActivityitemParser),
                a.push(ArenanpcdataParser),
                a.push(BuffdataParser),
                a.push(CaptaindataParser),
                a.push(CaptainpiecedataParser),
                a.push(ExpParser),
                a.push(ItemParser),
                a.push(MedaldataParser),
                a.push(MedalpieceParser),
                a.push(MilitaryrankParser),
                a.push(NpcdataParser),
                a.push(PaperdataParser),
                a.push(PaperpiecedataParser),
                a.push(PartsParser),
                a.push(PartspiecesParser),
                a.push(ShipdataParser),
                a.push(ShipmodeldataParser),
                a.push(ShopdataParser),
                a.push(SkilldataParser),
                a.push(VirtualdataParser),
                a.push(VipParser),
                a.push(MaildataParser),
                a.push(MilitaryrightsParser),
                a.push(GuildscienceParser),
                a.push(GuildsciencedataParser),
                a.push(NameplayerdataParser),
                ConfigData.preLoadDats(e, a,
                    function() {
                        t()
                    })
        },
        i.onItemLoadError = function(t) {
            console.warn("Url:" + t.resItem.url + " has failed to load")
        },
        i.onResourceLoadError = function(t) {
            console.warn("Group:" + t.groupName + " has failed to load"),
                this.onResourceLoadComplete(t)
        },
        i.onResourceProgress = function(t) {
            "preload" == t.groupName,
                this.loadingPanel && this.loadingPanel.setProgress(t.itemsLoaded, t.itemsTotal)
        },
        i.startCreateScene = function() {
            Toast.init(GameLayer.getInstance().topLayer, RES.getRes(Path.resHeadUrl + "juesexinxi_toumingdi_png"))
        },
        i.startLoginScene = function() {
            Plantform.getInstanceOf().openFirst(),
                this.loadingPanel.setProgress(10, 10),
                egret.clearInterval(this.tickId),
                GameLayer.getInstance().setRoot(),
                e.logBool && (e.labelLen = 0, e.logStr = "", e.logTxt = new eui.Label, e.logTxt.touchEnabled = !1, e.logTxt.width = 640, e.logTxt.height = 960, e.logTxt.wordWrap = !0, e.logTxt.text = "打印调试窗口:", e.logTxt.visible = !1, this.addChild(e.logTxt)),
                Toast.init(GameLayer.getInstance().topLayer, RES.getRes(Path.resHeadUrl + "juesexinxi_toumingdi_png")),
                this.login(),
                egret.Ticker.getInstance().register(function(t) {
                        dragonBones.WorldClock.clock.advanceTime(.001 * t)
                    },
                    this),
                SceneManager.instance.SwitchScene(SceneType.HOME),
                GameLayer.getInstance().hideAll()
        },
        i.login = function() {
            Transport.loginPanelBool ? (e.instance.loadingPanel || (e.instance.loadingPanel = new WindowLoading), e.instance.loadingPanel.showLogin()) : (e.instance.setChildIndex(e.instance.loadingPanel, e.instance.numChildren), PlatformManager.instance.loginVerify(function(t) {
                e.instance.loadingPanel || (e.instance.loadingPanel = new WindowLoading),
                    GameData.openid = PlatformManager.instance.myself.openid,
                    GameData.uid = PlatformManager.instance.myself.userid,
                    GameData.lastServerId = PlatformManager.instance.myself.serverId,
                    GameData.pf = PlatformManager.instance.myself.platformName,
                    e.instance.loadingPanel.showServerListUI(),
                    e.instance.loadingPanel.requestServerList(),
                    Plantform.getInstanceOf().openGame()
            }))
        },
        i.clearLoadingPanel = function() {
            this.loadingPanel && this.loadingPanel.clear()
        },
        e.trace = function() {
            for (var t = [], a = 0; a < arguments.length; a++) t[a - 0] = arguments[a];
            e.logBool && (e.logStr += t.join(",") + "\n", e.labelLen++, e.logTxt.text = e.logStr, e.labelLen > 20 && (e.logTxt.scrollV = e.labelLen - 20 + 1), e.instance.setChildIndex(e.logTxt, e.instance.numChildren)),
                console.log(t.join(","))
        },
        e.logBool = !1,
        e
}(egret.DisplayObjectContainer);
egret.registerClass(Main, "Main");
var ActivityType;
!
function(t) {
    t[t.ACTIVITY_TYPE_OIL = -8] = "ACTIVITY_TYPE_OIL",
        t[t.ACTIVITY_TYPE_OIL_NOON = 1] = "ACTIVITY_TYPE_OIL_NOON",
        t[t.ACTIVITY_TYPE_OIL_EVENING = 2] = "ACTIVITY_TYPE_OIL_EVENING",
        t[t.ACTIVITY_TYPE_SIGNIN = 3] = "ACTIVITY_TYPE_SIGNIN",
        t[t.ACTIVITY_TYPE_VIP = 4] = "ACTIVITY_TYPE_VIP",
        t[t.ACTIVITY_TYPE_LEVEL = 5] = "ACTIVITY_TYPE_LEVEL",
        t[t.ACTIVITY_TYPE_START_SERVER = 6] = "ACTIVITY_TYPE_START_SERVER",
        t[t.ACTIVITY_TYPE_FIRST_RECHARGE = 7] = "ACTIVITY_TYPE_FIRST_RECHARGE",
        t[t.ACTIVITY_TYPE_GROWUP_BUY = 8] = "ACTIVITY_TYPE_GROWUP_BUY",
        t[t.ACTIVITY_TYPE_GROWUP_RECV = 9] = "ACTIVITY_TYPE_GROWUP_RECV",
        t[t.ACTIVITY_TYPE_COST_REWARD = 10] = "ACTIVITY_TYPE_COST_REWARD",
        t[t.ACTIVITY_TYPE_MISTERYSHOP = 11] = "ACTIVITY_TYPE_MISTERYSHOP",
        t[t.ACTIVITY_TYPE_RECHARGE_REWARD = 12] = "ACTIVITY_TYPE_RECHARGE_REWARD",
        t[t.ACTIVITY_TYPE_OIL_MIDNIGHT = 13] = "ACTIVITY_TYPE_OIL_MIDNIGHT",
        t[t.ACTIVITY_TYPE_SINGLE_RECHARGE = 14] = "ACTIVITY_TYPE_SINGLE_RECHARGE",
        t[t.ACTIVITY_TYPE_DAILY_SINGLE_RECHARGE = 15] = "ACTIVITY_TYPE_DAILY_SINGLE_RECHARGE",
        t[t.ACTIVITY_TYPE_DAILY_ACC_RECHARGE = 16] = "ACTIVITY_TYPE_DAILY_ACC_RECHARGE",
        t[t.ACTIVITY_TYPE_ONLINE = 17] = "ACTIVITY_TYPE_ONLINE",
        t[t.ACTIVITY_TYPE_WHEEL = 18] = "ACTIVITY_TYPE_WHEEL",
        t[t.ACTIVITY_TYPE_LOGINGIFT = 20] = "ACTIVITY_TYPE_LOGINGIFT"
}(ActivityType || (ActivityType = {}));
var ActivityManager = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.setImageByType = function(t, e) {
            e == ActivityType.ACTIVITY_TYPE_RECHARGE_REWARD ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_LeiChongFuLi.png") : e == ActivityType.ACTIVITY_TYPE_COST_REWARD ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_XiaoFeiFanLi.png") : e == ActivityType.ACTIVITY_TYPE_SINGLE_RECHARGE ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_DanChongJiangLi.png") : e == ActivityType.ACTIVITY_TYPE_SIGNIN ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_MeiRiQianDao.png") : e == ActivityType.ACTIVITY_TYPE_OIL ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_YuanYouLingQu.png") : e == ActivityType.ACTIVITY_TYPE_DAILY_SINGLE_RECHARGE ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_TianTianChongZhi.png") : e == ActivityType.ACTIVITY_TYPE_DAILY_ACC_RECHARGE ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_MeiRiLeiChong.png") : e == ActivityType.ACTIVITY_TYPE_LEVEL ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_ChongJiHuoDong.png") : e == ActivityType.ACTIVITY_TYPE_WHEEL ? SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_XingYunZhuanPan.png") : e == ActivityType.ACTIVITY_TYPE_LOGINGIFT && SUI.setTextureAsync(t, Path.uiUrl + "Activity/Title_DengLuJiuSong.png")
        },
        a.checkIsBetweenTime = function(t, e, a) {
            a = 0;
            var i = UserData.getInstance().getServerTime() / 1e3;
            if (0 == a) return i >= t && e > i;
            if (1 == a) {
                var n = UserData.getInstance().serverstartday;
                return n >= t && e > n
            }
            if (2 == a) {
                var s = UserData.getInstance().regdaycount;
                return s >= t && e > s
            }
        },
        a.canGetOil = function() {
            var e = this.getOilGiftTimeIndex(),
                a = !1;
            return 0 != e || t.instance.activityData.oil_noon || (a = !0),
                1 != e || t.instance.activityData.oil_evening || (a = !0),
                2 != e || t.instance.activityData.oil_midnight || (a = !0),
                a
        },
        a.checkIsShowRedBall = function(t) {
            if (t == ActivityType.ACTIVITY_TYPE_OIL) return this.canGetOil();
            var e = UserData.getInstance().activeTips;
            if (!e) return !1;
            if (0 == t) {
                var a = !1;
                for (var i in e.act_red) {
                    var n = e.act_type[i];
                    19 != n && n != ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE && e.act_red[i] && (a = !0)
                }
                return a || this.canGetOil()
            }
            for (var i = 0; i < e.act_type.length; ++i)
                if (e.act_type[i] == t) return e.act_red[i];
            return !1
        },
        a.getOilGiftTimeIndex = function() {
            for (var t = UserData.getInstance().getServerTime(), e = (new Date(t), ["12:00-14:00", "18:00-20:00", "20:20-22:00"]), a = new Date(t), i = new Date(t), n = 0; n < e.length; ++n) {
                var s = e[n],
                    r = s.split("-"),
                    o = r[0].split(":"),
                    l = r[1].split(":");
                if (a.setHours(Number(o[0]), Number(o[1])), i.setHours(Number(l[0]), Number(l[1])), a.valueOf() < t.valueOf() && i.valueOf() > t.valueOf()) return n
            }
            return -1
        },
        a.getOnlineRewardState = function() {
            if (!this.activityData) return [-1, 0];
            var t = UserData.getInstance().getServerTime() / 1e3,
                e = this.activityData.online_gift_time,
                a = 0;
            return e ? e > t ? a = 0 : t >= e && (a = 1) : (e = 0, a = -1), [a, e - t]
        },
        t.instance = new t,
        t
}();
egret.registerClass(ActivityManager, "ActivityManager");
var ArenaManager = function() {
    function t() {
        this.rankData = null,
            this.top10List = null,
            this.enemylist = null,
            this.target8list = null,
            this.itemList = null,
            this.topTenList = null,
            this.ActiveGameData = null,
            this.Pirate_All_count = 0,
            this.Pirate_1_count = 0,
            this.Pirate_2_count = 0,
            this.Pirate_3_count = 0,
            this.Line_All_count = 0,
            this.Line_1_count = 0,
            this.Line_2_count = 0,
            this.Line_3_count = 0,
            this.curArena_name = null,
            this.curArena_power = null,
            this.curArena_camp = null,
            this.curArena_rank_attack = null,
            this.curArena_rank_self = null,
            this.curArena_score = null,
            this.curArena_score_self = null,
            this.curArena_target_uid = null
    }
    var e = (__define, t),
        a = e.prototype;
    return a.openExchangeWindow = function() {
            ConfigData.preLoadDats(["arenaExchangeData", "HegemonyUnlock"], [ArenaexchangedataParser, HegemonyunlockParser],
                function() {
                    UserData.getInstance().getPlayerLevel() < HegemonyunlockParser.GetInstance().getItemById(4).needlvl ? Toast.launch(Locales.get("ui_main_function_scientific", HegemonyunlockParser.GetInstance().getItemById(4).needlvl)) : WindowManager.getInstance().show(WindowManager.windowType.PVPExchange)
                })
        },
        a.GetPirateLocCount = function() {
            return 2
        },
        a.getLeftTimes = function() {
            return this.rankData ? this.rankData.remaincount : 0
        },
        a.SetCount = function(t) {
            1 == t.stageID ? this.Pirate_1_count = this.Pirate_1_count - t.todayCount : 2 == t.stageID ? this.Pirate_2_count = this.Pirate_2_count - t.todayCount : 3 == t.stageID ? this.Pirate_3_count = this.Pirate_3_count - t.todayCount : 4 == t.stageID ? this.Line_1_count = this.Line_1_count - t.todayCount : 5 == t.stageID ? this.Line_2_count = this.Line_2_count - t.todayCount : 6 == t.stageID && (this.Line_3_count = this.Line_3_count - t.todayCount)
        },
        a.SetActiveGameData = function(t) {
            this.ActiveGameData = t;
            var e = t.stage,
                a = this.GetPirateLocCount();
            if (this.Pirate_1_count = a, this.Pirate_2_count = a, this.Pirate_3_count = a, this.Line_1_count = a, this.Line_2_count = a, this.Line_3_count = a, e)
                for (var i in e) {
                    var n = e[i];
                    n && this.SetCount(n)
                }
            var s = PlaygamestagedataParser.GetInstance(),
                r = StagespecialdataParser.GetInstance(),
                o = UserData.getInstance().getPlayerLevel(),
                l = s.getItemById(1),
                h = r.getItemById(l);
            o < h.reqStage && (this.Pirate_1_count = 0),
                l = s.getItemById(2),
                h = r.getItemById(l),
                o < h.reqStage && (this.Pirate_2_count = 0),
                l = s.getItemById(3),
                h = r.getItemById(l),
                o < h.reqStage && (this.Pirate_3_count = 0),
                this.Pirate_All_count = this.Pirate_1_count + this.Pirate_2_count + this.Pirate_3_count,
                l = s.getItemById(4),
                h = r.getItemById(l),
                o < h.reqStage && (this.Line_1_count = 0),
                l = s.getItemById(5),
                h = r.getItemById(l),
                o < h.reqStage && (this.Line_2_count = 0),
                l = s.getItemById(6),
                h = r.getItemById(l),
                o < h.reqStage && (this.Line_3_count = 0),
                this.Line_All_count = this.Line_1_count + this.Line_2_count + this.Line_3_count
        },
        a.setRankData = function(t) {
            if (this.rankData = t, WindowManager.getInstance().isWindowVisible(WindowManager.windowType.PVP)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.PVP);
                e.updataPanel()
            }
        },
        a.setListData = function(t) {
            this.top10List = t.top10list.list,
                this.enemylist = t.enemylist.list,
                this.target8list = t.target8list.list,
                this.itemList = [],
                this.topTenList = [];
            for (var e = 0,
                    a = this.top10List; e < a.length; e++) {
                var i = a[e];
                this.topTenList.push({
                    serverData: i,
                    type: 1
                })
            }
            this.rankData.rank < 10 && (this.itemList = this.topTenList.concat());
            for (var n = 0,
                    s = this.target8list; n < s.length; n++) {
                for (var r = s[n], o = !1, l = 0, h = this.itemList; l < h.length; l++) {
                    var c = h[l];
                    r.uid == c.serverData.uid && (c.type = 3, o = !0)
                }
                o || this.itemList.push({
                    serverData: r,
                    type: 3
                })
            }
            for (var d = 0,
                    g = this.enemylist; d < g.length; d++) {
                for (var u = g[d], o = !1, p = 0, m = this.itemList; p < m.length; p++) {
                    var c = m[p];
                    u.uid == c.serverData.uid && (c.type = 2, o = !0)
                }
                o || this.itemList.push({
                    serverData: u,
                    type: 2
                })
            }
            if (this.itemList.sort(function(t, e) {
                    return t.serverData.rank - e.serverData.rank
                }), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.PVP)) {
                var _ = WindowManager.getInstance().getWindow(WindowManager.windowType.PVP);
                ConfigData.preLoadDats(["arenaScoreData"], [ArenascoredataParser],
                    function() {
                        _.updatePlayerList()
                    })
            }
        },
        a.initExchange = function(t) {
            Log.logZDY("#########################*******兑换"),
                Toast.launch(t.res)
        },
        a.setArena_value = function(t, e, a, i, n, s, r, o) {
            this.curArena_name = t,
                this.curArena_power = e,
                this.curArena_camp = a,
                this.curArena_rank_attack = i,
                this.curArena_rank_self = n,
                this.curArena_score = s,
                this.curArena_score_self = r,
                this.curArena_target_uid = o
        },
        a.getArena_value = function() {
            return [this.curArena_name, this.curArena_power, this.curArena_camp, this.curArena_rank_attack, this.curArena_rank_self, this.curArena_score, this.curArena_score_self]
        },
        a.getQuickFight_value = function() {
            return [this.curArena_target_uid, this.curArena_rank_attack, this.curArena_rank_self]
        },
        a.getCountById = function(t) {
            var e = this.rankData,
                a = 0;
            for (var i in e.exchangeids)
                if (t == e.exchangeids[i]) {
                    a = e.exchangetimes[i];
                    break
                }
            return a
        },
        a.getCanDHNumById = function(e) {
            var a = 0,
                i = t.instance.rankData;
            return a = i.score,
                Log.logZDY("GuardArenaDHPanel.getCanDHNumById", a),
                a
        },
        t.getDHCountById = function(e) {
            for (var a = 0,
                    i = t.instance.getCountById(e), n = null, s = 0, r = ArenaexchangedataParser.GetInstance().getDataArr(); s < r.length; s++) {
                var o = r[s];
                if (o.id == e) {
                    n = o;
                    break
                }
            }
            return n && (Log.logZDY("GuardArenaDHPanel.getDHCountById", n.buyTimeLimited, i), a = -1 == n.buyTimeLimited ? 1 : 0 == n.buyTimeLimited ? 99999 : n.buyTimeLimited - i),
                Log.logZDY("GuardArenaDHPanel.getDHCountById", e, n, i),
                Log.logZDY("////-", a),
                a
        },
        t.instance = new t,
        t
}();
egret.registerClass(ArenaManager, "ArenaManager");
var ArrangeManager = function() {
    function t() {
        this.arrange = []
    }
    var e = (__define, t);
    e.prototype;
    return t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        t
}();
egret.registerClass(ArrangeManager, "ArrangeManager");
var AudioManager = function() {
    function t() {
        this.musicList = ["", "music-01bayofhonor.mp3", "music-06CampBattle.mp3"],
            this.soundList = ["", "UI_guanbianniu.mp3", "UI_kaiqibaoxiang.mp3", "UI_peijianfenjie.mp3", "UI_jianchuangaizao.mp3", "UI_peijianshengji.mp3", "UI_dianjianniu.mp3", "UI_dianjizhandou.mp3", "UI_choutuzhi.mp3", "UI_shilianchou.mp3", "battle_chenmo.mp3", "battle_weimingzhong.mp3", "battle_mingzhong.mp3", "battle_fasheyulei.mp3", "battle_huopaokaihuo.mp3", "battle_feijigongji.mp3", "skill_wenzitexiao.mp3", "battle_huanjing_putong.mp3", "battle_huanjing_lei_1.mp3", "battle_huanjing_lei_2.mp3", "battle_huanjing_lei_3.mp3", "battle_huanjing_baofengyu.mp3", "UI_wanjiashengji.mp3", "battle_result_win.mp3", "battle_result_lose.mp3", "skill_haidihuanjingyin.mp3", "battle_yuleimingzhong.mp3", "battle_feijiqifei.mp3", "UI_jianchuanshengchan.mp3", "UI_jianchuantuiyi.mp3", "UI_xinguanqiajiesuo.mp3", "UI_getOil.mp3", "lipaoyinpin.mp3"],
            this.musicSndMap = {},
            this.soundSndMap = {},
            this._isMusicPlaying = !1,
            this._bgVolume = 1,
            this._effectVolume = 1,
            this._inited = !1
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(i, "bgVolume",
            function() {
                return this._bgVolume
            },
            function(t) {
                t > 1 && (t = 1),
                    0 > t && (t = 0),
                    this._bgVolume = t,
                    this._isMusicPlaying && (this._currentMusicChannel.volume = this.bgVolume)
            }),
        e(i, "effectVolume",
            function() {
                return this._effectVolume
            },
            function(t) {
                t > 1 && (t = 1),
                    0 > t && (t = 0),
                    this.effectVolume = t
            }),
        e(i, "isBackgroundMusicPlaying",
            function() {
                return this._isMusicPlaying
            }),
        e(i, "isMusicOn",
            function() {
                return !!this._musicOn
            },
            function(t) {
                !!this._musicOn != t && (this._musicOn = t, this._musicOn ? this.currentPlayMusic && this.playMusic(this.currentPlayMusic) : this.stopMusic(), UserDefault.instance.setStringForKey("music_off", t ? "" : "true"))
            }),
        e(i, "isEffectOn",
            function() {
                return !!this._effectOn
            },
            function(t) {
                !!this._effectOn != t && (this._effectOn = t, UserDefault.instance.setStringForKey("sound_off", t ? "" : "true"))
            }),
        i.init = function() {
            var t = this;
            if (!this._inited) {
                this.isMusicOn = "true" != UserDefault.instance.getStringForKey("music_off"),
                    this.isEffectOn = "true" != UserDefault.instance.getStringForKey("sound_off");
                for (var e = [], a = 1; a < this.musicList.length; ++a) e.push(Path.audioUrl + this.musicList[a]);
                ResLoader.instance.preLoadResList(e,
                        function(e) {
                            for (var a = 0; a < e.length; ++a) {
                                var i = e[a],
                                    n = t.musicList[a + 1];
                                t.musicSndMap[n] = i
                            }
                        },
                        this),
                    e = [];
                for (var a = 1; a < this.soundList.length; ++a) e.push(Path.audioUrl + this.soundList[a]);
                ResLoader.instance.preLoadResList(e,
                        function(e) {
                            for (var a = 0; a < e.length; ++a) {
                                var i = e[a],
                                    n = t.soundList[a + 1];
                                t.soundSndMap[n] = i
                            }
                        },
                        this),
                    this._inited = !0
            }
        },
        i.initSkillMusic = function(t, e) {
            var a = this;
            if (!this.skillMusicMap) {
                this.skillMusicMap = {};
                for (var i = {},
                        n = [], s = 0, r = SkilldataParser.GetInstance().getDataArr(); s < r.length; s++) {
                    var o = r[s];
                    if ("" != o.sound && !i[o.sound]) {
                        var l = Path.audioUrl + o.sound + ".mp3";
                        n.push(l),
                            i[o.sound] = !0
                    }
                }
                ResLoader.instance.preLoadResList(n,
                    function(i) {
                        for (var n = 0; n < i.length; ++n) {
                            var s = i[n];
                            a.skillMusicMap[SkilldataParser.GetInstance().getDataArr()[n].sound] = s
                        }
                        Utils.call(t, e)
                    },
                    this)
            }
            Utils.call(t, e)
        },
        i.playMusic = function(t) {
            if (this.currentPlayMusic != t || !this._isMusicPlaying) {
                this.stopMusic(),
                    Log.logZDY("music volume:", this._bgVolume);
                var e = this.musicSndMap[this.musicList[t]];
                if (this.currentPlayMusic = t, e && this.isMusicOn) {
                    var a = e.play(0, -1);
                    return a.volume = this._bgVolume,
                        this._currentMusicChannel = a,
                        this._isMusicPlaying = !0,
                        a
                }
            }
        },
        i.stopMusic = function() {
            this._isMusicPlaying && (this._isMusicPlaying = !1, this._currentMusicChannel.stop(), this._currentMusicChannel = void 0, this.currentPlayMusic = void 0)
        },
        i.playSound = function(t, e) {
            void 0 === e && (e = !1);
            var a = this.soundSndMap[this.soundList[t]];
            if (this.currentPlayMusic = t, a && this.isEffectOn) {
                var i = a.play(0, e ? -1 : 1);
                return i.volume = this._effectVolume,
                    i
            }
        },
        i.playSkillSound = function(t) {
            var e = this.skillMusicMap[t];
            if (e && this.isEffectOn) {
                var a = e.play(0, 1);
                return a.volume = this._effectVolume,
                    a
            }
        },
        t.instance = new t,
        t.MUSIC_MAIN_UI = 1,
        t.MUSIC_CAMPBATTLE = 2,
        t.SOUND_CLOSE_BTN = 1,
        t.SOUND_OPEN_BOX = 2,
        t.SOUND_PARTS_FJ = 3,
        t.SOUND_SHIPS_GZ = 4,
        t.SOUND_PARTS_SJ = 5,
        t.SOUND_BTN = 6,
        t.SOUND_BATTLE_BTN = 7,
        t.SOUND_HAV_PAPER_ONE = 8,
        t.SOUND_HAV_PAPER_TEN = 9,
        t.SOUND_BATTLE_CHENMO = 10,
        t.SOUND_BATTLE_MISS = 11,
        t.SOUND_BATTLE_MINGZHONG = 12,
        t.SOUND_BATTLE_NORMAL_YULEI = 13,
        t.SOUND_BATTLE_NORMAL_HUOPAO = 14,
        t.SOUND_BATTLE_NORMAL_FEIJI = 15,
        t.SOUND_BATTLE_WENZI = 16,
        t.SOUND_BATTLE_HUANJING = 17,
        t.SOUND_BATTLE_DALEI_1 = 18,
        t.SOUND_BATTLE_DALEI_2 = 19,
        t.SOUND_BATTLE_DALEI_3 = 20,
        t.SOUND_BATTLE_BAOFENG = 21,
        t.SOUND_BATTLE_LVL_UP = 22,
        t.SOUND_BATTLE_WIN = 23,
        t.SOUND_BATTLE_LOSE = 24,
        t.SOUND_BATTLE_HAIDI = 25,
        t.SOUND_BATTLE_YULEI_MZ = 26,
        t.SOUND_BATTLE_FJQF = 27,
        t.SOUND_SHIPS_SC = 28,
        t.SOUND_SHIPS_TY = 29,
        t.SOUND_GUAKAJIESUO = 30,
        t.SOUND_GET_OIL = 31,
        t.SOUND_ZHOUN_LIPAO = 32,
        t
}();
egret.registerClass(AudioManager, "AudioManager");
var BattleType;
!
function(t) {
    t[t.BATTLE_TYPE_GUIDE = 0] = "BATTLE_TYPE_GUIDE",
        t[t.BATTLE_TYPE_MAIN_PVE = 1] = "BATTLE_TYPE_MAIN_PVE",
        t[t.BATTLE_TYPE_MAIN_SPECIAL = 2] = "BATTLE_TYPE_MAIN_SPECIAL",
        t[t.BATTLE_TYPE_ARENA = 3] = "BATTLE_TYPE_ARENA",
        t[t.BATTLE_TYPE_PRESSURE = 4] = "BATTLE_TYPE_PRESSURE",
        t[t.BATTLE_TYPE_TRANSPORT = 5] = "BATTLE_TYPE_TRANSPORT",
        t[t.BATTLE_TYPE_VIRTUAL = 7] = "BATTLE_TYPE_VIRTUAL",
        t[t.BATTLE_TYPE_ROBBERY = 8] = "BATTLE_TYPE_ROBBERY",
        t[t.BATTLE_TYPE_GUARD_OIL = 9] = "BATTLE_TYPE_GUARD_OIL",
        t[t.BATTLE_TYPE_CAMP = 10] = "BATTLE_TYPE_CAMP",
        t[t.BATTLE_TYPE_EMAIL_REPLAY = 10] = "BATTLE_TYPE_EMAIL_REPLAY",
        t[t.BATTLE_TYPE_GLOBALCAMP = 11] = "BATTLE_TYPE_GLOBALCAMP",
        t[t.BATTLE_TYPE_GLOBALARENA = 12] = "BATTLE_TYPE_GLOBALARENA",
        t[t.BATTLE_TYPE_GOLDISLAND = 20] = "BATTLE_TYPE_GOLDISLAND",
        t[t.BATTLE_TYPE_POLT = 21] = "BATTLE_TYPE_POLT",
        t[t.BATTLE_TYPE_GUILD = 13] = "BATTLE_TYPE_GUILD",
        t[t.BATTLE_TYPE_CHALLENGEARMADA = 14] = "BATTLE_TYPE_CHALLENGEARMADA",
        t[t.BATTLE_TYPE_WORLDBATTLE_REPLAY = 15] = "BATTLE_TYPE_WORLDBATTLE_REPLAY",
        t[t.BATTLE_TYPE_ZONGHENG = 16] = "BATTLE_TYPE_ZONGHENG",
        t[t.BATTLE_TYPE_GLOBAL_GUILD = 33] = "BATTLE_TYPE_GLOBAL_GUILD"
}(BattleType || (BattleType = {}));
var BattleManager = function() {
    function t() {
        this.ZH_power = 0,
            this.fitst_base_exp = 0,
            this.fitst_base_gold = 0,
            this.initEvents()
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(t, "instance",
            function() {
                return t._instance || (t._instance = new t),
                    t._instance
            }),
        i.initEvents = function() {
            var t = this;
            EventManager.instance.addEventListener(EventTypes.EVENT_BATTLE_INFO,
                    function(e) {
                        t.pkg = e,
                            t.battlePlay(e, !1)
                    },
                    this),
                EventManager.instance.addEventListener(EventTypes.BATTLE_ACTION_END,
                    function() {
                        t.actionProcess()
                    },
                    this)
        },
        i.OnBattleStart = function(t) {
            this.setSavedBattleSpeed(),
                t.result && Log.logZDY("===========pkg.result:" + t.result + ",type:" + t.type),
                t.droplist && Log.logZDY("===========pkg.dropList:" + t.droplist.droplist.length + ",exp:" + t.exp + ",gold:" + t.gold + ",star:" + t.star),
                t.result > 0 ? (1 == t.result ? Toast.launch(Locales.get("battleResult_" + t.result)) : 2 == t.result ? Toast.launch(Locales.get("battleResult_" + t.result)) : 3 == t.result ? this.battleType == BattleType.BATTLE_TYPE_ROBBERY ? Toast.launch(Locales.get("battleResult_qiangduo")) : Toast.launch(Locales.get("zz_oilalert")) : 4 == t.result ? Toast.launch(Locales.get("battleResult_" + t.result)) : 5 == t.result ? Toast.launch(Locales.get("battleResult_" + t.result)) : 6 == t.result ? Toast.launch(Locales.get("battleResult_" + t.result)) : 8 == t.result ? Toast.launch(Locales.get("battleResult_" + t.result)) : 9 == t.result ? Toast.launch(Locales.get("battleResult_" + t.result)) : 10 == t.result || 11 == t.result && Toast.launch(Locales.get("battleResult_" + t.result)), this.hideCloud(), this.existBattle()) : (this.copyBattleInfo(t), this.battleInit(t), this.loadShips())
        },
        i.initTeamInfo = function(t, e) {
            t.uid == UserData.getInstance().uid ? (this.mine = BattleTeamOptData.processDataByTacticInfo(t), this.enemy = BattleTeamOptData.processDataByTacticInfo(e)) : (this.mine = BattleTeamOptData.processDataByTacticInfo(e), this.enemy = BattleTeamOptData.processDataByTacticInfo(t))
        },
        i.initMainBattle = function(t, e, a, i, n, s) {
            this.battleType = BattleType.BATTLE_TYPE_MAIN_PVE,
                MainWorldManager.instance.getNormalStageData() ? (WeatherManager.RandomList = MainWorldManager.instance.getNormalStageData().baseData.weather, BattleMapSystem.instance.setBattleMapType(MainWorldManager.instance.getNormalStageData().baseData.background)) : (WeatherManager.RandomList = [1, 2, 3], BattleMapSystem.instance.setBattleMapType(BattleMapType.MAP_NORMAL)),
                this.initTeamInfo(t, e);
            var r = DropOptData.processData(a);
            this.battleResult = {
                    dropList: r,
                    exp: i,
                    gold: n,
                    star: s,
                    isSpecal: !1
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.initPressureBattle = function(t, e, a, i, n, s, r, o) {
            Log.logZDY("=========initPressureBattle========"),
                this.battleType = BattleType.BATTLE_TYPE_PRESSURE;
            var l = StagespecialdataParser.GetInstance().getItemById(e.uid);
            WeatherManager.RandomList = l.weather,
                BattleMapSystem.instance.setBattleMapType(l.background),
                this.initTeamInfo(t, e);
            var h = DropOptData.processData(a);
            this.battleResult = {
                    dropList: h,
                    exp: i,
                    gold: n,
                    star: s,
                    scence: r,
                    guildextraplusPer: o
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.initTransportBattle = function(t, e, a, i, n, s, r, o) {
            Log.logZDY("=========initTransportBattle========"),
                this.battleType = BattleType.BATTLE_TYPE_TRANSPORT;
            var l = StagespecialdataParser.GetInstance().getItemById(e.uid);
            WeatherManager.RandomList = l.weather,
                BattleMapSystem.instance.setBattleMapType(l.background),
                this.initTeamInfo(t, e);
            var h = DropOptData.processData(a);
            this.battleResult = {
                    dropList: h,
                    exp: i,
                    gold: n,
                    star: s,
                    scence: r,
                    guildextraplusPer: o
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.initRobbertyBattle = function(t, e, a, i, n, s) {
            Log.logZDY("=========initRobbertyBattle========"),
                this.battleType = BattleType.BATTLE_TYPE_ROBBERY,
                WeatherManager.RandomList = WeatherManager.instance.getRandomWeather(),
                BattleMapSystem.instance.setBattleMapType(BattleMapSystem.instance.getMapRandom()),
                this.initTeamInfo(t, e);
            var r = DropOptData.processData(a);
            this.battleResult = {
                    dropList: r,
                    exp: i,
                    gold: n,
                    star: s
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.initGuardOilBattle = function(t, e, a, i, n, s, r) {
            Log.logZDY("=========initGuardOilBattle========"),
                this.battleType = BattleType.BATTLE_TYPE_GUARD_OIL,
                WeatherManager.RandomList = WeatherManager.instance.getRandomWeather(),
                BattleMapSystem.instance.setBattleMapType(BattleMapType.MAP_NORMAL),
                this.mine = BattleTeamOptData.processDataByTacticInfo(t),
                this.enemy = BattleTeamOptData.processDataByTacticInfo(e);
            var o = DropOptData.processData(a);
            this.battleResult = {
                    dropList: o,
                    exp: i,
                    gold: n,
                    star: s,
                    condition: r
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.initMainSpecialBattle = function(t, e, a, i, n, s) {
            Log.logZDY("=========initMainSpecialBattle========"),
                this.battleType = BattleType.BATTLE_TYPE_MAIN_SPECIAL,
                WeatherManager.RandomList = MainWorldManager.instance.bakeSpecialData.weather,
                BattleMapSystem.instance.setBattleMapType(MainWorldManager.instance.bakeSpecialData.background),
                this.initTeamInfo(t, e);
            var r = DropOptData.processData(a);
            this.battleResult = {
                    dropList: r,
                    exp: i,
                    gold: n,
                    star: s
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.initChallengsBattle = function(e, a, i, n, s, r, o) {
            Log.logZDY("=========initChallengsBattle========"),
                this.battleType = BattleType.BATTLE_TYPE_CHALLENGEARMADA,
                WeatherManager.RandomList = WeatherManager.instance.getRandomWeather(),
                BattleMapSystem.instance.setBattleMapType(BattleMapSystem.instance.getMapRandom()),
                t.replay_flag = !1,
                this.mine = BattleTeamOptData.processDataByTacticInfo(e),
                this.enemy = BattleTeamOptData.processDataByTacticInfo(a);
            var l = DropOptData.processData(i);
            this.battleResult = {
                    dropList: l,
                    exp: n,
                    gold: s,
                    star: r,
                    dmg: o,
                    isSpecal: !1
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.initArenaBattle = function(t, e, a, i, n, s, r) {
            Log.logZDY("=========initArenaBattle========"),
                this.battleType = BattleType.BATTLE_TYPE_ARENA,
                WeatherManager.RandomList = WeatherManager.instance.getRandomWeather(),
                BattleMapSystem.instance.setBattleMapType(BattleMapSystem.instance.getMapRandom()),
                this.initTeamInfo(t, e),
                this.battleResult = {
                    dropList: [],
                    exp: i,
                    gold: n,
                    star: s,
                    honour: r
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.EmailRepalybattleInit = function(e, a) {
            this.battleType = BattleType.BATTLE_TYPE_EMAIL_REPLAY,
                WeatherManager.RandomList = WeatherManager.instance.getRandomWeather(),
                BattleMapSystem.instance.setBattleMapType(BattleMapSystem.instance.getMapRandom()),
                t.replay_flag = !0,
                this.mine = BattleTeamOptData.processDataByTacticInfo(e),
                this.enemy = BattleTeamOptData.processDataByTacticInfo(a),
                MailManager.getInstance().atkInfo = e,
                MailManager.getInstance().defInfo = a,
                this.battleResult = {
                    dropList: [],
                    exp: 0,
                    gold: 0,
                    star: 0
                },
                SceneManager.instance.SwitchScene(SceneType.BATTLE, !0)
        },
        i.battleInit = function(t) {
            var e = t.droplist ? t.droplist.droplist : [];
            if (t.type == BattleType.BATTLE_TYPE_MAIN_PVE) this.initMainBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star);
            else if (t.type == BattleType.BATTLE_TYPE_MAIN_SPECIAL) this.initMainSpecialBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star);
            else if (t.type == BattleType.BATTLE_TYPE_ARENA) MainWorldManager.oldStar = 0,
                this.initArenaBattle(t.atkTac, t.defTac, null, t.exp, t.gold, t.star, t.militaryhonour);
            else if (t.type == BattleType.BATTLE_TYPE_PRESSURE) {
                MainWorldManager.oldStar = 0;
                var a = t.targetID;
                4 > a ? this.initPressureBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star, t.scence, t.guildextraplusPer) : this.initTransportBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star, t.scence, t.guildextraplusPer)
            } else t.type == BattleType.BATTLE_TYPE_TRANSPORT ? (MainWorldManager.oldStar = 0, this.initTransportBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star, t.scence, t.guildextraplusPer)) : t.type == BattleType.BATTLE_TYPE_ROBBERY ? (MainWorldManager.oldStar = 0, this.initRobbertyBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star)) : t.type == BattleType.BATTLE_TYPE_GUARD_OIL ? (MainWorldManager.oldStar = 0, this.initGuardOilBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star, t.condition)) : t.type == BattleType.BATTLE_TYPE_CAMP ? CampBattleManager.instance.showBattleOver(t) : t.type == BattleType.BATTLE_TYPE_GLOBALCAMP || t.type == BattleType.BATTLE_TYPE_GUILD || (t.type == BattleType.BATTLE_TYPE_CHALLENGEARMADA ? this.initChallengsBattle(t.atkTac, t.defTac, e, t.exp, t.gold, t.star, t.dmg) : t.type == BattleType.BATTLE_TYPE_ZONGHENG);
            EffectManager.instance.initProjectiles()
        },
        i.clearLoadedFlags = function() {
            this.loadedShips = !1,
                this.loadedBattleEffects = !1,
                this.loadedDragonEffects = !1,
                this.loadedSkillEffects = !1,
                this.loadedMapEffect = !1,
                this.loadedProjectileEffects = !1
        },
        i.checkLoadedFlags = function() {
            var e = this;
            if (this.loadedShips && this.loadedMapEffect && this.loadedProjectileEffects && this.pkg) {
                Log.log("battlePlay1");
                var a = this.pkg,
                    i = function() {
                        Log.log("battlePlay2"),
                            e.battleRound = a.info.roundlist,
                            e.battleMaxNum = e.battleRound.length,
                            e.battleCurNum = 1,
                            t.instance.startBattle(),
                            BattleUI.instance.battleRoundChange(e.battleCurNum, e.battleMaxNum)
                    };
                this.isCloudShow ? t.instance.hideCloud(i, this) : i(),
                    this.pkg = null
            }
        },
        i.loadShips = function() {
            var t = this,
                e = [];
            if (this.mine)
                for (var a = 0,
                        i = this.mine.list; a < i.length; a++) {
                    var n = i[a],
                        s = Path.shipModelUrl + n.modelData.url;
                    e.indexOf(s) < 0 && e.push(s)
                }
            if (this.enemy)
                for (var r = 0,
                        o = this.enemy.list; r < o.length; r++) {
                    var n = o[r],
                        s = Path.shipModelUrl + n.modelData.url;
                    e.indexOf(s) < 0 && e.push(s)
                }
            e.length > 0 ? ResLoader.instance.preLoadResList(e,
                function() {
                    t.loadedShips = !0,
                        t.checkLoadedFlags()
                },
                this) : (this.loadedShips = !0, this.checkLoadedFlags())
        },
        i.showCloud = function(t, e) {
            var a = this;
            if (!this.isCloudShow) {
                this.isCloudShow = !0,
                    this.cloudMask = new eui.Group,
                    this.cloudMask.width = GameData.designWidth,
                    this.cloudMask.height = GameData.designHeight,
                    this.cloudMask.touchEnabled = !0,
                    GameLayer.getInstance().topLayer.addChild(this.cloudMask);
                var i = Path.battleEffectUrl + "cloudData.json",
                    n = Path.battleEffectUrl + "cloud.png",
                    s = Path.battleEffectUrl + "cloud.json";
                ResLoader.instance.preLoadResList([n, s, i],
                    function(i) {
                        if (a.isCloudShow) {
                            var n = i[0],
                                s = i[1],
                                r = i[2],
                                o = new dragonBones.EgretFactory;
                            o.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(r)),
                                o.addTextureAtlas(new dragonBones.EgretTextureAtlas(n, s));
                            var l = o.buildArmature("Stage");
                            if (dragonBones.WorldClock.clock.add(l), l.animation.gotoAndPlay("close", void 0, void 0, 1), t) {
                                var h;
                                h = function() {
                                        Utils.call(t, e),
                                            l.removeEventListener(dragonBones.AnimationEvent.COMPLETE, h, void 0)
                                    },
                                    l.addEventListener(dragonBones.AnimationEvent.COMPLETE, h, void 0)
                            }
                            a.factory = o,
                                a.cloudAnim = l,
                                GameLayer.getInstance().topLayer.addChild(a.cloudAnim.display)
                        }
                    },
                    this)
            }
        },
        i.hideCloud = function(t, e) {
            var a = this;
            this.isCloudShow && (this.isCloudShow = !1, this.cloudAnim ? (this.cloudAnim.animation.gotoAndPlay("open", void 0, void 0, 1), this.cloudAnim.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                function() {
                    dragonBones.WorldClock.clock.remove(a.cloudAnim),
                        Utils.removeNode(a.cloudAnim.display),
                        a.cloudAnim = null,
                        a.factory && (a.factory.dispose(!0), a.factory = null),
                        Utils.removeNode(a.cloudMask),
                        a.cloudMask = null;
                    var i = Path.battleEffectUrl + "cloudData.json",
                        n = Path.battleEffectUrl + "cloud.png",
                        s = Path.battleEffectUrl + "cloud.json";
                    ResLoader.instance.unloadResList([i, n, s]),
                        Utils.call(t, e)
                },
                this)) : Utils.call(t, e))
        },
        i.sendMainBattleStart = function(t) {
            this.currentStage = t,
                this.battleType = BattleType.BATTLE_TYPE_MAIN_PVE,
                RequestManager.GetInstance().enterBattle(BattleType.BATTLE_TYPE_MAIN_PVE, t, 0)
        },
        i.battlePlay = function(e, a) {
            var i = this;
            void 0 === a && (a = !0),
                this.copyBattleRound(e),
                Log.log("battlePlay1");
            var n = function() {
                Log.log("battlePlay2"),
                    i.battleRound = e.info.roundlist,
                    i.battleMaxNum = i.battleRound.length,
                    i.battleCurNum = 1,
                    t.instance.startBattle(),
                    BattleUI.instance.battleRoundChange(i.battleCurNum, i.battleMaxNum)
            };
            a ? EffectManager.instance.initSkillEffect(function() {
                    i.isCloudShow ? t.instance.hideCloud(n, i) : n()
                },
                this) : EffectManager.instance.initSkillEffect()
        },
        i.startBattle = function(e) {
            return void 0 === e && (e = !1), !this.battleRound && e ? void Log.logZDY("skip startBattle") : (1 != GuideManager.step || e ? (t.isStop = !1, t.isStart = !0) : (t.isStop = !0, t.isStart = !1), Log.logZDY("startBattle", t.isStop, t.isStart), void Utils.delayCall(1e3,
                function() {
                    EventManager.instance.dispatchEvent(EventTypes.BATTLE_ACTION_END)
                }))
        },
        i.copyBattleRound = function(t) {
            var e = {
                    info: {
                        roundlist: []
                    }
                },
                a = null,
                i = null;
            this.skillList = [];
            for (var n = 0,
                    s = t.info.roundlist.length; s > n; ++n) {
                a = {
                    roundid: t.info.roundlist[n].roundid,
                    actionlist: []
                };
                for (var r = 0,
                        o = t.info.roundlist[n].actionlist.length; o > r; ++r) i = t.info.roundlist[n].actionlist[r],
                    a.actionlist.push(i),
                    this.skillList.push(i.skillid);
                e.info.roundlist.push(a)
            }
            this.battleRoundCopy = e
        },
        i.copyTacticInfo = function(t) {
            var e = {};
            if (t) {
                e.uid = t.uid,
                    e.shiplist = [];
                for (var a = 0; a < t.shiplist.length; ++a) e.shiplist.push(t.shiplist[a]);
                e.captionid = t.captionid,
                    e.name = t.name,
                    e.camp = t.camp,
                    e.head = t.head,
                    e.power = t.power,
                    e.guildname = t.guildname,
                    e.level = t.level,
                    e.militaryrank = t.militaryrank,
                    e.viplevel = t.viplevel,
                    e.reserveshiplist = [];
                for (var a = 0; a < t.reserveshiplist.length; ++a) e.reserveshiplist.push(t.reserveshiplist[a])
            }
            return e
        },
        i.copyCampbattle = function(t) {
            var e = {};
            return t && (e.morale = t.morale, e.targetmorale = t.targetmorale, e.bloodper = t.bloodper, e.attackerblood = t.attackerblood, e.defenderblood = t.defenderblood, e.attackername = t.attackername, e.defendername = t.defendername, e.campbattlescore = t.campbattlescore, e.attacknum = t.attacknum, e.winningsteak = t.winningsteak, e.kill = t.kill, e.port = t.port),
                e
        },
        i.copyDropList = function(t) {
            var e = {
                droplist: []
            };
            if (t)
                for (var a = 0; a < t.droplist.length; ++a) e.droplist.push(t.droplist[a]);
            return e
        },
        i.copyBattleInfo = function(t) {
            this.battleInfoCopy = {},
                this.battleInfoCopy.type = t.type,
                this.battleInfoCopy.result = t.result,
                this.battleInfoCopy.targetID = t.targetID,
                this.battleInfoCopy.rank = t.rank,
                this.battleInfoCopy.atkTac = this.copyTacticInfo(t.atkTac),
                this.battleInfoCopy.defTac = this.copyTacticInfo(t.defTac),
                this.battleInfoCopy.droplist = this.copyDropList(t.droplist),
                this.battleInfoCopy.exp = t.exp,
                this.battleInfoCopy.gold = t.gold,
                this.battleInfoCopy.star = t.star,
                this.battleInfoCopy.condition = t.condition,
                this.battleInfoCopy.militaryhonour = t.militaryhonour,
                this.battleInfoCopy.campbattle = this.copyCampbattle(t.campbattle),
                this.battleInfoCopy.scence = t.scence,
                this.battleInfoCopy.guildextraplusPer = t.guildextraplusPer,
                this.battleInfoCopy.dmg = t.dmg
        },
        i.actionProcess = function() {
            t.isStop || (null == this.currentRound && (this.battleRound.length > 0 ? (this.currentRound = this.battleRound[0], this.battleCurNum = this.battleMaxNum - this.battleRound.length + 1, BattleUI.instance.battleRoundChange(this.battleCurNum, this.battleMaxNum)) : Utils.delayCall(.5 * t.PLAYFRAMES,
                function() {
                    t.instance.endBattle()
                })), this.currentRound && (Log.logZDY("========battleAction." + this.currentRound.actionlist.length + "==========", this.battleCurNum), this.currentRound.actionlist.length > 0 ? (this.currentAction = this.currentRound.actionlist.shift(), EventManager.instance.dispatchEvent(EventTypes.BATTLE_ACTION_START, this.currentAction)) : (this.currentRound = null, this.battleRound.shift(), t.instance.actionProcess())))
        },
        i.endBattle = function(e) {
            var a = this;
            Log.logZDY("==========battleEnd============"),
                t.isStop = !0,
                t.isStart = !1,
                HandbookManager.instance.checkMsg(),
                ResLoader.instance.loadResGroup("BattleAccount",
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.BattleResult, a.battleResult)
                    },
                    this)
        },
        i.clearBattle = function() {
            this.battleRound = null,
                this.currentRound = null,
                this.currentAction = null,
                this.battleResult = null,
                this.mine = null,
                this.enemy = null,
                this.skillList = null
        },
        i.getSkillList = function() {
            return this.skillList
        },
        i.setNodeRotation = function(t, e, a, i, n, s) {
            var r = Math.atan2(n - a, i - e);
            r = r / Math.PI * 180,
                t ? s.rotation = r : s.rotation = r
        },
        i.sceneSwitch = function(e, a, i) {
            var n = this;
            void 0 === i && (i = !0),
                this.battleInfoCopy = null,
                this.battleRoundCopy = null,
                SceneManager.instance.SwitchScene(SceneType.HOME, !1,
                    function() {
                        EffectManager.instance.clearEffect(),
                            UserData.getInstance().sendDetailMessage(),
                            n.battleType == BattleType.BATTLE_TYPE_MAIN_PVE ? (t.isNextStage = !1, i && (MainWorldManager.instance.openPVEWindow(), Utils.delayCall(1,
                                function() {
                                    MainUI.instance.bottomUI.moveSelectFrameToBtn("btnPVE")
                                }))) : n.battleType == BattleType.BATTLE_TYPE_MAIN_SPECIAL ? (t.isNextStage = !1, i && MainWorldManager.instance.openPVESpecialWindow()) : n.battleType == BattleType.BATTLE_TYPE_ARENA ? i && (WindowManager.getInstance().show(WindowManager.windowType.Zhenba), WindowManager.getInstance().show(WindowManager.windowType.PVP), Utils.delayCall(1,
                                function() {
                                    MainUI.instance.bottomUI.moveSelectFrameToBtn("btnPVP")
                                })) : n.battleType == BattleType.BATTLE_TYPE_ZONGHENG || (n.battleType == BattleType.BATTLE_TYPE_ROBBERY ? (WindowBattleResult.OldRandomItemData = void 0, i && (WindowManager.getInstance().show(WindowManager.windowType.Zhenba), WindowManager.getInstance().show(WindowManager.windowType.ZhenbaPrecious, {
                                auto: !0
                            }), Utils.delayCall(1,
                                function() {
                                    MainUI.instance.bottomUI.moveSelectFrameToBtn("btnPVP")
                                }))) : n.battleType == BattleType.BATTLE_TYPE_PRESSURE ? i && (WindowManager.getInstance().show(WindowManager.windowType.Zhenba), WindowManager.getInstance().show(WindowManager.windowType.ZhenbaEctype, {
                                auto: !0
                            }), Utils.delayCall(1,
                                function() {
                                    MainUI.instance.bottomUI.moveSelectFrameToBtn("btnPVP")
                                })) : n.battleType == BattleType.BATTLE_TYPE_TRANSPORT ? i && (WindowManager.getInstance().show(WindowManager.windowType.Zhenba), WindowManager.getInstance().show(WindowManager.windowType.ZhenbaEctype, {
                                auto: !0
                            }), Utils.delayCall(1,
                                function() {
                                    MainUI.instance.bottomUI.moveSelectFrameToBtn("btnPVP")
                                })) : n.battleType == BattleType.BATTLE_TYPE_GUARD_OIL ? i && (WindowManager.getInstance().show(WindowManager.windowType.Zhenba), WindowManager.getInstance().show(WindowManager.windowType.DefenseOil), Utils.delayCall(1,
                                function() {
                                    MainUI.instance.bottomUI.moveSelectFrameToBtn("btnPVP")
                                })) : n.battleType == BattleType.BATTLE_TYPE_GLOBALARENA || n.battleType == BattleType.BATTLE_TYPE_POLT || n.battleType == BattleType.BATTLE_TYPE_GOLDISLAND || (n.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY ? i && WindowManager.getInstance().show(WindowManager.windowType.Mail) : n.battleType == BattleType.BATTLE_TYPE_WORLDBATTLE_REPLAY || n.battleType == BattleType.BATTLE_TYPE_GLOBAL_GUILD || n.battleType == BattleType.BATTLE_TYPE_CHALLENGEARMADA && i && (WindowManager.getInstance().show(WindowManager.windowType.Zhenba), WindowManager.getInstance().show(WindowManager.windowType.QiJvTou), Utils.delayCall(1,
                                function() {
                                    MainUI.instance.bottomUI.moveSelectFrameToBtn("btnPVP")
                                })))),
                            Utils.call(e, a)
                    })
        },
        i.existBattle = function(e, a, i) {
            void 0 === i && (i = !0),
                this.setBattleSpeed(1),
                t.replay_flag = !1,
                MainWorldManager.newStar = 0,
                WeatherManager.instance.clear(),
                t.instance.clearBattle(),
                (3 == GuideManager.step || 15 == GuideManager.step || 31 == GuideManager.step || 40 == GuideManager.step) && (this.battleType = BattleType.BATTLE_TYPE_GUIDE, GuideManager.nextStep()),
                this.sceneSwitch(function() {
                        Utils.call(e, a),
                            UserData.getInstance().checkUpgrade(),
                            HandbookManager.instance.checkMsg()
                    },
                    void 0, i)
        },
        i.clearBattleforGoldIsland = function() {
            this.battleRound = null,
                this.currentRound = null,
                this.currentAction = null,
                this.battleResult = null,
                this.mine = null,
                this.enemy = null,
                this.skillList = null
        },
        i.getBattleType = function() {
            return this.battleType
        },
        i.setSavedBattleSpeed = function() {
            var e = UserDefault.instance.getStringForKey(t.BATTLE_SPEED_SAVE_STR);
            e = e ? parseInt(e) : 1,
                e > UserExpDataLib.instance.getSpeedUpLv(UserData.getInstance().getPlayerLevel()) && (e = UserExpDataLib.instance.getSpeedUpLv(UserData.getInstance().getPlayerLevel())),
                this.setBattleSpeed(e)
        },
        i.setBattleSpeed = function(e, a) {
            void 0 === a && (a = !1),
                1 == e ? t.PLAYFRAMES = t.BATTLE_SPEED_X1 : 2 == e ? t.PLAYFRAMES = t.BATTLE_SPEED_X2 : 3 == e && (t.PLAYFRAMES = t.BATTLE_SPEED_X3),
                t.CURRENT_SPEED_TYPE = e,
                1 == a && (UserDefault.instance.setStringForKey(t.BATTLE_SPEED_SAVE_STR, e), Log.logZDY("===========setSpeed============"))
        },
        i.replay = function() {
            t.replay_flag = !0,
                this.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY ? (this.EmailRepalybattleInit(MailManager.getInstance().pkg.atkTac, MailManager.getInstance().pkg.defTac), this.battlePlay(this.battleRoundCopy)) : this.battleType == BattleType.BATTLE_TYPE_WORLDBATTLE_REPLAY ? this.battlePlay(this.battleRoundCopy) : this.battleType == BattleType.BATTLE_TYPE_GLOBAL_GUILD ? this.battlePlay(this.battleRoundCopy) : this.battleType == BattleType.BATTLE_TYPE_GOLDISLAND || this.battleType == BattleType.BATTLE_TYPE_POLT || (this.battleInit(this.battleInfoCopy), this.battlePlay(this.battleRoundCopy))
        },
        i.checkEndButtonShow = function() {
            var e = !0;
            return this.battleType == BattleType.BATTLE_TYPE_MAIN_PVE ? (MainWorldManager.oldStar < 3 && (e = !1), 3 == MainWorldManager.newStar && (e = !0), 3 == MainWorldManager.oldStar && (e = !0), 1 == t.isNextStage && (e = !1)) : this.battleType == BattleType.BATTLE_TYPE_MAIN_SPECIAL ? (MainWorldManager.oldStar < 3 && (e = !1), 3 == MainWorldManager.newStar && (e = !0), 3 == MainWorldManager.oldStar && (e = !0), 1 == t.isNextStage && (e = !1)) : this.battleType == BattleType.BATTLE_TYPE_ARENA ? e = !0 : this.battleType == BattleType.BATTLE_TYPE_PRESSURE ? e = !0 : this.battleType == BattleType.BATTLE_TYPE_TRANSPORT ? e = !0 : this.battleType == BattleType.BATTLE_TYPE_GUARD_OIL ? (e = WindowDefenseOil.maxstage > WindowDefenseOil.curstage ? !0 : !1, 1 == VipParser.GetInstance().getItemById(UserData.getInstance()._vip).oilguardskip && (e = !0)) : this.battleType == BattleType.BATTLE_TYPE_VIRTUAL ? e = !0 : this.battleType == BattleType.BATTLE_TYPE_ROBBERY && (e = !0),
                e
        },
        i.checkFightisShow = function() {
            var t = !0;
            return this.battleType == BattleType.BATTLE_TYPE_CHALLENGEARMADA ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_ARENA ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_ZONGHENG ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_PRESSURE ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_TRANSPORT ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_GUARD_OIL ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_ROBBERY || (this.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_WORLDBATTLE_REPLAY ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_GLOBAL_GUILD ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_GOLDISLAND ? t = !1 : this.battleType == BattleType.BATTLE_TYPE_POLT && (t = !1)),
                UserData.getInstance().getPlayerLevel() < 20 && this.battleType != BattleType.BATTLE_TYPE_ROBBERY && (t = !1),
                t
        },
        i.checkReplayShow = function() {
            return this.battleType != BattleType.BATTLE_TYPE_GOLDISLAND
        },
        i.quickFight = function(e) {
            void 0 === e && (e = void 0);
            var a = null;
            if (a = e, this.battleType == BattleType.BATTLE_TYPE_MAIN_PVE)
                if (a) {
                    var i = StagedataParser.GetInstance().getItemById(a),
                        n = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype()),
                        s = 2 * i.exp,
                        r = 2 * i.gold,
                        o = 0,
                        l = 0;
                    if (n)
                        for (var h = n.privilege,
                                c = 0,
                                d = h; c < d.length; c++) {
                            var g = d[c],
                                u = MilitaryrightsParser.GetInstance().getItemById(g);
                            1 == u.righttype && (1 == u.numtype ? o += s * u.num / 1e3 : 2 == u.numtype && (o += u.num)),
                                10 == u.righttype && (1 == u.numtype ? l += r * u.num / 1e3 : 2 == u.numtype && (l += u.num))
                        }
                    for (var p = 0,
                            m = [], _ = 0, v = GuildManager.getInstance().GuildScienceList; _ < v.length; _++) {
                        var f = v[_];
                        m.push({
                            basedata: GuildscienceParser.GetInstance().getItemById(f.id),
                            data: f.level
                        })
                    }
                    var I = null;
                    m[1] && (I = GuildsciencedataParser.GetInstance().getItemById(m[1].data));
                    var T = 0;
                    I && (T = r * I["guildscience" + m[1].basedata.id + "Effect"] / 1e4),
                        I = null,
                        null != m[2] && (I = GuildsciencedataParser.GetInstance().getItemById(m[2].data));
                    var y = 0;
                    I && (y = s * I["guildscience" + m[2].basedata.id + "Effect"] / 1e4),
                        o = Math.ceil(o + p + y),
                        l = Math.ceil(l + T),
                        this.setFirstBaseData(s + o, r + l),
                        t.isNextStage = !0,
                        UnlockManager.NextStageID = a,
                        UnlockManager.StageId = a,
                        this.sendMainBattleStart(a);
                    var D = a.toString().substr(2, 2);
                    MainWorldManager.instance.sendEnterCampaign(Number(D), MainWorldManager.BATTLE_TYPE_NORMAL);
                    var P = StageDataLib.instance.getAreaIdById(a),
                        C = P.areaId,
                        E = P.campaignId,
                        S = (P.stageIndex, StageDataLib.instance.getCurrentActiveArea(C, E));
                    MainWorldManager.instance.clearLookArea(),
                        EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_SHOW_CAMPAIGN, S),
                        EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_BAKE, {
                            type: 1,
                            id: Number(D)
                        })
                } else this.sendMainBattleStart(this.currentStage);
            else if (this.battleType == BattleType.BATTLE_TYPE_MAIN_SPECIAL)
                if (null != a) {
                    t.isNextStage = !0,
                        t.instance.sendMainSpecialBattleStart(a);
                    var b = StagespecialdataParser.GetInstance().getItemById(a);
                    MainWorldManager.instance.sendEnterCampaign(0, MainWorldManager.BATTLE_TYPE_SPECIAL),
                        MainWorldManager.instance.clearLookArea(),
                        EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_BAKE, {
                            type: 2,
                            specialBaseData: b
                        })
                } else t.instance.sendMainSpecialBattleStart(this.currentCampain);
            else if (this.battleType == BattleType.BATTLE_TYPE_ARENA) {
                var L = ArenaManager.instance.rankData;
                if (L.remaincount <= 0);
                else {
                    var M = ArenaManager.instance.getQuickFight_value();
                    RequestManager.GetInstance().enterBattle(BattleType.BATTLE_TYPE_ARENA, M[0], M[1], M[2])
                }
            } else this.battleType == BattleType.BATTLE_TYPE_ROBBERY ? WindowPreciousBattle.preciousBattle() : this.battleType == BattleType.BATTLE_TYPE_PRESSURE ? WindowEctype.battleEctype() : this.battleType == BattleType.BATTLE_TYPE_TRANSPORT ? WindowEctype.battleEctype() : this.battleType == BattleType.BATTLE_TYPE_GUARD_OIL && WindowDefenseOil.resetBattleFun()
        },
        i.checkSpdUpLv = function(t) {
            var e = !1,
                a = UserExpDataLib.instance.checkSpeedUpLv(UserData.getInstance().getPlayerLevel(), t);
            return a[0] ? e = !0 : UserData.getInstance().getPlayerLevel() < 5 ? Toast.launch(Locales.get("ui_mainBattle_spdUpLvLmt", a[1], 2)) : UserData.getInstance().getPlayerLevel() < 25 && Toast.launch(Locales.get("ui_mainBattle_spdUpLvLmt", a[1], 3)),
                e
        },
        i.sendMainSweepBattleStart = function(t, e) {
            this.currentStage = t,
                RequestManager.GetInstance().enterSweepBattle(BattleType.BATTLE_TYPE_MAIN_PVE, this.currentStage, 0, e)
        },
        i.sendMainSpeSweepBattleStart = function(t, e) {
            this.currentStage = t,
                RequestManager.GetInstance().enterSweepBattle(BattleType.BATTLE_TYPE_MAIN_SPECIAL, this.currentStage, 0, e)
        },
        i.sendMainSpecialBattleStart = function(t) {
            this.currentCampain = t,
                UnlockManager.specialStageId = t,
                RequestManager.GetInstance().enterBattle(BattleType.BATTLE_TYPE_MAIN_SPECIAL, t, 0)
        },
        i.startVirtualBattle = function() {
            var t = VirtualBattleRoundDataLib.instance.getRoundData();
            this.battlePlay(t)
        },
        i.getNextStageId = function() {
            var e = void 0,
                a = t.instance.getCurrentStage(),
                i = t.instance.getBattleType();
            if (i == BattleType.BATTLE_TYPE_MAIN_PVE) {
                var n = t.instance.getCurrentStage();
                if (t.instance.getCurrentStage()) {
                    var s = Math.floor(n / 1e4),
                        r = Math.floor(n / 100) % 100,
                        o = n % 100,
                        l = null;
                    a = 1e4 * s + 100 * r + o + 1,
                        l = StagedataParser.GetInstance().getItemById(a),
                        l || (a = 1e4 * s + 100 * (r + 1) + 1, l = StagedataParser.GetInstance().getItemById(a)),
                        l || (a = 1e4 * (s + 1) + 100 * (r + 1) + 1, l = StagedataParser.GetInstance().getItemById(a)),
                        l && (e = MainStageOptData.IsWinStage(a))
                }
            } else if (i == BattleType.BATTLE_TYPE_MAIN_SPECIAL) {
                a = t.instance.getCurrentSpeStage() + 1;
                var l = StagespecialdataParser.GetInstance().getItemById(a);
                l && 0 == MainWorldManager.oldStar && (e = MainStageOptData.IsWinSpeStage(a))
            }
            return [e, a]
        },
        i.getLeftTeam = function() {
            return this.mine
        },
        i.getRightTeam = function() {
            return this.enemy
        },
        i.setCurrentStage = function(t) {
            this.currentStage = t
        },
        i.getCurrentStage = function() {
            return this.currentStage
        },
        i.getCurrentSpeStage = function() {
            return this.currentCampain
        },
        i.setFirstBaseData = function(t, e) {
            this.fitst_base_exp = t,
                this.fitst_base_gold = e
        },
        i.getFirstBaseExpData = function() {
            return this.fitst_base_exp
        },
        i.getFirstBaseGoldData = function() {
            return this.fitst_base_gold
        },
        i.getSweepCount = function(t, e, a) {
            void 0 === a && (a = 5);
            var i = 0,
                n = t.baseData.dayAtkCount - t.serverData.todayCount,
                s = VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).saodangcishu,
                r = s - UserData.getInstance().sweepcount;
            if (-1 != s) {
                var o = n > r ? r : n;
                i = a > o ? o : a
            } else i = n > a ? a : n;
            var l = Locales.get("panel_sweep_btn_saodang", i);
            return 0 == e && (l = Locales.get("panel_sweep_btn_saodang", 1)), [l, i]
        },
        i.SweepCountCheck = function(t) {
            var e = (t.baseData.dayAtkCount - t.serverData.todayCount, VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).saodangcishu),
                a = e - UserData.getInstance().sweepcount;
            return -1 != e ? a > 0 : !0
        },
        i.sweepCheck = function(t, e) {
            var a = !0;
            UserData.getInstance().getLeftSweepTimes() <= 0 && (a = !1, Toast.launch(Locales.get("panel_sweep_windword_1"), 16711680)),
                t.baseData.dayAtkCount - t.serverData.todayCount == 0 && (a = !1, Toast.launch(Locales.get("panel_sweep_windword_2"), 16711680));
            var i = 0;
            if (i = e ? t.baseData.costOil * e : t.baseData.costOil, i > UserData.getInstance().getRes(TypeDefine.RES.Oil)) {
                a = !1;
                var n = ItemsManager.getInstance().getItemById(1076);
                if (n && n.count > 0) {
                    var s = {};
                    s.title = Locales.get("panel_AlertLueduolingBuy_txt_comment_6"),
                        s.itemId = 1076,
                        WindowManager.getInstance().show(WindowManager.windowType.ItemUse, s)
                } else WindowManager.getInstance().show(WindowManager.windowType.OilRefining)
            }
            return a
        },
        i.checkCount = function(t, e) {
            1 == this.BuyCheck(t, e) && (1 == this.SweepCountCheck(t) ? Toast.launch(Locales.get("battleResult_saodang"), 16711680) : Toast.launch(Locales.get("battleResult_saodang_2"), 16711680))
        },
        i.BuyCheck = function(t, e) {
            if (0 == t.baseData.resetCount) return !0;
            var a = t,
                i = 0;
            return null != a.serverData && (i = a.serverData.todayCount),
                a.baseData.dayAtkCount - i == 0 ? a.serverData.todaybuyCnt == a.baseData.resetCount ? !0 : (WindowManager.getInstance().show(WindowManager.windowType.StageCountBuy, a), !1) : !0
        },
        t.BATTLE_SPEED_X1 = Const.FRAME_NUM_24 / Const.FRAME_NUM_24,
        t.BATTLE_SPEED_X2 = Const.FRAME_NUM_24 / Const.FRAME_MAX,
        t.BATTLE_SPEED_X3 = Const.FRAME_NUM_24 / Const.FRAME_MAX1,
        t.PLAYFRAMES = t.BATTLE_SPEED_X1,
        t.BATTLE_SPEED_SAVE_STR = "BattleSpeed",
        t.CURRENT_SPEED_TYPE = 1,
        t.replay_flag = !1,
        t.onemoreplay_flag_win = !1,
        t.onemoreplay_flag_lost = !1,
        t.isEmailReplay = !1,
        t.isNextStage = !1,
        t
}();
egret.registerClass(BattleManager, "BattleManager");
var BattleMapType;
!
function(t) {
    t[t.MAP_NONE = 0] = "MAP_NONE",
        t[t.MAP_NORMAL = 1] = "MAP_NORMAL",
        t[t.MAP_DESTROY = 2] = "MAP_DESTROY",
        t[t.MAP_BEACH = 3] = "MAP_BEACH",
        t[t.MAP_ISLAND = 4] = "MAP_ISLAND",
        t[t.MAP_ROCK = 5] = "MAP_ROCK",
        t[t.MAP_ICE = 6] = "MAP_ICE",
        t[t.MAP_END = 6] = "MAP_END"
}(BattleMapType || (BattleMapType = {}));
var BattleMapSystem = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.newMapTo = function(t, e) {
            var a = [],
                i = Path.mapEffectUrl + "sea/battle_map_base",
                n = 1,
                s = 0;
            t == BattleMapType.MAP_NORMAL ? (n = 1, s = 7) : t == BattleMapType.MAP_DESTROY ? (n = 2, s = 5) : t == BattleMapType.MAP_BEACH ? (n = 3, s = 8) : t == BattleMapType.MAP_ISLAND ? (n = 4, s = 8) : t == BattleMapType.MAP_ROCK ? (n = 5, s = 8) : t == BattleMapType.MAP_ICE && (n = 6, s = 8);
            for (var r = 1; s >= r; ++r) a.push(i + n + "_00" + r + ".jpg");
            ResLoader.instance.preLoadResList([a[0]],
                function() {
                    var t = new SimpleAnimation(a, 8, !0);
                    t.width = GameData.designWidth,
                        t.height = GameData.designHeight,
                        e.addChild(t),
                        t.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                            function() {
                                ResLoader.instance.unloadResList(a)
                            },
                            void 0),
                        BattleManager.instance.loadedMapEffect = !0,
                        BattleManager.instance.checkLoadedFlags()
                })
        },
        a.newRandomMapTo = function(t) {
            var e = Math.floor(Math.random() * BattleMapType.MAP_ICE + 1);
            7 == e && (e = 6),
                this.newMapTo(e, t)
        },
        a.setBattleMapType = function(t) {
            this._curMapType = t
        },
        a.initBattleMap = function(t) {
            this._curMapType && this._curMapType != BattleMapType.MAP_NONE || (this._curMapType = BattleMapType.MAP_NORMAL),
                Log.logZDY("battleMap:", this._curMapType),
                this.newMapTo(this._curMapType, t)
        },
        a.getCurrentMapType = function() {
            return this._curMapType
        },
        a.getMapRandom = function() {
            var t = Utils.randInt(1, BattleMapType.MAP_END);
            return t == BattleMapType.MAP_ISLAND && (t = BattleMapType.MAP_NORMAL),
                t
        },
        a.sendMainBattleStart = function(t) {
            RequestManager.GetInstance().enterBattle(BattleType.BATTLE_TYPE_MAIN_PVE, t, 0)
        },
        t.instance = new t,
        t
}();
egret.registerClass(BattleMapSystem, "BattleMapSystem");
var BlackListManager = function() {
    function t() {
        this.ObserverList = []
    }
    var e = (__define, t),
        a = e.prototype;
    return t.GetInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.setBlackList = function(t) {
            this.blackList = [];
            for (var e in t.blacklist) {
                var a = new BlackListData;
                a.uid = t.blacklist[e].uid,
                    a.name = t.blacklist[e].name,
                    a.head = t.blacklist[e].head,
                    a.isfriend = t.blacklist[e].isfriend,
                    a.issameguild = t.blacklist[e].issameguild,
                    a.level = t.blacklist[e].level,
                    a.power = t.blacklist[e].power,
                    a.viplevel = t.blacklist[e].viplevel,
                    a.militaryranktype = t.blacklist[e].militaryranktype,
                    this.blackList.push(a)
            }
            ChatManager.getInstance(),
                this.blackListChange();
            var i = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
            i && GuildManager.getInstance().sendGuildMemberList()
        },
        a.getBlackList = function() {
            return this.blackList
        },
        a.isInBlackList = function(t) {
            if (void 0 === t && (t = ""), 0 == t.length) return !1;
            var e = !1;
            for (var a in this.blackList) this.blackList[a].uid == t && (e = !0);
            return e
        },
        a.blackListChange = function() {
            for (var t in this.ObserverList) this.ObserverList[t].blackListUpdate()
        },
        a.addToObserverList = function(t) {
            this.ObserverList.push(t)
        },
        t
}();
egret.registerClass(BlackListManager, "BlackListManager");
var BlackListData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(BlackListData, "BlackListData");
var BroadCastManager = function() {
    function t() {
        this.RadioList = [],
            this.box_color = ["ffffff", "00f82f", "00c6ff", "ff2cfd", "ffc12c"]
    }
    var e = (__define, t),
        a = e.prototype;
    return a.addRadio = function(t) {
            var e = this,
                a = {};
            1 == t.type || (2 == t.type ? ConfigData.preLoadDats(["campBattleMapData", "campBattleNPCData", "broadcast"], [CampbattlemapdataParser, CampbattlenpcdataParser, BroadcastParser],
                    function() {
                        var i = !1,
                            n = !1,
                            s = !1;
                        CampBattleManager.RADIOLIST[t.id] || CampBattleManager.RADIOLIST[t.id] ? (s = !0, (CampBattleManager.REPORTLIST[t.id] || CampBattleManager.REPORTLIST[t.id]) && (n = !0), (CampBattleManager.NEEDRADIOLIST[t.id] || CampBattleManager.NEEDRADIOLIST[t.id]) && (i = !0), 15 == Math.floor(t.id) && 31 == Math.floor(t.param[2]) ? i = !0 : 15 == Math.floor(t.id) && (i = !1)) : i = !0;
                        var r = BroadcastParser.GetInstance().getItemById(t.id),
                            o = BroadCastDataLib.instance.getContent(t.id);
                        a.id = t.id,
                            a.serverType = t.type,
                            a.type = t.type,
                            a.color = r.color.concat(),
                            a.priority = r.priority,
                            a.content = o,
                            a.param = t.param,
                            a.pkgParam = e.getParam(t.param, t.id, a.color),
                            a.rank = e.RadioList.length,
                            a.time = UserData.getInstance().getServerTime(),
                            WindowManager.getInstance().isWindowVisible(WindowManager.windowType.CampBattle) ? i && e.RadioList.push(a) : e.RadioList.push(a),
                            1 == n && WindowManager.getInstance().isWindowVisible(WindowManager.windowType.CampBattle) && CampBattleManager.instance.addReportList(a)
                    },
                    this) : 3 == t.type),
                ConfigData.preLoadDats(["broadcast", "parts", "paperData", "item", "shipData", "campBattleMapData", "campBattleNPCData", "campBattleMapData", "shipdata", "captainData", "medalData"], [BroadcastParser, PartsParser, PaperdataParser, ItemParser, ShipdataParser, CampbattlemapdataParser, CampbattlenpcdataParser, CampbattlemapdataParser, ShipdataParser, CaptaindataParser, MedaldataParser],
                    function() {
                        var e = BroadcastParser.GetInstance().getItemById(t.id),
                            a = e.content_l;
                        if (Main.trace(Log.objectToString(t)), t.param.length > 0) {
                            var i = [t.param[0]];
                            if (1 == t.id) {
                                var n = ["dj", "zj", "gj", "wp"];
                                i.push(Locales.get("panel_shop_txt_spy_" + n[Number(t.param[1]) - 1] + "_name")),
                                    i.push(PaperdataParser.GetInstance().getItemById(t.param[2]).name_l)
                            } else if (2 == t.id) i.push(PaperdataParser.GetInstance().getItemById(t.param[1]).name_l);
                            else if (3 == t.id) i.push(ItemParser.GetInstance().getItemById(t.param[1]).name_l),
                                2 == t.param[2] ? i.push(PartsParser.GetInstance().getItemById(t.param[3]).name_l) : i.push(PaperdataParser.GetInstance().getItemById(t.param[3]).name_l);
                            else if (4 == t.id) i.push(t.param[1]);
                            else if (5 == t.id) i.push(ShipdataParser.GetInstance().getItemById(t.param[1]).name_l),
                                i.push(ShipdataParser.GetInstance().getItemById(t.param[2]).name_l);
                            else if (6 == t.id) {
                                var s = PartsParser.GetInstance().getItemById(t.param[1]).name_l;
                                i.push(s + "+" + t.param[2]),
                                    i.push(s + "+" + t.param[3])
                            } else 7 == t.id ? (i.push(t.param[1]), i.push(t.param[2])) : 8 == t.id ? (i.push(ItemParser.GetInstance().getItemById(t.param[1]).name_l), i.push(t.param[2])) : 11 == t.id ? (i.shift(), i.push(CampbattlemapdataParser.GetInstance().getItemById(t.param[0]).name_l), 1 == Number(t.param[5]) ? i.push(CampbattlenpcdataParser.GetInstance().getItemById(t.param[1]).name_l) : i.push(t.param[1]), i.push(Locales.get("panel_personinf_txt_camp_" + t.param[2])), i.push("-" + t.param[3]), i.push("+" + t.param[4])) : 12 == t.id ? (i.shift(), 1 == Number(t.param[4]) ? i.push(CampbattlenpcdataParser.GetInstance().getItemById(t.param[0]).name_l) : i.push(t.param[0]), i.push(Locales.get("panel_personinf_txt_camp_" + t.param[1])), i.push(CampbattlemapdataParser.GetInstance().getItemById(t.param[2]).name_l), i.push("-" + t.param[3])) : 13 == t.id ? (i.push(Locales.get("panel_personinf_txt_camp_" + t.param[1])), i.push(CampbattlemapdataParser.GetInstance().getItemById(t.param[2]).name_l), i.push(t.param[3])) : 14 == t.id ? (i.shift(), 1 == Number(t.param[6]) ? i.push(CampbattlenpcdataParser.GetInstance().getItemById(t.param[0]).name_l) : i.push(t.param[0]), i.push(Locales.get("panel_personinf_txt_camp_" + t.param[1])), i.push(CampbattlemapdataParser.GetInstance().getItemById(t.param[2]).name_l), i.push(t.param[3]), i.push(Locales.get("panel_personinf_txt_camp_" + t.param[4])), i.push(t.param[5])) : 15 == t.id ? (i.shift(), 1 == Number(t.param[3]) ? i.push(CampbattlenpcdataParser.GetInstance().getItemById(t.param[0]).name_l) : i.push(t.param[0]), i.push(Locales.get("panel_personinf_txt_camp_" + t.param[1])), i.push(CampbattlemapdataParser.GetInstance().getItemById(t.param[2]).name_l), i.push(Locales.get("panel_personinf_txt_camp_" + t.param[1]))) : 17 == t.id ? (i.push(t.param[1]), i.push(t.param[2]), i.push(t.param[3])) : 20 == t.id ? (i.push(t.param[1]), i.push(t.param[2])) : 31 == t.id ? (i.push(ShipdataParser.GetInstance().getItemById(t.param[1]).name_l), i.push(ShipdataParser.GetInstance().getItemById(t.param[2]).name_l)) : 35 == t.id ? i.push(t.param[1]) : 42 == t.id ? i.push(CaptaindataParser.GetInstance().getItemById(t.param[1]).name_l) : 43 == t.id ? (i.push(CaptaindataParser.GetInstance().getItemById(t.param[1]).name_l), i.push(Locales.get("panel_jianzhang_junxian_" + t.param[2]))) : 44 == t.id || 45 == t.id ? i.push(CaptaindataParser.GetInstance().getItemById(t.param[1]).name_l) : 64 == t.id && (i.push(MedaldataParser.GetInstance().getItemById(t.param[1]).name_l + "+" + t.param[2]), i.push(MedaldataParser.GetInstance().getItemById(t.param[1]).name_l + "+" + t.param[3]));
                            for (var r = 1; r <= i.length; r++) a = a.replace("#0" + r.toString() + "#", "#" + e.color[r - 1] + i[r - 1] + "#")
                        }
                        new WindowBroadCast(Utils.textFlowByStr(a))
                    })
        },
        a.deleteRadio = function() {
            this.RadioList.shift()
        },
        a.getParam = function(t, e, a) {
            var i = [];
            if (CampBattleManager.RADIOLIST[e] || i.push(t[0]), 1 == e) {
                var n = "";
                1 == Number(t[1]) ? n = Locales.get("panel_shop_txt_spy_dj_name") : 2 == Number(t[1]) ? n = Locales.get("panel_shop_txt_spy_zj_name") : 3 == Number(t[1]) ? n = Locales.get("panel_shop_txt_spy_gj_name") : 4 == Number(t[1]) && (n = Locales.get("panel_shop_txt_spy_wp_name"));
                var s = PaperdataParser.GetInstance().getItemById(t[2]).name_l;
                i.push(n),
                    i.push(s)
            } else if (2 == e) {
                var s = PaperdataParser.GetInstance().getItemById(t[1]).name_l;
                i.push(s)
            } else if (3 == e) {
                var n = ItemParser.GetInstance().getItemById(t[1]).name_l;
                a[1] = this.box_color[ItemParser.GetInstance().getItemById(t[1]).quality - 1];
                var s = null;
                s = 2 == Number(t[2]) ? PartsParser.GetInstance().getItemById(t[3]).name_l : PaperdataParser.GetInstance().getItemById(t[3]).name_l,
                    i.push(n),
                    i.push(s)
            } else if (4 == e) i.push(t[1]);
            else if (11 == e) {
                var r = CampbattlemapdataParser.GetInstance().getItemById(t[0]).name_l;
                if (i.push(r), "1" == t[5]) {
                    var o = CampbattlenpcdataParser.GetInstance().getItemById(t[1]).name_l;
                    i.push(o)
                } else i.push(t[1]);
                a[2] = CampBattleManager.COLOR_16_LIST[Number(t[2])],
                    i.push(Locales.get("panel_personinf_txt_camp_" + t[2])),
                    i.push("-" + t[3]),
                    i.push("+" + t[4])
            } else if (12 == e) {
                var r = CampbattlemapdataParser.GetInstance().getItemById(t[2]).name_l,
                    o = CampbattlenpcdataParser.GetInstance().getItemById(t[0]).name_l;
                "1" == t[4] ? i.push(o) : i.push(t[0]),
                    a[1] = CampBattleManager.COLOR_16_LIST[Number(t[1])],
                    i.push(Locales.get("panel_personinf_txt_camp_" + t[1])),
                    i.push(r),
                    i.push("-" + t[3])
            } else if (13 == e) {
                var r = CampbattlemapdataParser.GetInstance().getItemById(t[2]).name_l;
                i.push(t[0]),
                    a[1] = CampBattleManager.COLOR_16_LIST[Number(t[1])],
                    i.push(Locales.get("panel_personinf_txt_camp_" + t[1])),
                    i.push(r),
                    i.push(t[3])
            } else if (14 == e) {
                var r = CampbattlemapdataParser.GetInstance().getItemById(t[2]).name_l;
                if ("1" == t[6]) {
                    var o = CampbattlenpcdataParser.GetInstance().getItemById(t[0]).name_l;
                    i.push(o)
                } else i.push(t[0]);
                a[1] = CampBattleManager.COLOR_16_LIST[Number(t[1])],
                    i.push(Locales.get("panel_personinf_txt_camp_" + t[1])),
                    i.push(r),
                    i.push(t[3]),
                    a[4] = CampBattleManager.COLOR_16_LIST[Number(t[4])],
                    i.push(Locales.get("panel_personinf_txt_camp_" + t[4])),
                    i.push(t[5])
            } else if (15 == e) {
                var r = CampbattlemapdataParser.GetInstance().getItemById(t[2]).name_l;
                if ("1" == t[3]) {
                    var o = CampbattlenpcdataParser.GetInstance().getItemById(t[0]).name_l;
                    i.push(o)
                } else i.push(t[0]);
                a[1] = CampBattleManager.COLOR_16_LIST[Number(t[1])],
                    i.push(Locales.get("panel_personinf_txt_camp_" + t[1])),
                    i.push(r),
                    a[3] = CampBattleManager.COLOR_16_LIST[Number(t[1])],
                    i.push(Locales.get("panel_personinf_txt_camp_" + t[1]))
            } else if (20 == e) {
                if ("1" == t[3]) {
                    var l = CampbattlenpcdataParser.GetInstance().getItemById(t[0]).name_l;
                    i.push(l)
                } else i.push(t[0]);
                CampbattlenpcdataParser.GetInstance().getItemById(t[1]).name_l;
                i.push(t[2])
            } else if (21 == e) {
                var s = t[1];
                i.push(s)
            } else if (22 == e) {
                var h = Number(t[1]);
                i.push(PaperdataParser.GetInstance().getItemById(h).name_l)
            }
            return i
        },
        t.instance = new t,
        t
}();
egret.registerClass(BroadCastManager, "BroadCastManager");
var BuffManager = function() {
    function t() {
        this.BuffName = [],
            this.BuffNameRemould = [],
            this.init()
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(t, "instance",
            function() {
                return t._instance || (t._instance = new t),
                    t._instance
            }),
        i.init = function() {
            this.BuffName = [{},
                    {
                        name: Locales.get("BUFFSYSTEM_FIRE_ATK_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_FIRE_ATK_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_ATK_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_ATK_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_FIER_DEF_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_FIRE_DEF_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_DEF_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_DEF_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HP_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HP_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SPD_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SPD_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HIT_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HIT_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EVA_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EVA_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_CRI_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_CRI_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_DECRI_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_DECRI_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_CRI_DMG_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SKILL_USE_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SKILL_DMG_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SKILL_HIT_PER")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_JAP_DEF_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_GAR_DEF_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_USA_DEF_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_ENG_DEF_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_ADD_SH_CON")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SUB_SH_CON")
                    }
                ],
                this.BuffNameRemould = [{},
                    {
                        name: Locales.get("BUFFSYSTEM_FIRE_ATK_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_FIRE_ATK_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_ATK_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_ATK_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_FIER_DEF_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_FIRE_DEF_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_DEF_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EXPL_DEF_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HP_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HP_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SPD_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SPD_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HIT_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_HIT_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EVA_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_EVA_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_CRI_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_CRI_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_DECRI_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_DECRI_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_CRI_DMG_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SKILL_USE_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SKILL_DMG_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SKILL_HIT_PER_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_JAP_DEF_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_GAR_DEF_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_USA_DEF_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_TO_ENG_DEF_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_ADD_SH_CON_2")
                    },
                    {
                        name: Locales.get("BUFFSYSTEM_SUB_SH_CON_2")
                    }
                ]
        },
        i.getBuffNameById = function(t) {
            return t >= 1 && t < this.BuffName.length ? this.BuffName[t] : "Error"
        },
        i.getBuffNameByIdForRemould = function(t) {
            return t >= 1 && t < this.BuffNameRemould.length ? this.BuffNameRemould[t] : "Error"
        },
        i.getBuffValueById = function(e, a) {
            return e == t.FIRE_ATK_CON || e == t.EXPL_ATK_CON || e == t.FIER_DEF_CON || e == t.EXPL_DEF_CON || e == t.HP_CON || e == t.SPD_CON || e == t.HIT_CON || e == t.EVA_CON || e == t.CRI_CON || e == t.DECRI_CON ? a / 1e3 * 100 + "%" : a / 100 + "%"
        },
        i.getBuffCurValueById = function(t, e) {
            return 2 == t || 4 == t || 6 == t || 8 == t || 10 == t || 12 == t || 21 == t || 22 == t || 23 == t || 24 == t || t >= 32 && 42 >= t ? e / 1e4 * 100 + "%" : 13 == t || 14 == t || 15 == t || 16 == t || 17 == t || 18 == t || 19 == t || 20 == t ? e / 1e3 * 100 + "%" : e
        },
        t.FIRE_ATK_CON = 1,
        t.FIRE_ATK_PER = 2,
        t.EXPL_ATK_CON = 3,
        t.EXPL_ATK_PER = 4,
        t.FIER_DEF_CON = 5,
        t.FIRE_DEF_PER = 6,
        t.EXPL_DEF_CON = 7,
        t.EXPL_DEF_PER = 8,
        t.HP_CON = 9,
        t.HP_PER = 10,
        t.SPD_CON = 11,
        t.SPD_PER = 12,
        t.HIT_CON = 13,
        t.HIT_PER = 14,
        t.EVA_CON = 15,
        t.EVA_PER = 16,
        t.CRI_CON = 17,
        t.CRI_PER = 18,
        t.DECRI_CON = 19,
        t.DECRI_PER = 20,
        t.CRI_DMG_PER = 21,
        t.SKILL_USE_PER = 22,
        t.SKILL_DMG_PER = 23,
        t.SKILL_HIT_PER = 24,
        t.TO_JAP_DEF_CON = 25,
        t.TO_GAR_DEF_CON = 26,
        t.TO_USA_DEF_CON = 27,
        t.TO_ENG_DEF_CON = 28,
        t.ADD_SH_CON = 29,
        t.SUB_SH_CON = 30,
        t
}();
egret.registerClass(BuffManager, "BuffManager");
var CampBattleManager = function() {
    function t() {
        this.canOpt = !0,
            this.cdTime = 0,
            this.morale = 0,
            this.moraleLmt = 0,
            this.score = 0,
            this.campbattlescore = 0,
            this.currentPortId = 0,
            this.serverStartTime = null,
            this.serverEndTime = null,
            this.serverRewardTime = null,
            this.serverCampList = {},
            this.campRankList = [],
            this.buffList = {},
            this.SYNTIME = 10,
            this.synTimeLeft = 10,
            this.reportList = [],
            this.MaxReport = 50,
            this.bossList = null,
            this.needUpdate = !1,
            this.detectTime = 0,
            this.bloodUseTimes = 0,
            this.bloodTimes = 0,
            this.tickTimer = new egret.Timer(1e3),
            this.tickTimer.addEventListener(egret.TimerEvent.TIMER, this.update, this),
            this.tickTimer.start()
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(t, "instance",
            function() {
                return t._instance || (t._instance = new t),
                    t._instance
            }),
        i.processData = function(e) {
            if (Log.logZDY("##########"), this.morale = e.morale, this.moraleLmt = e.moralelimit, this.score = e.score, this.campbattlescore = e.campbattlescore, this.serverStartTime = e.starttime.split("|"), this.serverStartTime.shift(), this.serverEndTime = e.endtime.split("|"), this.serverEndTime.shift(), this.serverRewardTime = e.rewardtime.split("|"), this.serverRewardTime.shift(), e.detecttime - UserData.getInstance().getOldServerTime() / 1e3 > 0) this.detectTime = e.detecttime - UserData.getInstance().getOldServerTime() / 1e3;
            else if (this.detectTime = 0, EventManager.instance.dispatchEvent(EventTypes.CAMP_DETECT_TIME_UPDATE), this.detectTime <= 0) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattle);
                a && a.processDetect()
            }
            if (this.bloodUseTimes = e.bloodbuytimes, this.bloodTimes = e.bloodtimes, 0 == t.inited ? this.cdTime = e.cd - UserData.getInstance().getOldServerTime() / 1e3 : CampBattlePortOptData.resetPortList(), this.cdTime > 0 ? this.canOpt = !1 : this.canOpt = !0, this.currentPortId != e.portid && (t.needPosition = !0), this.currentPortId = e.portid, this.campRankList = [], e.camplist.length > 0)
                for (var i = 0,
                        n = e.camplist; i < n.length; i++) {
                    var s = n[i];
                    CampBattlePortOptData.processData(s.portlist, s.campid),
                        this.serverCampList[s.campid] = s,
                        this.campRankList.push(s)
                } else
                    for (var r = 1; 3 >= r; ++r) {
                        var s = {
                            campid: r,
                            resource: 0,
                            portlist: {}
                        };
                        this.serverCampList[r.toString()] = s,
                            this.campRankList.push(s)
                    }
            this.buffList = e.bufflist,
                this.bossList = e.bosslist,
                t.inited = !0
        },
        i.processOptData = function(e) {
            if (0 != e.res) Toast.launch(Locales.get("ui_campBattle_optError" + e.res), 16711680);
            else {
                var a = CampbattlebasedataParser.GetInstance().getDataArr()[0];
                if (e.actiontype == t.OPT_MOV ? (this.cdTime = a.moveCD + 1, this.canOpt = !1) : e.actiontype == t.OPT_ATK && (this.cdTime < a.battleCD && (this.cdTime = a.battleCD + 1), this.canOpt = !1), this.detectTime <= 0) {
                    var i = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattle);
                    i && i.processDetect()
                }
            }
        },
        i.showBattleMsg = function(t) {
            var e = "null";
            if (1 == t.id) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattle);
                if (!a) return;
                var i = CampbattlebasedataParser.GetInstance().getDataArr()[0],
                    n = null,
                    s = null;
                if ("1" == t.param[4] && (n = CampbattlenpcdataParser.GetInstance().getItemById(t.param[0]), s = n.name_l), Math.floor(t.param[2]) <= 0) {
                    var r = t.param[3];
                    null == n && (s = t.param[0]);
                    var o = Locales.get("panel_personinf_txt_camp_" + r),
                        l = Locales.get("ui_campBattle_deadTitle"),
                        h = Locales.get("ui_campBattle_deadContent", o, s),
                        c = Locales.get("panel_game_over_close");
                    GameAlert.getInstance().showByLocalesHtml(l, h, void 0, void 0, c),
                        this.cdTime = i.deadCD,
                        this.canOpt = !1,
                        this.bloodTimes > 0 && (this.bloodTimes = 0, Toast.launch(Locales.get("ui_campbattle_bloodTimeFail"), 16711680))
                } else this.morale = Math.floor(t.param[2]),
                    e = null != n ? Locales.get("ui_campBattle_msg_battle", s, t.param[1]) : Locales.get("ui_campBattle_msg_battle", t.param[0], t.param[1]),
                    a.setQuickMsg(e)
            }
        },
        i.checkNeedUpdate = function() {
            var t = (UserData.getInstance().getServerTime() - UserData.getInstance().getServerStartTime()) / 1e3,
                e = Math.floor(t / 3600 / 24),
                a = CampbattlebasedataParser.GetInstance().getDataArr()[0].beginDay - e;
            if (a > 0) this.needUpdate = !1;
            else {
                var i = new Date(UserData.getInstance().getServerTime()),
                    n = Math.floor(i.getDay());
                CampBattleBaseDataLib.instance.checkIsOpen(n) && (this.needUpdate = !0)
            }
        },
        i.update = function() {
            if (t.inited) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattle);
                e && e.inited && e.updateUI();
                var a = CampbattlebasedataParser.GetInstance().getDataArr()[0],
                    i = UserData.getInstance().getServerTime();
                if (1 == this.needUpdate && UserData.getInstance().getPlayerLevel() >= HegemonyunlockParser.GetInstance().getItemById(6).needlvl) {
                    var n = new Date(i),
                        s = (n.getHours(), n.getMinutes(), n.getSeconds(), a.startTime),
                        r = a.endTime,
                        o = Math.floor(s[0]),
                        l = Math.floor(s[1]),
                        h = Math.floor(r[0]),
                        c = Math.floor(r[1]),
                        d = new Date(i);
                    d.setHours(o, l, 0, 0);
                    var g = d.valueOf();
                    d = new Date(i),
                        d.setHours(h, c, 0, 0);
                    var u = d.valueOf(),
                        p = (g - i) / 1e3;
                    300 >= p && p > 0 ? t.isStart = !0 : 0 > p && (0 > u - i ? (t.isStart = !1, this.needUpdate = !1) : t.isStart = !0)
                }
                var m = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattleRankingList);
                if (m && m.inited) {
                    var n = new Date(i),
                        s = (n.getHours(), n.getMinutes(), n.getSeconds(), this.serverStartTime),
                        r = this.serverEndTime,
                        o = Math.floor(s[0]),
                        l = Math.floor(s[1]),
                        h = Math.floor(r[0]),
                        c = Math.floor(r[1]),
                        d = new Date(i);
                    d.setHours(o, l, 0, 0);
                    var g = d.valueOf();
                    d = new Date(i),
                        d.setHours(h, c, 0, 0);
                    var u = d.valueOf(),
                        _ = n.getDay(),
                        p = 0;
                    CampBattleBaseDataLib.instance.checkIsOpen(_) ? (p = (g - i) / 1e3, 0 > p && (p = 0 > u - i ? -1 : 0)) : p = -1,
                        m.updateTime(GlobalFunction.getHMSBySecond(p), p)
                }
                if (this.cdTime > 0 && (this.cdTime = this.cdTime - 1, this.cdTime <= 0 ? (this.cdTime = 0, this.canOpt = !0) : this.canOpt = !1, e && e.inited && e.updateCDTime(this.cdTime)), this.detectTime > 0 && (this.detectTime = this.detectTime - 1, e && e.inited && e.updateDetectTime(this.detectTime), this.detectTime <= 0 && (e && e.inited && e.processDetect(), Toast.launch(Locales.get("ui_campbattle_detectTimeEnd", this.detectTime), 16711680))), e && e.inited && e.updateBossLeftTime(), 1 == t.isOpen) {
                    var n = new Date(i),
                        r = (n.getHours(), n.getMinutes(), n.getSeconds(), this.serverEndTime),
                        h = Math.floor(r[0]),
                        c = Math.floor(r[1]),
                        d = new Date(i);
                    d.setHours(h, c, 0, 0);
                    var u = d.valueOf(),
                        p = (u - i) / 1e3;
                    0 > p && (p = 0);
                    var v = !1;
                    300 > p && (v = !0),
                        e && e.inited && e.updateEndTime(GlobalFunction.getHMSBySecond(p, "."), v),
                        0 >= p && RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceCampBattleResult)
                }
                this.synTimeLeft > 0 && 1 == t.isOpen && (this.synTimeLeft = this.synTimeLeft - 1, this.synTimeLeft <= 0 && (this.synTimeLeft = this.SYNTIME, Log.logZDY("===========synCampBattleData==========="), RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceCampBattleData, void 0, !1)))
            }
        },
        i.checkInPortList = function(t, e) {
            for (var a = 0,
                    i = t.nearList; a < i.length; a++) {
                var n = i[a];
                if (Math.floor(n) == e) return !0
            }
            return !1
        },
        i.checkCanOpt = function(t) {
            var e = CampBattlePortOptData.getPortList()[this.currentPortId];
            return null != e ? this.checkInPortList(e.baseData, t) : !1
        },
        i.moveAndAtkPort = function(e, a) {
            return 1 != t.isAutoBattle && null != e ? 0 == this.canOpt ? void(a == t.OPT_MOV ? Toast.launch(Locales.get("ui_campBattle_opt_movError"), 16711680) : a == t.OPT_ATK && Toast.launch(Locales.get("ui_campBattle_opt_atkError"), 16711680)) : void RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceCampBattleMove, {
                target: e.baseData.id
            }) : void 0
        },
        i.buyDetect = function() {
            return this.detectTime > 0 ? void Toast.launch(Locales.get("ui_campbattle_detectTimeUse"), 16711680) : UserData.getInstance().getRes(TypeDefine.RES.Diamond) < CampbattlebasedataParser.GetInstance().getDataArr()[0].detectCost ? void Toast.launch(Locales.get("ui_campBattle_buyError3"), 16711680) : void RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceCampBattleBuy, {
                type: 1
            })
        },
        i.buyBlood = function() {
            if (this.bloodTimes > 0) return void Toast.launch(Locales.get("ui_campbattle_bloodTimeUse"), 16711680);
            var e = CampbattlebasedataParser.GetInstance().getDataArr()[0],
                a = t.instance.bloodUseTimes * e.bloodCostPlus + e.bloodCost;
            return UserData.getInstance().getRes(TypeDefine.RES.Diamond) < a ? void Toast.launch(Locales.get("ui_campBattle_buyError3"), 16711680) : this.morale <= e.bloodCostMorale ? void Toast.launch(Locales.get("ui_campBattle_buyError4"), 16711680) : void RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceCampBattleBuy, {
                type: 2
            })
        },
        i.processDetectAndBlood = function(t) {
            if (t.res > 0) Toast.launch(Locales.get("ui_campBattle_buyError" + t.res), 16711680);
            else {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattle),
                    a = CampbattlebasedataParser.GetInstance().getDataArr()[0];
                1 == t.type ? (this.detectTime = a.detectTime, e && e.processDetect(), Toast.launch(Locales.get("ui_campbattle_detectTimeSucc", this.detectTime), 16711680)) : 2 == t.type && (this.bloodTimes = a.bloodTimes, e && e.processBlood(), Toast.launch(Locales.get("ui_campbattle_bloodTimeSucc", a.bloodCostMorale), 16711680))
            }
        },
        i.processSetAI = function(e) {
            0 == e.issucess ? 1 == e.setorcancel ? (Toast.launch(Locales.get("ui_campBattle_campLite_setAI_success"), 16711680), t.isAutoBattle = !0) : (Toast.launch(Locales.get("ui_campBattle_campLite_cancelAI_success"), 16711680), t.isAutoBattle = !1) : 1 == e.issucess ? Toast.launch(Locales.get("ui_campBattle_campLite_setAI_fail1"), 16711680) : 2 == e.issucess && Toast.launch(Locales.get("ui_campBattle_campLite_setAI_fail2"), 16711680)
        },
        i.showBattleOver = function(e) {
            if (0 != t.needOpen) {
                if (this.morale - Math.floor(e.campbattle.morale) <= 0) {
                    var a = CampbattlebasedataParser.GetInstance().getDataArr()[0];
                    this.cdTime = a.deadCD,
                        this.canOpt = !1,
                        this.bloodTimes > 0 && (this.bloodTimes = 0, Toast.launch(Locales.get("ui_campbattle_bloodTimeFail"), 16711680))
                }
                ConfigData.preLoadDats(["campBattleLimitScoreData"], [CampbattlelimitscoredataParser],
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.CampBattleOver, e)
                    })
            }
        },
        i.showBattleEnd = function(e) {
            t.isOpen = !1,
                0 != t.needOpen && WindowManager.getInstance().show(WindowManager.windowType.CampBattleEnd, e)
        },
        i.moveToCurrentPosition = function() {
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattle);
            t && t.moveToCurrentPosition()
        },
        i.getCurrentPositionData = function() {
            return CampBattlePortOptData.getPortList()[this.currentPortId]
        },
        i.returnHome = function() {
            this.synTimeLeft = this.SYNTIME,
                t.inited = !1,
                CampBattlePortOptData.clearData(),
                AudioManager.instance.playMusic(AudioManager.MUSIC_MAIN_UI)
        },
        i.setDeadCDTime = function() {
            var t = CampbattlebasedataParser.GetInstance().getDataArr()[0];
            this.cdTime = t.deadCD,
                this.canOpt = !1
        },
        i.generalCampRankList = function() {
            return this.campRankList.sort(function(t, e) {
                    if (t.resource != e.resource) return e.resource - t.resource;
                    if (t.portlist.length != e.portlist.length) return e.portlist.length - t.portlist.length;
                    var a = CampBattlePortOptData.getPortList()[31];
                    return a ? a.camp == t.campid ? -1 : (a.camp == e.campid, 1) : 1
                }),
                this.campRankList
        },
        i.addReportList = function(t) {
            Log.logZDY("-========reportId." + t.id),
                this.reportList.length >= 50 && this.reportList.pop(),
                t.serverTime = UserData.getInstance().getOldServerTime() / 1e3,
                this.reportList.push(t),
                this.reportList.sort(function(t, e) {
                    return -(t.serverTime - e.serverTime)
                })
        },
        i.getBattleReportList = function(t) {
            var e = [];
            if (1 == t) e = this.reportList;
            else if (2 == t)
                for (var a = 0,
                        i = this.reportList; a < i.length; a++) {
                    var n = i[a];
                    11 == Math.floor(n.id) && e.push(n)
                } else if (3 == t)
                    for (var s = 0,
                            r = this.reportList; s < r.length; s++) {
                        var n = r[s];
                        12 == Math.floor(n.id) && e.push(n)
                    } else if (4 == t)
                        for (var o = 0,
                                l = this.reportList; o < l.length; o++) {
                            var n = l[o];
                            11 != Math.floor(n.id) && 12 != Math.floor(n.id) && e.push(n)
                        }
            return e
        },
        i.Wind_Words = function(t, e, a) {
            if (0 == t) {
                var i = ShopdataParser.GetInstance().getItemById(e),
                    n = GlobalFunction.getDropDataByTypeAndId(i.itemType, i.itemId);
                Toast.launch(Locales.get("panel_shop_txt_windword_0") + n.name, 16711680)
            } else 1 == t ? Toast.launch(Locales.get("panel_shop_txt_windword_1"), 16711680) : 2 == t ? Toast.launch(Locales.get("panel_shop_txt_windword_2"), 16711680) : 3 == t ? Toast.launch(Locales.get("panel_shop_txt_windword_3"), 16711680) : 4 == t ? Toast.launch(Locales.get("panel_shop_txt_windword_4"), 16711680) : 5 == t ? Toast.launch(Locales.get("panel_shop_txt_windword_5"), 16711680) : 6 == t ? Toast.launch(Locales.get("ui_campBattle_BuyError"), 16711680) : 7 == t ? Toast.launch(Locales.get("panel_guild_noInGuild"), 16711680) : 8 == t && Toast.launch(Locales.get("panel_guild_levelNoEnough"), 16711680)
        },
        i.getBuffZhanGong = function() {
            return this.buffList[t.BUFF_ZHANGONG]
        },
        i.getBuffDMG = function() {
            return this.buffList[t.BUFF_DMG]
        },
        i.getBuffZhanGongValue = function() {
            var e = 0;
            return null != this.buffList[t.BUFF_ZHANGONG] && (e = this.buffList[t.BUFF_ZHANGONG].value),
                e
        },
        i.getBuffDMGValue = function() {
            var e = 0;
            return null != this.buffList[t.BUFF_DMG] && (e = this.buffList[t.BUFF_DMG].value),
                e
        },
        i.isOpened = function() {
            var t = CampbattlebasedataParser.GetInstance().getDataArr()[0];
            if (HegemonyunlockParser.GetInstance().getItemById(6).needlvl > UserData.getInstance().getPlayerLevel()) return !1;
            if (UserData.getInstance().getServerstartday() > t.beginDay)
                for (var e = Utils.getDateByNum(UserData.getInstance().getServerTime(), timeType.DAY), a = Utils.getDateByNum(UserData.getInstance().getServerTime(), timeType.TIMENUMBER), i = 0; i < t.openDay.length; i++)
                    if (e == t.openDay[i]) {
                        var n = (t.startTime, 60 * t.startTime[0] + t.startTime[1]),
                            s = 60 * t.endTime[0] + t.endTime[1];
                        return a > n && s > a
                    }
            return !1
        },
        t.JUSTICE = 1,
        t.PREDATOR = 2,
        t.HONOUR = 3,
        t.PORT_CENTER = 1,
        t.PORT_ARMY = 2,
        t.PORT_OIL = 3,
        t.PORT_NORMAL = 4,
        t.COLOR_LIST = [12698049, 50943, 16721705, 62533],
        t.COLOR_16_LIST = ["c1c1c1", "00c6ff", "ff2729", "00f445"],
        t.RADIOLIST = {
            11: !0,
            12: !0,
            13: !0,
            14: !0,
            15: !0,
            17: !0,
            18: !0,
            19: !0,
            20: !0
        },
        t.NEEDRADIOLIST = {
            13: !0,
            14: !0,
            15: !0,
            18: !0,
            19: !0,
            20: !0
        },
        t.REPORTLIST = {
            11: !0,
            12: !0,
            13: !0,
            14: !0,
            15: !0,
            20: !0
        },
        t.OPT_MOV = 0,
        t.OPT_ATK = 1,
        t.BUFF_ZHANGONG = 1,
        t.BUFF_DMG = 2,
        t.isStart = !1,
        t.isOpen = !1,
        t.inited = !1,
        t.needPosition = !1,
        t.isAutoBattle = !1,
        t.needOpen = !1,
        t
}();
egret.registerClass(CampBattleManager, "CampBattleManager");
var CanUseManager = function() {
    function t() {
        this.mail_is_can_use = !1,
            this.part_is_can_use = !1,
            this.dec_is_can_use = !1,
            this.jinggong_is_can_use = !1,
            this.bag_is_can_use = !1,
            this.activity_is_can_use = !1,
            this.guard_is_can_use = !1,
            this.ship_is_can_use = !1,
            this.science_is_can_use = !1,
            this.charge_is_can_use = !1,
            this.soldier_is_can_use = !1,
            this.shop_is_can_use = !1,
            this.supply_is_can_use = !1,
            this.limit_is_can_use = !1,
            this.medal_is_can_use = !1,
            this.telent_is_can_use = !1,
            this.chat_is_can_use = !1,
            this.guard_question_is_can_use = !1,
            this.activity_oil_is_can_use = !1,
            this.activity_yyhd_is_can_use = !1,
            this.activity_xffl_is_can_use = !1,
            this.friend_is_can_use = !1,
            this.military_is_can_use = !1,
            this.month_sign_can_use = !1,
            this.jianzhang_can_use = !1,
            this.jianzhang_dh_use = !1,
            this.guild_can_use = !1,
            this.guild_apply_use = !1
    }
    var e = (__define, t),
        a = e.prototype;
    return a.Init = function() {
            EventManager.instance.addEventListener(EventTypes.EVENT_MAIL_FALG, this.OnMailFlagEvent, this)
        },
        a.OnMailFlagEvent = function() {
            UserData.getInstance().getUnreadMail() > 0 || UserData.getInstance().getUnreadMail() > 0 ? this.mail_is_can_use = !0 : this.mail_is_can_use = !1,
                EventManager.instance.dispatchEvent(EventTypes.EVENT_MAIN_UI_FLAG)
        },
        a.setActivityYYHDUseFlag = function(t) {
            this.activity_yyhd_is_can_use = t
        },
        a.getActivityYYHDUseFlag = function() {
            return this.activity_yyhd_is_can_use
        },
        a.getActivityXFFLUseFlag = function() {
            return this.activity_xffl_is_can_use
        },
        a.setMailUseFlag = function(t) {
            this.mail_is_can_use = t
        },
        a.getMailUseFlag = function() {
            return this.mail_is_can_use
        },
        a.setPartUseFlag = function(t) {
            this.part_is_can_use = t
        },
        a.getPartUseFlag = function() {
            return this.part_is_can_use
        },
        a.setDecUseFlag = function(t) {
            this.dec_is_can_use = t
        },
        a.getDecUseFlag = function() {
            return this.dec_is_can_use
        },
        a.setJingGongUseFlag = function(t) {
            this.jinggong_is_can_use = t
        },
        a.getJingGongUseFlag = function() {
            return this.jinggong_is_can_use
        },
        a.setBagUseFlag = function(t) {
            this.bag_is_can_use = t
        },
        a.getBagUseFlag = function() {
            return this.bag_is_can_use
        },
        a.setActivityUseFlag = function(t) {
            this.activity_is_can_use = t
        },
        a.getActivityUseFlag = function() {
            return this.activity_is_can_use
        },
        a.setActivityOilUseFlag = function(t) {
            this.activity_oil_is_can_use = t
        },
        a.getActivityOilUseFlag = function() {
            return this.activity_oil_is_can_use
        },
        a.setGuardUseFlag = function(t) {
            this.guard_is_can_use = t
        },
        a.getGuardUseFlag = function() {
            return this.guard_is_can_use
        },
        a.setGuardQuestionUseFlag = function(t) {
            this.guard_question_is_can_use = t
        },
        a.getGuardQuestionUseFlag = function() {
            return this.guard_question_is_can_use
        },
        a.setShipUseFlag = function(t) {
            this.ship_is_can_use = t
        },
        a.getShipUseFlag = function() {
            return this.ship_is_can_use
        },
        a.setScienceUseFlag = function(t) {
            this.science_is_can_use = t
        },
        a.getScienceUseFlag = function() {
            return this.science_is_can_use
        },
        a.setMilitaryUseFlag = function(t) {
            this.military_is_can_use = t
        },
        a.getMilitaryUseFlag = function() {
            return this.military_is_can_use
        },
        a.setChargeUseFlag = function(t) {
            this.charge_is_can_use = t
        },
        a.getChargeUseFlag = function() {
            return this.charge_is_can_use
        },
        a.setSoldierUseFlag = function(t) {
            this.soldier_is_can_use = t
        },
        a.getSoldierUseFlag = function() {
            return this.soldier_is_can_use
        },
        a.setShopUseFlag = function(t) {
            this.shop_is_can_use = t
        },
        a.getShopUseFlag = function() {
            return this.shop_is_can_use
        },
        a.setSupplyUseFlag = function(t) {
            this.supply_is_can_use = t
        },
        a.getSupplyUseFlag = function() {
            return UserData.getInstance().getPlayerLevel() < 9 ? !1 : this.supply_is_can_use
        },
        a.setJianzhangUseFlag = function(t) {
            this.jianzhang_can_use = t
        },
        a.setJianzhangDuiHuanFlag = function(t) {
            this.jianzhang_dh_use = t
        },
        a.getJianzhangUseFlag = function() {
            return this.jianzhang_can_use
        },
        a.getJianzhangDuiHuanUseFlag = function() {
            return this.jianzhang_dh_use
        },
        a.setLimitUseFlag = function(t) {
            this.limit_is_can_use = t
        },
        a.getLimitUseFlag = function() {
            return this.limit_is_can_use
        },
        a.setMonthUseFlag = function(t) {
            this.month_sign_can_use = t
        },
        a.getMonthUseFlag = function() {
            return this.month_sign_can_use
        },
        a.setMedalUseFlag = function(t) {
            this.medal_is_can_use = t
        },
        a.getMedalUseFlag = function() {
            return this.medal_is_can_use
        },
        a.setTelentUseFlag = function(t) {
            this.telent_is_can_use = t
        },
        a.getTelentUseFlag = function() {
            return this.telent_is_can_use
        },
        a.setFriendUseFlag = function(t) {
            this.friend_is_can_use = t
        },
        a.getFriendUseFlag = function() {
            return this.friend_is_can_use
        },
        a.setChatUseFlag = function(t) {
            this.chat_is_can_use = t
        },
        a.getChatUseFlag = function() {
            return this.chat_is_can_use
        },
        a.setGuildFlag = function(t) {
            this.guild_can_use = t
        },
        a.getGuildFlag = function() {
            return this.guild_can_use
        },
        a.setGuildApplyFlag = function(t) {
            this.guild_apply_use = t
        },
        a.getGuildApplyFlag = function() {
            return this.guild_apply_use
        },
        t.instance = new t,
        t
}();
egret.registerClass(CanUseManager, "CanUseManager");
var CaptainManager = function() {
    function t() {
        this.quailtyArr = [],
            this.reductionCaptainsIds = [],
            this.huishouNum = 0
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        a.getCaptainPicById = function(t, e) {
            if (void 0 === e && (e = !1), null == t || "" == t) return "";
            var a = Path.captainIconURL + t;
            return e && (a = a.substr(0, a.length - 4) + "_s.png"),
                a
        },
        a.getPropoDataById = function(t) {
            for (var e = 0; e < CaptainData.captainlist.length; e++)
                if (t == CaptainData.captainlist[e].id) return CaptainData.captainlist[e];
            return null
        },
        a.getCountryIconById = function(t) {
            if (null == t || "" == t) return "";
            var e = Path.countryURL + "country_" + t + ".jpg";
            return e
        },
        a.setColor = function(t) {
            return "1" == t ? "0xF6F8E6" : "2" == t ? "0x5CED2F" : "3" == t ? "0x35B0FE" : "4" == t ? "0x8E55FF" : "5" == t ? "0xFF8033" : "6" == t ? "0XF42B0B" : void 0
        },
        a.getPromoteNumByPromoteLv = function(t, e) {
            return Number(e[t])
        },
        a.sendFireCaptainMessage = function(t, e) {
            void 0 === e && (e = 1);
            var a = Transport.getPkg(ProtocolMgr.ID_DceFireCaptain);
            a.id = t,
                a.type = e,
                Transport.instance.send(a)
        },
        a.handleFireCaptainMessage = function(e) {
            if (console.log("返回舰长id:" + e.id), console.log("返回解雇类型:" + e.type), console.log("返回解雇结果(0成功 1配表错误 2没有该舰长 3已配备舰长 4 钻石不足 5不能高级批量解雇 6没有要解雇的):" + e.res), 0 == e.res) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain);
                a.setHuiShouPage(),
                    t.getInstance().reductionCaptainsIds = []
            } else 1 == e.res ? Toast.launch("配表错误") : 2 == e.res ? Toast.launch("没有该舰长") : 3 == e.res ? Toast.launch("已配备舰长") : 4 == e.res ? Toast.launch("钻石不足") : 5 == e.res ? Toast.launch("不能高级批量解雇") : 6 == e.res && Toast.launch("没有要解雇的")
        },
        a.sendComposeCaptainMessage = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceComposeCaptain);
            a.id = t,
                a.all = e,
                Transport.instance.send(a)
        },
        a.handleComposeCaptainMessage = function(t) {
            if (console.log("返回舰长id:" + t.id), console.log("舰长合成结果(0成功，1没有碎片，2配表错误,3已有该舰长,4碎片不足,5没有可合成碎片):" + t.res), 0 == t.res) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain);
                e.setPos(),
                    e.setHeChengPage(),
                    Toast.launch("合成成功")
            } else 1 == t.res ? Toast.launch("没有碎片") : 2 == t.res ? Toast.launch("配表错误") : 3 == t.res ? Toast.launch("已有该舰长") : 4 == t.res ? Toast.launch("碎片不足") : 5 == t.res && Toast.launch("没有可合成碎片")
        },
        a.refreshCaptainListPage = function() {
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain);
            t && (t.setPos(), t.setCaptainPage())
        },
        a.handleLockCaptainMessage = function(t) {
            0 == t.sucess ? this.refreshCaptainListPage() : Toast.launch("舰长锁定失败")
        },
        a.setHuishouTxtNum = function(t) {
            this.huishouNum = t;
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain);
            e.setHuiShouNum(this.huishouNum)
        },
        a.setHuishouNum = function(t, e) {
            console.log("舰长ID:" + t + " 是否选择回收:" + e),
                e ? this.huishouNum += 1 : this.huishouNum > 0 && (this.huishouNum -= 1);
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain);
            a.setHuiShouNum(this.huishouNum)
        },
        a.resetHuishouNum = function() {
            this.huishouNum = 0;
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain);
            t.setHuiShouNum(this.huishouNum)
        },
        a.setListItemSelectedState = function(t, e) {
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain);
            if (null != a.dsListParts)
                for (var i = 0; i < a.dsListParts.length; i++)
                    if (a.dsListParts[i].id == t) return void(a.dsListParts[i].isSelected = e)
        },
        a.sendCaptainDataMsg = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceCaptainData);
            Transport.instance.send(t)
        },
        a.prosseCaptainData = function(t) {
            if (this.juniorcaptain = t.juniorcaptain, this.seniorcaptain = t.seniorcaptain, WindowManager.getInstance().isWindowVisible(WindowManager.windowType.ExchangeCaptain)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ExchangeCaptain);
                e.updataJiangHun()
            }
        },
        t
}();
egret.registerClass(CaptainManager, "CaptainManager");
var ChatManager = function() {
    function t() {
        this.msgListWorld = [],
            this.msgListCamp = [],
            this.msgListGroup = [],
            this.msgListPersonal = [],
            this.noSeeList = [],
            BlackListManager.GetInstance().addToObserverList(this)
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.CheckCanTalkToWorld = function() {
            return UserData.getInstance().getPlayerLevel() >= 40 ? !1 : UserData.getInstance().getPlayerLevel() >= 35 && 20 - this.chatTimes > 0 ? !1 : UserData.getInstance().getPlayerLevel() >= 25 && 10 - this.chatTimes > 0 ? !1 : UserData.getInstance().getPlayerLevel() >= 10 && 5 - this.chatTimes > 0 ? !1 : !0
        },
        a.hasNewMsg = function(t) {
            var e = new ChatMsgDataItem;
            switch (e.type = t.type, e.uid = t.uid, e.name = t.name, e.head = t.head, e.level = t.level, e.viplevel = t.viplevel, e.pos = t.pos, e.time = t.time, e.content = t.content, e.destname = t.destname, e.militaryranktype = t.militaryranktype, t.type) {
                case 0:
                    var a = GameLayer.getInstance().pageLayer.getChildByName("HomeUI");
                    if (a && !BlackListManager.GetInstance().isInBlackList(t.uid)) {
                        var i = t.name + ":" + t.content;
                        a.updateWorldChat(i)
                    }
                    this.hasNewWorldMsg = !0,
                        this.getMsgListWorld().unshift(e);
                    break;
                case 1:
                    this.hasNewGroupMsg = !0,
                        this.getMsgListGroup().unshift(e);
                    break;
                case 2:
                    this.hasNewPersonMsg = !0,
                        this.getMsgListPersonal().unshift(e);
                    break;
                case 3:
                    this.hasNewCampMsg = !0,
                        this.getMsgListCamp().unshift(e)
            }
            var n = WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Chat);
            if (n) {
                var s = WindowManager.getInstance().getWindow(WindowManager.windowType.Chat);
                s.updatePaper()
            }
            if (this.hasNewGroupMsg) {
                var r = WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Guild);
                if (r) {
                    var o = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
                    o.setActivityData(!0)
                }
            }
        },
        a.showChatWin = function(t) {
            void 0 === t && (t = 0),
                WindowManager.getInstance().show(WindowManager.windowType.Chat, t)
        },
        a.blackListUpdate = function() {
            var t = BlackListManager.GetInstance().getBlackList(),
                e = [];
            for (var a in t) {
                var i = new ChatMsgDataItem;
                i.type = 4,
                    i.uid = t[a].uid,
                    i.name = t[a].name,
                    i.head = t[a].head,
                    i.level = t[a].level,
                    i.power = t[a].power,
                    i.viplevel = t[a].viplevel,
                    i.militaryranktype = t[a].militaryranktype,
                    i.isNoSee = !0,
                    e.push(i)
            }
            this.setNoSeeList(e);
            var n = WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Chat);
            if (n) {
                var s = WindowManager.getInstance().getWindow(WindowManager.windowType.Chat);
                s.updatePaper()
            }
        },
        a.setMsgListWorld = function(t) {
            this.msgListWorld = t,
                this.msgListWorld.reverse()
        },
        a.getMsgListWorld = function() {
            return this.msgListWorld
        },
        a.setMsgListCamp = function(t) {
            this.msgListCamp = t
        },
        a.getMsgListCamp = function() {
            return this.msgListCamp
        },
        a.setMsgListGroup = function(t) {
            this.msgListGroup = t
        },
        a.getMsgListGroup = function() {
            return this.msgListGroup
        },
        a.setMsgListPersonal = function(t) {
            this.msgListPersonal = t
        },
        a.getMsgListPersonal = function() {
            return this.msgListPersonal
        },
        a.setNoSeeList = function(t) {
            this.noSeeList = t
        },
        a.getNoSeeList = function() {
            return this.noSeeList
        },
        t
}();
egret.registerClass(ChatManager, "ChatManager");
var ChatMsgDataItem = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ChatMsgDataItem, "ChatMsgDataItem");
var EffectManager = function() {
    function t() {
        this.skillListCache = null,
            this.skillResList = null,
            this.clipDatas = {},
            this.battleDragonDatas = {}
    }
    var e = (__define, t),
        a = e.prototype;
    return a.initBattleEff = function(e, a) {
            for (var i = this,
                    n = [], s = 0, r = t.effList; s < r.length; s++) {
                var o = r[s];
                n.push(Path.battleEffectUrl + o + ".json"),
                    n.push(Path.battleEffectUrl + o + ".png")
            }
            this.clipDatas = {},
                ResLoader.instance.preLoadResList(n,
                    function(n) {
                        for (var s = Math.floor(n.length / 2), r = 0; s > r; ++r) {
                            var o = n[2 * r],
                                l = n[2 * r + 1],
                                h = new egret.MovieClipDataFactory(o, l),
                                c = t.effList[r];
                            i.clipDatas[c] = h.generateMovieClipData("default"),
                                Utils.call(e, a)
                        }
                        BattleManager.instance.loadedBattleEffects = !0,
                            BattleManager.instance.checkLoadedFlags()
                    },
                    this);
            for (var l = [], h = 0, c = t.dragonEffects; h < c.length; h++) {
                var o = c[h];
                l.push(Path.battleEffectUrl + o + "/" + o + ".json"),
                    l.push(Path.battleEffectUrl + o + "/texture.json"),
                    l.push(Path.battleEffectUrl + o + "/texture.png")
            }
            this.battleDragonResUrls = l,
                this.battleDragonDatas = {},
                ResLoader.instance.preLoadResList(l,
                    function(n) {
                        for (var s = 0; s < l.length; ++s) {
                            var r = t.dragonEffects[s],
                                o = 3 * s,
                                h = n[o + 2],
                                c = n[o + 1],
                                d = n[o];
                            if (h && c && d) {
                                var g = new dragonBones.EgretFactory;
                                g.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(d)),
                                    g.addTextureAtlas(new dragonBones.EgretTextureAtlas(h, c)),
                                    i.battleDragonDatas[r] = g
                            }
                        }
                        BattleManager.instance.loadedDragonEffects = !0,
                            BattleManager.instance.checkLoadedFlags(),
                            Utils.call(e, a)
                    })
        },
        a.initProjectiles = function(e, a) {
            for (var i = [], n = 0, s = t.projectiles; n < s.length; n++) {
                var r = s[n];
                i.push("resource/assets/battle/projectile/" + r + ".png")
            }
            ResLoader.instance.preLoadResList(i,
                function() {
                    BattleManager.instance.loadedProjectileEffects = !0,
                        BattleManager.instance.checkLoadedFlags()
                })
        },
        a.initSkillEffect = function(t, e) {
            var a = this;
            AudioManager.instance.initSkillMusic();
            var i = BattleManager.instance.getSkillList(),
                n = null,
                s = [];
            this.skillListCache = {};
            for (var r = {},
                    o = [], l = 0; l < i.length; ++l) n = SkilldataParser.GetInstance().getItemById(i[l]),
                null == n || null == n.action || "" == n.action || r[n.action] || (s.push(Path.skillEffectUrl + n.action + "/" + n.action + ".json"), s.push(Path.skillEffectUrl + n.action + "/texture.json"), s.push(Path.skillEffectUrl + n.action + "/texture.png"), o.push(n.action), r[n.action] = !0);
            ResLoader.instance.preLoadResList(s,
                    function(i) {
                        for (var n = 0; n < o.length; ++n) {
                            var s = o[n],
                                r = 3 * n,
                                l = i[r + 2],
                                h = i[r + 1],
                                c = i[r];
                            if (l && h && c) {
                                var d = new dragonBones.EgretFactory;
                                d.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(c)),
                                    d.addTextureAtlas(new dragonBones.EgretTextureAtlas(l, h)),
                                    a.skillListCache[s] = d
                            }
                        }
                        BattleManager.instance.loadedSkillEffects = !0,
                            BattleManager.instance.checkLoadedFlags(),
                            Utils.call(t, e)
                    }),
                this.skillResList = s
        },
        a.clearEffect = function() {
            for (var e = [], a = 0, i = t.effList; a < i.length; a++) {
                var n = i[a];
                e.push(Path.battleEffectUrl + n + ".json"),
                    e.push(Path.battleEffectUrl + n + ".png")
            }
            if (ResLoader.instance.unloadResList(e), this.skillResList) {
                for (var s = [], r = 0, o = this.skillResList; r < o.length; r++) {
                    var n = o[r];
                    s.push(n)
                }
                this.skillResList = null,
                    ResLoader.instance.unloadResList(s)
            }
            if (this.battleDragonResUrls) {
                for (var s = [], l = 0, h = this.battleDragonResUrls; l < h.length; l++) {
                    var n = h[l];
                    s.push(n)
                }
                this.battleDragonResUrls = null,
                    ResLoader.instance.unloadResList(s)
            }
        },
        a.getShipFireEff = function(t, e, a, i, n) {
            void 0 === n && (n = void 0),
                n || (n = Utils.randInt(1, 3));
            var s = this.getDragonArmature("battle_fire" + n, t);
            return s && (s.display.x = e.x, s.display.y = e.y, a && (s.display.rotation = 180)),
                s
        },
        a.getShipHitEff = function(t, e, a, i) {
            void 0 === e && (e = void 0),
                e || (e = Utils.randInt(1, 2));
            var n = this.getDragonArmature("battle_hit" + e, t);
            return a && n && (n.display.x = a.x, n.display.y = a.y),
                n
        },
        a.getShipCriEff = function(e) {
            return this.getDragonArmature(t.dragonEffects[1], e)
        },
        a.getDragonArmature = function(t, e) {
            var a = this.battleDragonDatas[t];
            if (a) {
                var i = a.buildArmature(t);
                dragonBones.WorldClock.clock.add(i),
                    e && e.addChild(i.display),
                    i.animation.timeScale = 1 / BattleManager.PLAYFRAMES;
                i.animation.gotoAndPlay("normal", void 0, void 0, 1);
                return i.display.scaleX = i.display.scaleY = 2,
                    i.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                        function(t) {
                            t && t.currentTarget && (Utils.removeNode(t.currentTarget.display), dragonBones.WorldClock.clock.remove(t.currentTarget))
                        },
                        void 0),
                    i
            }
            return null
        },
        a.getTorpedoHit = function(e) {
            return this.getDragonArmature(t.dragonEffects[0], e)
        },
        a.getMissEff = function(t, e) {
            return void 0 === e && (e = void 0),
                e || (e = Utils.randInt(1, 2)),
                this.getDragonArmature("battle_water_spray" + e, t)
        },
        a.getHurtEff = function(t, e) {
            void 0 === e && (e = void 0),
                e || (e = Utils.randInt(1, 2));
            var a = this.clipDatas["battle_burn" + e];
            if (a) {
                var i = new egret.MovieClip(a);
                return i.frameRate = a.numFrames / BattleManager.PLAYFRAMES * 1,
                    t.addChild(i),
                    i.gotoAndPlay(0, -1),
                    i
            }
        },
        a.getDeadEff = function(t, e) {
            void 0 === e && (e = void 0),
                e || (e = Utils.randInt(1, 2));
            var a = "";
            a = 1 == e ? "battle_shipDestroy" : "battle_dunkerDestroy";
            var i = this.clipDatas[a];
            if (i) {
                var n = new egret.MovieClip(i);
                return n.frameRate = i.numFrames / BattleManager.PLAYFRAMES * 1,
                    t.addChild(n),
                    n.gotoAndPlay(0, -1),
                    n
            }
        },
        a.getSpeedTitleBack = function() {},
        a.getTargetSelect = function(t) {
            var e = this.clipDatas.battle_target_select;
            if (e) {
                var a = new egret.MovieClip(e);
                return a.frameRate = e.numFrames / BattleManager.PLAYFRAMES * 1,
                    t.addChild(a),
                    a.gotoAndPlay(0, -1),
                    a
            }
        },
        a.skillPlay = function(t, e, a, i) {
            var n = this.skillListCache[t.action];
            if (n) {
                var s = n.buildArmature(t.action);
                dragonBones.WorldClock.clock.add(s),
                    0 == e ? (s.display.scaleX = -2, s.display.scaleY = 2) : (s.display.scaleX = 2, s.display.scaleY = 2);
                s.animation.gotoAndPlay("normal");
                return s.animation.timeScale = .8 / BattleManager.PLAYFRAMES,
                    a && s.addEventListener(dragonBones.AnimationEvent.COMPLETE, a, i),
                    s
            }
            return Utils.call(a, i),
                null
        },
        t.instance = new t,
        t.effList = ["battle_burn1", "battle_burn2", "battle_burn3", "battle_shipDestroy", "battle_dunkerDestroy", "battle_target_select"],
        t.dragonEffects = ["battle_torpedo_explosion", "battle_hit3", "battle_hit1", "battle_hit2", "battle_water_spray1", "battle_water_spray2", "battle_fire1", "battle_fire2", "battle_fire3"],
        t.projectiles = ["battle_plane_left", "battle_plane_right", "battle_torpedo_body", "bullet"],
        t
}();
egret.registerClass(EffectManager, "EffectManager");
var EventTypes = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.EVENT_MAIN_UI_FLAG = "1",
        t.EVENT_MAIL_FALG = "2",
        t.MAINWORLD_ENTER = "3",
        t.MAINWORLD_OPEN_CAMPAIGN = "4",
        t.MAINWORLD_UPDATE_STAGE = "5",
        t.MAINWORLD_UPDATEPROCESS = "6",
        t.MAINWORLD_BAKE = "7",
        t.MAINWORLD_SHOW_CAMPAIGN = "8",
        t.EVENT_REFRESH_ITEM = "9",
        t.EVENT_CHOOSE_CAMPAIGN = "10",
        t.EVENT_REFRESH_PVE_LEVEL_ITEM = "11",
        t.EVENT_CHOOSE_AREA = "12",
        t.EVENT_MILITARY_RANK_UPGRADE = "13",
        t.EVENT_MILITARY_RANK_REWARD = "14",
        t.EVENT_BATTLE_INFO = "15",
        t.BATTLE_ACTION_END = "16",
        t.BATTLE_ACTION_START = "17",
        t.BATTLE_SHIP_HIT = "18",
        t.BATTLE_EXCHANGE_BENCH = "19",
        t.BATTLE_SHIP_HP = "20",
        t.BATTLE_SKILLBACK_REMOVE = "21",
        t.SCENE_SWITCH_START = "22",
        t.ARENA_EXCHANGE = "23",
        t.ARENA_DATA = "24",
        t.CAMP_DETECT_TIME_UPDATE = "25",
        t.CAMP_SHOP_UPDATE = "26",
        t.PVE_SOME_RES_LOAED = "27",
        t.PVE_CHOOSE_CAMPAIGN = "28",
        t.PVE_ATTACK_TIMES_UPDATE = "29",
        t.ITEM_DATA_UPDATE = "30",
        t.HOMEUI_REDBALL_STATE_CHANGE = "31",
        t.ACTIVITY_DATA_UPDATE = "32",
        t.RED_BALL_UPDATE = "33",
        t.ENTER_MAINSCENE = "34",
        t.LOGIN_QQ = "35",
        t
}();
egret.registerClass(EventTypes, "EventTypes");
var EventManager = function() {
    function t() {
        this.eventsMap = {}
    }
    var e = (__define, t),
        a = e.prototype;
    return a.dispatchEvent = function(t) {
            for (var e = [], a = 1; a < arguments.length; a++) e[a - 1] = arguments[a];
            var i = this.eventsMap[t];
            if (i)
                for (var n = i.concat(), s = 0, r = n; s < r.length; s++) {
                    var o = r[s];
                    o.func.apply(o.thisObj, e)
                }
        },
        a.addEventListener = function(t, e, a) {
            var i = this.eventsMap[t];
            i || (i = [], this.eventsMap[t] = i),
                i.push({
                    type: t,
                    func: e,
                    thisObj: a
                })
        },
        a.removeEventListener = function(t, e, a) {
            var i = this.eventsMap[t];
            if (i)
                for (var n = 0; n < i.length; ++n) {
                    var s = i[n];
                    s.type == t && s.func == e && s.thisObj == a && i.splice(n, 1)
                }
        },
        a.removeEventListenerByType = function(t) {
            var e = this.eventsMap[t];
            e && delete this.eventsMap[t]
        },
        a.removeEventListenerByBindObject = function(t) {
            if (t)
                for (var e in this.eventsMap)
                    for (var a = this.eventsMap[e], i = 0; i < a.length; ++i) {
                        var n = a[i];
                        n.thisObj == t && a.splice(i, 1)
                    }
        },
        a.removeAllEventListener = function() {
            this.eventsMap = {}
        },
        t.instance = new t,
        t
}();
egret.registerClass(EventManager, "EventManager");
var TestEventDispatcher = function() {
    function t() {
        this.testInt = 1
    }
    var e = (__define, t),
        a = e.prototype;
    return a.test = function() {
            EventManager.instance.addEventListener(EventTypes.EVENT_MAIN_UI_FLAG, this.callback1, this),
                EventManager.instance.addEventListener(EventTypes.EVENT_MAIN_UI_FLAG, this.callback2, this),
                EventManager.instance.addEventListener(EventTypes.EVENT_MAIN_UI_FLAG, t.callback3, void 0),
                EventManager.instance.dispatchEvent(EventTypes.EVENT_MAIN_UI_FLAG, 3, 4)
        },
        a.callback1 = function() {
            Log.log("callback1", this.testInt)
        },
        a.callback2 = function(t, e) {
            Log.log("callback2", t, e),
                EventManager.instance.removeEventListener(EventTypes.EVENT_MAIN_UI_FLAG, this.callback2, this)
        },
        t.callback3 = function(t, e, a) {
            Log.log("callback3", t, e, a)
        },
        t.instance = new t,
        t
}();
egret.registerClass(TestEventDispatcher, "TestEventDispatcher");
var FriendManager = function() {
    function t() {
        this._myFriendList = [],
            this._recommandList = [],
            this._invitedlist = [],
            this._receiveElecList = [],
            this._searchData = new FriendData,
            this.isWaiting = !1,
            this.eleGetNum = 0
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.ReqInivitFriend = function(t, e, a, i) {
            if (void 0 === a && (a = !0), void 0 === i && (i = null), UserData.getInstance().getPlayerLevel() < 20) return void Toast.launch(Locales.get("ui_main_function_scientific", 20));
            if (a) GameAlert.getInstance().show("好友邀请", "是否邀请" + e + "为好友？",
                function() {
                    var a = Transport.getPkg(ProtocolMgr.ID_DceInviteFriend);
                    a.uid = t,
                        a.name = e,
                        Transport.instance.send(a),
                        GameAlert.getInstance().hide(),
                        i && i()
                });
            else {
                var n = Transport.getPkg(ProtocolMgr.ID_DceInviteFriend);
                n.uid = t,
                    n.name = e,
                    Transport.instance.send(n)
            }
        },
        a.sendGetFriendMsg = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceFriendList);
            Transport.instance.send(t)
        },
        a.sendGetRecommand = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceRecommandInviteList);
            Transport.instance.send(t)
        },
        a.sendGetInvited = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceInvitedList);
            Transport.instance.send(t)
        },
        a.sendGetReceiveEle = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceRecElectricList);
            Transport.instance.send(t)
        },
        a.setMyFriendList = function(t) {
            this._myFriendList = [],
                this.redPointFriend(!1);
            for (var e in t.friendlist) {
                var a = new FriendData;
                a.uid = t.friendlist[e].info.uid,
                    a.name = t.friendlist[e].info.name,
                    a.head = t.friendlist[e].info.head,
                    a.level = t.friendlist[e].info.level,
                    a.power = t.friendlist[e].info.power,
                    a.militaryrank = t.friendlist[e].info.militaryrank,
                    a.isSend = t.friendlist[e].isSend,
                    this._myFriendList.push(a)
            }
            this.isWaiting && (WindowManager.getInstance().hideWaiting(), this.isWaiting = !1, this.ShowFriendPanel())
        },
        a.ShowFriendPanel = function() {
            return UserData.getInstance().getPlayerLevel() < 20 ? void Toast.launch(Locales.get("ui_main_function_scientific", 20)) : void WindowManager.getInstance().show(WindowManager.windowType.Friend)
        },
        a.setRecommandList = function(t) {
            this._recommandList = [];
            for (var e in t.recommandlist) {
                var a = new FriendData;
                a.uid = t.recommandlist[e].uid,
                    a.name = t.recommandlist[e].name,
                    a.head = t.recommandlist[e].head,
                    a.level = t.recommandlist[e].level,
                    a.power = t.recommandlist[e].power,
                    a.militaryrank = t.recommandlist[e].militaryrank,
                    this._recommandList.push(a)
            }
            if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var i = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                1 == i.curPage && i.updatePaper()
            }
        },
        a.setInvitedlist = function(t) {
            this._invitedlist = [];
            for (var e in t.invitedlist) {
                var a = new FriendData;
                a.uid = t.invitedlist[e].invitedinfo.uid,
                    a.name = t.invitedlist[e].invitedinfo.name,
                    a.head = t.invitedlist[e].invitedinfo.head,
                    a.level = t.invitedlist[e].invitedinfo.level,
                    a.power = t.invitedlist[e].invitedinfo.power,
                    a.militaryrank = t.invitedlist[e].invitedinfo.militaryrank,
                    a.invitedtime = t.invitedlist[e].invitedtime,
                    this._invitedlist.push(a)
            }
            if (this._invitedlist.length > 0 ? this.redPointInvite(!0) : this.redPointInvite(!1), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var i = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                2 == i.curPage && i.updatePaper()
            }
        },
        a.setReceiveElecList = function(t) {
            this.eleGetNum = t.drawnum,
                this._receiveElecList = [];
            for (var e in t.electriclist) {
                var a = new FriendData;
                a.uid = t.electriclist[e].info.uid,
                    a.name = t.electriclist[e].info.name,
                    a.head = t.electriclist[e].info.head,
                    a.level = t.electriclist[e].info.level,
                    a.power = t.electriclist[e].info.power,
                    a.militaryrank = t.electriclist[e].info.militaryrank,
                    a.receivetime = t.electriclist[e].receivetime,
                    this._receiveElecList.push(a)
            }
            if (this._receiveElecList.length > 0 ? this.redPointGetEle(!0) : this.redPointGetEle(!1), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var i = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                3 == i.curPage && i.updatePaper()
            }
        },
        a.setEleGetNum = function(t) {
            if (void 0 === t && (t = 0), this.eleGetNum = t, WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                3 == e.curPage && e.updatePaper()
            }
        },
        a.getFriendList = function() {
            return this._myFriendList
        },
        a.getRecommandList = function() {
            return this._recommandList
        },
        a.getInvitedlist = function() {
            return this._invitedlist
        },
        a.getReceiveElecList = function() {
            return this._receiveElecList
        },
        a.setSearchData = function(t) {
            if (t.uid < 0) return void Toast.launch("找不到玩家");
            if (this._searchData.uid = t.uid, this._searchData.name = t.name, this._searchData.head = t.head, this._searchData.power = t.power, this._searchData.level = t.level, WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                1 == e.curPage && e.updatePaper(!0)
            }
        },
        a.getSearchData = function() {
            return this._searchData
        },
        a.redPointFriend = function(t) {
            if (void 0 === t && (t = !1), this.isFriendRed = t, WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                e.setRedPoint()
            }
        },
        a.redPointInvite = function(t) {
            if (void 0 === t && (t = !1), this.isInviteRed = t, WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                e.setRedPoint()
            }
        },
        a.redPointGetEle = function(t) {
            if (void 0 === t && (t = !1), this.isGetEleRed = t, WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                e.setRedPoint()
            }
        },
        a.sendEleSucess = function(t) {
            if (0 == t.type) {
                if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                    var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                    if (0 == e.curPage) {
                        var a = e.curList.dataProvider;
                        for (var i in a.source) a.source[i].name == t.name && (a.source[i].isSend = 1, a.itemUpdated(a.source[i]))
                    }
                }
            } else if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend);
                if (0 == e.curPage) {
                    var a = e.curList.dataProvider;
                    for (var i in a.source) a.source[i].isSend = 1,
                        a.itemUpdated(a.source[i])
                }
            }
        },
        t
}();
egret.registerClass(FriendManager, "FriendManager");
var FriendData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(FriendData, "FriendData");
var GuideManager = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.initStep = function() {
            var e = UserData.getInstance().getGuidestep();
            t.initBool ? e >= 40 && (t.guideComplete = !0) : (t.step = e, t.initBool = !0, 40 > e && t.nextStep(e), UserData.getInstance().guide_array && (t.skillGuideBool = 1 == UserData.getInstance().guide_array[0], t.partGuideBool = 1 == UserData.getInstance().guide_array[1], t.bujiGuideBool = 1 == UserData.getInstance().guide_array[2], t.reShipGuideBool = 1 == UserData.getInstance().guide_array[3], t.techGuideBool = 1 == UserData.getInstance().guide_array[4], t.trainGuideBool = 1 == UserData.getInstance().guide_array[5], t.juntuanGuideBool = 1 == UserData.getInstance().guide_array[6], t.mergeGuideBool = 1 == UserData.getInstance().guide_array[7], t.jungongGuideBool = 1 == UserData.getInstance().guide_array[8], t.merge2GuideBool = 1 == UserData.getInstance().guide_array[9]))
        },
        t.setGuideSetpArray = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuideSave);
            e.guidestep = t,
                Transport.instance.send(e)
        },
        t.setGuideStep = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuideStep);
            e.guidestep = t,
                Transport.instance.send(e)
        },
        t.nextStep = function(e) {
            e ? t.step = e : t.step++;
            var a = t.step;
            if (a)
                if (Main.trace("new guide >>>>> ", a), t.clearMask(), 1 == a) MainUI.instance.bottomUI.showPveByForce(),
                    Utils.delayCall(1e3,
                        function() {
                            BattleManager.instance.sendMainBattleStart(100101),
                                EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_BAKE, {
                                    type: 1,
                                    id: 2
                                }),
                                t.showGuideInfo("demo_girl_words_3")
                        });
                else if (2 == a) BattleManager.instance.startBattle(!0),
                t.setGuideStep(4);
            else if (3 == a || 15 == a || 31 == a) t.createMaskTarget(450, 730, 100, 50, -90, 15, -30),
                t.createParticleRec(420, 745, 160, 70);
            else if (4 == a) t.showGuideInfo("onStep01_1");
            else if (5 == a) t.createMaskTarget(460, 300, 200, 150, -90, -60, -105),
                t.createParticleRec(360, 340, 270, 125);
            else if (6 == a) t.createMaskTarget(500, 200, 120, 30, 90, 100, 12),
                t.createParticleRec(475, 178, 160, 70);
            else if (7 == a) t.setGuideStep(7),
                t.showGuideInfo("onStep05");
            else if (8 == a) t.createMaskTarget(120, 900, 80, 50, -90, 20, -85),
                t.createParticleRec(105, 861, 115, 100);
            else if (9 == a) t.createMaskTarget(210, 80, 130, 70, 90, 110, 20),
                t.createParticleRec(188, 55, 175, 115);
            else if (10 == a) t.createMaskTarget(500, 140, 100, 30, 90, 110, 8),
                t.createParticleRec(475, 115, 160, 70);
            else if (11 == a) t.setGuideStep(11),
                egret.setTimeout(function() {
                        MainUI.instance.bottomUI.showHomeByForce(),
                            t.showGuideInfo("onStep09")
                    },
                    this, 1e3),
                MainUI.instance.changeTopMode(topUIMode.normal);
            else if (12 == a) t.createMaskTarget(240, 900, 60, 50, -90, 18, -85),
                t.createParticleRec(212, 861, 115, 100);
            else if (13 == a) t.createMaskTarget(0, 450, 640, 60, -90, 20, -130),
                t.createParticleRec(-3, 415, 640, 125);
            else if (14 == a) t.setGuideStep(16);
            else if (16 == a) GameData.skipShipGuide ? t.showGuideInfo("tutorial_new_1") : t.showGuideInfo("onStep16");
            else if (17 == a) GameData.skipShipGuide ? this.nextStep(21) : (t.createMaskTarget(450, 900, 60, 50, -90, 15, -85), t.createParticleRec(423, 861, 115, 100));
            else if (18 == a) t.createMaskTarget(0, 340, 640, 120, -90, 20, -115),
                t.createParticleRec(1, 345, 635, 163);
            else if (19 == a) t.setGuideStep(21);
            else if (20 == a) MainUI.instance.bottomUI.showHomeByForce(),
                t.showGuideInfo("onStep20");
            else if (21 == a) t.createMaskTarget(460, 300, 200, 150, -90, -60, -105),
                t.createParticleRec(360, 340, 270, 125);
            else if (22 == a) t.createMaskTarget(500, 200, 120, 30, 90, 100, 12),
                t.createParticleRec(475, 178, 160, 70);
            else if (23 == a) t.setGuideStep(23),
                MainUI.instance.bottomUI.showHomeByForce(),
                t.showGuideInfo("onStep24");
            else if (24 == a) t.createMaskTarget(120, 900, 80, 50, -90, 20, -85),
                t.createParticleRec(105, 861, 115, 100);
            else if (25 == a) t.createMaskTarget(400, 80, 130, 70, 90, 105, 20),
                t.createParticleRec(372, 55, 175, 115);
            else if (26 == a) t.createMaskTarget(500, 140, 100, 30, 90, 110, 8),
                t.createParticleRec(472, 115, 160, 70);
            else if (27 == a) t.setGuideStep(27),
                egret.setTimeout(function() {
                        MainUI.instance.bottomUI.showHomeByForce(),
                            t.showGuideInfo("onStep28")
                    },
                    this, 1e3);
            else if (28 == a) t.createMaskTarget(240, 900, 60, 50, -90, 18, -85),
                t.createParticleRec(212, 861, 115, 100);
            else if (29 == a) t.createMaskTarget(0, 450, 640, 60, -90, 20, -130),
                t.createParticleRec(-3, 415, 640, 125);
            else if (30 == a) t.setGuideStep(32);
            else if (32 == a) t.showGuideInfo("onStep30");
            else if (33 == a) t.showGuideInfo("onStep35");
            else if (34 == a) t.createMaskTarget(120, 900, 80, 50, -90, 20, -85),
                t.createParticleRec(105, 861, 115, 100);
            else if (35 == a) t.createMaskTarget(130, 250, 360, 150, 90, 110, 13),
                t.createParticleRec(1, 260, 635, 210);
            else if (36 == a) t.createMaskTarget(510, 450, 120, 20, -90, 5, -25),
                t.createParticleRec(497, 430, 125, 60);
            else if (37 == a) t.createMaskTarget(380, 800, 120, 30, -90, 20, -50),
                t.createParticleRec(368, 777, 155, 70);
            else if (38 == a) t.setGuideStep(38),
                egret.setTimeout(function() {
                        MainUI.instance.bottomUI.showHomeByForce(),
                            t.showGuideInfo("onStep42")
                    },
                    this, 1e3);
            else if (39 == a) t.createMaskTarget(240, 900, 60, 50, -90, 20, -85),
                t.createParticleRec(212, 861, 115, 100);
            else if (40 == a) t.setGuideStep(40),
                t.guideComplete = !0;
            else if (41 == a) t.showGuideInfo("touchGuide01");
            else if (42 == a) t.createMaskTarget(120, 900, 80, 50, -90, 20, -85),
                t.createParticleRec(105, 861, 115, 100);
            else if (43 == a) t.showGuideInfo("touchGuide02");
            else if (44 == a) t.createMaskTarget(350, 520, 80, 50, -90, 20, -85),
                t.createParticleRec(350, 490, 100, 100);
            else if (45 == a) t.createMaskTarget(500, 160, 100, 30, 90, 110, 8),
                t.createParticleRec(472, 120, 160, 70);
            else if (46 == a) t.setGuideStep(45),
                t.showGuideInfo("touchGuide03");
            else if (47 == a) t.createMaskTarget(350, 520, 80, 50, -90, 20, -85),
                t.createParticleRec(350, 490, 100, 100);
            else if (48 == a) t.createMaskTarget(510, 450, 120, 20, -90, 5, -25),
                t.createParticleRec(497, 450, 125, 60);
            else if (49 == a) t.showGuideInfo("touchGuide04");
            else if (50 == a) t.createMaskTarget(400, 700, 160, 100, -90, 5, -125),
                t.createParticleRec(370, 700, 160, 100);
            else if (51 == a) t.setGuideStep(51);
            else if (52 == a) t.showGuideInfo("touchGuide05"),
                t.setGuideStep(52),
                t.skillGuideBool = !0,
                t.setGuideSetpArray(0);
            else if (53 == a) t.showGuideInfo("touchGuide06");
            else if (54 == a) t.createMaskTarget(400, 740, 120, 20, -90, 5, -25),
                t.createParticleRec(365, 740, 155, 65);
            else if (55 == a) t.showGuideInfo("touchGuide07");
            else if (56 == a);
            else if (57 == a) t.showGuideInfo("touchGuide08"),
                t.setGuideStep(57),
                t.partGuideBool = !0,
                t.setGuideSetpArray(1);
            else if (58 == a) t.createMaskTarget(400, 700, 160, 100, -90, 5, -125),
                t.createParticleRec(395, 695, 160, 100);
            else if (59 == a) t.showGuideInfo("touchGuide09");
            else if (60 == a) t.createMaskTarget(240, 900, 60, 50, -90, 20, -85),
                t.createParticleRec(212, 861, 115, 100);
            else if (61 == a);
            else if (62 == a) t.showGuideInfo("touchGuide10"),
                t.setGuideStep(62),
                t.bujiGuideBool = !0,
                t.setGuideSetpArray(2);
            else if (63 == a) t.createMaskTarget(460, 420, 150, 50, -90, 20, -85),
                t.createParticleRec(470, 410, 155, 70);
            else if (64 == a);
            else if (65 == a) MainUI.instance.bottomUI.showHomeByForce(),
                t.showGuideInfo("touchGuide11"),
                t.setGuideStep(65);
            else if (66 == a) t.createMaskTarget(460, 300, 200, 150, -90, -60, -105),
                t.createParticleRec(360, 340, 270, 125);
            else if (67 == a) t.createMaskTarget(500, 200, 120, 30, 90, 100, 12),
                t.createParticleRec(475, 178, 160, 70);
            else if (68 == a) t.setGuideSetpArray(3),
                t.reShipGuideBool = !0;
            else if (69 == a) t.showGuideInfo("touchGuide12");
            else if (70 == a) t.createMaskTarget(120, 900, 80, 50, -90, 20, -85),
                t.createParticleRec(105, 861, 115, 100);
            else if (71 == a) t.createMaskTarget(400, 80, 130, 70, 90, 105, 20),
                t.createParticleRec(372, 55, 175, 115);
            else if (72 == a) t.createMaskTarget(500, 140, 100, 30, 90, 110, 8),
                t.createParticleRec(476, 115, 160, 70);
            else if (73 == a) t.showGuideInfo("touchGuide13");
            else if (74 == a) t.createMaskTarget(130, 250, 360, 200, 90, 110, 13),
                t.createParticleRec(1, 260, 635, 210);
            else if (75 == a) t.createMaskTarget(510, 690, 120, 40, -90, 5, -25),
                t.createParticleRec(497, 712, 125, 60);
            else if (76 == a) t.showGuideInfo("touchGuide14");
            else if (77 == a) t.createMaskTarget(260, 760, 150, 80, -90, 5, -85),
                t.createParticleRec(240, 780, 157, 65);
            else if (78 == a) MainUI.instance.bottomUI.showPvpByForce(),
                t.showGuideInfo("touchGuide15");
            else if (79 == a) t.createMaskTarget(130, 90, 360, 200, 90, 110, 13),
                t.createParticleRec(1, 100, 635, 210);
            else if (80 == a) t.showGuideInfo("touchGuide16");
            else if (81 == a) t.createMaskTarget(35, 680, 230, 120, -90, 20, -200),
                t.createParticleRec(35, 615, 230, 170);
            else if (82 == a) t.showGuideInfo("touchGuide17"),
                t.techGuideBool = !0,
                t.setGuideStep(82),
                t.setGuideSetpArray(4);
            else if (83 == a) t.createMaskTarget(500, 200, 100, 30, 90, 110, 8),
                t.createParticleRec(475, 175, 160, 70);
            else if (84 == a);
            else if (85 == a) t.showGuideInfo("touchGuide18"),
                t.trainGuideBool = !0,
                t.setGuideStep(85),
                t.setGuideSetpArray(5);
            else if (86 == a) t.showGuideInfo("touchGuide19");
            else if (87 == a) t.createMaskTarget(120, 750, 150, 80, -90, 5, -85),
                t.createParticleRec(105, 770, 155, 65);
            else if (88 == a) t.showGuideInfo("touchGuide20");
            else if (89 == a) t.createMaskTarget(380, 750, 150, 80, -90, 5, -85),
                t.createParticleRec(365, 770, 155, 65);
            else if (90 == a);
            else if (91 == a) MainUI.instance.bottomUI.showPvpByForce(),
                t.showGuideInfo("touchGuide21");
            else if (92 == a) t.createMaskTarget(130, 390, 360, 200, 90, 110, 13),
                t.createParticleRec(1, 400, 635, 210);
            else if (93 == a) t.showGuideInfo("touchGuide22");
            else if (94 == a) t.createMaskTarget(130, 260, 360, 150, 90, 110, 13),
                t.createParticleRec(1, 270, 635, 160);
            else if (95 == a);
            else if (96 == a) MainUI.instance.bottomUI.showPveByForce(),
                t.showGuideInfo("touchGuide23");
            else if (97 == a) t.createMaskTarget(1, 50, 120, 80, 90, 100, 0),
                t.createParticleRec(1, 56, 110, 55);
            else if (98 == a) t.showGuideInfo("touchGuide24");
            else if (99 == a) t.createMaskTarget(140, 750, 150, 80, -90, 5, -85),
                t.createParticleRec(125, 770, 150, 65);
            else if (100 == a);
            else if (101 == a) t.showGuideInfo("touchGuide25"),
                t.juntuanGuideBool = !0,
                t.setGuideStep(101),
                t.setGuideSetpArray(6);
            else if (102 == a) t.createMaskTarget(1, 640, 650, 200, -90, 0, -200),
                t.createParticleRec(1, 650, 635, 210),
                MainUI.instance.bottomUI.showPvpByForce(),
                t.setGuideStep(102);
            else if (103 == a) t.showGuideInfo("touchGuide27");
            else if (104 == a) {
                if (t.positionParam) {
                    var i = t.positionParam;
                    t.createMaskTarget(i.x, i.y, i.w, i.h, -90, 20, -100),
                        t.createParticleRec(i.x, i.y, i.w, i.h)
                }
            } else 105 == a ? t.showGuideInfo("touchGuide28") : 106 == a ? (t.createMaskTarget(480, 160, 150, 55, 90, 100, 0), t.createParticleRec(465, 160, 155, 55)) : 107 == a ? (t.merge2GuideBool = !0, t.setGuideSetpArray(9), t.showGuideInfo("touchGuide29")) : 108 == a ? (t.createMaskTarget(440, 750, 150, 60, 90, 100, 0), t.createParticleRec(425, 750, 155, 60)) : 109 == a ? (t.setGuideStep(109), t.mergeGuideBool = !0, t.showGuideInfo("touchGuide30"), t.setGuideSetpArray(7)) : 110 == a ? (t.createMaskTarget(380, 770, 150, 80, -90, 5, -85), t.createParticleRec(365, 790, 155, 65)) : 111 == a || (112 == a ? (MainUI.instance.bottomUI.showPvpByForce(), t.showGuideInfo("touchGuide31"), t.setGuideStep(112)) : 113 == a ? (t.createMaskTarget(1, 440, 650, 200, -90, 0, -200), t.createParticleRec(1, 450, 635, 210)) : 114 == a || (116 == a ? (t.showGuideInfo("touchGuide32"), t.setGuideStep(116)) : 117 == a ? (t.createMaskTarget(340, 900, 60, 50, -90, 18, -85), t.createParticleRec(312, 861, 115, 100)) : 118 == a ? (t.createMaskTarget(1, 440, 650, 200, -90, 0, -200), t.createParticleRec(1, 450, 635, 210)) : 119 == a ? t.showGuideInfo("touchGuide33") : 120 == a || (121 == a ? (t.setGuideStep(121), t.showGuideInfo("touchGuide34"), t.jungongGuideBool = !0, t.setGuideSetpArray(8)) : 122 == a ? (t.createMaskTarget(260, 750, 150, 80, -90, 5, -85), t.createParticleRec(242, 770, 155, 65)) : 123 == a || (124 == a ? (t.showGuideInfo("touchGuide35"), t.setGuideStep(124)) : 125 == a ? (t.createMaskTarget(120, 900, 80, 50, -90, 20, -85), t.createParticleRec(105, 861, 115, 100)) : 126 == a ? (t.createMaskTarget(530, 620, 120, 80, -90, 5, -85), t.createParticleRec(515, 635, 120, 60)) : 127 == a ? t.showGuideInfo("touchGuide36") : 128 == a ? (t.createMaskTarget(40, 230, 100, 110, -90, 18, -100), t.createParticleRec(40, 230, 100, 105)) : 129 == a ? (t.createMaskTarget(500, 150, 100, 30, 90, 110, 8), t.createParticleRec(475, 120, 160, 70)) : 130 == a ? t.showGuideInfo("touchGuide37") : 131 == a || (132 == a ? (t.showGuideInfo("touchGuide38"), t.setGuideStep(132)) : 133 == a ? (t.createMaskTarget(120, 900, 80, 50, -90, 20, -85), t.createParticleRec(105, 861, 115, 100)) : 134 == a ? (t.createMaskTarget(10, 240, 100, 120, -90, 18, -150), t.createParticleRec(10, 245, 100, 110)) : 135 == a ? t.showGuideInfo("touchGuide39") : 136 == a ? (t.createMaskTarget(500, 150, 100, 30, 90, 110, 8), t.createParticleRec(475, 120, 160, 70)) : 137 == a ? t.showGuideInfo("touchGuide40") : 138 == a ? (t.createMaskTarget(10, 240, 100, 120, -90, 18, -150), t.createParticleRec(10, 245, 100, 110)) : 139 == a ? (t.createMaskTarget(510, 370, 120, 20, -90, 5, -50), t.createParticleRec(497, 370, 125, 58)) : 140 == a ? (t.createMaskTarget(370, 760, 150, 80, -90, 18, -85), t.createParticleRec(370, 780, 155, 65)) : 141 == a && t.showGuideInfo("touchGuide41"))))))
        },
        t.showGuideInfo = function(t) {
            if (!PlayerGuidePanel.instance) {
                var e = Utils.textFlowByStr(Locales.get(t));
                GameLayer.getInstance().topLayer.addChild(new PlayerGuidePanel({
                    txt: e
                }))
            }
        },
        t.clearMask = function() {
            t.vessel && (GameLayer.getInstance().topLayer.removeChild(t.vessel), t.vessel = null)
        },
        t.createTouMing = function(e, a, i, n) {
            var s = new egret.Sprite,
                r = new egret.Bitmap(RES.getRes("tutorial_touming_png"));
            return s.addChild(r),
                s.x = e,
                s.y = a,
                r.width = i,
                r.height = n,
                t.vessel.addChild(s),
                s.touchEnabled = !0,
                s
        },
        t.createMaskTarget = function(e, a, i, n, s, r, o) {
            void 0 === r && (r = 0),
                void 0 === o && (o = 0),
                t.vessel = new egret.Sprite,
                GameLayer.getInstance().topLayer.addChild(t.vessel);
            var l = new egret.Sprite;
            l.anchorOffsetX = l.width / 2,
                l.anchorOffsetY = l.height / 2,
                l.rotation = s,
                l.addChild(new egret.Bitmap(RES.getRes("tutorial_arrow_png")));
            var h = new egret.Point(e, a);
            l.x = h.x + i / 2 - l.width / 2 + r,
                l.y = h.y + n + o;
            var c = 20;
            t.createTouMing(0, 0, GameData.designWidth, h.y - c),
                t.createTouMing(h.x + i + c, h.y - c, GameData.designWidth - (h.x + i + c), n + 2 * c),
                t.createTouMing(0, h.y - c, h.x - c, n + 2 * c),
                t.createTouMing(0, h.y + n + c, GameData.designWidth, GameData.designHeight - (h.y + n + c)),
                t.vessel.addChild(l),
                l.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                    function() {
                        GameTick.removeHandler(t.tickId)
                    },
                    this),
                t.handInitY = l.y,
                t.handSpeed = 10,
                t.tickId = GameTick.registerHandler(function() {
                        l.y += t.handSpeed,
                            (l.y > t.handInitY + 20 || l.y < t.handInitY - 20) && (t.handSpeed *= -1)
                    },
                    100)
        },
        t.createParticleRec = function(e, a, i, n) {
            var s = new egret.Sprite;
            s.x = e,
                s.y = a,
                s.width = i,
                s.height = n,
                t.vessel.addChild(s),
                new ParticleDisplayObj(s, ParticleType.TrailingLight, ShapeType.Rectangle)
        },
        t.showGuider = function(e) {
            t.vessel && (t.vessel.visible = e),
                PlayerGuidePanel.instance && (PlayerGuidePanel.instance.visible = e)
        },
        t
}();
egret.registerClass(GuideManager, "GuideManager");
var GuildDonateAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/JunTuan_DonateSkin.exml"
            /*tpa=resource/eui_skins/JunTuan_DonateSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnDonate1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnDonate2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnDonate3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnDonate1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnDonate2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnDonate3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    this.hide();
                    break;
                case this.btnDonate1:
                    UserData.getInstance().getRes(TypeDefine.RES.Gold) >= 5e4 ? (GuildManager.getInstance().isDonateIng = !0, GuildManager.getInstance().sendGuildDonate(1)) : (Toast.launch("金币不足"), UserData.getInstance()._level >= 9 && (this.hide(), WindowManager.getInstance().hideAll(), WindowManager.getInstance().show(WindowManager.windowType.BuJi), UserData.getInstance().sendDetailMessage(), MainUI.instance.setBottomVisible(!0)));
                    break;
                case this.btnDonate2:
                    UserData.getInstance().getRes(TypeDefine.RES.Diamond) >= 20 ? (GuildManager.getInstance().isDonateIng = !0, GuildManager.getInstance().sendGuildDonate(2)) : (Toast.launch("钻石不足"), this.hide(), WindowManager.getInstance().show(WindowManager.windowType.Recharge));
                    break;
                case this.btnDonate3:
                    UserData.getInstance().getRes(TypeDefine.RES.Diamond) >= 200 ? (GuildManager.getInstance().isDonateIng = !0, GuildManager.getInstance().sendGuildDonate(3)) : (Toast.launch("钻石不足"), this.hide(), WindowManager.getInstance().show(WindowManager.windowType.Recharge))
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("guildContribute"),
                ConfigData.preLoadDats(e, [GuildcontributeParser],
                    function() {
                        t()
                    })
        },
        i.show = function() {
            var t = this;
            this.init(),
                this.btnDonate1.icon.source = "GUI_Homepage_Icon_31_png",
                this.btnDonate2.icon.source = "GUI_Homepage_Icon_32_png",
                this.btnDonate3.icon.source = "GUI_Homepage_Icon_32_png",
                this.scrollerNotify.viewport = this.listNotify,
                this.setButtonsState(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        t.setNotifyData()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.setNotifyData = function() {
            var t = this.getGuildNotifyPageList();
            this.listNotify.dataProvider = new eui.ArrayCollection(t),
                this.listNotify.itemRenderer = guildDonateNotifyFactoryListItem
        },
        i.getGuildNotifyPageList = function() {
            var t = [];
            if (GuildManager.getInstance().loglist)
                for (var e = 0; e < GuildManager.getInstance().loglist.length; e++) {
                    var a = GuildManager.getInstance().loglist[e];
                    0 == a.type && t.push({
                        txt: "<font>" + Utils.getDateByNum(1e3 * a.time, timeType.MDHM) + "</font><font color='#ffff00'> " + a.name + " </font><font>提供了</font><font color='#00ff00'>" + a.param[0] + "</font><font>军团建设</font>"
                    })
                }
            return t
        },
        i.setButtonsState = function() {
            GuildManager.getInstance().donatetimes >= 1 ? (this.btnDonate1.enabled = !1, this.btnDonate2.enabled = !1, this.btnDonate3.enabled = !1) : (this.btnDonate1.enabled = !0, this.btnDonate2.enabled = !0, this.btnDonate3.enabled = !0)
        },
        e
}(eui.Component);
egret.registerClass(GuildDonateAlert, "GuildDonateAlert");
var guildDonateNotifyFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/JunTuan_7_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_7_Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data && (this.txtName.textFlow = (new egret.HtmlTextParser).parser(this.data.txt))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(guildDonateNotifyFactoryListItem, "guildDonateNotifyFactoryListItem");
var guildManagePage;
!
function(t) {
    t[t.PAGE_BASE = 0] = "PAGE_BASE",
        t[t.PAGE_GUILDSTORE = 1] = "PAGE_GUILDSTORE",
        t[t.PAGE_GUILDTECHNOLOGY = 2] = "PAGE_GUILDTECHNOLOGY",
        t[t.PAGE_GUILDMEMBER = 3] = "PAGE_GUILDMEMBER",
        t[t.PAGE_GUILDMANAGE = 4] = "PAGE_GUILDMANAGE"
}(guildManagePage || (guildManagePage = {}));
var GuildManager = function() {
    function t() {
        this.isOpenWin = !1,
            this.isOpenWinJoin = !1,
            this.isToOpenJoin = !1,
            this.isToOpenManage = !1,
            this.isSearchGuild = !1,
            this.isOpenDonate = !1,
            this.isDonateIng = !1,
            this.isChangeGuildBadge = !1,
            this.memberlist = [],
            this.applylist = [],
            this.guildlist = [],
            this.applyGuildlist = [],
            this.lastTime = 0,
            this.guildMemberData = [],
            this.windowGuildCurrPage = guildManagePage.PAGE_BASE,
            this.scienceLevels = [],
            this.GuildScienceList = []
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        a.setGuildData = function(t) {
            if (this.isSearchGuild = !1, this.searchGuildID = "", this.id = t.id, this.isOpenWin) {
                if (null == this.id || "" == this.id) return this.isToOpenJoin = !0,
                    this.isOpenWinJoin = !0,
                    void this.sendGuildList(0, 1);
                this.name = t.name,
                    this.medal = t.medal,
                    this.level = t.level,
                    null == t.declaration || "" == t.declaration ? this.declaration = "欢迎来到战舰帝国,让我们一起成长" : this.declaration = t.declaration,
                    null == t.notify || "" == t.notify ? this.notify = "这个军团长很懒，没有写任何公告" : this.notify = t.notify,
                    this.pos = t.pos,
                    this.membercount = t.membercount,
                    this.donatetimes = t.donatetimes,
                    this.buygifttimes = t.buygifttimes,
                    this.dismisstime = t.dismisstime,
                    this.memberlist = t.memberlist,
                    this.verifyoption = t.verifyoption,
                    this.dismisstype = t.dismisstype,
                    this.activepoint = t.activepoint,
                    this.guildpoint = t.guildpoint,
                    this.loglist = t.loglist,
                    this.isDonateIng && (this.isDonateIng = !1, GuildDonateAlert.getInstance().setNotifyData(), GuildDonateAlert.getInstance().setButtonsState()),
                    this.openWindowGuild()
            }
        },
        a.setGuildListData = function(t) {
            if (this.guildlist = [], this.applyGuildlist = [], t.guildlist && (this.guildlist = t.guildlist.guildlist), t.applylist && (this.applyGuildlist = t.applylist.guildlist), this.page = t.page, !this.isOpenWinJoin) return void(WindowManager.getInstance().isWindowVisible(WindowManager.windowType.RankList) && (t.type = 16, RankListManager.getInstance().setdata(t)));
            if (this.isToOpenJoin) this.isToOpenJoin = !1,
                this.lastTime = 10800 - (UserData.getInstance().getOldServerTime() / 1e3 - t.quittime),
                WindowManager.getInstance().show(WindowManager.windowType.GuildJoin);
            else {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.GuildJoin);
                this.isSearchGuild ? (this.guildlist = [], this.guildlist.push(this.tmpSearchGuild), e && (e.setJoinGuildPage(), e.txtReturnList.visible = !0)) : e && (e.setJoinGuildPage(), e.txtReturnList.visible = !1)
            }
        },
        a.sendGuildData = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGuildData);
            Transport.instance.send(t)
        },
        a.sendGuildList = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceGuildList);
            a.page = t,
                a.type = e,
                Transport.instance.send(a)
        },
        a.sendCreateGuild = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceCreateGuild);
            a.name = t,
                a.medal = e,
                Transport.instance.send(a)
        },
        a.handleCreateGuild = function(t) {
            0 == t.res && (MainUI.instance.setBottomVisible(!0), WindowManager.getInstance().hide(WindowManager.windowType.GuildJoin), this.sendGuildData())
        },
        a.sendSearchGuild = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSearchGuild);
            e.id = t,
                Transport.instance.send(e)
        },
        a.handleSearchGuild = function(t) {
            t.data && (t.data.camp = t.camp, this.tmpSearchGuild = t.data, this.sendGuildList(0, 1))
        },
        a.sendGuildApply = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildApply);
            e.uid = t,
                Transport.instance.send(e)
        },
        a.handleGuildApply = function(e) {
            0 == e.res ? (Toast.launch("加入申请已提交"), 0 == e.isverified ? this.isSearchGuild ? this.sendSearchGuild(this.searchGuildID) : this.sendGuildList(0, 1) : 1 == e.isverified && (WindowManager.getInstance().hide(WindowManager.windowType.GuildJoin), t.getInstance().isOpenWin = !0, t.getInstance().windowGuildCurrPage = guildManagePage.PAGE_BASE, t.getInstance().sendGuildData())) : 3 == e.res ? Toast.launch("军团人数达到上限") : 4 == e.res ? Toast.launch("申请军团数量上线") : 5 == e.res ? Toast.launch("重复申请") : 6 == e.res ? Toast.launch("阵营不同") : 7 == e.res ? Toast.launch("退团倒计时未到") : 8 == e.res && (UserData.getInstance()._level >= 18 ? Toast.launch("该军团审核列表已满") : Toast.launch("您未达到18级,不能加入军团")),
                e.uid,
                e.isverified
        },
        a.sendGuildCancelApply = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildCancelApply);
            e.uid = t,
                Transport.instance.send(e)
        },
        a.handleGuildCancelApply = function(t) {
            0 == t.res && (Toast.launch("成功取消申请"), this.isSearchGuild ? this.sendSearchGuild(this.searchGuildID) : this.sendGuildList(0, 1)),
                t.uid
        },
        a.openWindowGuild = function() {
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
            t ? this.windowGuildCurrPage == guildManagePage.PAGE_BASE ? t.setGuildBaseInfo() : this.windowGuildCurrPage == guildManagePage.PAGE_GUILDSTORE ? (t.setGuildStoreInfo(), t.setGuildBaseInfo()) : this.windowGuildCurrPage == guildManagePage.PAGE_GUILDTECHNOLOGY ? t.setGuildBaseInfo() : this.windowGuildCurrPage == guildManagePage.PAGE_GUILDMANAGE && t.setGuildManageInfo() : (WindowManager.getInstance().show(WindowManager.windowType.Guild), this.isOpenDonate && (this.isOpenDonate = !1, GuildDonateAlert.getInstance().show()))
        },
        a.sendGuildMemberList = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGuildMemberList);
            t.page = 0,
                Transport.instance.send(t)
        },
        a.handleGuildMemberList = function(t) {
            if (t.memberlist && (this.guildMemberData = t.memberlist, this.getGuildLeader())) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
                e && (e.txtGuildLeader.text = "军团长:" + this.getGuildLeader().name, e.setGuildMemberInfo())
            }
        },
        a.getGuildLeader = function() {
            for (var t = 0; t < this.guildMemberData.length; t++)
                if (0 == this.guildMemberData[t].pos) return this.guildMemberData[t]
        },
        a.sendGuildScienceList = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGuildScienceList);
            Transport.instance.send(t)
        },
        a.handleGuildScienceList = function(e) {
            e.res,
                this.scienceLevels = e.levels,
                this.GuildScienceList = this.getGuildTechnologyPageList();
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
            a && a.showGuildManagePageByType(t.getInstance().windowGuildCurrPage)
        },
        a.getGuildTechnologyPageList = function() {
            for (var t = [], e = GuildscienceParser.GetInstance().getDataArr(), a = GuildsciencedataParser.GetInstance().getDataArr(), i = 0; i < e.length; i++) {
                var n = {};
                n.id = e[i].id,
                    n.name = e[i].name_l,
                    n.desc1 = e[i].desc1_l,
                    n.desc2 = e[i].desc2_l,
                    n.icon = e[i].icon,
                    n.ratio = e[i].ratio,
                    n.level = 0;
                for (var s = 0; s < this.scienceLevels.length; s++)
                    if (n.id == s + 1) {
                        n.level = this.scienceLevels[s];
                        break
                    }
                for (var r = 0; r < a.length; r++)
                    if (n.level == a[r].level) {
                        r + 1 >= a.length ? n.cost = 0 : 1 == n.id ? (n.cost = a[r + 1].guildscience1Cost, n.effect = a[r].guildscience1Effect) : 2 == n.id ? (n.cost = a[r + 1].guildscience2Cost, n.effect = a[r].guildscience2Effect) : 3 == n.id ? (n.cost = a[r + 1].guildscience3Cost, n.effect = a[r].guildscience3Effect) : 4 == n.id ? (n.cost = a[r + 1].guildscience4Cost, n.effect = a[r].guildscience4Effect) : 5 == n.id ? (n.cost = a[r + 1].guildscience5Cost, n.effect = a[r].guildscience5Effect) : 6 == n.id ? (n.cost = a[r + 1].guildscience6Cost, n.effect = a[r].guildscience6Effect) : 7 == n.id ? (n.cost = a[r + 1].guildscience7Cost, n.effect = a[r].guildscience7Effect) : 8 == n.id && (n.cost = a[r + 1].guildscience8Cost, n.effect = a[r].guildscience8Effect);
                        break
                    }
                t.push(n)
            }
            return t
        },
        a.sendUpgradeGuildScience = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceUpgradeGuildScience);
            e.id = t,
                Transport.instance.send(e)
        },
        a.handleUpgradeGuildScience = function(e) {
            e.id,
                0 == e.res ? (t.getInstance().sendGuildScienceList(), Toast.launch("升级成功")) : 1 == e.res ? Toast.launch("已升级到最高级") : 2 == e.res ? Toast.launch("不是军长或者副军长不能升级") : 5 == e.res ? Toast.launch("建设点不足") : 10 == e.res ? Toast.launch("非法id") : 11 == e.res ? Toast.launch("玩家所在的军团不存在") : 12 == e.res && Toast.launch("配表错误")
        },
        a.sendGuildApplyList = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGuildApplyList);
            t.page = 0,
                Transport.instance.send(t)
        },
        a.handleGuildApplyList = function(t) {
            this.applylist = t.applylist,
                GuildVerifyAlert.getInstance().setListData();
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
            e && e.setActivityData(e.isChat)
        },
        a.sendGuildApproval = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceGuildApproval);
            a.uid = t,
                a.type = e,
                Transport.instance.send(a)
        },
        a.handleGuildApproval = function(t) {
            t.type,
                0 == t.res ? this.sendGuildApplyList() : 3 == t.res ? Toast.launch("不是会长或副会长") : 6 == t.res ? Toast.launch("该玩家已加入其它公会") : 8 == t.res ? Toast.launch("军团人数已达上限") : 9 == t.res && Toast.launch("无申请加入军团记录")
        },
        a.sendSetVerifyOptions = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSetVerifyOptions);
            e.option = t,
                Transport.instance.send(e)
        },
        a.handleSetVerifyOptions = function(t) {
            0 == t.res || 3 == t.res && Toast.launch("不是会长")
        },
        a.sendGuildSetDeputy = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildSetDeputy);
            e.uid = t,
                Transport.instance.send(e)
        },
        a.handleGuildSetDeputy = function(e) {
            0 == e.res ? (t.getInstance().sendGuildMemberList(), Toast.launch("任命成功")) : 3 == e.res ? Toast.launch("你不是军团长，你没有权利任命副军团长") : 4 == e.res && Toast.launch("已有2名副军团长")
        },
        a.sendGuildFireDeputy = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildFireDeputy);
            e.uid = t,
                Transport.instance.send(e)
        },
        a.handleGuildFireDeputy = function(e) {
            0 == e.res ? (t.getInstance().sendGuildMemberList(), Toast.launch("解除职位成功")) : 3 == e.res ? Toast.launch("你不是军团长，你没有权利任命副军团长") : 4 == e.res && Toast.launch("对方不是副军团长")
        },
        a.sendGuildDemise = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildDemise);
            e.uid = t,
                Transport.instance.send(e)
        },
        a.handleGuildDemise = function(e) {
            0 == e.res ? (t.getInstance().sendGuildMemberList(), Toast.launch("转让军团长成功")) : 3 == e.res ? Toast.launch("你不是军团长") : 4 == e.res && Toast.launch("对方不是副军团长")
        },
        a.sendGuildExpel = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildExpel);
            e.uid = t,
                Transport.instance.send(e)
        },
        a.handleGuildExpel = function(e) {
            0 == e.res ? t.getInstance().sendGuildMemberList() : 3 == e.res && Toast.launch("职位不够")
        },
        a.sendGuildQuit = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGuildQuit);
            Transport.instance.send(t)
        },
        a.handleGuildQuit = function(t) {
            0 == t.res ? (WindowManager.getInstance().hide(WindowManager.windowType.Guild), MainUI.instance.setBottomVisible(!0), Toast.launch("退出军团成功")) : 1 == t.res ? Toast.launch("会长不能退团") : 4 == t.res && Toast.launch("驻守和战役期间不能退团")
        },
        a.sendGuildDonate = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildDonate);
            e.type = t,
                Transport.instance.send(e)
        },
        a.handleGuildDonate = function(t) {
            if (0 == t.res) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
                e.setActivityData(e.isChat),
                    Toast.launch("捐献成功")
            } else 3 == t.res ? Toast.launch("达到最大捐献次数") : 5 == t.res && Toast.launch("钻石或金币不足")
        },
        a.sendModifyNotify = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceModifyNotify);
            e.notify = t,
                Transport.instance.send(e)
        },
        a.handleModifyNotify = function(t) {
            0 == t.res ? Toast.launch("军团公告修改成功") : 3 == t.res && Toast.launch("不是军团长或副军团长")
        },
        a.sendModifyDeclaration = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceModifyDeclaration);
            e.delcartion = t,
                Transport.instance.send(e)
        },
        a.handleModifyDeclaration = function(t) {
            0 == t.res ? Toast.launch("军团宣言修改成功") : 3 == t.res && Toast.launch("不是军团长或副军团长")
        },
        a.sendRenameGuild = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceRenameGuild);
            e.name = t,
                Transport.instance.send(e)
        },
        a.handleRenameGuild = function(t) {
            0 == t.res ? Toast.launch("军团更名成功") : 1 == t.res ? Toast.launch("没有军团") : 2 == t.res ? Toast.launch("不是军团成员") : 3 == t.res ? Toast.launch("不是军团长") : 4 == t.res ? Toast.launch("新名字重复") : 5 == t.res && Toast.launch("道具不足或钻石不足")
        },
        a.sendGuildSetMedal = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGuildSetMedal);
            e.id = t,
                Transport.instance.send(e)
        },
        a.handleGuildSetMedal = function(t) {
            0 == t.res ? Toast.launch("军团徽记更换成功") : 3 == t.res && Toast.launch("不是军团长")
        },
        a.sendGuildDismiss = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGuildDismiss);
            Transport.instance.send(t)
        },
        a.handleGuildDismiss = function(t) {
            0 == t.res ? (WindowManager.getInstance().hide(WindowManager.windowType.Guild), MainUI.instance.setBottomVisible(!0), Toast.launch("成功解散军团")) : 2 == t.res ? Toast.launch("不是军团长") : 5 == t.res ? Toast.launch("军团成员数量大于1") : 5 == t.res && Toast.launch("军团战驻守或者战斗阶段中,无法解散军团")
        },
        a.sendGuildUpgrade = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGuildUpgrade);
            Transport.instance.send(t)
        },
        a.handleGuildUpgrade = function(t) {
            if (0 == t.res) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
                e.goBackBasePage(),
                    Toast.launch("军团升级成功")
            } else 3 == t.res ? Toast.launch("不是军团长") : 4 == t.res ? Toast.launch("已到最高等级") : 6 == t.res && Toast.launch("当前建设不足")
        },
        a.showGuildDonate = function() {
            return null == this.id || "" == this.id ? void Toast.launch("请先加入军团") : (this.isOpenDonate = !0, this.isOpenWin = !0, this.windowGuildCurrPage = guildManagePage.PAGE_BASE, void this.sendGuildData())
        },
        t
}();
egret.registerClass(GuildManager, "GuildManager");
var HandbookManager = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.showBuffForShipByData = function(t) {
            var e = 1;
            return 2 == t.buffType || 4 == t.buffType || 6 == t.buffType || 8 == t.buffType || 10 == t.buffType || 22 == t.buffType ? e = 100 : (17 == t.buffType || 19 == t.buffType) && (e = 10),
                Locales.get("panel_atlas_main_panel_buff_txt_" + t.buffType, t.buffValue / e)
        },
        a.showBuffForCapByData = function(t) {
            var e = 1;
            return 2 == t.collectbuff || 4 == t.collectbuff || 6 == t.collectbuff || 8 == t.collectbuff || 10 == t.collectbuff || 22 == t.collectbuff ? e = 100 : (17 == t.collectbuff || 19 == t.collectbuff) && (e = 10),
                Locales.get("panel_atlas_main_panel_buff_txt_" + t.collectbuff, t.collectbuffvalue / e)
        },
        a.checkMsg = function() {
            this.pkg && (this.showMsg(this.pkg), this.pkg = null)
        },
        a.showMsg = function(t, e) {
            if (t) {
                e = e || UserData.getInstance().getFightPower();
                var a = PaperdataParser.GetInstance().getItemById(t.paperID),
                    i = this.showBuffForShipByData(a),
                    n = Locales.get("panel_atlas_main_panel_buff_txt_show_16");
                n += "#" + QualitySystem.getColorByQuality(a.quality).toString(16) + a.name_l + "#,",
                    n += Locales.get("panel_atlas_main_panel_buff_txt_show_17", i, t.newpower - e),
                    Toast.launch(n, void 0, !0)
            }
        },
        a.showCapMsg = function(t, e) {
            var a = this;
            t && (e = e || UserData.getInstance().getFightPower(), ConfigData.preLoadDats(["captainCollection"], [CaptaincollectionParser],
                function() {
                    var i = CaptaincollectionParser.GetInstance().getItemById(t.id),
                        n = CaptaindataParser.GetInstance().getItemById(t.id),
                        s = a.showBuffForCapByData(i),
                        r = Locales.get("panel_atlas_main_panel_buff_txt_show_16");
                    r += "#" + QualitySystem.getColorByQuality(n.quality).toString(16) + n.name_l + "#,",
                        r += Locales.get("panel_atlas_main_panel_buff_txt_show_17", s, t.fight - e),
                        Toast.launch(r, void 0, !0)
                },
                this))
        },
        a.showMedalMsg = function(t, e) {
            if (t) {
                e = e || UserData.getInstance().getFightPower();
                var a = MedaldataParser.GetInstance().getItemById(t.paperid),
                    i = Locales.get("panel_atlas_main_panel_buff_txt_" + a.collectbuff, a.collectbuffvalue),
                    n = Locales.get("panel_atlas_main_panel_buff_txt_show_16");
                n += "#" + QualitySystem.getColorByQuality(a.quality).toString(16) + a.name_l + "#,",
                    n += Locales.get("panel_atlas_main_panel_buff_txt_show_17", i, t.newpower - e),
                    Toast.launch(n, void 0, !0)
            }
        },
        t.instance = new t,
        t
}();
egret.registerClass(HandbookManager, "HandbookManager");
var ItemsManager = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        a.setData = function(t) {
            this.items = [];
            for (var e = 0; e < t.length; e++) {
                var a = ItemParser.GetInstance().getItemById(t[e].id);
                this.items.push({
                    id: t[e].id,
                    count: t[e].count,
                    type: a.type,
                    rank: a.rank
                })
            }
            this.items.sort(function(t, e) {
                    return t.rank > e.rank ? 1 : -1
                }),
                MilitaryManager.GetInstance().MilitaryTips()
        },
        a.getItemById = function(t) {
            for (var e = 0; e < this.items.length; e++)
                if (this.items[e].id == t) return this.items[e];
            return null
        },
        a.bagitemUseById = function(t, e) {
            void 0 === e && (e = 0),
                WindowManager.getInstance().showWaiting();
            var a = Transport.getPkg(ProtocolMgr.ID_DceUseProp);
            a.id = t,
                a.useten = e,
                Transport.instance.send(a)
        },
        a.getListByType = function(t) {
            for (var e = [], a = 0; a < this.items.length; a++) {
                var i = ItemParser.GetInstance().getItemById(this.items[a].id);
                0 == t ? e.push(this.items[a]) : 1 == t && 3 == i.type ? e.push(this.items[a]) : 2 == t && 3 != i.type && e.push(this.items[a])
            }
            return e
        },
        a.showDropTips = function(t) {
            for (var e = "",
                    a = 0; a < t.length; a++) {
                var i = !1,
                    n = "",
                    s = "";
                if (t[a].type == TypeDefine.Const.DROP_TYPE_ITEM) {
                    n = "获得道具:#";
                    var r = ItemParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_PARTS) {
                    n = "获得配件:#";
                    var r = PartsParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_GOLD) {
                    var o = 16777215;
                    e += "获得:#" + o.toString(16) + "金币x" + t[a].count + "#\n",
                        i = !0
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_CASH) {
                    var o = 16777215;
                    e += "获得:#" + o.toString(16) + "钻石x" + t[a].count + "#\n",
                        i = !0
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_SCIENCE) {
                    var o = 16777215;
                    e += "获得:#" + o.toString(16) + "科技点x" + t[a].count + "#\n",
                        i = !0
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_PAPER) {
                    n = "获得图纸:#";
                    var r = PaperdataParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_PAPERPIECE) {
                    n = "获得图纸碎片:#";
                    var r = PaperpiecedataParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_VIRTUAL) {
                    n = "获得代币道具:#";
                    var r = VirtualdataParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_OIL) {
                    var o = 16777215;
                    e = "获得:#" + o.toString(16) + "原油x" + t[a].count + "#\n",
                        i = !0
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_PARTSPIECE) {
                    n = "获得配件碎片:#";
                    var r = PartspiecesParser.GetInstance().getItemById(t[a].id),
                        l = PartsParser.GetInstance().getItemById(r.part_id);
                    r && (s = QualitySystem.getColorByQuality(l.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_XUNZHANG) {
                    n = "获得勋章:#";
                    var r = MedaldataParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_ACTIVITY) {
                    n = "获得活动道具:#";
                    var r = ActivityitemParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_CAPTAIN) {
                    n = "获得舰长:#";
                    var r = CaptaindataParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_CAPTAINPIECE) {
                    n = "获得舰长碎片:#";
                    var r = CaptainpiecedataParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_MEDALPIECE) {
                    n = "获得勋章碎片:#";
                    var r = MedalpieceParser.GetInstance().getItemById(t[a].id),
                        l = MedaldataParser.GetInstance().getItemById(r.medal_id);
                    r && (s = QualitySystem.getColorByQuality(l.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_GONGXUN) {
                    var o = 16777215;
                    e += "获得:#" + o.toString(16) + "功勋点x" + t[a].count + "#\n",
                        i = !0
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_JINGGONG) {
                    n = "获得精工:#";
                    var r = SeikoParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_JINGGONG_SUIPIAN) {
                    n = "获得精工碎片:#";
                    var r = SeikopieceParser.GetInstance().getItemById(t[a].id);
                    r && (s = QualitySystem.getColorByQuality(r.quality).toString(16) + r.name_l)
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_JINGGONG_MONEY) {
                    var o = 16777215;
                    e = "获得:#" + o.toString(16) + "精工币x" + t[a].count + "#\n",
                        i = !0
                } else if (t[a].type == TypeDefine.Const.DROP_TYPE_JINGGONG_POINT) {
                    var o = 16777215;
                    e = "获得:#" + o.toString(16) + "点精工点x" + t[a].count + "#\n",
                        i = !0
                }
                i || (e += n + s + "x" + t[a].count + "#\n")
            }
            Toast.launch(e, 16777215, !0)
        },
        t
}();
egret.registerClass(ItemsManager, "ItemsManager");
var MailManager = function() {
    function t() {}
    var e = __define,
        a = t,
        i = a.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        e(i, "systemMailList",
            function() {
                return this._systemMailList
            }),
        e(i, "battleMailList",
            function() {
                return this._battleMailList
            }),
        e(i, "messageMailList",
            function() {
                return this._messageMailList
            }),
        e(i, "rewardMailList",
            function() {
                return this._rewardMailList
            }),
        i.setMailListArr = function(t) {
            1 == t.type ? this.setSysTypeMail(t.maillist) : 2 == t.type && this.setItemTypeMail(t.maillist)
        },
        i.setSysTypeMail = function(t) {
            this._systemMailList = [],
                this._battleMailList = [],
                this._messageMailList = [];
            for (var e in t)
                if (49 == t[e].mailid) {
                    var a = t[e].paramlist[0];
                    if (!BlackListManager.GetInstance().isInBlackList(a)) {
                        var i = this.processMailData(t[e]);
                        i.typeTwo = 4,
                            this._messageMailList.push(i)
                    }
                } else {
                    var n = this.processMailData(t[e]);
                    1 == MaildataParser.GetInstance().getItemByField("id", t[e].mailid).typeTwo ? (n.typeTwo = 1, this._systemMailList.push(n)) : 3 == MaildataParser.GetInstance().getItemByField("id", t[e].mailid).typeTwo && (n.typeTwo = 3, this._battleMailList.push(n))
                }
        },
        i.setItemTypeMail = function(t) {
            this._rewardMailList = [];
            for (var e in t) {
                var a = this.processMailData(t[e]);
                a.typeTwo = 2,
                    this._rewardMailList.push(a)
            }
        },
        i.processMailData = function(t) {
            var e = new mailItemData;
            if (e.isread = t.readed, e.serverData = t.paramlist, t.mailid > 0)
                if (e.id = t.id, e.mailid = t.mailid, e.type = 1, e.proplist = t.proplist, e.time = t.time, 49 == t.mailid) e.title = "指挥官 " + t.paramlist[1] + " 留言",
                    e.uname = t.paramlist[1],
                    e.uid = t.paramlist[0],
                    e.content = t.paramlist[2],
                    e.pkgParam = t.paramlist;
                else {
                    var a = MaildataParser.GetInstance().getItemByField("id", t.mailid);
                    e.title = a.content_l[0],
                        e.content = a.content_l[1] ? a.content_l[1] : "",
                        e.color = a.color,
                        e.pkgParam = this.processParam(t.paramlist, parseInt(t.id), t.time)
                }
            else {
                e.id = t.id,
                    e.mailid = t.mailid,
                    e.type = 2;
                var i = t.text.split("|");
                i.length > 1 ? (e.title = i[0], e.content = i[1]) : (e.title = i[0], e.content = i[0]),
                    e.time = t.time,
                    e.proplist = t.proplist
            }
            return e
        },
        i.processParam = function(t, e, a) {
            var i = [];
            if (e >= 62 && 73 >= e ? i.push(a) : i.push(t[0]), e > 12)
                for (var n = 0; n < t.length; n++) t[n + 1] && i.push(t[n + 1]);
            return i
        },
        i.getMailItem = function(t) {
            var e = "";
            if (e = 0 == t.res ? "领取成功" : 1 == t.res ? "非法ID" : 2 == t.res ? "已经领过了" : "未知错误：" + t.res, Toast.launch(e), 0 == t.res && WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Mail)) {
                for (var a = 0; a < this._rewardMailList.length; a++) this._rewardMailList[a].id == t.id && (this._rewardMailList[a].proplist = []);
                var i = WindowManager.getInstance().getWindow(WindowManager.windowType.Mail);
                i.updatePaper()
            }
        },
        i.sendBattleReview = function(t) {
            void 0 === t && (t = "");
            var e = Transport.getPkg(ProtocolMgr.ID_DceBattleReview);
            e.id = t,
                Transport.instance.send(e)
        },
        i.processBatleReview = function(t) {
            WindowManager.getInstance().hideWaiting(),
                0 == t.res ? (this.pkg = t, BattleManager.instance.EmailRepalybattleInit(this.pkg.atkTac, this.pkg.defTac), BattleManager.instance.battlePlay(this.pkg)) : Toast.launch(Locales.get("panel_mail_txt_wind_4"), 16777215)
        },
        i.addNewMail = function(t) {
            if (1 == t.type)
                if (49 == t.mail.mailid) {
                    var e = t.mail.paramlist[0];
                    if (!BlackListManager.GetInstance().isInBlackList(e)) {
                        var a = this.processMailData(t.mail);
                        a.typeTwo = 4,
                            this._messageMailList.push(a)
                    }
                } else {
                    var i = this.processMailData(t.mail);
                    1 == MaildataParser.GetInstance().getItemByField("id", t.mail.mailid).typeTwo ? (i.typeTwo = 1, this._systemMailList.push(i)) : 3 == MaildataParser.GetInstance().getItemByField("id", t.mail.mailid).typeTwo && (i.typeTwo = 3, this._battleMailList.push(i))
                }
            else if (2 == t.type) {
                var n = this.processMailData(t.mail);
                n.typeTwo = 2,
                    this._rewardMailList.push(n)
            }
            if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Mail)) {
                var s = WindowManager.getInstance().getWindow(WindowManager.windowType.Mail);
                s.updatePaper()
            }
        },
        t
}();
egret.registerClass(MailManager, "MailManager");
var mailItemData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(mailItemData, "mailItemData");
var MailData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(MailData, "MailData");
var PropData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(PropData, "PropData");
var MainWorldManager = function() {
    function t() {
        this.curCampaign = 10,
            this.battleType = t.BATTLE_TYPE_NORMAL,
            this.lookArea = 0,
            this.lookAreaSpecial = 0,
            this.curSpeicalCampaign = 1,
            this.laststagaID = 0,
            this._chooseNormalCampainId = -1,
            this._chooseSpecialCampainId = -1,
            this.isShowDropInfo = !1,
            this._scrolled = -1,
            this._scrolledSpecial = -1,
            this.starList = [],
            this.allLastList = [],
            this.allSpecialLastList = [],
            this.allSpecialList = {},
            this.winCampaignList = [],
            this.init()
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(i, "chooseCampaignId",
            function() {
                return this.battleType == t.BATTLE_TYPE_NORMAL ? this._chooseNormalCampainId : this._chooseSpecialCampainId
            },
            function(e) {
                this.battleType == t.BATTLE_TYPE_NORMAL ? this._chooseNormalCampainId = e : this._chooseSpecialCampainId = e,
                    EventManager.instance.dispatchEvent(EventTypes.PVE_CHOOSE_CAMPAIGN)
            }),
        i.init = function() {
            var t = this;
            EventManager.instance.addEventListener(EventTypes.MAINWORLD_ENTER,
                    function(t) {}),
                EventManager.instance.addEventListener(EventTypes.MAINWORLD_OPEN_CAMPAIGN,
                    function(t) {}),
                EventManager.instance.addEventListener(EventTypes.MAINWORLD_UPDATE_STAGE,
                    function(t) {}),
                EventManager.instance.addEventListener(EventTypes.MAINWORLD_UPDATEPROCESS,
                    function() {}),
                EventManager.instance.addEventListener(EventTypes.MAINWORLD_BAKE,
                    function(e) {
                        1 == e.type ? t.bakeNormalData = e.id : t.bakeSpecialData = e.specialBaseData
                    }),
                EventManager.instance.addEventListener(EventTypes.MAINWORLD_SHOW_CAMPAIGN,
                    function(t) {})
        },
        i.openPVEWindow = function() {
            var e = ["areaData", "campaignData", "stageData", "stageSpecialData"],
                a = [AreadataParser, CampaigndataParser, StagedataParser, StagespecialdataParser];
            ConfigData.preLoadDats(e, a,
                function() {
                    StageDataLib.instance.InitPVEMapInfo(),
                        t.instance.sendEnterNormal()
                })
        },
        i.openPVESpecialWindow = function() {
            var e = ["areaData", "campaignData", "stageData", "stageSpecialData"],
                a = [AreadataParser, CampaigndataParser, StagedataParser, StagespecialdataParser];
            ConfigData.preLoadDats(e, a,
                function() {
                    StageDataLib.instance.InitPVEMapInfo(),
                        t.instance.sendEnterSpecial()
                })
        },
        i.initWorld = function() {},
        i.reLoadCampaign = function() {
            this.getCurrentBattleType() == t.BATTLE_TYPE_SPECIAL ? this.initSpecialCampaign(this.allSpecialLastList) : this.initCampaign(this.allLastList, this.starList, this.laststagaID)
        },
        i.switchBattleType = function(t) {
            this.battleType = t
        },
        i.getStarList = function() {
            return this.starList
        },
        i.getLastStagaID = function() {
            return this.laststagaID
        },
        i.initCampaign = function(e, a, i) {
            this.allLastList = e,
                this.starList = a,
                this.laststagaID = i;
            var n = 0,
                s = -1,
                r = 0;
            if (this.nextArea = -1, this.winCampaignList = [], e.length > 0) {
                var o = StageDataLib.instance.getAreaIdById(e[e.length - 1]);
                n = o.areaId,
                    s = o.campaignId,
                    r = o.stageIndex
            }
            if (this.nextArea = StageDataLib.instance.getCurrentActiveArea(n, s), -1 == this.nextArea && (this.nextArea = n), this.curCampaign = s, CampaigndataParser.GetInstance().getItemById(s + 1)) this.curCampaign = s + 1;
            else {
                var o = StageDataLib.instance.getAreaIdById(StageDataLib.instance.getFirstStage().id);
                n = o.areaId,
                    s = o.campaignId,
                    r = o.stageIndex,
                    this.nextArea = n,
                    this.curCampaign = s
            }
            for (var l = 0,
                    h = e.length; h > l; ++l) {
                var o = StageDataLib.instance.getAreaIdById(e[l]);
                this.winCampaignList.push(o.campaignId)
            }
            this.battleType = t.BATTLE_TYPE_NORMAL,
                0 == this.lookArea ? 1 == UnlockManager.CampaignOpen ? 0 == t.IsGetNewFormation ? this.lookArea = 11 : (this.lookArea = this.nextArea, t.IsGetNewFormation = !1) : this.lookArea = this.nextArea : 1 == UnlockManager.CampaignOpen && (this.lookArea = this.nextArea)
        },
        i.initSpecialCampaign = function(e) {
            this.allSpecialLastList = e;
            var a = 0,
                i = 0,
                n = 0;
            if (this.allLastList.length > 0) {
                var s = StageDataLib.instance.getAreaIdById(this.allLastList[this.allLastList.length - 1]);
                a = s.areaId,
                    i = s.campaignId,
                    n = s.stageIndex
            }
            var r = MainStageOptData.processSpecialData(i, e);
            if (this.allSpecialList = r.stages, this.curSpeicalCampaign = r.nextCampaign, 0 == this.curSpeicalCampaign) return void Toast.launch(Locales.get("zz_unlockSpecial"));
            this.battleType = t.BATTLE_TYPE_SPECIAL;
            var o = 1;
            0 != e.length && (o = StageSpecialDataLib.instance.getCampaignIdBySpecialId(e[e.length - 1].stageID)),
                a = StageDataLib.instance.getAreaByCampaign(o),
                this.nextArea = StageDataLib.instance.getCurrentActiveArea(a, o),
                void 0 == this.nextArea && (this.nextArea = a),
                0 == this.lookAreaSpecial ? 1 == UnlockManager.CampaignOpen ? this.lookAreaSpecial = 11 : this.lookAreaSpecial = this.nextArea : 1 == UnlockManager.CampaignOpen && (this.lookAreaSpecial = this.nextArea),
                EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_SHOW_CAMPAIGN, this.lookAreaSpecial, t.BATTLE_TYPE_SPECIAL),
                EventManager.instance.dispatchEvent(EventTypes.EVENT_REFRESH_ITEM)
        },
        i.openCampaignPanel = function(e) {
            var a = void 0;
            if (e.type == t.BATTLE_TYPE_NORMAL) {
                a = MainStageOptData.processData(e.campaignID, e.stage);
                var i = CampaigndataParser.GetInstance().getItemById(e.campaignID),
                    n = e.campaignID;
                this.openCampain = i,
                    1 == t.IsOpenNormalStagePanel && (t.IsOpenNormalStagePanel = !1),
                    EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_OPEN_CAMPAIGN, n, a)
            } else e.type == t.BATTLE_TYPE_SPECIAL && this.initSpecialCampaign(e.stage)
        },
        i.checkAreaExist = function(t) {
            return void 0 != AreadataParser.GetInstance().getItemById(t)
        },
        i.checkAreaVisible = function(t) {
            this.checkAreaExist(t - 1),
                this.checkAreaExist(t + 1)
        },
        i.checkAreaEnable = function(t) {
            this.checkAreaExist(t - 1) && t - 1 <= this.nextArea,
                this.checkAreaExist(t + 1) && t + 1 <= this.nextArea
        },
        i.upArea = function() {
            var e = 0;
            e = this.getCurrentBattleType() == t.BATTLE_TYPE_SPECIAL ? this.lookAreaSpecial : this.lookArea,
                this.checkAreaExist(e - 1) && e - 1 <= this.nextArea && (e -= 1, this.getCurrentBattleType() == t.BATTLE_TYPE_SPECIAL ? this.lookAreaSpecial = e : this.lookArea = e, EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_SHOW_CAMPAIGN, e))
        },
        i.downArea = function() {
            var e = 0;
            e = this.getCurrentBattleType() == t.BATTLE_TYPE_SPECIAL ? this.lookAreaSpecial : this.lookArea,
                this.checkAreaExist(e + 1) && e + 1 <= this.nextArea && (e += 1, this.getCurrentBattleType() == t.BATTLE_TYPE_SPECIAL ? this.lookAreaSpecial = e : this.lookArea = e, EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_SHOW_CAMPAIGN, e))
        },
        i.sendEnterCampaign = function(t, e) {
            RequestManager.GetInstance().enterCampaign(e, t)
        },
        i.sendEnterNormal = function() {
            RequestManager.GetInstance().enterMainWorld()
        },
        i.sendEnterSpecial = function() {
            UserData.getInstance().getPlayerLevel() < 17 ? Toast.launch(Locales.get("ui_main_function_scientific", 17), 16711680) : (this.lookArea = 0, this.sendEnterCampaign(0, t.BATTLE_TYPE_SPECIAL))
        },
        i.canEnterSpecial = function() {
            return UserData.getInstance().getPlayerLevel() >= 17
        },
        i.FightCheck = function(e, a) {
            return void 0 === a && (a = 1),
                e.baseData.costOil * a > UserData.getInstance().getRes(TypeDefine.RES.Oil) ? t.OilLimit : e.serverData && e.baseData.dayAtkCount - e.serverData.todayCount <= 0 ? t.CountLimit : t.CheckOK
        },
        i.SpecialFightCheck = function(e, a) {
            void 0 === a && (a = 1);
            var i = StageSpecialDataLib.instance.getCampaignIdBySpecialId(e.id),
                n = MainStageOptData.getSpecialCount(i);
            return e.costOil * a > UserData.getInstance().getRes(TypeDefine.RES.Oil) ? t.OilLimit : n && -1 != e.dayAtkCount && e.dayAtkCount - n == 0 ? t.CountLimit : t.CheckOK
        },
        i.sendNormalBattle = function(e, a, i, n) {
            if (this.FightCheck(e) != t.OilLimit)
                if (this.FightCheck(e) == t.CountLimit) Toast.launch(Locales.get("panel_MainWorldStageSelectNormalPanel_txt_WindWord"), 16711680);
                else {
                    BattleManager.instance.setFirstBaseData(i, n),
                        this.normalStageData = e,
                        UnlockManager.StageId = this.normalStageData.baseData.id,
                        e.serverData ? t.oldStar = e.serverData.star : t.oldStar = 0;
                    e.baseData.id;
                    BattleManager.instance.sendMainBattleStart(e.baseData.id),
                        EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_BAKE, {
                            type: 1,
                            id: a.id
                        })
                }
            else {
                var s = ItemsManager.getInstance().getItemById(1076);
                if (s && s.count > 0) {
                    var r = {};
                    r.title = Locales.get("panel_AlertLueduolingBuy_txt_comment_6"),
                        r.itemId = 1076,
                        WindowManager.getInstance().show(WindowManager.windowType.ItemUse, r)
                } else WindowManager.getInstance().show(WindowManager.windowType.OilRefining)
            }
        },
        i.sendNormalSweepBattle = function(t, e, a) {
            BattleManager.instance.sendMainSweepBattleStart(t.baseData.id, a)
        },
        i.sendSpeSweepBattle = function(t, e) {
            BattleManager.instance.sendMainSpeSweepBattleStart(t.baseData.id, e)
        },
        i.reCallPanel = function(e) {
            1 == e && (this.bakeNormalData ? (t.IsOpenNormalStagePanel = !0, this.sendEnterCampaign(this.bakeNormalData, t.BATTLE_TYPE_NORMAL)) : this.bakeSpecialData)
        },
        i.clearLookArea = function() {
            this.lookArea = 0,
                this.lookAreaSpecial = 0
        },
        i.getCurrentArea = function() {
            return this.nextArea
        },
        i.getLookArea = function() {
            return this.getCurrentBattleType() == t.BATTLE_TYPE_SPECIAL ? this.lookAreaSpecial : this.lookArea
        },
        i.getCurrentCampaign = function() {
            return this.curCampaign
        },
        i.getCurrentSpecialCampaign = function() {
            return this.curSpeicalCampaign
        },
        i.getCurrentStage = function() {
            return this.currentStageId
        },
        i.getCurrentBattleType = function() {
            return this.battleType
        },
        i.getSpecialList = function() {
            return this.allSpecialList
        },
        i.checkSpecial = function(t) {
            return this.getSpecialList()[t]
        },
        i.getLastCampaign = function() {
            return this.allLastList[this.allLastList.length - 1]
        },
        i.getAllLastList = function() {
            return this.allLastList
        },
        i.campaign = function() {
            return this.openCampain
        },
        i.setOpenCampain = function(t) {
            this.openCampain = CampaigndataParser.GetInstance().getItemById(t)
        },
        i.getBakeSpecialData = function() {
            return this.bakeSpecialData
        },
        i.getNormalStageData = function() {
            return this.normalStageData
        },
        i.getSpecialStageData = function() {
            return this.specialStageData
        },
        i.getwinCampaignList = function() {
            return this.winCampaignList
        },
        e(i, "scrolled",
            function() {
                return this.battleType == t.BATTLE_TYPE_NORMAL ? this._scrolled : this._scrolledSpecial
            },
            function(e) {
                this.battleType == t.BATTLE_TYPE_NORMAL ? this._scrolled = e : this._scrolledSpecial = e
            }),
        t.instance = new t,
        t.BATTLE_TYPE_NORMAL = 1,
        t.BATTLE_TYPE_SPECIAL = 2,
        t.OilLimit = 1,
        t.CountLimit = 2,
        t.CheckOK = 0,
        t.oldStar = 0,
        t.newStar = 0,
        t.IsOpenNormalStagePanel = !1,
        t.IsGetNewFormation = !1,
        t
}();
egret.registerClass(MainWorldManager, "MainWorldManager");
var MilitaryManager = function() {
    function t() {
        this.Open = !1,
            this._pkgData = {
                hasreward: !1
            }
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.GetInstance = function() {
            return t.s_instance
        },
        i.OpenMilitaryWindow = function() {
            this.Open = !0,
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceMilitaryRankInfo)
        },
        i.SetPkg = function(t) {
            this.pkgData = t,
                this.Open && (this.Open = !1, ConfigData.preLoadDats(["MilitaryRank", "MilitaryRights"], [MilitaryrankParser, MilitaryrightsParser],
                    function() {
                        WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Military) ? WindowManager.getInstance().getWindow(WindowManager.windowType.Military).setData(void 0) : WindowManager.getInstance().show(WindowManager.windowType.Military, t)
                    }))
        },
        e(i, "pkgData",
            function() {
                return this._pkgData
            },
            function(t) {
                this._pkgData = t
            }),
        i.getPicByRankLvl = function(t) {
            void 0 === t && (t = 10);
            var e = "",
                a = MilitaryrankParser.GetInstance().getItemByField("id", t) ? MilitaryrankParser.GetInstance().getItemByField("id", t).picture : "";
            return 0 == a.length ? null : e = Path.militaryIconURL + a
        },
        i.getLabelPicByRankLvl = function(t) {
            void 0 === t && (t = 1);
            var e = "",
                a = MilitaryrankParser.GetInstance().getItemByField("id", t).pic_ch;
            return e = Path.militaryIconURL + a
        },
        i.MilitaryTips = function() {
            var t = !1,
                e = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype()).index,
                a = MilitaryrankParser.GetInstance().getItemById(e + 1);
            if (a && a.gold <= UserData.getInstance().getRes(TypeDefine.RES.Gold) && a.honour <= UserData.getInstance().getMilitaryrankhon() && (t = !0), this.pkgData) {
                var i = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype());
                0 == this.pkgData.hasreward && 0 != Math.floor(i.diamond) && (t = !0)
            }
            CanUseManager.instance.setMilitaryUseFlag(t),
                EventManager.instance.dispatchEvent(EventTypes.HOMEUI_REDBALL_STATE_CHANGE)
        },
        t.s_instance = new t,
        t
}();
egret.registerClass(MilitaryManager, "MilitaryManager");
var PartsManager = function() {
    function t() {
        this.quailtyArr = [],
            this.reductionPartsIds = [],
            this.huishouNum = 0
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        a.setHuishouTxtNum = function(t) {
            this.huishouNum = t;
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            e.setHuiShouNum(this.huishouNum)
        },
        a.setHuishouNum = function(t, e) {
            console.log("配件ID:" + t + " 是否选择回收:" + e),
                e ? this.huishouNum += 1 : this.huishouNum > 0 && (this.huishouNum -= 1);
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            a.setHuiShouNum(this.huishouNum)
        },
        a.resetHuishouNum = function() {
            this.huishouNum = 0;
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            t.setHuiShouNum(this.huishouNum)
        },
        a.getPartsPicById = function(t) {
            if (null == t || "" == t) return "";
            var e = Path.partsIconURL + t;
            return e
        },
        a.getUpgradeValue = function(t, e) {
            var a = ConfigData.getDataByKey("parts", t);
            return Math.floor(Number(a.basicValue) + (e - 1) * Number(a.upgradeValue))
        },
        a.getRemouldValue = function(t, e, a) {
            void 0 === a && (a = "remouldValue");
            var i = ConfigData.getDataByKey("parts", t);
            if (0 == e) return 0;
            var n = i[a].split("|");
            return e >= n.length ? -1 : Number(n[e]) / ("remouldValue" == a ? 100 : 1)
        },
        a.getCostValue = function(t, e) {
            void 0 === e && (e = 1);
            var a = ConfigData.getDataByKey("parts", t),
                i = ConfigData.getDataByKey("partsUpgradeData", e),
                n = Number(i["upCost" + a.quality].split("|")[a.type]);
            return n
        },
        a.setListItemSelectedState = function(t, e) {
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            if (null != a.dsListParts)
                for (var i = 0; i < a.dsListParts.length; i++)
                    if (a.dsListParts[i].id == t) return void(a.dsListParts[i].isSelected = e)
        },
        a.sendRemouldParts = function(t, e) {},
        a.sendUpgradeParts = function(t, e) {},
        a.sendReductionParts = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceReductionParts);
            e.partid = t,
                Transport.instance.send(e)
        },
        a.sendReductionPartsInfo = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceReductionPartsInfo);
            e.partid = t,
                this.tmpPartId = t,
                Transport.instance.send(e)
        },
        a.sendDecomposeParts = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceDecomposeParts);
            a.partsidlist = t,
                a.type = e,
                Transport.instance.send(a)
        },
        a.getEquipfor = function(t) {
            for (var e = "",
                    a = Utils.getGoodAtShip(t)[1], i = 0; i < a.length; i++) e += ShipManager.getInstance().getShipTypeStrByType(a[i]) + ",";
            return e = e.substr(0, e.length - 1)
        },
        a.handleLockPartMessage = function(t) {
            0 == t.sucess ? this.refreshPartsPage() : Toast.launch("配件锁定失败")
        },
        a.refreshPartsPage = function() {
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            t && (t.setPos(), t.setPeiJianPage())
        },
        t
}();
egret.registerClass(PartsManager, "PartsManager");
var PiecesManager = function() {
    function t() {
        this._partsPieces = [],
            this._medalPieces = [],
            t._instance = this
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return t.getInstance = function() {
            return t._instance || (t._instance = new t),
                t._instance
        },
        e(i, "partsPieces",
            function() {
                return this._partsPieces
            },
            function(t) {
                this._partsPieces = t,
                    GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.PART_PIECES))
            }),
        e(i, "medalPieces",
            function() {
                return this._medalPieces
            },
            function(t) {
                this._medalPieces = t,
                    GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.MEDAL_PIECES)),
                    ShipManager.getInstance().updateShipArrangeSpot()
            }),
        i.getPartPiecesByTab = function(t) {
            var e = [];
            1 == t && e.push({
                id: 100601,
                count: 1
            });
            for (var a = {},
                    i = 0; i < this._partsPieces.length; i++) {
                var n = String(this._partsPieces[i].id).substr(2, 2),
                    s = ConfigData.getDataByKey("parts", Number(n));
                Number(s.type) != t || a[s.id] || (a[s.id] = !0, 1 == t && 100601 == this._partsPieces[i].id && e.shift(), e.push(this._partsPieces[i]))
            }
            return e
        },
        i.getMedalPieces = function() {
            for (var t = [], e = {},
                    a = 0; a < this._medalPieces.length; a++) {
                var i = String(Math.floor(this._medalPieces[a].id / 100));
                e[i] || (e[i] = !0, t.push(this._medalPieces[a]))
            }
            return t
        },
        i.getPartPiecesById = function(t) {
            for (var e = [], a = 0; a < this._partsPieces.length; a++) {
                var i = ConfigData.getDataByKey("partspieces", this._partsPieces[a].id);
                if (Number(i.part_id) == t) {
                    var n = this._partsPieces[a].id.toString(),
                        s = Number(n.substr(n.length - 1));
                    e[s] = this._partsPieces[a]
                }
            }
            return e
        },
        i.getMedalPiecesById = function(t) {
            for (var e = [], a = 0; a < this._medalPieces.length; a++) {
                var i = ConfigData.getDataByKey("medalpiece", this._medalPieces[a].id);
                Number(i.medal_id) == t && e.push(this._medalPieces[a])
            }
            return e
        },
        i.getPartPiecesCount = function(t) {
            for (var e = 0,
                    a = ConfigData.getAllData("partspieces"), i = 1e5 + 100 * t, n = 1; 7 > n; n++) a[(i + n).toString()] && (e += 1);
            return e
        },
        i.getMedalPiecesCount = function(t) {
            for (var e = 0,
                    a = ConfigData.getAllData("medalpiece"), i = 100 * t, n = 1; 7 > n; n++) a[(i + n).toString()] && (e += 1);
            return e
        },
        i.setRankerList = function(t) {
            if (this.rankPlayerList = [], t.npclist && t.npclist.list) {
                for (var e = 0; e < t.npclist.list.length; e++) this.rankPlayerList.push({
                    type: 1,
                    data: t.npclist.list[e]
                });
                for (e = 0; e < t.playerlist.list.length; e++) this.rankPlayerList.push({
                    type: 2,
                    data: t.playerlist.list[e]
                })
            }
            GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ROBBERYLIST_UPDATE))
        },
        i.getRankerList = function() {
            return this.rankPlayerList ? this.rankPlayerList : []
        },
        t
}();
egret.registerClass(PiecesManager, "PiecesManager");
var PlatformManager = function() {
    function t() {
        this.platNameDic = {
            hortor: "疯狂游乐场",
            youguang: "爱微游"
        }
    }
    var e = (__define, t),
        a = e.prototype;
    return a.GetPlatName = function() {
            return this.platNameDic[this.myself.platformName] || this.myself.platformName
        },
        a.needShowLogin = function() {
            return this.platform.needShowLogin()
        },
        a.isSupportShare = function() {
            return this.platform.isSupportShare()
        },
        a.isSupportSubscribe = function() {
            return this.platform.isSupportSubscribe()
        },
        a.isSupportSwitchAccount = function() {
            return this.platform.isSupportSwitchAccount()
        },
        a.isSupportToDesktop = function() {
            return this.platform.isSupportToDesktop()
        },
        a.isSupportSendToDesktop = function() {
            return this.platform.isSupportSendToDesktop()
        },
        a.init = function() {
            var t = GetPlatType();
            switch (t) {
                case PlatformType.PF_68WX:
                    this.platform = new Platform68WX;
                    break;
                case PlatformType.PF_TEST:
                    this.platform = new PlatformTest;
                    break;
                case PlatformType.PF_HORTOR:
                    this.platform = new PlatformHortor;
                    break;
                case PlatformType.PF_BUDDY:
                    this.platform = new PlatformBuddy;
                    break;
                case PlatformType.PF_QQBROWSER:
                    this.platform = new PlatformQQBrowser;
                    break;
                case PlatformType.PF_VUTIMES:
                    this.platform = new PlatformVUTimes;
                    break;
                case PlatformType.PF_BUSSINESS:
                    this.platform = new PlatformBusiness;
                    break;
                case PlatformType.PF_LAYA:
                    this.platform = new PlatformLaya;
                    break;
                case PlatformType.PF_SIMULATE:
                    this.platform = new PlatformBase;
                    break;
                case PlatformType.PF_QQ:
                    this.platform = new PlatformQQ;
                    break;
                default:
                    this.platform = new PlatformBase
            }
            this.platform.init()
        },
        a.loginVerify = function(t, e) {
            this.platform.loginVerify(t, e)
        },
        a.login = function(t, e, a) {
            this.platform.login(t, e, a)
        },
        a.logout = function() {
            this.platform.logout()
        },
        a.switchAccount = function() {
            this.platform.switchAccount()
        },
        a.share = function(t, e, a, i, n) {
            this.platform.share(t, e, a, i, n)
        },
        a.getFriends = function(t, e) {},
        a.pay = function(t, e, a, i, n, s) {
            this.payInfo = {
                    itemid: t,
                    itemname: e,
                    price: a,
                    count: i
                },
                this.platform.pay(t, e, a, i, n, s)
        },
        a.payAgain = function() {
            this.platform.payAgain()
        },
        a.Subscribe = function() {
            this.platform.Subscribe()
        },
        a.ToDesktop = function(t, e) {
            this.platform.ToDesktop(t, e)
        },
        a.exist = function() {},
        a.getWebUrl = function() {
            return this.platform.getWebUrl()
        },
        t.instance = new t,
        t
}();
egret.registerClass(PlatformManager, "PlatformManager");
var RankListManager = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.getWudijianduiList = function() {
            return this._wudijianduiList
        },
        a.getPowerList = function() {
            return this._powerList
        },
        a.getLevelList = function() {
            return this._levelList
        },
        a.getArenaList = function() {
            return this._arenaList
        },
        a.getGuildList = function() {
            return this._guildList
        },
        a.getDefendOilList = function() {
            return this._defendOilList
        },
        a.getBattleOrdinary = function() {
            return this._battleOrdinary
        },
        a.getBattleSpecial = function() {
            return this._battleSpecial
        },
        a.getCampBattleList = function(t) {
            var e = new RankListData;
            e.myRank = void 0,
                e.myScore = this._campBattleList.myScore;
            for (var a = !1,
                    i = [], n = UserData.getInstance().getCamp(), s = 0, r = this._campBattleList.listData; s < r.length; s++) {
                var o = r[s];
                o.camp == t && e.listData.push(o),
                    o.camp == n && i.push(o),
                    o.uid == UserData.getInstance()._uid && (a = !0)
            }
            e.listData.sort(function(t, e) {
                return t.rank - e.rank
            });
            for (var l = 0; l < e.listData.length; ++l) e.listData[l].rank = l + 1;
            if (a) {
                i.sort(function(t, e) {
                    return t.rank - e.rank
                });
                for (var l = 0; l < i.length; ++l) i[l].uid == UserData.getInstance()._uid && (e.myRank = l + 1)
            }
            return e
        },
        a.setdata = function(t) {
            var e, a = this;
            switch (t.type) {
                case 1:
                    this._defendOilList = new RankListData,
                        e = this._defendOilList;
                    break;
                case 2:
                    this._battleOrdinary = new RankListData,
                        e = this._battleOrdinary;
                    break;
                case 3:
                    this._battleSpecial = new RankListData,
                        e = this._battleSpecial;
                    break;
                case 11:
                    this._wudijianduiList = new RankListData,
                        e = this._wudijianduiList;
                    break;
                case 13:
                    this._levelList = new RankListData,
                        e = this._levelList;
                    break;
                case 14:
                    this._powerList = new RankListData,
                        e = this._powerList;
                    break;
                case 15:
                    this._arenaList = new RankListData,
                        e = this._arenaList;
                    break;
                case 16:
                    var i = GuildParser.GetInstance().getDatas();
                    return i ? this.processGuild(t) : ConfigData.preLoadDats(["guild"], [GuildParser],
                            function() {
                                a.processGuild(t)
                            }),
                        void WindowManager.getInstance().hideWaiting();
                case 7:
                    this._campBattleList = new RankListData,
                        e = this._campBattleList
            }
            WindowManager.getInstance().hideWaiting(),
                e.myRank = t.rank,
                e.myScore = t.score;
            for (var n in t.data.list) {
                var s = new RankItemData;
                if (s.uid = t.data.list[n].uid, s.name = t.data.list[n].name, s.rank = t.data.list[n].rank, s.level = t.data.list[n].level, s.score = t.data.list[n].score, s.head = t.data.list[n].head, s.power = t.data.list[n].power, s.viplevel = t.data.list[n].viplevel, s.camp = t.data.list[n].camp, s.guildname = t.data.list[n].guildname, s.militaryrank = t.data.list[n].militaryrank, s.dmg = t.data.list[n].dmg, !t.score && s.uid == UserData.getInstance()._uid) switch (t.type) {
                    case 1:
                        e.myScore = s.score,
                            e.myRank = s.rank;
                        break;
                    case 2:
                        e.myScore = s.score,
                            e.myRank = s.rank;
                        break;
                    case 3:
                        e.myScore = s.score,
                            e.myRank = s.rank;
                        break;
                    case 11:
                        e.myScore = Number(s.dmg),
                            e.myRank = s.rank;
                        break;
                    case 13:
                        e.myScore = s.level,
                            e.myRank = s.rank;
                        break;
                    case 14:
                        e.myScore = s.power,
                            e.myRank = s.rank;
                        break;
                    case 15:
                        e.myScore = s.score,
                            e.myRank = s.rank;
                        break;
                    case 16:
                        return e.myScore = s.score,
                            void(e.myRank = s.rank);
                    case 7:
                        e.myScore = s.score,
                            e.myRank = s.rank
                }
                e.listData.push(s)
            }
            if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.RankList)) {
                var r = WindowManager.getInstance().getWindow(WindowManager.windowType.RankList);
                r.updatePaper()
            }
        },
        a.processGuild = function(t) {
            this._guildList = new RankListData;
            var e = GuildManager.getInstance().id;
            for (var a in t.guildlist.guildlist) {
                var i = new RankItemData;
                i.uid = t.guildlist.guildlist[a].id,
                    i.rank = t.guildlist.guildlist[a].index,
                    i.level = t.guildlist.guildlist[a].level,
                    i.score = t.guildlist.guildlist[a].contribute,
                    i.head = t.guildlist.guildlist[a].medal,
                    i.camp = t.guildlist.guildlist[a].camp,
                    i.guildname = t.guildlist.guildlist[a].name,
                    i.membercount = t.guildlist.guildlist[a].membercount,
                    i.allMembercount = GuildParser.GetInstance().getItemById(t.guildlist.guildlist[a].level).count,
                    i.uid == e && (this._guildList.myRank = i.rank, this._guildList.myScore = i.score),
                    this._guildList.listData.push(i)
            }
            if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.RankList)) {
                var n = WindowManager.getInstance().getWindow(WindowManager.windowType.RankList);
                n.updatePaper()
            }
        },
        a.sendListMsg = function(t, e) {
            void 0 === t && (t = 14),
                WindowManager.getInstance().showWaiting(),
                16 == t && GuildManager.getInstance().sendGuildList(0, 0);
            var a = Transport.getPkg(ProtocolMgr.ID_DceRankList);
            a.type = t,
                7 == t && (a.camp = e ? e : 0),
                Transport.instance.send(a)
        },
        a.showRankWin = function(t) {
            void 0 === t && (t = 0),
                this._curType = t,
                WindowManager.getInstance().show(WindowManager.windowType.RankList, {
                    type: t,
                    type2: 14
                })
        },
        a.ranklistLoad = function(t) {
            WindowManager.getInstance().hideWaiting(),
                RES.removeEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.ranklistLoad, this),
                this.showRankWin(this._curType)
        },
        t
}();
egret.registerClass(RankListManager, "RankListManager");
var RankListData = function() {
    function t() {
        this.listData = []
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(RankListData, "RankListData");
var RankItemData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(RankItemData, "RankItemData");
var RedPointType;
!
function(t) {
    t[t.captain = 0] = "captain",
        t[t.parts = 1] = "parts",
        t[t.medals = 2] = "medals",
        t[t.ships = 3] = "ships",
        t[t.buyoil = 4] = "buyoil"
}(RedPointType || (RedPointType = {}));
var RedPointManager = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.getPointShow = function(t, e) {
            if (e == RedPointType.captain)
                for (var a = 0; a < CaptainData.captainlist.length; a++) {
                    var i = CaptainData.captainlist[a],
                        n = CaptaindataParser.GetInstance().getItemById(i.id),
                        s = Number(n.quality);
                    if (!ShipManager.getInstance().isCaptainEquiped(i.id) && s > t.quality) return !0
                } else if (e == RedPointType.parts)
                    for (var r = ShipManager.getInstance().getPartsByType(t.equipType, t.shipType), o = 1e4 * t.quality + 100 * t.parts.remouldlevel + t.parts.upgradelevel, a = 0; a < r.length; a++) {
                        var l = r[a];
                        if (!ShipManager.getInstance().isPartEquiped(l.id)) {
                            var n = PartsParser.GetInstance().getItemById(l.partsid),
                                s = Number(n.quality),
                                h = 1e4 * s + 100 * l.remouldlevel + l.upgradelevel;
                            if (h > o) return !0
                        }
                    } else if (e == RedPointType.medals) {
                        for (var c = ShipManager.getInstance().getGoodAtSoulList(t.shipType), o = 1e4 * t.quality + 100 * t.soul.promotelvl + t.soul.point / 1e4, d = {},
                                a = 0; a < c.length; a++)
                            if (c[a].equipedshipid == t.soul.equipedshipid) {
                                var g = ConfigData.getDataByKey("medalData", c[a].soulid);
                                d[g.medalType] = !0
                            }
                        for (a = 0; a < c.length; a++) {
                            var u = c[a],
                                g = ConfigData.getDataByKey("medalData", u.soulid);
                            if (g && !d[g.medalType] && !ShipManager.getInstance().isMedalEquiped(u.id) && 9 != g.medalType) {
                                var n = MedaldataParser.GetInstance().getItemById(u.soulid),
                                    s = Number(n.quality),
                                    h = 1e4 * s + 100 * u.promotelvl + u.point / 1e4;
                                if (h > o) return !0
                            }
                        }
                    } else if (e == RedPointType.ships)
                for (var p = ShipManager.getInstance().getEmptyShips(), a = 0; a < p.length; a++) {
                    var m = p[a],
                        n = ShipdataParser.GetInstance().getItemById(m.shipid),
                        s = Number(n.quality);
                    if (s > t.quality) return !0
                } else if (e == RedPointType.buyoil) {
                    var _ = VipParser.GetInstance().getItemById(UserData.getInstance()._vip).dayBuyOilCnt - UserData.getInstance().getBuyOilCount();
                    return _ > 0
                }
            return !1
        },
        t.getCaptainRedPoint = function(e) {
            var a = CaptainManager.getInstance().getPropoDataById(e);
            if (a) {
                var i = ConfigData.getDataByKey("captainData", e),
                    n = t.getPointShow({
                            quality: Number(i.quality)
                        },
                        RedPointType.captain) ? 1 : 0;
                return n + t.getCaptainUpdate(a) + t.getCaptainRemodule(a)
            }
            for (var s = 0; s < CaptainData.captainlist.length; s++)
                if (!ShipManager.getInstance().isCaptainEquiped(CaptainData.captainlist[s].id)) return 1;
            return 0
        },
        t.getCaptainUpdate = function(t, e) {
            var a = ConfigData.getDataByKey("exp", UserData.getInstance()._level);
            if (a.captainLevelLimit && Number(a.captainLevelLimit) <= t.upgradelevel) return 0;
            if (e) {
                var i = t.upgradelevel || 1,
                    n = ConfigData.getDataByKey("captainData", t.id),
                    s = ConfigData.getDataByKey("captainUpgradeData", i + 1),
                    r = Number(s["upgradeCost" + n.quality]);
                return t.upgradelevel < UserData.getInstance()._level && t.upgradelevel < 40 && r < UserData.getInstance().getRes(TypeDefine.RES.Gold) ? 1 : 0
            }
            return t.upgradelevel < UserData.getInstance()._level && t.upgradelevel < 40 ? 1 : 0
        },
        t.getCaptainRemodule = function(t) {
            var e = ConfigData.getDataByKey("captainData", t.id),
                a = Number(e.promoteCostSoul.split("|")[t.promotelevel]),
                i = CaptainData.getCaptainPieceData(e.pieceId),
                n = i ? i.count : 0;
            return n >= a && t.promotelevel < 6 ? 1 : 0
        },
        t.getShipRedPoint = function(e) {
            var a = ShipManager.getInstance().getShipById(e);
            if (a) {
                var i = ConfigData.getDataByKey("shipData", a.shipid),
                    n = t.getPointShow({
                            quality: Number(i.quality)
                        },
                        RedPointType.ships) ? 1 : 0;
                return n + t.getShipUpdate(a) + t.getShipRemodule(a) + t.getShipSkill(a) + t.getShipTrain(a)
            }
            return 0
        },
        t.getShipUpdate = function(t) {
            return t.level < UserData.getInstance()._level && t.level < 200 ? 1 : 0
        },
        t.getShipRemodule = function(t) {
            var e = ConfigData.getDataByKey("shipData", t.shipid),
                a = t.shipid % 100,
                i = !1;
            6 == e.quality ? i = !0 : e.quality < 5 && (i = a > 4);
            var n = !i;
            if (n) {
                var s = e;
                if (s.remouldCount) {
                    var r = Utils.getListByKeyValue("id", s.drawingId, ShipManager.getInstance().papers),
                        o = 0,
                        l = Number(s.remouldCount);
                    r.length > 0 && r[0].count && (o = r[0].count);
                    var h = o >= l;
                    n = n && h
                }
                if (s.remouldSeniorPaper) {
                    var r = Utils.getListByKeyValue("id", 27, ShipManager.getInstance().papers),
                        l = Number(s.remouldSeniorPaper),
                        o = UserData.getInstance().getSeniorpaper(),
                        h = o >= l;
                    n = n && h
                }
                if (s.remouldMaterial) {
                    var c = ItemsManager.getInstance().getItemById(1246),
                        o = (ConfigData.getDataByKey("item", "1246"), 0);
                    c && c.count && (o = c.count);
                    var l = Number(s.remouldMaterial),
                        h = o >= l;
                    n = n && h
                }
            }
            return n ? 1 : 0
        },
        t.getShipSkill = function(t) {
            for (var e = [t.skillid, t.activeskillid, t.circleskillid], a = 0; a < e.length; a++)
                if (e[a]) {
                    var i = ConfigData.getDataByKey("skillData", e[a]),
                        n = ItemsManager.getInstance().getItemById(i.upgradeCostItem),
                        s = n && n.count || 0;
                    if (s >= Number(i.upgradeCostCount) && Number(i.upLevel) > 0) return 1
                }
            return 0
        },
        t.getShipTrain = function(t) {
            if (UserData.getInstance()._level < 15) return 0;
            for (var e = 1; 4 > e; e++) {
                var a = ConfigData.getDataByKey("trainData", e),
                    i = ItemsManager.getInstance().getItemById(1013),
                    n = i ? i.count : 0;
                if (a && Number(a.costItemCount) <= n) return 1
            }
            return 0
        },
        t.getPartRedPoint = function(e, a, i) {
            var n = ConfigData.getDataByKey("parts", e.partsid),
                s = t.getPointShow({
                        quality: Number(n.quality),
                        parts: e,
                        equipType: a,
                        shipType: i
                    },
                    RedPointType.parts) ? 1 : 0;
            return s + t.getPartUpdateBool(e) + t.getPartRemoduleBool(e)
        },
        t.getPartUpdateBool = function(t, e) {
            if (e) {
                var a = PartsManager.getInstance().getCostValue(t.partsid, t.upgradelevel);
                return t.upgradelevel < 3 * UserData.getInstance()._level && a <= UserData.getInstance().getRes(TypeDefine.RES.Gold) ? 1 : 0
            }
            return t.upgradelevel < 3 * UserData.getInstance()._level ? 1 : 0
        },
        t.getPartRemoduleBool = function(t) {
            var e = (ConfigData.getDataByKey("parts", t.partsid), PartsManager.getInstance().getRemouldValue(t.partsid, t.remouldlevel + 1));
            if (0 > e) return 0;
            var a = PartsManager.getInstance().getRemouldValue(t.partsid, t.remouldlevel + 1, "remouldCostPoint");
            return Number(a) > UserData.getInstance().getTechpoints() ? 0 : 1
        },
        t.getMedalRedPoint = function(e, a, i) {
            var n = t.getPointShow({
                    shipType: e,
                    soul: a,
                    quality: Number(i.quality),
                    exp: i.exp
                },
                RedPointType.medals) ? 1 : 0;
            return n + t.getMedalUpdateBool(a) + t.getMedalRemoduleBool(a)
        },
        t.getMedalUpdateBool = function(t, e) {
            for (var a = ShipManager.getInstance().soulList, i = 0, n = 0; n < a.length && (!t || ShipManager.getInstance().isMedalEquiped(a[n].id) || a[n].soulid == t.soulid || (i++, 5 != i)); n++);
            return i > 0 ? 1 : 0
        },
        t.getMedalRemoduleBool = function(t) {
            var e = ConfigData.getDataByKey("medalData", t.soulid),
                a = Number(e.remouldCostPoint.split("|")[t.promotelvl + 1]);
            return a = a || 0,
                a < UserData.getInstance().getExploit() ? 1 : 0
        },
        t
}();
egret.registerClass(RedPointManager, "RedPointManager");
var SceneType;
!
function(t) {
    t[t.NONE = 0] = "NONE",
        t[t.HOME = 1] = "HOME",
        t[t.BATTLE = 2] = "BATTLE"
}(SceneType || (SceneType = {}));
var SceneManager = function() {
    function t() {
        this.isShake = !1,
            this.shakeFrame = [{
                    shakeFrame: 8,
                    shakeLength: 2
                },
                {
                    shakeFrame: 16,
                    shakeLength: 3
                }
            ],
            this.shakeType = 1,
            this.currentFrame = 0,
            this.currentFrameData = null,
            this._curSceneType = SceneType.NONE
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(i, "curSceneType",
            function() {
                return this._curSceneType
            }),
        e(i, "curScene",
            function() {
                return this._curScene
            }),
        i.SwitchScene = function(t, e, a, i, n) {
            if (void 0 === e && (e = !1), this._curSceneType !== t || e) {
                this._curSceneType || GameLayer.getInstance().bgLayer.addEventListener(egret.Event.ENTER_FRAME, this.OnEnterFrame, this);
                var s;
                t == SceneType.HOME ? s = new HomeScene : t == SceneType.BATTLE && (s = new BattleScene),
                    s && (this._curScene && (WindowManager.getInstance().getWindow(WindowManager.windowType.Upgrade) && (UserData.getInstance().lvUpgradeFlag = !0), this._curScene.destroy()), this._curScene = s, this._curSceneType = t, s.init(), a && a.apply(i, n), Log.log("Switch to scene:", SceneType[this._curSceneType]))
            }
        },
        i.OnEnterFrame = function() {
            if (this._curScene && this._curScene.update && this._curScene.update(), 1 == this.isShake)
                if (this.currentFrame > 0) {
                    var t = this.currentFrameData.shakeFrame - this.currentFrame + 1;
                    t % 4 > 0 ? t %= 4 : t = 4,
                        1 == t ? (GameLayer.getInstance().root.x = -this.currentFrameData.shakeLength, GameLayer.getInstance().root.y = 0) : 2 == t ? (GameLayer.getInstance().root.x = this.currentFrameData.shakeLength, GameLayer.getInstance().root.y = 0) : 3 == t ? (GameLayer.getInstance().root.x = 0, GameLayer.getInstance().root.y = this.currentFrameData.shakeLength) : 4 == t && (GameLayer.getInstance().root.x = 0, GameLayer.getInstance().root.y = -this.currentFrameData.shakeLength),
                        this.currentFrame = this.currentFrame - 1
                } else this.isShake = !1,
                    this.currentFrame = 0,
                    this.currentFrameData = null,
                    GameLayer.getInstance().root.x = GameLayer.getInstance().root.y = 0
        },
        i.sceneShake = function(e) {
            void 0 === e && (e = t.SHAKE_NORMAL),
                this.isShake = !0,
                this.currentFrameData = this.shakeFrame[e - 1],
                this.currentFrame = this.currentFrameData.shakeFrame
        },
        i.stopShake = function() {
            this.isShake = !1
        },
        t.instance = new t,
        t.SHAKE_NORMAL = 1,
        t.SHAKE_HIGH = 2,
        t
}();
egret.registerClass(SceneManager, "SceneManager");
var ScienceManager = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return void 0 == this._instance && (this._instance = new e),
                this._instance
        },
        i.handleUpgradeScienceResult = function(t) {
            0 == t.res ? (GameEventDispatcher.getInstance().addEventListener(GameEvent.SCIENCE_UPDATE, this.refreshSciencePage, this), 1 == t.id ? Toast.launch("火炮攻击 +10") : 2 == t.id ? Toast.launch("爆破攻击 +10") : 3 == t.id ? Toast.launch("火炮防御 +4") : 4 == t.id ? Toast.launch("爆破防御 +4") : 5 == t.id && Toast.launch("生命 +30")) : 1 == t.res ? Toast.launch("已最高级") : 2 == t.res ? Toast.launch("金币不足") : 3 == t.res ? Toast.launch("道具不足") : 5 == t.res ? Toast.launch("已达到当前最高等级") : 10 == t.res && Toast.launch("非法id")
        },
        i.refreshSciencePage = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.SCIENCE_UPDATE, this.refreshSciencePage, this);
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.KeJi);
            t.setCenterPage()
        },
        i.handleAutoUpgradeScienceResult = function(t) {
            if (0 == t.resa) {
                for (var e = 0; e < t.levela.length; e++) 0 != t.levela[e] && (0 == e ? Toast.launch("火炮攻击 +" + 10 * t.levela[e]) : 1 == e ? Toast.launch("爆破攻击 +" + 10 * t.levela[e]) : 2 == e ? Toast.launch("火炮防御 +" + 4 * t.levela[e]) : 3 == e ? Toast.launch("爆破防御 +" + 4 * t.levela[e]) : 4 == e && Toast.launch("生命 +" + 30 * t.levela[e]));
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.KeJi);
                a.setCenterPage()
            } else 1 == t.resa ? Toast.launch("已最高级") : 2 == t.resa ? Toast.launch("金币不足") : 3 == t.resa ? Toast.launch("道具不足") : 5 == t.resa ? Toast.launch("已达到当前最高等级") : 10 == t.resa && Toast.launch("非法id")
        },
        e
}(egret.EventDispatcher);
egret.registerClass(ScienceManager, "ScienceManager");
var ShipSystem;
!
function(t) {
    t[t.SHIP_TYPE_BB = 0] = "SHIP_TYPE_BB",
        t[t.SHIP_TYPE_CB = 1] = "SHIP_TYPE_CB",
        t[t.SHIP_TYPE_CV = 2] = "SHIP_TYPE_CV",
        t[t.SHIP_TYPE_CVL = 3] = "SHIP_TYPE_CVL",
        t[t.SHIP_TYPE_CA = 4] = "SHIP_TYPE_CA",
        t[t.SHIP_TYPE_CL = 5] = "SHIP_TYPE_CL",
        t[t.SHIP_TYPE_DD = 6] = "SHIP_TYPE_DD",
        t[t.SHIP_TYPE_SS = 7] = "SHIP_TYPE_SS"
}(ShipSystem || (ShipSystem = {}));
var ShipManager = function(t) {
    function e() {
        t.call(this),
            this._shipList = [],
            this._soldierList = [],
            this._partsList = [],
            this._soulList = [],
            this.tacticList = [],
            this.shipDataInit = !1,
            this.paperDataInit = !1,
            this.paperPieceDataInit = !1,
            this.shipTypeStr = ["BB", "CB", "CV", "CVL", "CA", "CL", "DD", "SS"],
            this.quailtyArr = [],
            this.shipCfg = ShipdataParser.GetInstance().getDatas(),
            this.paperCfg = PaperdataParser.GetInstance().getDatas(),
            this.paperPieceCfg = PaperpiecedataParser.GetInstance().getDatas(),
            this.shipModelCfg = ShipmodeldataParser.GetInstance().getDatas()
    }
    __extends(e, t);
    var a = __define,
        i = e,
        n = i.prototype;
    return e.getInstance = function() {
            return void 0 == this._instance && (this._instance = new e),
                this._instance
        },
        a(n, "soulList",
            function() {
                return this._soulList
            },
            function(t) {
                this._soulList = t,
                    GameEventDispatcher.getInstance().dispatchEvent(new egret.Event(GameEvent.Souls_List_Refresh)),
                    this.updateShipArrangeSpot()
            }),
        a(n, "partsList",
            function() {
                return this._partsList
            },
            function(t) {
                this._partsList = t,
                    GameEventDispatcher.getInstance().dispatchEvent(new egret.Event(GameEvent.Parts_List_Refresh)),
                    this.updateShipArrangeSpot()
            }),
        a(n, "shipList",
            function() {
                return this._shipList
            },
            function(t) {
                this._shipList = t,
                    this.shipDataInit = !0,
                    GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ShipDataUpdate)),
                    this.updateShipArrangeSpot()
            }),
        a(n, "soldierList",
            function() {
                return this._soldierList
            },
            function(t) {
                this._soldierList = t,
                    GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SoldierList_update)),
                    this.updateShipArrangeSpot()
            }),
        n.setShipFormationInfo = function(t) {
            this.shipFormationList = [],
                this.shipFormationSelect = t.selectformation;
            for (var e = 0; e < t.data.length; e++) this.shipFormationList.push({
                id: t.data[e].id,
                level: t.data[e].level
            });
            GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.FORMATION_UPDATE)),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.FORMATION_CHANGE))
        },
        n.getShipTypeStrByType = function(t) {
            return this.shipTypeStr[t]
        },
        n.isInArrange = function(t, e) {
            void 0 === e && (e = "shipid");
            for (var a = 0; a < this._soldierList.length; a++)
                if (this._soldierList[a][e].toString() == t.toString()) return !0;
            return !1
        },
        n.addShip = function(t) {
            this._shipList.push(t),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ShipDataUpdate)),
                this.updateShipArrangeSpot()
        },
        n.getEmptyShips = function() {
            for (var t = [], e = 0; e < this._shipList.length; e++) this.isInArrange(this._shipList[e].id) || t.push(this._shipList[e]);
            return t
        },
        n.setPaperData = function(t) {
            this.papers = new Array;
            for (var e = 0; e < t.length; e++) {
                var a = {
                    id: t[e].id,
                    count: t[e].count,
                    islock: t[e].islock
                };
                this.papers.push(a)
            }
            this.paperDataInit = !0,
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.PaperDataUpdate))
        },
        n.setPaperPieceData = function(t) {
            this.paperPieces = new Array;
            for (var e = 0; e < t.length; e++) {
                var a = {
                    id: t[e].id,
                    count: t[e].count
                };
                this.paperPieces.push(a)
            }
            this.paperPieceDataInit = !0
        },
        n.updateShipList = function(t) {
            for (var e = 0; e < t.length; e++)
                for (var a = 0; a < this._shipList.length; a++) this._shipList[a].id == t[e].id && (this._shipList[a] = t[e]);
            GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SHIP_UPDATE, t[0])),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ShipDataUpdate)),
                this.trainSaveBool && (this.trainSaveBool = !1, Toast.launch(Locales.get("panel_train_txt_windword_7"), 16777215, !0, 355)),
                this.updateShipArrangeSpot()
        },
        n.updatePartsList = function(t) {
            for (var e = 0; e < this._partsList.length; e++) this._partsList[e].id == t.id && (this._partsList[e] = t);
            GameEventDispatcher.getInstance().dispatchEvent(new egret.Event(GameEvent.Parts_List_Refresh)),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.PARTS_UPDATE)),
                this.updateShipArrangeSpot()
        },
        n.getShipById = function(t) {
            for (var e = 0; e < this._shipList.length; e++)
                if (this._shipList[e].id == t) return this._shipList[e]
        },
        n.getShipByType = function(t) {
            for (var e = 0; e < this._shipList.length; e++)
                if (this._shipList[e].shipid == t) return this._shipList[e]
        },
        n.getPartById = function(t) {
            for (var e = 0; e < this._partsList.length; e++)
                if (this._partsList[e].id == t) return this._partsList[e]
        },
        n.getSoulById = function(t) {
            for (var e = 0; e < this._soulList.length; e++)
                if (this._soulList[e].id == t) return this._soulList[e]
        },
        n.getPartsByType = function(t, a) {
            for (var i = [], n = 0; n < this._partsList.length; n++) {
                var s = ConfigData.getDataByKey("parts", this._partsList[n].partsid);
                if (Number(s.type) == t)
                    if (a) {
                        var r = PartsManager.getInstance().getEquipfor(s.equipfor);
                        r.indexOf(e.getInstance().getShipTypeStrByType(a)) >= 0 && i.push(this._partsList[n])
                    } else i.push(this._partsList[n])
            }
            return i
        },
        n.getGoodAtSoulList = function(t) {
            for (var a = [], a = [], i = 0; i < this.soulList.length; i++) {
                var n = ConfigData.getDataByKey("medalData", this.soulList[i].soulid),
                    s = PartsManager.getInstance().getEquipfor(n.equipfor); - 1 != s.indexOf(e.getInstance().getShipTypeStrByType(t)) && a.push(this.soulList[i])
            }
            return a
        },
        n.isPartEquiped = function(t) {
            for (var e = 0; e < this.soldierList.length; e++)
                if (this.soldierList[e].partslist.indexOf(t) >= 0) return this.soldierList[e].shipid
        },
        n.isMedalEquiped = function(t) {
            for (var e = 0; e < this.soldierList.length; e++)
                if (this.soldierList[e].soullist.indexOf(t) >= 0) return this.soldierList[e].shipid
        },
        n.isCaptainEquiped = function(t) {
            for (var e = 0; e < this.soldierList.length; e++)
                if (this.soldierList[e].captainid == t) return this.soldierList[e].shipid
        },
        n.getShipPicByModelId = function(t) {
            var e = ShipmodeldataParser.GetInstance().getItemById(t);
            return e ? Path.shipURL + "y_" + e.url : ""
        },
        n.getShipPicByType = function(t) {
            var e = "",
                a = this.shipCfg[t];
            if (a) {
                var i = a.modelId,
                    n = this.shipModelCfg[i];
                n && (e = Path.shipURL + "y_" + n.url)
            }
            return e
        },
        n.getShipNameByType = function(t) {
            return Locales.get("warShipName_" + Math.floor(t / 100))
        },
        n.getShipTypeIcon = function(t) {
            return Path.shipTypeIconURL + "shipType" + t + ".png"
        },
        n.getShipPosLevel = function(t) {
            if (!this._posCfg) {
                this._posCfg = {};
                for (var e = ConfigData.getAllData("exp"), a = 1, i = 1; i <= e.length; i++) e[i].poslevel > a && (a = +e[i].poslevel, this._posCfg[a] = +e[i].level)
            }
            return this._posCfg[t]
        },
        n.getShipPaperIcon = function(t) {
            return Path.itemIconURL + "paperIconType_" + t + ".png"
        },
        n.remouldValue = function(t, e) {
            return t ? 10 >= t || 21 == t ? e / 100 : e / 10 : 0
        },
        n.sendChargePaper = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceChargePaper);
            a.id = t,
                a.wanneng = e,
                Transport.instance.send(a)
        },
        n.handleChargePaper = function(t) {
            if (t.id, 0 == t.res) {
                if (Toast.launch("兑换成功"), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.ExchangeBlueprint)) {
                    var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ExchangeBlueprint);
                    e.sendPaperChargeCountMsg()
                }
            } else 1 == t.res ? Toast.launch("非法id") : 2 == t.res ? Toast.launch("非法类型") : 3 == t.res ? Toast.launch("vip等级不足") : 4 == t.res && Toast.launch("图纸碎片不足");
            t.wanneng
        },
        n.updateShipArrangeSpot = function() {
            var t = this;
            ConfigData.preLoadList(["medalData", "shipData", "captainData", "captainUpgradeData", "skillData", "trainData", "parts", "exp"],
                function() {
                    for (var e = 0,
                            a = 0,
                            i = 0; i < t._soldierList.length; i++) {
                        var n = t._soldierList[i];
                        n.shipid && "0" != n.shipid && (a += 1, e += t.getShipRedpoint(n))
                    }
                    UserData.getInstance().getCurPosNum() > a && t.getEmptyShips().length > 0 && (e += 1),
                        MainUI.instance.bottomUI.setArrangeSpot(e > 0)
                })
        },
        n.getShipRedpoint = function(t) {
            var e = this.getShipById(t.shipid),
                a = 0;
            return e && (a += RedPointManager.getShipRedPoint(t.shipid), a += RedPointManager.getCaptainRedPoint(t.captainid), a += this.getPartRedPoint(t), a += this.getMedalRedPoint(t)),
                a
        },
        n.getPartRedPoint = function(t) {
            var a = 0,
                i = this.getShipById(t.shipid);
            if (i)
                for (var n = Math.floor(i.shipid / 1e4), s = 0; 4 > s; s++) {
                    var r = this.getPartById(t.partslist[s]);
                    if (r) a += RedPointManager.getPartRedPoint(r, s + 1, n);
                    else
                        for (var o = e.getInstance().getPartsByType(s + 1, n), l = 0; l < o.length; l++)
                            if (!e.getInstance().isPartEquiped(o[l].id)) {
                                a += 1;
                                break
                            }
                }
            return a
        },
        n.getMedalRedPoint = function(t) {
            var a = 0,
                i = this.getShipById(t.shipid);
            if (i)
                for (var n = Math.floor(i.shipid / 1e4), s = 0; 6 > s; s++) {
                    var r = this.getSoulById(t.soullist[s]);
                    if (r) a += RedPointManager.getMedalRedPoint(n, r, ConfigData.getDataByKey("medalData", r.soulid));
                    else
                        for (var o = e.getInstance().getGoodAtSoulList(n), l = 0; l < o.length; l++) {
                            var h = ConfigData.getDataByKey("medalData", o[l].soulid);
                            9 == h.medalType || e.getInstance().isMedalEquiped(o[l].id) || (a += 1)
                        }
                }
            return a
        },
        e
}(egret.EventDispatcher);
egret.registerClass(ShipManager, "ShipManager");
var ShopManager = function(t) {
    function e() {
        t.call(this),
            this.versionSwitch = !1,
            this.currPage = 0,
            this.buySpyType = 0,
            this.bytSpyId = 0,
            this.shopName = "",
            this.buyCaptainType = 0
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return void 0 == this._instance && (this._instance = new e),
                this._instance
        },
        i.sendSpy = function(t, e, a, i) {
            var n = Transport.getPkg(ProtocolMgr.ID_DceSpy);
            n.id = t,
                n.mode = e,
                n.tencount = a,
                this.data = i,
                Transport.instance.send(n)
        },
        i.sendSpyData = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceSpyData);
            Transport.instance.send(t)
        },
        i.sendBuySpyItem = function(t, e, a) {
            this.buySpyType = a;
            var i = Transport.getPkg(ProtocolMgr.ID_DceBuySpyItem);
            i.id = t,
                i.mode = e,
                this.bytSpyId = t,
                Transport.instance.send(i)
        },
        i.sendBuy = function(t, e, a, i) {
            void 0 === a && (a = "");
            var n = Transport.getPkg(ProtocolMgr.ID_DceBuy);
            n.id = t,
                n.count = e,
                this.shopName = a,
                this.data = i,
                Transport.instance.send(n)
        },
        i.sendShopData = function(t) {
            this.currPage = t;
            var e = Transport.getPkg(ProtocolMgr.ID_DceShopData);
            Transport.instance.send(e)
        },
        i.handleSpyData = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Shop);
            e && (e.setPos(), e.setPaperPage(t))
        },
        i.handleSpy = function(t) {
            if (t.id, 0 == t.res) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Shop);
                e && e.showPage(),
                    t.tencount ? MakeShipAlert.getInstance().showGetTenPapers(t, this.data) : MakeShipAlert.getInstance().showGetOnePaper(t, this.data)
            } else 1 == t.res ? Toast.launch("非法id") : 2 == t.res ? Toast.launch("钻石不足") : 3 == t.res ? ShopSpyAlert.getInstance().showBuySpyPage(this.data) : 4 == t.res ? Toast.launch("没有免费次数") : 5 == t.res ? Toast.launch("cd中") : 6 == t.res && Toast.launch("十连id错误")
        },
        i.handleBuySpyItem = function(t) {
            if (0 == t.res) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Shop);
                e && e.showPage();
                var a = 0,
                    i = "",
                    n = 0;
                2 == t.id ? (a = 1, i = Locales.get("panel_shop_txt_spy_comment_3_008"), n = QualitySystem.getColorByQuality(3)) : 3 == t.id ? (a = 1, i = Locales.get("panel_shop_txt_spy_comment_3_009"), n = QualitySystem.getColorByQuality(4)) : 5 == t.id && (a = 10, i = Locales.get("panel_shop_txt_spy_comment_3_009"), n = QualitySystem.getColorByQuality(4)),
                    0 == this.buySpyType ? Toast.launch("领取成功，获得#" + n.toString(16) + i + "x" + a + "#", 16777215, !0) : 1 == this.buySpyType && Toast.launch("购买成功，获得#" + n.toString(16) + i + "x" + a + "#", 16777215, !0),
                    GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.REFRESH_SPY_ALERT_COUNT, this.bytSpyId))
            } else 1 == t.res ? Toast.launch("非法id") : 2 == t.res ? Toast.launch("钻石不足") : 3 == t.res ? Toast.launch("道具不足") : 4 == t.res ? Toast.launch("没有免费次数") : 5 == t.res ? Toast.launch("cd中") : 6 == t.res && Toast.launch("十连id错误")
        },
        i.handleShopData = function(t) {
            if (this.currPage == WindowShop.STORE_INDEX) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Shop);
                e && (e.setPos(), e.setStorePage(t))
            } else if (this.currPage == WindowShop.VIP_INDEX) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Shop);
                a && (a.setPos(), a.setVipPage(t))
            } else if (this.currPage == WindowGuild.GUILD_INDEX) {
                var i = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
                i && i.setStoreData(t)
            }
        },
        i.handleBuy = function(t) {
            0 == t.res ? (this.currPage == WindowGuild.GUILD_INDEX && GuildManager.getInstance().sendGuildData(), this.data && Toast.launch("购买成功，获得#" + QualitySystem.getColorByQuality(this.data.quality).toString(16) + this.data.name + "x" + t.count + "#", 16777215, !0)) : 1 == t.res ? Toast.launch("不存在的id") : 2 == t.res ? Toast.launch("等级不足") : 3 == t.res ? Toast.launch("vip等级不足") : 4 == t.res ? Toast.launch("当日可购买数量不足") : 5 == t.res ? Toast.launch("限购") : 6 == t.res && Toast.launch("钻石不足")
        },
        i.sendDseCaptainData = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceCaptainData);
            Transport.instance.send(t)
        },
        i.handleCaptainData = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ZhaoMuCaptain);
            e && e.setPageData(t)
        },
        i.sendBuyRecruitItem = function(t, e, a) {
            this.buyCaptainType = a;
            var i = Transport.getPkg(ProtocolMgr.ID_DceBuyRecruitItem);
            i.id = t,
                i.mode = e,
                this.buyCaptainId = t,
                this.buyCaptainMode = e,
                Transport.instance.send(i)
        },
        i.handleBuyRecruitItem = function(t) {
            if (0 == t.res) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.ZhaoMuCaptain);
                a && e.getInstance().sendDseCaptainData();
                var i = 0,
                    n = "",
                    s = 0;
                1 == this.buyCaptainId ? (i = 1, n = Locales.get("panel_jianzhang_open_one_comment_6"), s = QualitySystem.getColorByQuality(3)) : 2 == this.buyCaptainId ? (i = 1, n = Locales.get("panel_jianzhang_open_one_comment_7"), s = QualitySystem.getColorByQuality(4)) : 3 == this.buyCaptainId && (i = 10, n = Locales.get("panel_jianzhang_open_one_comment_7"), s = QualitySystem.getColorByQuality(4)),
                    0 == this.buyCaptainType ? Toast.launch("领取成功，获得#" + s.toString(16) + n + "x" + i + "#", 16777215, !0) : 1 == this.buyCaptainType && Toast.launch("购买成功，获得#" + s.toString(16) + n + "x" + i + "#", 16777215, !0),
                    GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.REFRESH_MAKE_SHIP_ALERT_COUNT, this.buyCaptainId))
            } else 1 == t.res ? Toast.launch("钻石不足") : 2 == t.res ? Toast.launch("免费cd时间没到") : 3 == t.res ? Toast.launch("没有免费次数") : 4 == t.res && Toast.launch("参数错误")
        },
        i.sendRecruitCaptain = function(t, e, a) {
            var i = Transport.getPkg(ProtocolMgr.ID_DceRecruitCaptain);
            i.id = t,
                i.mode = e,
                this.data = a,
                Transport.instance.send(i)
        },
        i.handleRecruitCaptain = function(t) {
            if (t.captainid, t.ishave, t.score, 0 == t.res) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.ZhaoMuCaptain);
                a && e.getInstance().sendDseCaptainData(),
                    10 == t.captainid.length ? MakeShipAlert.getInstance().showGetTenCaptainPaper(t, this.data) : MakeShipAlert.getInstance().showGetOneCaptainPaper(t, this.data)
            } else 1 == t.res ? Toast.launch("不能十次") : 2 == t.res ? ShopSpyAlert.getInstance().showBuyCaptainPage(this.data) : 3 == t.res && Toast.launch("id错误")
        },
        e
}(egret.EventDispatcher);
egret.registerClass(ShopManager, "ShopManager");
var SoulManager = function(t) {
    function e() {
        t.call(this),
            this.quailtyArr = [],
            this.reductionSoulsIds = [],
            this.huishouNum = 0
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return void 0 == this._instance && (this._instance = new e),
                this._instance
        },
        i.soulPanel = function(t) {
            Main.trace(Log.objectToString(t)),
                1 != t.type && 3 != t.type || !t.soullist[0] ? 2 == t.type ? WindowManager.getInstance().show(WindowManager.windowType.tansuoGaoJiReward, {
                    type: 2,
                    pkg: t
                }) : 4 == t.type ? WindowManager.getInstance().show(WindowManager.windowType.tansuoGaoJiReward, {
                    type: 4,
                    pkg: t
                }) : 5 == t.type ? WindowManager.getInstance().show(WindowManager.windowType.tansuoGaoJiReward, {
                    type: 5,
                    pkg: t
                }) : 6 == t.type && WindowManager.getInstance().show(WindowManager.windowType.tansuoGaoJiReward, {
                    type: 6,
                    pkg: t
                }) : Toast.launch(Locales.get("panel_zhuanpan_txt_wind_5") + MedaldataParser.GetInstance().getItemById(t.soullist[0]).name_l)
        },
        i.getSoulsPicById = function(t) {
            if (null == t || "" == t) return "";
            var e = Path.soulIconURL + t;
            return e
        },
        i.setColor = function(t) {
            return "1" == t ? "0xF6F8E6" : "2" == t ? "0x5CED2F" : "3" == t ? "0x35B0FE" : "4" == t ? "0x8E55FF" : "5" == t ? "0xFF8033" : "6" == t ? "0XF42B0B" : void 0
        },
        i.getPercentage = function(t, e) {
            if (0 == t) return "0%";
            var a;
            return a = "Array" == egret.getQualifiedClassName(e) ? e : e.split("|"),
                Number(a[t]) / 100 + "%"
        },
        i.setHuishouTxtNum = function(t) {
            this.huishouNum = t;
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul);
            e && e.setHuiShouNum(this.huishouNum)
        },
        i.setHuishouNum = function(t, e) {
            console.log("勋章ID:" + t + " 是否选择回收:" + e),
                e ? this.huishouNum += 1 : this.huishouNum > 0 && (this.huishouNum -= 1);
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul);
            a && a.setHuiShouNum(this.huishouNum)
        },
        i.resetHuishouNum = function() {
            this.huishouNum = 0;
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul);
            t && t.setHuiShouNum(this.huishouNum)
        },
        i.setListItemSelectedState = function(t, e) {
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul);
            if (a && null != a.dsListParts)
                for (var i = 0; i < a.dsListParts.length; i++)
                    if (a.dsListParts[i].id == t) return void(a.dsListParts[i].isSelected = e)
        },
        i.sendUpgradeSoulMessage = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceSoulEat);
            a.id = t,
                a.soullist = e,
                Transport.instance.send(a)
        },
        i.refreshSoulsByUpgrade = function(t) {
            GameEventDispatcher.getInstance().hasEventListener(GameEvent.Souls_List_Refresh) || GameEventDispatcher.getInstance().addEventListener(GameEvent.Souls_List_Refresh, this.refreshSolusPage, this)
        },
        i.refreshSolusPage = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.Souls_List_Refresh, this.refreshSolusPage, this);
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul);
            t && t.onRefreshSoulsData()
        },
        i.sendDecomposeSoulMessage = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSoulDecompose);
            e.id = t,
                Transport.instance.send(e)
        },
        i.refreshSoulsByDecompose = function(t) {
            e.getInstance().reductionSoulsIds = [],
                this.refreshHuishouPage()
        },
        i.refreshHuishouPage = function() {
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul);
            t && t.setHuiShouPage()
        },
        i.sendRestoreSoulMessage = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSoulRestore);
            e.id = t,
                Transport.instance.send(e)
        },
        i.refreshSoulsByRestore = function(t) {
            this.refreshHuanYuanPage()
        },
        i.refreshHuanYuanPage = function() {
            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul);
            t && t.setHuanYuanPage()
        },
        i.handleLockSoulMessage = function(t) {
            0 == t.sucess ? this.refreshSolusPage() : Toast.launch("勋章锁定失败")
        },
        e.soulScene = 1,
        e
}(egret.EventDispatcher);
egret.registerClass(SoulManager, "SoulManager");
var UnlockManager = function() {
    function t() {
        this.panel = null,
            this.ColorText = null,
            this.ColorText_index = 1
    }
    var e = (__define, t),
        a = e.prototype;
    return a.LocalAddCampaignLock = function(t) {
            for (var e = 0,
                    a = t; e < a.length; e++) {
                var i = a[e],
                    n = Math.floor(i / 1e4),
                    s = Math.floor(i / 100 % 100),
                    r = Math.floor(i % 100),
                    o = UserData.getInstance().uid + n + s + r + "CampaignLock";
                "" == UserDefault.instance.getStringForKey(o) && UserDefault.instance.setStringForKey(o, "true")
            }
        },
        a.LocalAddSpecialCampaignLock = function(t) {
            for (var e in t) {
                var a = t[e],
                    i = UserData.getInstance().uid + a.stageID + "SpecialCampaignLock";
                "" == UserDefault.instance.getStringForKey(i) && UserDefault.instance.setStringForKey(i, "true")
            }
        },
        a.LocalAddCampaignTalk = function(t) {
            for (var e in t) {
                var a = t[e],
                    i = (Math.floor(a / 1e4), Math.floor(a / 100 % 100));
                if (CampaigndataParser.GetInstance().getItemById(i).unlockpicture.length > 0) {
                    var n = UserData.getInstance().uid + i + "CampaignTalk";
                    "" == UserDefault.instance.getStringForKey(n) && UserDefault.instance.setStringForKey(n, "true")
                }
            }
        },
        a.LocalAddCampaignTalk_Current = function(t) {
            var e = UserData.getInstance().uid + t + "CampaignTalk";
            "" == UserDefault.instance.getStringForKey(e) && UserDefault.instance.setStringForKey(e, "true")
        },
        a.LocalAddStageTalk = function(t) {
            for (var e in t) {
                var a = t[e];
                if (a.serverData && a.serverData.star >= 1 && a.baseData.unlockpicture.length > 0) {
                    var i = UserData.getInstance().uid + a.baseData.id + "StageTalk";
                    "" == UserDefault.instance.getStringForKey(i) && UserDefault.instance.setStringForKey(i, "true")
                }
            }
        },
        a.LocalAddStageTalk_Current = function(t) {
            var e = UserData.getInstance().uid + t.baseData.id + "StageTalk";
            "" == UserDefault.instance.getStringForKey(e) && UserDefault.instance.setStringForKey(e, "true")
        },
        a.SectionUnlockShow = function() {
            var e = !0;
            t.CampaignOpen = !1;
            var a = StageDataLib.instance.getAreaIdById(t.StageId),
                i = a.areaId,
                n = a.campaignId,
                s = a.stageIndex;
            if (t.StageCount == s && (e = !1), 1 == BattleManager.isNextStage) {
                a = StageDataLib.instance.getAreaIdById(t.NextStageID);
                var r = a.areaId,
                    o = a.campaignId,
                    l = a.tmpstageIndex,
                    h = UserData.getInstance().uid + r + o + l + "CampaignLock";
                "" == UserDefault.instance.getStringForKey(h) && UserDefault.instance.setStringForKey(h, "true"),
                    CampaigndataParser.GetInstance().getItemById(o).unlockpicture.length > 0 && (h = UserData.getInstance().uid + o + "CampaignTalk", "" == UserDefault.instance.getStringForKey(h) && UserDefault.instance.setStringForKey(h, "true")),
                    e = !0
            }
            if (0 == e && 1 == t.BattleWin) {
                var h = UserData.getInstance().uid + i + n + s + "CampaignLock";
                "" != UserDefault.instance.getStringForKey(h) ? e = !0 : UserDefault.instance.setStringForKey(h, "true")
            }
            return 0 == t.BattleWin ? e = !0 : t.BattleWin = !1,
                0 == e && (t.CampaignOpen = !0),
                e
        },
        a.SpecialSectionUnlockShow = function() {
            var e = !1;
            t.CampaignOpen = !1;
            var a = StagespecialdataParser.GetInstance().getItemById(t.specialStageId + 1);
            if (1 == BattleManager.isNextStage) {
                var i = UserData.getInstance().uid + a.id + "SpecialCampaignLock";
                "" == UserDefault.instance.getStringForKey(i) && UserDefault.instance.setStringForKey(i, "true"),
                    e = !0
            }
            if (1 == t.BattleWin && 1 != e) {
                var i = UserData.getInstance().uid + a.id + "SpecialCampaignLock";
                "" != UserDefault.instance.getStringForKey(i) ? e = !0 : UserDefault.instance.setStringForKey(i, "true")
            }
            0 == t.BattleWin ? e = !0 : t.BattleWin = !1;
            var n = MainWorldManager.instance.getAllLastList(),
                s = !1;
            for (var r in n) {
                var o = n[r];
                Log.logZDY(o),
                    o == a.reqStage && (s = !0)
            }
            return 1 == s || (e = !0),
                0 == e && (t.CampaignOpen = !0),
                e
        },
        a.Campaign_Talk_Check = function(t) {
            var e = !0;
            return CampaigndataParser.GetInstance().getItemById(t).unlockpicture.length > 0 ? "" != UserDefault.instance.getStringForKey(UserData.getInstance().uid + t + "CampaignTalk") && (e = !1) : e = !1,
                e
        },
        a.Stage_Talk_Check = function(t) {
            var e = !0;
            return t.baseData.unlockpicture.length > 0 ? "" != UserDefault.instance.getStringForKey(UserData.getInstance().uid + t.baseData.id + "StageTalk") && (e = !1) : e = !1,
                e
        },
        a.ChangeText = function(t, e, a, i, n) {
            n && n()
        },
        a.Campaign_talk = function(t, e) {},
        a.Stage_talk = function(t, e) {},
        t.instance = new t,
        t.CampaignOpen = !1,
        t.iconX = 0,
        t.iconY = 0,
        t.BattleWin = !1,
        t
}();
egret.registerClass(UnlockManager, "UnlockManager");
var WeatherManager = function() {
    function t() {
        this.currentWeather = null,
            this.weatherType = [
                [this.sunDown, {}],
                [this.stormRain, {}],
                [this.cloud, 0],
                [this.cloud, 1],
                [this.snow, {}]
            ]
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(t, "instance",
            function() {
                return t._instance || (t._instance = new t),
                    t._instance
            }),
        i.sunDown = function(t, e) {
            if (t && BattleMapSystem.instance.getCurrentMapType() == BattleMapType.MAP_NORMAL) {
                var a = new egret.Bitmap;
                SUI.setTextureAsync(a, Path.mapEffectUrl + "light.png",
                        function(t) {
                            a.blendMode = egret.BlendMode.ADD,
                                a.anchorOffsetX = .5 * t.textureWidth,
                                a.anchorOffsetY = .5 * t.textureHeight
                        }),
                    t && t.addChild(a)
            }
        },
        i.stormRain = function(t, e) {
            if (t) {
                var a = Path.mapEffectUrl + "weather_rain.json",
                    i = Path.mapEffectUrl + "weather_rain.png",
                    n = "default";
                SUI.loadSpriteSheet(a, i,
                    function(e, a) {
                        var i = new egret.MovieClipDataFactory(e, a),
                            s = new egret.MovieClip(i.generateMovieClipData(n));
                        s.x = .5 * GameData.designWidth,
                            s.y = .5 * GameData.designHeight,
                            t.addChild(s),
                            s.gotoAndPlay(0, -1),
                            s.scaleX = GameData.designWidth / s.width,
                            s.scaleY = GameData.designHeight / s.height,
                            s.frameRate = 35
                    });
                var s = new egret.Bitmap;
                SUI.setTextureAsync(s, Path.mapEffectUrl + "weatherThunder.png"),
                    s.visible = !1,
                    t.addChild(s);
                var r = new egret.Bitmap;
                SUI.setTextureAsync(r, Path.mapEffectUrl + "write.png"),
                    r.scaleX = GameData.designWidth / 10,
                    r.scaleY = GameData.designHeight / 10,
                    r.alpha = .2,
                    r.blendMode = egret.BlendMode.NORMAL,
                    r.visible = !1,
                    t.addChild(r);
                var o = egret.Tween.get(s, {
                    loop: !0
                });
                o.wait(5e3).wait(Utils.randInt(0, 1e4)).call(function() {
                    for (var t = Utils.randInt(1, 3), e = 1; t >= e; ++e) Utils.delayCall(.15 * e * 1e3,
                        function() {
                            s.rotation = Utils.randInt(0, 90),
                                s.visible = !0,
                                r.visible = !0;
                            var t = egret.Tween.get(r);
                            t.to({
                                    alpha: 0
                                },
                                100).call(function() {
                                r.visible = !1,
                                    s.visible = !1
                            })
                        })
                })
            }
        },
        i.cloud = function(t, e) {
            if (t) {
                var a = (Path.mapEffectUrl + "weather_cloud.json", Path.mapEffectUrl + "weather_cloud.png", 0);
                a = 1 == e ? 60 : 10;
                for (var i = 1,
                        n = new egret.Sprite,
                        s = 1; a >= s; ++s) {
                    i = Utils.randInt(1, 10) > 5 ? -1 : 1;
                    var r = 0,
                        o = 0;
                    r = Utils.randInt(-300, 550),
                        o = Utils.randInt(-100, -320) * i;
                    var l = new egret.Bitmap;
                    l.x = r,
                        l.y = o;
                    var h = Path.mapEffectUrl + "weather_cloud/weather_cloud_00" + Utils.randInt(1, 8) + ".png";
                    SUI.setTextureAsync(l, h);
                    var c = egret.Tween.get(l);
                    c.to({
                                x: r - 150
                            },
                            Utils.randInt(25e3, 65e3)).call(function(t) {
                                Utils.removeNode(t)
                            },
                            void 0, [l]),
                        n.addChild(l)
                }
                n.x = .5 * GameData.designWidth,
                    n.y = .5 * GameData.designHeight,
                    n.rotation = 20,
                    t.addChild(n)
            }
        },
        i.snow = function(t, e) {},
        i.randomWeatherByList = function(e) {
            null == !t.RandomList && (t.RandomList = []),
                Log.logZDY("weather." + Log.objectToString(t.RandomList));
            var a = null;
            a = t.RandomList.length > 0 ? t.RandomList[Utils.randInt(0, t.RandomList.length - 1)] : t.SUNDOWN,
                BattleManager.replay_flag || (this.currentWeather = a),
                (!this.currentWeather || this.currentWeather - 1 < 0 || this.currentWeather - 1 >= this.weatherType.length) && (this.currentWeather = t.SUNDOWN),
                this.currentWeather = 5;
            var i = this.weatherType[this.currentWeather - 1][0];
            i(e, this.weatherType[this.currentWeather - 1][1])
        },
        i.randomWeather = function(t) {
            var e = this.weatherType[Utils.randInt(0, this.weatherType.length - 1)],
                a = e[0];
            a(t, e[1])
        },
        i.getRandomWeather = function() {
            return [1, 2, 3, 4, 5]
        },
        i.clear = function() {
            t.RandomList = null,
                this.currentWeather = null
        },
        t.SUNDOWN = 1,
        t.STORMRAIN = 2,
        t.CLOUD_LESS = 3,
        t.CLOUD_MUCH = 4,
        t.SNOW = 5,
        t.RandomList = null,
        t
}();
egret.registerClass(WeatherManager, "WeatherManager");
var WindowManager = function() {
    function t() {
        this._windowPool = {},
            this._windowStack = []
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        a.clearCache = function(t) {
            delete this._windowPool[t]
        },
        a.show = function(t, e) {
            if (void 0 === e && (e = void 0), Main.trace(t, "---------"), !("WindowBuJi" == t && UserData.getInstance()._level < 9)) {
                var a = this._windowPool[t];
                if (a) {
                    if (a.itemBool || GameLayer.getInstance().pageLayer.addChild(a), a.isPopWindow) {
                        var i = this._windowStack.indexOf(a);
                        if (i >= 0 && this._windowStack.splice(i, 1), GameLayer.getInstance().windowLayer.addChild(a), a._needBlock) {
                            for (var n = 0,
                                    s = this._windowStack; n < s.length; n++) {
                                var r = s[n];
                                r._block && (r._block.visible = !1)
                            }
                            GameLayer.getInstance().windowLayer.addChild(a._block)
                        }
                        this._windowStack.push(a)
                    }
                } else if (a = Object.create(window[t].prototype), a.constructor.apply(a), a.windowName = t, this._windowPool[t] = a, a.isPopWindow && (this._windowStack.push(a), a._needBlock))
                    for (var o = 0,
                            l = this._windowStack; o < l.length; o++) {
                        var r = l[o];
                        r._block && (r._block.visible = !1)
                    }
                void 0 != e && (a.__inited ? a.setData(e) : a.__cachedData = e),
                    Log.log("Show window:", t)
            }
        },
        a.getWindow = function(t) {
            return this._windowPool[t] ? this._windowPool[t] : null
        },
        a.hide = function(t) {
            var e = this._windowPool[t];
            if (e) {
                if (Utils.removeNode(e), e.isPopWindow) {
                    var a = this._windowStack.indexOf(e);
                    a >= 0 && this._windowStack.splice(a, 1);
                    for (var i = this._windowStack.length - 1; i >= 0; --i)
                        if (e._needBlock && e._block) {
                            e._block.visible = !0;
                            break
                        }
                } else MainUI.instance.showLastTop();
                delete this._windowPool[t]
            }
        },
        a.hideAll = function() {
            var t = [];
            for (var e in this._windowPool) t.push(e);
            for (var a = 0,
                    i = t; a < i.length; a++) {
                var n = i[a];
                this.hide(n)
            }
        },
        a.showWaiting = function() {
            this._waitingMc || (this._waitingMc = new WindowWaiting),
                GameLayer.getInstance().effectLayer.addChild(this._waitingMc)
        },
        a.hideWaiting = function() {
            this._waitingMc && this._waitingMc.parent && this._waitingMc.parent.removeChild(this._waitingMc)
        },
        a.isWindowVisible = function(t) {
            var e = this._windowPool[t];
            return void 0 != e && void 0 != e.parent && e.visible ? !0 : !1
        },
        t.windowType = {
            ChooseCamp: "WindowChooseCamp",
            ShipFactory: "WindowShipFactory",
            BuJi: "WindowBuJi",
            RoleInfo: "WindowRoleInfo",
            NameChange: "WindowNameChange",
            OilRefining: "WindowOilRefining",
            ShipInfo: "WindowShipInfo",
            WarshipHandbook: "WindowWarshipHandbook",
            HandbookProperty: "WindowHandbookProperty",
            Store: "WindowStore",
            Military: "WindowMilitary",
            CommonIntroduction: "WindowCommonIntroduction",
            ExchangeBlueprint: "WindowExchangeBlueprint",
            ExchangeCaptain: "WindowExchangeCaptain",
            ShipManager: "WindowShipManager",
            PeiJian: "WindowPeiJian",
            ShipArrange: "WindowShipArrange",
            FormatTeam: "WindowFormatTeam",
            OperatePanel: "WindowOperatePanel",
            ChoosItem: "WindowChooseItem",
            Chat: "WindowChat",
            PVE: "WindowPVE",
            PVEChooseLevel: "WindowPVEChooseLevel",
            PVEConfirm: "WindowPVEConfirm",
            PartMetals: "WindowPartsMetals",
            Soul: "WindowSoul",
            Captain: "WindowCaptain",
            Mail: "WindowMail",
            Formation: "WindowFormation",
            FormationUpdatePopup: "WindowFormationUpPopup",
            KeJi: "WindowKeJi",
            Shop: "WindowShop",
            Zhenba: "WindowHegemony",
            ZhenbaEctype: "WindowEctype",
            ZhenbaPrecious: "WindowPrecious",
            BattleResult: "WindowBattleResult",
            QiJvTou: "WindowQiJvTou",
            DefenseOil: "WindowDefenseOil",
            PreciouseBattle: "WindowPreciousBattle",
            BattleSweepDrop: "WindowBattleSweepDrop",
            Speak: "WindowSpeak",
            Friend: "WindowFriend",
            PVP: "WindowPVP",
            GuildJoin: "WindowGuildJoin",
            RankList: "WindowRankList",
            Guild: "WindowGuild",
            Mission: "WindowMission",
            System: "WindowSystemSet",
            PVPExchange: "WindowPVPExchange",
            PVPExchangeConfirm: "WindowPVPExchangeConfirm",
            Strategy: "WindowStrategy",
            Medal: "WindowMedal",
            Guide: "PlayerGuidePanel",
            CampBattle: "WindowCampBattle",
            CampBattleReports: "WindowCampBattleReports",
            CampBattleRankingList: "WindowCampBattleRankingList",
            CampExchange: "WindowCampExchange",
            CampBattleOver: "WindowCampBattleOver",
            CampBattleEnd: "WindowCampBattleEnd",
            Award: "WindowAward",
            Upgrade: "WindowUpgrade",
            Recharge: "WindowRecharge",
            BattleSweepResult: "WindowBattleSweepResult",
            StageCountBuy: "WindowStageCountBuy",
            ItemUse: "WindowItemUse",
            TeGong: "WindowTeGong",
            ZhaoMuCaptain: "WindowZhaoMuCaptain",
            tansuo: "WindowTansuo",
            tansuoGaoJi: "WindowGaoJiTanSuo",
            tansuoGaoJiReward: "WindowGaojiTanSuoReward",
            tansuoQuick: "WindowQuickTanSuo",
            taskReward: "WindowTaskReward",
            activity: "WindowActivity",
            listActivity: "WindowListActivity",
            signActivity: "WindowSignActivity",
            signConfirm: "WindowSignConfirm",
            pveTalking: "WindowPveTalking",
            log: "WindowLog",
            oilActivity: "WindowActivityOil",
            luckyWheel: "WindowLuckyWheel",
            mubiaoAct: "WindowMuBiaoAct",
            testCamp: "WindowCamp",
            firstRecharge: "WindowFirstRecharge",
            loginReward: "WindowActivityLoginReward"
        },
        t
}();
egret.registerClass(WindowManager, "WindowManager");
var BuffData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.getBuffNameById = function(e) {
            return Locales.get(t.bufffLandString[e - 1] || "DecListPanel_txt_item_prop_" + e)
        },
        t.getAdvanceBuffDesc = function(t) {
            var e, a = ConfigData.getDataByKey("AdvancedbuffData", t),
                i = ConfigData.getAllData("skillData"),
                n = a.buffValue1.split("|");
            for (var s in i)
                if (i[s].idType == n[1]) {
                    e = i[s];
                    break
                }
            if (e) {
                var r = e.desc2_l + "+" + n[2] / 100 + "%";
                return r
            }
            return "undefined"
        },
        t.getBuffValue = function(t, e) {
            void 0 === e && (e = 1);
            var a = "";
            return a = 21 == t.buff || 22 == t.buff ? t.buffValue * e / 100 + "%" : (t.buffValue * e).toString()
        },
        t.bufffLandString = ["BUFFSYSTEM_FIRE_ATK_CON", "BUFFSYSTEM_FIRE_ATK_PER", "BUFFSYSTEM_EXPL_ATK_CON", "BUFFSYSTEM_EXPL_ATK_PER", "BUFFSYSTEM_FIER_DEF_CON", "BUFFSYSTEM_FIRE_DEF_PER", "BUFFSYSTEM_EXPL_DEF_CON", "BUFFSYSTEM_EXPL_DEF_PER", "BUFFSYSTEM_HP_CON", "BUFFSYSTEM_HP_PER", "BUFFSYSTEM_SPD_CON", "BUFFSYSTEM_SPD_PER", "BUFFSYSTEM_HIT_CON", "BUFFSYSTEM_HIT_PER", "BUFFSYSTEM_EVA_CON", "BUFFSYSTEM_EVA_PER", "BUFFSYSTEM_CRI_CON", "BUFFSYSTEM_CRI_PER", "BUFFSYSTEM_DECRI_CON", "BUFFSYSTEM_DECRI_PER", "BUFFSYSTEM_CRI_DMG_PER", "BUFFSYSTEM_SKILL_USE_PER", "BUFFSYSTEM_SKILL_DMG_PER", "BUFFSYSTEM_SKILL_HIT_PER", "BUFFSYSTEM_TO_JAP_DEF_CON", "BUFFSYSTEM_TO_GAR_DEF_CON", "BUFFSYSTEM_TO_USA_DEF_CON", "BUFFSYSTEM_TO_ENG_DEF_CON", "BUFFSYSTEM_ADD_SH_CON", "BUFFSYSTEM_SUB_SH_CON"],
        t
}();
egret.registerClass(BuffData, "BuffData");
var BuyOilData = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return void 0 == this._instance && (this._instance = new t),
                this._instance
        },
        a.getData = function(t) {
            var e = this;
            void 0 === t && (t = null),
                this._callBack = t,
                ConfigData.getAllData("buyOilData",
                    function(t) {
                        e.loadData(t)
                    })
        },
        a.loadData = function(t) {
            t && (this.dataList = t, this._callBack && this._callBack())
        },
        t
}();
egret.registerClass(BuyOilData, "BuyOilData");
var CaptainData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.updateList = function(e) {
            t.captainlist = e.captainlist,
                ConfigData.preLoadList(["captainData"],
                    function() {
                        t.captainlist.sort(function(t, e) {
                            var a = ConfigData.getDataByKey("captainData", t.id),
                                i = ConfigData.getDataByKey("captainData", e.id);
                            return Number(a.quality) > Number(i.quality) ? -1 : 1
                        })
                    })
        },
        t.updatePieceList = function(e) {
            t.captainPiecelist = e.captainpiecelist
        },
        t.getCaptainPieceData = function(e) {
            for (var a = 0; a < t.captainPiecelist.length; a++) {
                var i = t.captainPiecelist[a];
                if (i.id == e) return i
            }
            return null
        },
        t.updateCaptain = function(e) {
            for (var a = 0; a < t.captainlist.length; a++) e.id == t.captainlist[a].id && (t.captainlist[a] = e);
            GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CAPTAIN_UPDATE)),
                CaptainManager.getInstance().refreshCaptainListPage()
        },
        t.captainlist = [],
        t.captainPiecelist = [],
        t
}();
egret.registerClass(CaptainData, "CaptainData");
var CenterAddData = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.setData = function(t) {
            return null == t ? null : (this.count = Number(t.count), this.cash = Number(t.cash), this)
        },
        t
}();
egret.registerClass(CenterAddData, "CenterAddData");
var CenterAddDataTool = function() {
    function t() {
        this.data = []
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.init = function(t) {},
        a.getData = function() {
            return CenteradddataParser.GetInstance().getDataArr()
        },
        a.getDataByCount = function(t) {
            var e = 0,
                a = CenteradddataParser.GetInstance().getDataArr();
            for (var i in a)
                if (!(t > a[i].count)) {
                    e = 0 == Number(i) ? 0 : Number(i) == a.length - 1 ? a.length - 1 : Number(i);
                    break
                }
            return a[e]
        },
        t
}();
egret.registerClass(CenterAddDataTool, "CenterAddDataTool");
var Equip = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(Equip, "Equip");
var Exp = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.setData = function(t) {
            return null == t ? null : (this.level = Number(t.level), this.exp = Number(t.exp), this.poslevel = Number(t.poslevel), this.centerAddGold = Number(t.centerAddGold), this.yardNumLimit = Number(t.yardNumLimit), this.shipFactorylvlLimit = Number(t.shipFactorylvlLimit), this.techLimit = Number(t.techLimit), this.partLevelLimit = Number(t.partLevelLimit), this.restoreOil = Number(t.restoreOil), this.speedUpLv = Number(t.speedUpLv), this.desc_l = t.desc_l, this.medalLevelLimit = Number(t.medalLevelLimit), this.captainLevelLimit = Number(t.captainLevelLimit), this.seikoLevelLimit = Number(t.seikoLevelLimit), this.robberyDrop = Number(t.robberyDrop), this)
        },
        t
}();
egret.registerClass(Exp, "Exp");
var ExpTool = function() {
    function t() {
        var t = this;
        this.data = [];
        ConfigData.getAllData("exp",
            function(e) {
                t.init(e)
            })
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.init = function(t) {
            for (var e in t) t[e] == t.length ? console.log("Exp length:" + t[e]) : this.data.push((new Exp).setData(t[e]))
        },
        a.getData = function() {
            return this.data
        },
        a.getDataByLv = function(t) {
            return this.data[t]
        },
        t
}();
egret.registerClass(ExpTool, "ExpTool");
var BattleUnitActionOptData = function() {
    function t(t, e, a, i, n) {
        this.actionViewUnit = t,
            this.battleUnit = e,
            this.skill = a,
            this.targetViewUnit = i,
            this.targetBattleUnit = n
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(BattleUnitActionOptData, "BattleUnitActionOptData");
var Medal = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(Medal, "Medal");
var MilitaryRank = function() {
    function t() {
        this.privilege = []
    }
    var e = (__define, t),
        a = e.prototype;
    return a.setData = function(t) {
            if (null == t) return null;
            if (this.id = Number(t.id), this.nextrank = Number(t.nextrank), this.name_l = t.name_l, this.picture = t.picture, this.pic_ch = t.pic_ch, this.pic_ch_s = t.pic_ch_s, this.honour = Number(t.honour), this.gold = Number(t.gold), this.diamond = Number(t.diamond), this.quality = Number(t.quality), null != t.privilege && "" != t.privilege) {
                var e = t.privilege.split("|");
                for (var a in e) null != e[a] && "" != e[a] && this.privilege.push(Number(e[a]))
            }
            return this
        },
        t
}();
egret.registerClass(MilitaryRank, "MilitaryRank");
var MilitaryRankTool = function() {
    function t() {
        var t = this;
        this.data = [];
        ConfigData.getAllData("MilitaryRank",
            function(e) {
                t.init(e)
            })
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.init = function(t) {
            for (var e in t) t[e] == t.length ? console.log("MilitaryRank length:" + t[e]) : this.data.push((new MilitaryRank).setData(t[e]))
        },
        a.getData = function() {
            return this.data
        },
        a.getDataById = function(t) {
            return this.data[t]
        },
        t
}();
egret.registerClass(MilitaryRankTool, "MilitaryRankTool");
var MilitaryRights = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.setData = function(t) {
            return null == t ? null : (this.id = Number(t.id), this.righttype = Number(t.righttype), this.numtype = Number(t.numtype), this.num = Number(t.num), this.rightname_l = t.rightname_l, this)
        },
        t
}();
egret.registerClass(MilitaryRights, "MilitaryRights");
var MilitaryRightsTool = function() {
    function t() {
        var t = this;
        this.data = [];
        ConfigData.getAllData("MilitaryRights",
            function(e) {
                t.init(e)
            })
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.init = function(t) {
            for (var e in t) t[e] == t.length ? console.log("MilitaryRights length:" + t[e]) : this.data.push((new MilitaryRights).setData(t[e]))
        },
        a.getData = function() {
            return this.data
        },
        a.getDataById = function(t) {
            return this.data[t]
        },
        t
}();
egret.registerClass(MilitaryRightsTool, "MilitaryRightsTool");
var NameRandomTool = function() {
    function t(t, e, a, i, n) {
        var s = this;
        void 0 === t && (t = 0),
            void 0 === e && (e = ""),
            void 0 === i && (i = -1),
            void 0 === n && (n = null),
            this.isLoad = !1,
            this.FamilyNameList_M = [],
            this.FamilyNameList_W = [],
            this.FamilyNameList_All = [],
            this.GivenNameList_M = [],
            this.GivenNameList_W = [],
            this.GivenNameList_All = [],
            this.curName = "22",
            this.opType = 0,
            this._sex = -1,
            this.opType = t,
            this._sex = i,
            this.curName = e,
            this._myLable = a,
            this._shipData = n,
            0 == t ? this.preloadConfigs(function(t) {
                s.analyzePlayerNameData(t)
            }) : (this.shipNameData = ShipnameParser.GetInstance().getDatas(), this.shipNameData ? this.analyzeShipNameData() : ConfigData.preLoadDats(["shipName"], [ShipnameParser],
                function() {
                    s.shipNameData = ShipnameParser.GetInstance().getDatas(),
                        s.analyzeShipNameData()
                }))
    }
    var e = (__define, t),
        a = e.prototype;
    return a.preloadConfigs = function(t) {
            var e = [];
            e.push("namePlayerData"),
                ConfigData.preLoadDats(e, [NameplayerdataParser],
                    function() {
                        t(NameplayerdataParser.GetInstance().getDataArr())
                    })
        },
        a.analyzeShipNameData = function() {
            var t = "";
            do t = this.getShipRandomName();
            while (t == this._shipData.shipName || "" == t || t.indexOf("undefined") >= 0);
            this._myLable.text = t
        },
        a.getShipRandomName = function() {
            var t = [],
                e = "";
            for (var a in this.shipNameData) e = this.shipNameData[a].id.toString(),
                e.substr(0, 2) == (10 * this._shipData.country).toString() && t.push(this.shipNameData[a]);
            e = "";
            var i = [];
            for (var n in t) e = t[n].id.toString(),
                e.substr(2, 2) == this._shipData.shipType && i.push(t[n]);
            var s = Math.floor(Math.random() * i.length) - 1;
            return e = i[s] ? i[s].chName_l : ""
        },
        a.analyzePlayerNameData = function(t) {
            this.FamilyNameList_M = [],
                this.FamilyNameList_W = [],
                this.FamilyNameList_All = [],
                this.GivenNameList_M = [],
                this.GivenNameList_W = [],
                this.GivenNameList_All = [];
            for (var e in t) 1 == t[e].sex ? 1 == t[e].nametype ? (this.FamilyNameList_M.push(t[e].name_l), this.FamilyNameList_W.push(t[e].name_l), this.FamilyNameList_All.push(t[e].name_l)) : (this.GivenNameList_M.push(t[e].name_l), this.GivenNameList_W.push(t[e].name_l), this.GivenNameList_All.push(t[e].name_l)) : 2 == t[e].sex ? 1 == t[e].nametype ? (this.FamilyNameList_M.push(t[e].name_l), this.FamilyNameList_All.push(t[e].name_l)) : (this.GivenNameList_M.push(t[e].name_l), this.GivenNameList_All.push(t[e].name_l)) : 1 == t[e].nametype ? (this.FamilyNameList_W.push(t[e].name_l), this.FamilyNameList_All.push(t[e].name_l)) : (this.GivenNameList_W.push(t[e].name_l), this.GivenNameList_All.push(t[e].name_l));
            this._myLable && void 0 != this._myLable.text && (this._myLable.text = this.getRandomName())
        },
        a.getFamilyName = function() {
            var t = [];
            t = 2 == this._sex ? this.FamilyNameList_M : 3 == this._sex ? this.FamilyNameList_W : this.FamilyNameList_All;
            var e = Math.floor(Math.random() * t.length) - 1;
            return t[e]
        },
        a.getGivenName = function() {
            var t = [];
            t = 2 == this._sex ? this.GivenNameList_M : 3 == this._sex ? this.GivenNameList_W : this.GivenNameList_All;
            var e = Math.floor(Math.random() * t.length) - 1;
            return t[e]
        },
        a.getRandomName = function() {
            var t = "";
            do t = this.getFamilyName() + "·" + this.getGivenName();
            while (t == this.curName || "" == t || t.indexOf("undefined") >= 0);
            return t
        },
        t
}();
egret.registerClass(NameRandomTool, "NameRandomTool");
var BattleShipOptData = function() {
    function t(e, a, i, n, s, r) {
        n == t.TYPE_PLAYER ? this.baseData = ShipdataParser.GetInstance().getItemById(e.shipid) : n == t.TYPE_NPC ? this.baseData = NpcdataParser.GetInstance().getItemById(e.shipid) : n == t.TYPE_VIRTUAL && (this.baseData = e),
            this.baseData ? (this.modelData = ShipmodeldataParser.GetInstance().getItemById(this.baseData.modelId), this.modelData || Log.logError("ModelData is not exist, id:" + this.baseData.modelId)) : Log.logError("ShipDataLib is not exist, id:" + e.shipid + ",dataType:" + n),
            this.isMine = a,
            this.isCaptain = i,
            this.pos = s,
            this.dataType = n,
            this.isBench = r,
            this.serverData = e
    }
    var e = (__define, t);
    e.prototype;
    return t.processData = function(e, a, i, n, s) {
            for (var r, o, l = [], h = 0, c = 0, d = e.length; d > c; ++c) {
                var g = e[c];
                0 != g.id && (g.id == i ? (o = new t(g, a, !0, n, c, !1), r = o) : o = new t(g, a, !1, n, c, !1), l.push(o), g && g.hp > 0 && (h += g.speed))
            }
            if (s) {
                Log.logZDY("benchList length" + s.length);
                for (var c = 0,
                        d = s; d > c; ++c) {
                    var u = s[c];
                    Log.logZDY("***************" + u.id),
                        0 != Number(u.id) && (o = new t(u, a, !1, n, c, !0), l.push(o), u && u.hp > 0 && (h += u.speed))
                }
            }
            return {
                list: l,
                captain: r,
                speed: h
            }
        },
        t.TYPE_PLAYER = 1,
        t.TYPE_NPC = 2,
        t.TYPE_VIRTUAL = 3,
        t
}();
egret.registerClass(BattleShipOptData, "BattleShipOptData");
var BattleTeamOptData = function() {
    function t(t, e, a, i, n, s) {
        this.uid = t,
            this.name = e,
            this.list = i,
            this.captainOptData = n,
            this.isLeft = s,
            this.speed = a
    }
    var e = (__define, t);
    e.prototype;
    return t.processDataByTacticInfo = function(e, a) {
            var i = null,
                n = null,
                s = 0,
                r = !1,
                o = a,
                l = BattleShipOptData.TYPE_PLAYER,
                h = "",
                c = BattleManager.instance.battleType,
                d = UserData.getInstance().uid,
                g = UserData.getInstance().username;
            if (c == BattleType.BATTLE_TYPE_MAIN_PVE) e.uid == d ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : (r = !1, l = BattleShipOptData.TYPE_NPC, h = Locales.get(MainWorldManager.instance.campaign().team_l));
            else if (c == BattleType.BATTLE_TYPE_MAIN_SPECIAL) e.uid == d ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : (r = !1, l = BattleShipOptData.TYPE_NPC, MainWorldManager.instance.bakeSpecialData && (h = StagespecialdataParser.GetInstance().getItemById(MainWorldManager.instance.bakeSpecialData.id).name_l));
            else if (c == BattleType.BATTLE_TYPE_TRANSPORT) e.uid == d ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : (r = !1, l = BattleShipOptData.TYPE_NPC, h = StagespecialdataParser.GetInstance().getItemById(e.uid).name_l);
            else if (c == BattleType.BATTLE_TYPE_PRESSURE) e.uid == d ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : (r = !1, l = BattleShipOptData.TYPE_NPC, h = StagespecialdataParser.GetInstance().getItemById(e.uid).name_l);
            else if (c == BattleType.BATTLE_TYPE_GUARD_OIL)
                if (e.uid == d) r = !0,
                    l = BattleShipOptData.TYPE_PLAYER,
                    h = g;
                else {
                    var u = WindowDefenseOil.curstage + 1,
                        p = NpcdataParser.GetInstance().getItemById(DefencestagedataParser.GetInstance().getItemById(u).pos8);
                    r = !1,
                        l = BattleShipOptData.TYPE_NPC,
                        h = Locales.get(p.name_l)
                }
            else if (c == BattleType.BATTLE_TYPE_ARENA)
                if (e.uid == d) r = !0,
                    l = BattleShipOptData.TYPE_PLAYER,
                    h = g;
                else {
                    r = !1,
                        l = e.uid.length < 10 ? BattleShipOptData.TYPE_NPC : BattleShipOptData.TYPE_PLAYER;
                    var m = ArenanpcdataParser.GetInstance().getItemById(e.uid);
                    h = m ? m.name_l : e.name ? e.name : ""
                }
            else if (c == BattleType.BATTLE_TYPE_ZONGHENG) e.uid == d && (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g);
            else if (c == BattleType.BATTLE_TYPE_ROBBERY)
                if (e.uid == d) r = !0,
                    l = BattleShipOptData.TYPE_PLAYER,
                    h = g;
                else {
                    r = !1,
                        l = e.uid.length < 10 ? BattleShipOptData.TYPE_NPC : BattleShipOptData.TYPE_PLAYER;
                    var m = RobnpcdataParser.GetInstance().getItemById(e.uid);
                    h = m ? Locales.get(m.name_l) : e.name ? e.name : ""
                }
            else c == BattleType.BATTLE_TYPE_VIRTUAL ? e.uid == d ? (r = !0, l = BattleShipOptData.TYPE_VIRTUAL, h = Locales.get("virtualBattleTitleLeft")) : (r = !1, l = BattleShipOptData.TYPE_VIRTUAL, h = Locales.get("virtualBattleTitleRight")) : c == BattleType.BATTLE_TYPE_GLOBALARENA ? e.uid == d ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : (r = !1, l = BattleShipOptData.TYPE_PLAYER, h = e.name) : c == BattleType.BATTLE_TYPE_EMAIL_REPLAY ? e.uid == d ? (r = !1, l = BattleShipOptData.TYPE_PLAYER, h = g) : (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = e.name) : c == BattleType.BATTLE_TYPE_WORLDBATTLE_REPLAY ? 1 == o ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = e.name) : (r = !1, l = BattleShipOptData.TYPE_PLAYER, h = e.name) : c == BattleType.BATTLE_TYPE_GLOBAL_GUILD ? 1 == o ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = e.name) : (r = !1, l = BattleShipOptData.TYPE_PLAYER, h = e.name) : c == BattleType.BATTLE_TYPE_POLT ? e.uid == d && (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : c == BattleType.BATTLE_TYPE_GOLDISLAND ? e.uid == d && (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : c == BattleType.BATTLE_TYPE_CHALLENGEARMADA ? e.uid == d ? (r = !0, l = BattleShipOptData.TYPE_PLAYER, h = g) : (r = !1, l = BattleShipOptData.TYPE_NPC, h = e.name) : Log.logError("BattleTeamOptData not Init !!!");
            var _ = BattleShipOptData.processData(e.shiplist, r, e.captionid, l, e.reserveshiplist);
            i = _.list,
                n = _.captain,
                s = _.speed;
            var v = new t(e.uid, h, s, i, n, r);
            return v
        },
        t
}();
egret.registerClass(BattleTeamOptData, "BattleTeamOptData");
var CampBattlePortOptData = function() {
    function t(t, e) {
        this.baseData = t,
            this.serverData = e,
            1 == this.baseData.id || 2 == this.baseData.id || 3 == this.baseData.id ? this.camp = this.baseData.id : this.camp = 0,
            this.hasChangeCamp = !1
    }
    var e = (__define, t),
        a = e.prototype;
    return t.processData = function(e, a) {
            a || (a = 0);
            var i = null;
            if (t.portCnt <= 0) {
                var n = CampbattlemapdataParser.GetInstance().getDatas();
                for (var s in n) i = new t(n[s], null),
                    null != i.baseData && (t.portList[s] = i, t.portCnt++);
                if (e)
                    for (var r = 0,
                            o = e; r < o.length; r++) {
                        var l = o[r];
                        t.portList[l.portid].serverData = l,
                            t.portList[l.portid].camp = a
                    }
            } else if (null != e)
                for (var h = 0,
                        c = e; h < c.length; h++) {
                    var l = c[h];
                    t.portList[l.portid].serverData = l,
                        t.portList[l.portid].camp = a
                }
            return e
        },
        a.checkInBattle = function() {
            for (var e in this.baseData.nearList) {
                var a = this.baseData.nearList[e];
                if (this.camp != t.portList[a].camp && 0 != this.camp && 0 != t.portList[a].camp) return !0
            }
            return !1
        },
        a.checkCanOpt = function() {
            var t = null;
            for (var e in this.baseData.nearList) {
                var a = this.baseData.nearList[e];
                if (Math.floor(a) == CampBattleManager.instance.currentPortId) {
                    t = null != this.serverData && this.camp != UserData.getInstance().getCamp() && 0 != this.camp && null != this.camp ? CampBattleManager.OPT_ATK : CampBattleManager.OPT_MOV;
                    break
                }
            }
            return t
        },
        t.getPortList = function() {
            return t.portList
        },
        t.resetPortList = function() {
            for (var e in t.portList) {
                var a = t.portList[e];
                a.serverData = null,
                    a.preCamp = a.camp;
                var i = Number(e);
                1 == i || 2 == i || 3 == i || (a.camp = 0)
            }
        },
        t.clearData = function() {
            t.portList = {},
                t.portCnt = 0
        },
        t.portList = {},
        t.portCnt = 0,
        t
}();
egret.registerClass(CampBattlePortOptData, "CampBattlePortOptData");
var CampShopOptData = function() {
    function t() {
        this.isInit = !1
    }
    var e = (__define, t),
        a = e.prototype;
    return a.init = function(t) {
            this.OnceItemList = t.oncebuyid,
                this.DayItemList = t.todaybuylist,
                this.WeekItemList = t.weekbuylist,
                this.isInit = !0,
                EventManager.instance.dispatchEvent(EventTypes.CAMP_SHOP_UPDATE)
        },
        a.OnceItemById = function(t) {
            for (var e in this.OnceItemList) {
                var a = this.OnceItemList[e];
                if (a == t) return a
            }
            return null
        },
        a.DayItemById = function(t) {
            for (var e in this.DayItemList) {
                var a = this.DayItemList[e];
                if (a.id == t) return a
            }
        },
        a.WeekItemById = function(t) {
            for (var e in this.WeekItemList) {
                var a = this.WeekItemList[e];
                if (a.id == t) return a
            }
        },
        t.instance = new t,
        t
}();
egret.registerClass(CampShopOptData, "CampShopOptData");
var DropOptData = function() {
    function t(t) {
        this.baseData = GlobalFunction.getDropDataByTypeAndId(t.type, t.id, t.count),
            this.serverData = t,
            Log.logZDY(t)
    }
    var e = (__define, t);
    e.prototype;
    return t.processData = function(e) {
            var a = [],
                i = null;
            if (e)
                for (var n = 0,
                        s = e.length; s > n; ++n) i = new t(e[n]),
                    i.baseData && a.push(i);
            return a
        },
        t
}();
egret.registerClass(DropOptData, "DropOptData");
var MainStageOptData = function() {
    function t(t, e, a) {
        this.baseData = t,
            this.serverData = e,
            this.isLock = a,
            this.baseData || Log.logWarning("##########Error:Stage is not found, id:", e.stageID)
    }
    var e = (__define, t);
    e.prototype;
    return t.processData = function(e, a) {
            t.stages = [];
            for (var i = void 0,
                    n = StageDataLib.instance.getStageListByCampaign(e), s = void 0, r = 0; r < n.length; ++r) {
                for (var o = 0; o < a.length; ++o) a[o].stageID == n[r].id && (s = a[o]);
                if (i = new t(n[r], s, !1), i.baseData && t.stages.push(i), !s) return t.stages;
                s = void 0
            }
            return t.stages
        },
        t.processSpecialData = function(e, a) {
            t.stages = {};
            for (var i = void 0,
                    n = 0,
                    s = void 0,
                    r = 0; r < a.length; ++r) i = StagespecialdataParser.GetInstance().getItemById(a[r].stageID),
                s = new t(i, a[r], !1),
                s.baseData ? (n = StageSpecialDataLib.instance.getCampaignIdBySpecialId(a[r].stageID), t.stages[n] = s) : Log.logError("StageSepcialData is undefined, id:", a[r].stageID);
            if (a.length > 0) {
                var o = StageSpecialDataLib.instance.getCampaignIdBySpecialId(a[a.length - 1].stageID) + 1,
                    l = o + 1e5;
                e >= o && (n = o, i = StagespecialdataParser.GetInstance().getItemById(l), i ? t.stages[StageSpecialDataLib.instance.getCampaignIdBySpecialId(i.id)] = new t(i, null, !1) : Log.logError("StageSepcialData is undefined, id:", l))
            } else if (e > 0) {
                n = 1;
                var h = StageSpecialDataLib.instance.getFirstData(),
                    c = StageSpecialDataLib.instance.getCampaignIdBySpecialId(h.id);
                t.stages[c] = new t(StageSpecialDataLib.instance.getFirstData(), null, !1)
            }
            return {
                stages: t.stages,
                nextCampaign: n
            }
        },
        t.getSpecialCount = function(e) {
            return t.stages[e] && t.stages[e].serverData ? t.stages[e].serverData.todayCount : 0
        },
        t.IsWinStage = function(t) {
            var e = !1;
            return MainWorldManager.instance.getLastStagaID() && parseInt(t) <= MainWorldManager.instance.getLastStagaID() && (e = !0),
                e
        },
        t.IsWinSpeStage = function(e) {
            var a = !1;
            for (var i in t.stages) {
                var n = t.stages[i];
                if (n.serverData && n.baseData.id == e) {
                    a = !0;
                    break
                }
            }
            var s = StagedataParser.GetInstance().getItemById(MainWorldManager.instance.getLastStagaID() + 1),
                r = 0,
                o = MainWorldManager.instance.getLastStagaID().toString().substring(2, 4);
            r = s ? parseInt(o) - 1 : parseInt(o);
            var l = parseInt(e) - 1e5;
            return l > r && (a = 1),
                a
        },
        t.SpeNextIsOpen = function(e) {
            var a = !1;
            for (var i in t.stages) {
                var n = t.stages[i];
                if (n.baseData.id == e) {
                    a = !0;
                    break
                }
            }
            return a
        },
        t
}();
egret.registerClass(MainStageOptData, "MainStageOptData");
var ScienceData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.updateLevelsList = function(e) {
            t.levelsList = e.levels
        },
        t.levelsList = [],
        t
}();
egret.registerClass(ScienceData, "ScienceData");
var ShipData = function() {
    function t() {
        this.id = 0,
            this.type = 0,
            this.name = "",
            this.maxhp = 0,
            this.attack = 0,
            this.attackType = 0,
            this.firedefence = 0,
            this.explosiondefence = 0,
            this.speed = 0,
            this.level = 0,
            this.quality = 0,
            this.reformLevel = 0,
            this._partList = [],
            this._trainData = [0, 0, 0, 0],
            this._skills = [],
            this.isLock = !1
    }
    var e = (__define, t),
        a = e.prototype;
    return a.setData = function(t) {
            this.id = t.id,
                this.type = t.shipid,
                this.skillid = t.skillid,
                this.activeskillid = t.activeskillid,
                this.circleskillid = t.circleskillid,
                this.name = t.name,
                this.maxhp = t.maxhp,
                this.attack = t.attack,
                this.firedefence = t.firedefence,
                this.explosiondefence = t.explosiondefence,
                this.speed = t.speed,
                this.hit = t.hit,
                this.evade = t.evade,
                this.cri = t.cri,
                this.decri = t.decri,
                this.critdmg = t.critdmg,
                this.setParts(t.partslist),
                this.setTrain(t.traindata),
                this.setSkills(t.skilldata),
                this.level = t.level,
                this.isLock = t.islock
        },
        a.setParts = function(t) {},
        a.setSkills = function(t) {},
        a.setTrain = function(t) {},
        t
}();
egret.registerClass(ShipData, "ShipData");
var Skill = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(Skill, "Skill");
var StageData = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.init = function(e) {
            t.stageList = e.stage || [],
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.HEGEMONY_NET))
        },
        t.getTotalCount = function() {
            for (var e = 12,
                    a = 0; 2 > a; ++a)
                for (var i = 0; 3 > i; ++i) {
                    var n = 3 * a,
                        s = 2e5 + 3 * (n + i) + 1,
                        r = StagespecialdataParser.GetInstance().getItemById(s);
                    UserData.getInstance()._level < r.reqStage && (e -= 2)
                }
            if (t.stageList)
                for (var o = 0; o < t.stageList.length; o++) e -= t.stageList[o].todayCount;
            else e = 0;
            return e
        },
        t.getItemCount = function(e, a) {
            var i = 2;
            if (t.stageList) {
                var n = StagespecialdataParser.GetInstance().getItemById(e);
                if (UserData.getInstance()._level < n.reqStage) i = 0;
                else
                    for (var s = 0; s < t.stageList.length; s++) {
                        var r = t.stageList[s];
                        a == r.stageID && (i -= r.todayCount)
                    }
            } else i = 0;
            return i
        },
        t
}();
egret.registerClass(StageData, "StageData");
var Talent = function() {
    function t() {
        this.addValues1 = [],
            this.addValues2 = [],
            this.level = -1
    }
    var e = (__define, t),
        a = e.prototype;
    return a.setData = function(t) {
            if (null == t) return null;
            if (this.id = Number(t.id), this.name_l = t.name_l, this.levelLimit = Number(t.levelLimit), this.preTalent = Number(t.preTalent), this.activateType = Number(t.activateType), this.activateLevel = Number(t.activateLevel), this.levelUpType = Number(t.levelUpType), this.levelUpLimit = t.levelUpLimit, this.needTalentPoint = t.needTalentPoint, this.needgold = t.needgold, this.addBuff1 = Number(t.addBuff1), null != t.addValues1 && "" != t.addValues1) {
                var e = t.addValues1.split("|");
                for (var a in e) null != e[a] && "" != e[a] && this.addValues1.push(Number(e[a]))
            }
            if (this.addBuff2 = Number(t.addBuff2), null != t.addValues2 && "" != t.addValues2) {
                var i = t.addValues2.split("|");
                for (var n in i) null != i[n] && "" != i[n] && this.addValues2.push(Number(i[n]))
            }
            return this.getType = Number(t.getType),
                this.getValue = Number(t.getValue),
                this.remarks = t.remarks,
                this
        },
        t
}();
egret.registerClass(Talent, "Talent");
var TalentTool = function() {
    function t() {
        var t = this;
        this.data = [];
        ConfigData.getAllData("Talent",
            function(e) {
                t.init(e)
            })
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.init = function(t) {
            for (var e in t) t[e] == t.length ? console.log("Talent length:" + t[e]) : this.data.push((new Talent).setData(t[e]))
        },
        a.getTotalData = function() {
            var t = new TalentTotalData;
            for (var e in this.data) {
                var a = 0,
                    i = this.data[e];
                for (var n in i.addValues1) {
                    if (Number(n) + 1 > i.level) break;
                    a += i.addValues1[n]
                }
                switch (i.addBuff1) {
                    case 1:
                        t.huogong = a;
                        break;
                    case 5:
                        t.huofang = a;
                        break;
                    case 9:
                        t.shengming = a;
                        break;
                    case 11:
                        t.sudu = a;
                        break;
                    case 19:
                        t.jianren = a;
                        break;
                    case 17:
                        t.baoji = a;
                        break;
                    case 99:
                        t.exp = a,
                            t.expPercent = a / 1e4;
                        break;
                    case 97:
                        t.gold = a,
                            t.goldPercent = a / 1e4;
                        break;
                    case 98:
                        t.add = a,
                            t.addPercent = a / 1e4
                }
                a = 0;
                for (var s in i.addValues2) {
                    if (Number(s) + 1 > i.level) break;
                    a += i.addValues2[s]
                }
                switch (i.addBuff2) {
                    case 3:
                        t.baogong = a;
                        break;
                    case 7:
                        t.baofang = a
                }
            }
            return t.baoji = t.baoji / 10 + "%",
                t.jianren = t.jianren / 10 + "%",
                t.exp = t.exp / 100 + "%",
                t.gold = t.gold / 100 + "%",
                t.add = t.add / 100 + "%",
                t
        },
        t
}();
egret.registerClass(TalentTool, "TalentTool");
var TalentTotalData = function() {
    function t() {
        this.baoji = 0,
            this.jianren = 0,
            this.exp = 0,
            this.gold = 0,
            this.add = 0,
            this.huogong = 0,
            this.baogong = 0,
            this.huofang = 0,
            this.baofang = 0,
            this.shengming = 0,
            this.sudu = 0,
            this.expPercent = 0,
            this.goldPercent = 0,
            this.addPercent = 0
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(TalentTotalData, "TalentTotalData");
var TypeDefine = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.getResIcon = function(e) {
            var a = "";
            switch (e) {
                case t.RES.Oil:
                    a = "resource/assets/Panel/GUI_Homepage_Icon_30.png"
                        /*tpa=resource/assets/Panel/GUI_Homepage_Icon_30.png*/
                    ;
                    break;
                case t.RES.Gold:
                    a = "resource/assets/Panel/GUI_Homepage_Icon_31.png"
                        /*tpa=resource/assets/Panel/GUI_Homepage_Icon_31.png*/
                    ;
                    break;
                case t.RES.Diamond:
                    a = "resource/assets/Panel/GUI_Homepage_Icon_32.png"
                        /*tpa=resource/assets/Panel/GUI_Homepage_Icon_32.png*/
                    ;
                    break;
                case t.RES.PaperExchangeHigh:
                    a = "resource/assets/Panel/GUI_Shipbuilding_gaojiwannengtuzhi.png"
                        /*tpa=resource/assets/Panel/GUI_Shipbuilding_gaojiwannengtuzhi.png*/
                    ;
                    break;
                case t.RES.PaperExchangeLow:
                    a = "resource/assets/Panel/GUI_Shipbuilding_dijiwannengtuzhi.png"
                        /*tpa=resource/assets/Panel/GUI_Shipbuilding_dijiwannengtuzhi.png*/
                    ;
                    break;
                case t.RES.XunBaoLing:
                    a = "resource/assets/Panel/juesexinxi_xunbaoling.png"
                        /*tpa=resource/assets/Panel/juesexinxi_xunbaoling.png*/
            }
            return a
        },
        t.RES = {
            Oil: 1,
            Gold: 2,
            Diamond: 3,
            PaperExchangeHigh: 4,
            PaperExchangeLow: 5,
            XunBaoLing: 6
        },
        t.Const = {
            DROP_TYPE_null: 0,
            DROP_TYPE_ITEM: 1,
            DROP_TYPE_PARTS: 2,
            DROP_TYPE_GOLD: 3,
            DROP_TYPE_CASH: 4,
            DROP_TYPE_SCIENCE: 5,
            DROP_TYPE_PAPER: 6,
            DROP_TYPE_PAPERPIECE: 7,
            DROP_TYPE_VIRTUAL: 8,
            DROP_TYPE_OIL: 9,
            DROP_TYPE_PARTSPIECE: 10,
            DROP_TYPE_XUNZHANG: 11,
            DROP_TYPE_SHENGWANG: 12,
            DROP_TYPE_ACTIVITY: 13,
            DROP_TYPE_HONOR: 14,
            DROP_TYPE_GUARD_BIWU: 20,
            DROP_TYPE_CAPTAIN: 16,
            DROP_TYPE_CAPTAINPIECE: 17,
            DROP_TYPE_MEDALPIECE: 21,
            DROP_TYPE_GONGXUN: 22,
            DROP_TYPE_JINGGONG: 23,
            DROP_TYPE_JINGGONG_SUIPIAN: 24,
            DROP_TYPE_JINGGONG_MONEY: 25,
            DROP_TYPE_JINGGONG_POINT: 26,
            DROP_TYPE_GERENGONGXIAN: 27
        },
        t
}();
egret.registerClass(TypeDefine, "TypeDefine");
var UserData = function(t) {
    function e() {
        t.call(this),
            this.activeTipList = [],
            this._level = 1,
            this._uid = "",
            this._userName = "",
            this._res = {},
            this._vip = 0,
            this._rank = 0,
            this._fightPower = 0,
            this.prestige = 0,
            this.findJewelMaxNum = 20,
            this.lastelecrecoverytime = 0,
            this._experience = 0,
            this._camp = 1,
            this._militaryranktype = 0,
            this._techpoints = 0,
            this._honour = 0,
            this._lastRecoverTimeOil = 0,
            this._buyOilCount = 0,
            this._exploit = 0,
            this._militaryrankhon = 0,
            this._guidestep = 0,
            this._exp = 0,
            this._serverTime = 0,
            this._oldServerTime = 0,
            this._costcashcount = 0,
            this._centergoldcount = 0,
            this._centergoldupdate = !1,
            this._lastcenterrecoverytime = 0,
            this._head = 0,
            this._power = 0,
            this._serverStartTime = 0,
            this._unreadMail = 0,
            this._firstInit = !0,
            this.sweepcount = 0,
            this.versionSwitch = !1,
            this.regtime = 0,
            this.regdaycount = 0,
            this.serverstartday = 0,
            this.lvUpgradeFlag = !1,
            this.serverTimeOffset = 0,
            this.isShowMuBiaoIcon = !1,
            this.monthcardid = 0,
            this.monthcarddate = 0,
            this.monthcardreceived = !1,
            this.focus_award = !1,
            this.isKeJiJump = !1
    }
    __extends(e, t);
    var a = __define,
        i = e,
        n = i.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        n.getLeftSweepTimes = function() {
            var t = VipParser.GetInstance().getItemById(e.getInstance().getVipLevel());
            return -1 == t.saodangcishu ? 1e8 : t.saodangcishu - e.getInstance().sweepcount
        },
        n.sendDetailMessage = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceUserData);
            Transport.instance.send(t)
        },
        n.checkUpgrade = function() {
            this.lvUpgradeFlag && (this.lvUpgradeFlag = !1, WindowManager.getInstance().show(WindowManager.windowType.Upgrade, {
                isLevelUp: !0,
                to: this._level
            }))
        },
        n.setData = function(t) {
            this._uid = GameData.uid,
                t.level && !this._firstInit && this._level < t.level && (SceneManager.instance.curSceneType == SceneType.BATTLE ? this.lvUpgradeFlag = !0 : WindowManager.getInstance().show(WindowManager.windowType.Upgrade, {
                    isLevelUp: !0,
                    to: t.level
                })),
                this._firstInit = !1,
                this._level = t.level || 1,
                HomeUI.instance && (this._level >= 40 ? HomeUI.instance.setTanSuoXunZhangState(!0) : HomeUI.instance.setTanSuoXunZhangState(!1), this._level >= 50 ? HomeUI.instance.setZhaoMuJiangZhangState(!0) : HomeUI.instance.setZhaoMuJiangZhangState(!1)),
                this._userName = t.name,
                this._res[TypeDefine.RES.Oil] = t.oil,
                this._res[TypeDefine.RES.Gold] = t.gold,
                this._res[TypeDefine.RES.Diamond] = t.cash,
                this._res[TypeDefine.RES.XunBaoLing] = t.electric,
                this._res[TypeDefine.RES.PaperExchangeLow] = t.juniorpaper,
                this._res[TypeDefine.RES.PaperExchangeHigh] = t.seniorpaper,
                this._vip = t.viplevel,
                0 != this._fightPower && this._fightPower != t.power && new ZhanDouLiMarquee({
                    point: t.power,
                    change: t.power - this._fightPower
                }),
                this._fightPower = t.power,
                this._centergoldcount = t.centergoldcount,
                this._lastcenterrecoverytime = t.lastcenterrecoverytime,
                this._costcashcount = t.costcashcount,
                this._experience = t.exp,
                this._camp = t.camp,
                this._head = t.head,
                this._militaryranktype = t.militaryranktype,
                t.militaryranktype && !this._firstInit && this._militaryranktype < t.militaryranktype && WindowManager.getInstance().show(WindowManager.windowType.Upgrade, {
                    isLevelUp: !1,
                    to: t.militaryranktype
                }),
                this._militaryrankhon = t.militaryrankhon,
                this._techpoints = t.techpoints,
                this._honour = t.honour,
                this._lastRecoverTimeOil = t.lastoilrecoverytime,
                this._buyOilCount = t.buyoilcount,
                this._power = t.power,
                this.lastelecrecoverytime = t.lastelecrecoverytime,
                this.prestige = t.prestige,
                this._centergoldupdate = t.centergoldupdate,
                this._guidestep = t.guidestep,
                this._serverStartTime = t.serverstarttime,
                this._firstrechargelist = t.firstrechargelist,
                this._totalbuy = t.totalbuy,
                this.sweepcount = t.sweepcount,
                this.regtime = t.regtime,
                this.regdaycount = t.regdaycount,
                this._unreadMail = t.unreadMail,
                this._exploit = t.exploit,
                this.guide_array = t.guide_array,
                this.monthcardid = t.monthcardid,
                this.monthcarddate = t.monthcarddate,
                this.monthcardreceived = t.monthcardreceived,
                this.focus_award = t.focus_award,
                HomeUI.instance && (HomeUI.instance.mailRedPoint(), HomeUI.instance.updateLevelControl(), HomeUI.instance.SetSubscribe()),
                this.dispatchEvent(new egret.Event(GameEvent.UserData_Update)),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.UserData_Update)),
                0 == this._camp ? WindowManager.getInstance().show(WindowManager.windowType.ChooseCamp, 0) : (GuideManager.initStep(), AudioManager.instance.init()),
                MilitaryManager.GetInstance().MilitaryTips()
        },
        n.getUserName = function() {
            return this._userName
        },
        n.setUserName = function(t) {
            this._userName = t
        },
        n.getFightPower = function() {
            return this._fightPower
        },
        n.getGuidestep = function() {
            return this._guidestep
        },
        n.getServerstartday = function() {
            var t = this._serverTime - 1e3 * this._serverStartTime;
            return Math.floor(t / 1e3 / 24 / 3600)
        },
        n.getVipLevel = function() {
            return this._vip
        },
        n.getPlayerLevel = function() {
            return this._level
        },
        n.getExperience = function() {
            return this._experience
        },
        n.getCamp = function() {
            return this._camp
        },
        n.setCamp = function(t) {
            this._camp = t
        },
        n.getMilitaryranktype = function() {
            return this._militaryranktype
        },
        n.getMilitaryrankhon = function() {
            return this._militaryrankhon
        },
        n.getTechpoints = function() {
            return this._techpoints
        },
        n.getHonour = function() {
            return this._honour
        },
        n.getRes = function(t) {
            return this._res[t]
        },
        n.getHead = function() {
            return this._head
        },
        n.setHead = function(t) {
            this._head = t
        },
        n.getNextLevelNeedExp = function() {
            var t = 0,
                e = ExpParser.GetInstance().getItemById(this._level + 1);
            return e && (t = e.exp),
                t
        },
        n.getExpPercent = function() {
            var t = 0;
            return t = this._experience / this.getNextLevelNeedExp() * 100
        },
        n.getCurPosNum = function() {
            return ExpParser.GetInstance().getItemById(this._level).poslevel
        },
        n.getMaxOil = function() {
            var t = VipParser.GetInstance().getItemById(this._vip).addOilLimit;
            return 120 + t
        },
        n.getMaxShipLevel = function() {
            return ExpParser.GetInstance().getItemById(this._level).shipFactorylvlLimit
        },
        n.setServerTime = function(t) {
            this._oldServerTime = t,
                this._serverTime = t;
            var e = Math.floor(Date.now() / 1e3);
            this.serverTimeOffset = Math.floor(t / 1e3) - e
        },
        n.getServerTime = function() {
            return this._serverTime
        },
        n.addServerTime = function() {
            this._serverTime += 1e3,
                this._oldServerTime += 1e3
        },
        n.getCenterRecovery = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceCenterRecovery);
            Transport.instance.send(t)
        },
        n.autosupply = function() {
            var t = !1;
            if (this._oldServerTime / 1e3 - this._lastcenterrecoverytime > 7200 && 6 != this._lastcenterrecoverytime && (this.getCenterRecovery(), t = !0), t = !1) {
                var e = new Date(this._serverTime),
                    a = e.getHours();
                a >= 22 && 0 == this._centergoldupdate && this.getCenterRecovery()
            }
        },
        n.getOldServerTime = function() {
            return this._oldServerTime
        },
        n.getServerStartTime = function() {
            return this._serverStartTime
        },
        n.setServerStartTime = function(t) {
            this._serverStartTime = t
        },
        n.setCostcashcount = function(t) {
            this._costcashcount = t
        },
        n.getCostcashcount = function() {
            return this._costcashcount
        },
        n.setCentergoldupdate = function(t) {
            this._centergoldupdate = t
        },
        n.getCentergoldupdate = function() {
            return this._centergoldupdate
        },
        n.setCentergoldcount = function(t) {
            this._centergoldcount = t
        },
        n.getCentergoldcount = function() {
            return this._centergoldcount
        },
        n.setLastcenterrecoverytime = function(t) {
            this._lastcenterrecoverytime = t
        },
        n.getLastcenterrecoverytime = function() {
            return this._lastcenterrecoverytime
        },
        n.getBuyOilCount = function() {
            return this._buyOilCount
        },
        n.getPower = function() {
            return this._power
        },
        n.getUnreadMail = function() {
            return this._unreadMail
        },
        n.getJuniorpaper = function() {
            return this._res[TypeDefine.RES.PaperExchangeLow] ? this._res[TypeDefine.RES.PaperExchangeLow] : 0
        },
        n.getSeniorpaper = function() {
            return this._res[TypeDefine.RES.PaperExchangeHigh] ? this._res[TypeDefine.RES.PaperExchangeHigh] : 0
        },
        n.getExploit = function() {
            return this._exploit
        },
        n.getLastRecoverTimeOil = function() {
            return this._lastRecoverTimeOil
        },
        n.getLastelecrecoverytime = function() {
            return this.lastelecrecoverytime
        },
        n.getMaxXunBaoLing = function() {
            return this.findJewelMaxNum
        },
        a(n, "uid",
            function() {
                return this._uid
            },
            function(t) {
                this._uid = t
            }),
        a(n, "username",
            function() {
                return this._userName
            },
            function(t) {
                this._userName = t
            }),
        a(n, "firstrechargelist",
            function() {
                return this._firstrechargelist
            }),
        a(n, "totalbuy",
            function() {
                return this._totalbuy
            }),
        a(n, "activeTips",
            function() {
                return this._activeTips
            },
            function(t) {
                this._activeTips = t,
                    this.updateActiveTip()
            }),
        n.registerActiveTip = function(t, e) {
            this.activeTipList.push([t, e])
        },
        n.updateActiveTip = function() {
            if (this._activeTips)
                for (var t = 0; t < this.activeTipList.length; t++) {
                    var e = this.activeTipList[t];
                    e[0].visible = this._activeTips[e[1]] || !1,
                        "recharge" == e[1] && (e[0].visible = RechargeManager.instance.isShowSpot)
                }
        },
        e
}(egret.EventDispatcher);
egret.registerClass(UserData, "UserData");
var Vip = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.setData = function(t) {
            return null == t ? null : (this.level = Number(t.level), this.costCash = Number(t.costCash), this.dayBuyOilCnt = Number(t.dayBuyOilCnt), this.dayCenterAddCnt = Number(t.dayCenterAddCnt), this.dayCenterAddPer = Number(t.dayCenterAddPer), this.daySpecialCnt = Number(t.daySpecialCnt), this.jjcgoumaicishu = Number(t.jjcgoumaicishu), this.autoShipUp = Number(t.autoShipUp), this.autoPartUp = Number(t.autoPartUp), this.autoChestOpen = Number(t.autoChestOpen), this.desc_l = t.desc_l, this.saodangcishu = Number(t.saodangcishu), this.autoTrainTen = Number(t.autoTrainTen), this.autoFiftyOpen = Number(t.autoFiftyOpen), this.buyRefresh = Number(t.buyRefresh), this.buyChance = Number(t.buyChance), this.autoExplore = Number(t.autoExplore), this.itemUseTen = Number(t.itemUseTen), this.freeRefresh = Number(t.freeRefresh), this.militaryHonourAdd = Number(t.militaryHonourAdd), this.freeChatTimes = Number(t.freeChatTimes), this.fiftyExplore = Number(t.fiftyExplore), this.fiftySeniorExplore = Number(t.fiftySeniorExplore), this.lostMorale = Number(t.lostMorale), this.robTen = Number(t.robTen), this.spyFirstDiscount = Number(t.spyFirstDiscount), this.lostMoralless = Number(t.lostMoralless), this.addMoralLimit = Number(t.addMoralLimit), this.addArenaTimes = Number(t.addArenaTimes), this.recruitFirstDiscount = Number(t.recruitFirstDiscount), this.addOilLimit = Number(t.addOilLimit), this.eliteRaids = Number(t.eliteRaids), this.seikoFreeRefresh = Number(t.seikoFreeRefresh), this.oilguardskip = Number(t.oilguardskip), this)
        },
        t
}();
egret.registerClass(Vip, "Vip");
var VipTool = function() {
    function t() {
        var t = this;
        this.data = [];
        ConfigData.getAllData("vip",
            function(e) {
                t.init(e)
            })
    }
    var e = (__define, t),
        a = e.prototype;
    return t.getInstance = function() {
            return this._instance || (this._instance = new t),
                this._instance
        },
        a.init = function(t) {
            for (var e in t) t[e] == t.length ? console.log("Vip length:" + t[e]) : this.data.push((new Vip).setData(t[e]))
        },
        a.getDataByLevel = function(t) {
            return this.data[t]
        },
        t
}();
egret.registerClass(VipTool, "VipTool");
var CommunicateManager = function(t) {
    function e() {
        t.call(this),
            this.init()
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            Transport.registerHandler(ProtocolMgr.ID_DseActiveTips, this.dseActiveTipsHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseAuthState, this.dseAuthStateListHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseSetRole, this.getSetRoleResult),
                Transport.registerHandler(ProtocolMgr.ID_DseShipList, this.loadShipList),
                Transport.registerHandler(ProtocolMgr.ID_DseCaptainList, this.loadCaptainList),
                Transport.registerHandler(ProtocolMgr.ID_DseSoldierList, this.loadSoldierList),
                Transport.registerHandler(ProtocolMgr.ID_DsePartsList, this.loadPartList),
                Transport.registerHandler(ProtocolMgr.ID_DseGetWeakCamp, this.getWeakCamp),
                Transport.registerHandler(ProtocolMgr.ID_DseChangeRole, this.changeRole),
                Transport.registerHandler(ProtocolMgr.ID_DseRenameShip, this.reNameShipHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseGetCenterGold, this.handleDseGetCenterGold),
                Transport.registerHandler(ProtocolMgr.ID_DseRenameRole, this.renameRole),
                Transport.registerHandler(ProtocolMgr.ID_DseBuyOil, this.buyOil),
                Transport.registerHandler(ProtocolMgr.ID_DseUpdateShip, this.updateShip),
                Transport.registerHandler(ProtocolMgr.ID_DseUpdateCaptain, this.updateCaptain),
                Transport.registerHandler(ProtocolMgr.ID_DseUpgradeCaptain, this.upgradeCaptain),
                Transport.registerHandler(ProtocolMgr.ID_DseShipFormationLevelUp, this.shipLevelUp),
                Transport.registerHandler(ProtocolMgr.ID_DseOwnedPaper, this.dseOwnedPaper),
                Transport.registerHandler(ProtocolMgr.ID_DsePaperList, this.dsePaperListHandler),
                Transport.registerHandler(ProtocolMgr.ID_DsePaperPieceList, this.dsePaperPieceListHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseAddOwnedPaper, this.dseAddOwnedPaper),
                Transport.registerHandler(ProtocolMgr.ID_DseAddSoulOwnedPaper, this.dseAddSoulOwnedPaper),
                Transport.registerHandler(ProtocolMgr.ID_DseCaptainPaperAdd, this.dseCaptainPaperAdd),
                Transport.registerHandler(ProtocolMgr.ID_DseMilitaryRankInfo, this.dseMilitaryRankInfo),
                Transport.registerHandler(ProtocolMgr.ID_DseMilitaryRankUpgrad, this.dseMilitaryRankUpgrad),
                Transport.registerHandler(ProtocolMgr.ID_DseMilitaryRankGetDailyReward, this.dseMilitaryRankGetDailyReward),
                Transport.registerHandler(ProtocolMgr.ID_DseUserData, this.userData),
                Transport.registerHandler(ProtocolMgr.ID_DsePropList, this.loadItems),
                Transport.registerHandler(ProtocolMgr.ID_DseUseProp, this.useItemHandler),
                Transport.registerHandler(ProtocolMgr.ID_DsePaperLockOperation, this.lockPaper),
                Transport.registerHandler(ProtocolMgr.ID_DseShipLockOperation, this.lockShip),
                Transport.registerHandler(ProtocolMgr.ID_DsePartsLockOpt, this.lockPart),
                Transport.registerHandler(ProtocolMgr.ID_DsePartPieceList, this.partPieceList),
                Transport.registerHandler(ProtocolMgr.ID_DseRemouldParts, this.partsRemouldHandle),
                Transport.registerHandler(ProtocolMgr.ID_DseUpgradeParts, this.partsUpgradeHandle),
                Transport.registerHandler(ProtocolMgr.ID_DseReductionParts, this.partsReductionHandle),
                Transport.registerHandler(ProtocolMgr.ID_DseReductionPartsInfo, this.partsInfoReductionHandle),
                Transport.registerHandler(ProtocolMgr.ID_DseUpdateParts, this.partsUpdateHandle),
                Transport.registerHandler(ProtocolMgr.ID_DseDecomposeParts, this.partsDecomposeHandle),
                Transport.registerHandler(ProtocolMgr.ID_DseComposeParts, this.composeSoul),
                Transport.registerHandler(ProtocolMgr.ID_DseSoulLockOpt, this.lockSoul),
                Transport.registerHandler(ProtocolMgr.ID_DseSoulEat, this.soulEat),
                Transport.registerHandler(ProtocolMgr.ID_DseMedalPromote, this.soulRemodule),
                Transport.registerHandler(ProtocolMgr.ID_DseSoulDecompose, this.soulDecompose),
                Transport.registerHandler(ProtocolMgr.ID_DseSoulRestore, this.soulRestore),
                Transport.registerHandler(ProtocolMgr.ID_DseSoulPieceList, this.soulPieceList),
                Transport.registerHandler(ProtocolMgr.ID_DseSoul, this.soul),
                Transport.registerHandler(ProtocolMgr.ID_DseSoulList, this.loadSoulList),
                Transport.registerHandler(ProtocolMgr.ID_DseEquipSoul, this.equipSoul),
                Transport.registerHandler(ProtocolMgr.ID_DseUnAutoEquipSoul, this.equipSoul),
                Transport.registerHandler(ProtocolMgr.ID_DseAutoEquipSoul, this.equipSoul),
                Transport.registerHandler(ProtocolMgr.ID_DseComposeSouls, this.composeSoul),
                Transport.registerHandler(ProtocolMgr.ID_DseCaptainLockOpt, this.lockCaptain),
                Transport.registerHandler(ProtocolMgr.ID_DseCaptainPieceList, this.captainPieceList),
                Transport.registerHandler(ProtocolMgr.ID_DseComposeCaptain, this.composeCaptain),
                Transport.registerHandler(ProtocolMgr.ID_DseFireCaptain, this.fireCaptain),
                Transport.registerHandler(ProtocolMgr.ID_DsePromoteCaptain, this.promoteCaptain),
                Transport.registerHandler(ProtocolMgr.ID_DsePaperChargeCount, this.paperChargeCount),
                Transport.registerHandler(ProtocolMgr.ID_DseExchangeCaptainCount, this.captainChargeCount),
                Transport.registerHandler(ProtocolMgr.ID_DseExchangeCaptain, this.captainCharge),
                Transport.registerHandler(ProtocolMgr.ID_DseAutoEquipSoldier, this.autoEquipSoldier),
                Transport.registerHandler(ProtocolMgr.ID_DseCreateShip, this.createShip),
                Transport.registerHandler(ProtocolMgr.ID_DseAddShip, this.addShip),
                Transport.registerHandler(ProtocolMgr.ID_DseSetSoldier, this.setSoldier),
                Transport.registerHandler(ProtocolMgr.ID_DseEquipParts, this.equipParts),
                Transport.registerHandler(ProtocolMgr.ID_DseAllLastID, this.dseAllLastID),
                Transport.registerHandler(ProtocolMgr.ID_DseStageList, this.dseStageList),
                Transport.registerHandler(ProtocolMgr.ID_DseStageData, this.dseStageData),
                Transport.registerHandler(ProtocolMgr.ID_DseResetStageCount, this.dseResetStageCount),
                Transport.registerHandler(ProtocolMgr.ID_DseSetCaption, this.setCaption),
                Transport.registerHandler(ProtocolMgr.ID_DseSetTactic, this.setTactic),
                Transport.registerHandler(ProtocolMgr.ID_DseGetTactic, this.getTactic),
                Transport.registerHandler(ProtocolMgr.ID_DseShipFormationInfo, this.shipFormationInfo),
                Transport.registerHandler(ProtocolMgr.ID_DseChat, this.chatHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseChatMsg, this.chatMsgHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseChatMsgLog, this.chatMsgLogHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseInviteFriend, this.InviteFriend),
                Transport.registerHandler(ProtocolMgr.ID_DseDeleteFriend, this.dellFrind),
                Transport.registerHandler(ProtocolMgr.ID_DseAddFriend, this.addFriend),
                Transport.registerHandler(ProtocolMgr.ID_DseBlackList, this.blackList),
                Transport.registerHandler(ProtocolMgr.ID_DseBlackListOpt, this.blackListOpt),
                Transport.registerHandler(ProtocolMgr.ID_DseFriendList, this.friendList),
                Transport.registerHandler(ProtocolMgr.ID_DseRecommandInviteList, this.recommandList),
                Transport.registerHandler(ProtocolMgr.ID_DseInvitedList, this.inviteList),
                Transport.registerHandler(ProtocolMgr.ID_DseRecElectricList, this.receiveEle),
                Transport.registerHandler(ProtocolMgr.ID_DseSearchPlayer, this.searchPlayer),
                Transport.registerHandler(ProtocolMgr.ID_DseRefuseAddFriend, this.refuseAddFriend),
                Transport.registerHandler(ProtocolMgr.ID_DseSendElectric, this.sendEle),
                Transport.registerHandler(ProtocolMgr.ID_DseDrawElectric, this.drawEle),
                Transport.registerHandler(ProtocolMgr.ID_DseDrawAllElectric, this.drawAllEle),
                Transport.registerHandler(ProtocolMgr.ID_DseGetMailProp, this.getMailProp),
                Transport.registerHandler(ProtocolMgr.ID_DseBattleStart, this.dseBattleStart),
                Transport.registerHandler(ProtocolMgr.ID_DseBattleInfo, this.dseBattleInfo),
                Transport.registerHandler(ProtocolMgr.ID_DseBattleStartBySweep, this.dseBattleStartBySweep),
                Transport.registerHandler(ProtocolMgr.ID_DseScienceList, this.dseScienceList),
                Transport.registerHandler(ProtocolMgr.ID_DseUpgradeScience, this.dseUpgradeScience),
                Transport.registerHandler(ProtocolMgr.ID_DseAutoUpgradeScience, this.dseAutoUpgradeScience),
                Transport.registerHandler(ProtocolMgr.ID_DseSpyData, this.dseSpyData),
                Transport.registerHandler(ProtocolMgr.ID_DseSpy, this.dseSpy),
                Transport.registerHandler(ProtocolMgr.ID_DseBuySpyItem, this.dseBuySpyItem),
                Transport.registerHandler(ProtocolMgr.ID_DseShopData, this.dseShopData),
                Transport.registerHandler(ProtocolMgr.ID_DseBuy, this.dseBuy),
                Transport.registerHandler(ProtocolMgr.ID_DseMailList, this.mailList),
                Transport.registerHandler(ProtocolMgr.ID_DseSendMail, this.sendMail),
                Transport.registerHandler(ProtocolMgr.ID_DseBattleReview, this.BattleReview),
                Transport.registerHandler(ProtocolMgr.ID_DseAddMail, this.addMail),
                Transport.registerHandler(ProtocolMgr.ID_DseArmadaData, this.dseArmadaData),
                Transport.registerHandler(ProtocolMgr.ID_DseRobberyList, this.dseRobberyList),
                Transport.registerHandler(ProtocolMgr.ID_DseEnterGuard, this.dseEnterGuard),
                Transport.registerHandler(ProtocolMgr.ID_DseResetGuard, this.dseResetGuard),
                Transport.registerHandler(ProtocolMgr.ID_DseBuyGuard, this.dseBuyGuard),
                Transport.registerHandler(ProtocolMgr.ID_DseGuardStage, this.dseGuardStage),
                Transport.registerHandler(ProtocolMgr.ID_DseArenaData, this.dseArenaData),
                Transport.registerHandler(ProtocolMgr.ID_DseEnterArena, this.dseEnterArena),
                Transport.registerHandler(ProtocolMgr.ID_DseArenaList, this.dseArenaList),
                Transport.registerHandler(ProtocolMgr.ID_DseScoutSoldier, this.dseScoutSoldier),
                Transport.registerHandler(ProtocolMgr.ID_DseArenaExchange, this.dseArenaExchange),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildBattleData, this.dseGuildBattleData),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildData, this.dseGuildData),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildList, this.dseGuildList),
                Transport.registerHandler(ProtocolMgr.ID_DseCreateGuild, this.dseCreateGuild),
                Transport.registerHandler(ProtocolMgr.ID_DseSearchGuild, this.dseSearchGuild),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildApply, this.dseGuildApply),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildCancelApply, this.dseGuildCancelApply),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildScienceList, this.dseGuildScienceList),
                Transport.registerHandler(ProtocolMgr.ID_DseUpgradeGuildScience, this.dseUpgradeGuildScience),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildApplyList, this.dseGuildApplyList),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildApproval, this.dseGuildApproval),
                Transport.registerHandler(ProtocolMgr.ID_DseSetVerifyOptions, this.dseSetVerifyOptions),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildSetDeputy, this.dseGuildSetDeputy),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildFireDeputy, this.dseGuildFireDeputy),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildMemberList, this.dseGuildMemberList),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildDemise, this.dseGuildDemise),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildExpel, this.dseGuildExpel),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildQuit, this.dseGuildQuit),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildDonate, this.dseGuildDonate),
                Transport.registerHandler(ProtocolMgr.ID_DseModifyNotify, this.dseModifyNotify),
                Transport.registerHandler(ProtocolMgr.ID_DseModifyDeclaration, this.dseModifyDeclaration),
                Transport.registerHandler(ProtocolMgr.ID_DseRenameGuild, this.dseRenameGuild),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildSetMedal, this.dseGuildSetMedal),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildDismiss, this.dseGuildDismiss),
                Transport.registerHandler(ProtocolMgr.ID_DseGuildUpgrade, this.dseGuildUpgrade),
                Transport.registerHandler(ProtocolMgr.ID_DseRankList, this.ranklist),
                Transport.registerHandler(ProtocolMgr.ID_DseTaskRewardData, this.taskHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseGetTaskReward, this.taskGetHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseMedalData, this.medalMsg),
                Transport.registerHandler(ProtocolMgr.ID_DseGetMedal, this.getMedal),
                Transport.registerHandler(ProtocolMgr.ID_DseEnterCampBattle, this.dseEnterCampBattle),
                Transport.registerHandler(ProtocolMgr.ID_DseCampBattleData, this.dseCampBattleData),
                Transport.registerHandler(ProtocolMgr.ID_DseCampBattleMsg, this.dseCampBattleMsg),
                Transport.registerHandler(ProtocolMgr.ID_DseCampBattleMove, this.dseCampBattleMove),
                Transport.registerHandler(ProtocolMgr.ID_DseCampBattleResult, this.dseCampBattleResult),
                Transport.registerHandler(ProtocolMgr.ID_DseCampBattleBuy, this.dseCampBattleBuy),
                Transport.registerHandler(ProtocolMgr.ID_DseCampBattleSetTrustee, this.dseCampBattleSetTrustee),
                Transport.registerHandler(ProtocolMgr.ID_DseBroadcast, this.dseBroadCast),
                Transport.registerHandler(ProtocolMgr.ID_DseRetireShip, this.dseRetireShip),
                Transport.registerHandler(ProtocolMgr.ID_DseSalePaper, this.dseSalePaper),
                Transport.registerHandler(ProtocolMgr.ID_DseOnLineTime, this.onlineTime),
                Transport.registerHandler(ProtocolMgr.ID_DseAwardCenter, this.awardCenter),
                Transport.registerHandler(ProtocolMgr.ID_DseGetAward, this.getAward),
                Transport.registerHandler(ProtocolMgr.ID_DseCaptainData, this.dseCaptainData),
                Transport.registerHandler(ProtocolMgr.ID_DseBuyRecruitItem, this.dseBuyRecruitItem),
                Transport.registerHandler(ProtocolMgr.ID_DseRecruitCaptain, this.dseRecruitCaptain),
                Transport.registerHandler(ProtocolMgr.ID_DseChargePaper, this.dseChargePaper),
                Transport.registerHandler(ProtocolMgr.ID_DseTrain, this.trainHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseUpgradeShip, this.shipUpgradeHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseUpgradeSkill, this.shipSkillHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseActivityWebData, this.dseActivityWebData),
                Transport.registerHandler(ProtocolMgr.ID_DseActivityData, this.dseActivityData),
                Transport.registerHandler(ProtocolMgr.ID_DseActivity, this.dseActivity),
                Transport.registerHandler(ProtocolMgr.ID_DseRemouldShip, this.dseRemouldShip),
                Transport.registerHandler(ProtocolMgr.ID_DseHeartbeat, this.DseHeartbeat),
                Transport.registerHandler(ProtocolMgr.ID_DseFocusAward, this.OnFocusAward),
                Transport.registerHandler(ProtocolMgr.ID_DseRechargeInfo, this.payBackHandler),
                Transport.registerHandler(ProtocolMgr.ID_DseExchangeCode, this.OnExchangeCode)
        },
        i.OnExchangeCode = function(t) {
            switch (t.res) {
                case 0:
                    Toast.launch("兑换成功");
                    break;
                case 1:
                    Toast.launch("您已兑换过");
                    break;
                case 2:
                    Toast.launch("不存在该兑换码")
            }
        },
        i.payBackHandler = function(t) {
            var e = PlatformManager.instance.payInfo;
            null != e && (Plantform.getInstanceOf().pay(e.price, e.count, e.itemName, t.cash), Toast.launch("支付成功"))
        },
        i.DseHeartbeat = function(t) {
            RechargeManager.instance.HandleHeartBeat(t.time)
        },
        i.OnFocusAward = function(t) {
            UserData.getInstance().focus_award = !0,
                HomeUI.instance.SetSubscribe()
        },
        i.dseAuthStateListHandler = function(t) {
            if (t.pass) {
                if (Main.instance.startCreateScene(), !e._firstAuth) return void(Main.instance.loadingPanel && (GameLayer.getInstance().showAll(), Main.instance.clearLoadingPanel()));
                Main.instance.loadingPanel.showLoading(),
                    Main.instance.loadingPanel.setLoadLabel("数据通信中，正在加载母港"),
                    Main.instance.loadingPanel.setProgress(0, 100),
                    Main.instance.loadingPanel.clearPercentMap(),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseUserData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseShipList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseCaptainList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DsePaperList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DsePaperPieceList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseSoldierList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DsePartsList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseSoulList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseTaskRewardData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseGuildData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseGuildScienceList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseCaptainData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseShipFormationInfo),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseCaptainPieceList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DseMailList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceUserData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceShipList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceCaptainList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DcePaperList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DcePaperPieceList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceSoldierList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DcePartsList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceSoulList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceTaskRewardData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceGuildData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceGuildScienceList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceCaptainData),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceShipFormationInfo),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceCaptainPieceList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceMailList),
                    Main.instance.loadingPanel.registerPercentMap(10, ProtocolMgr.ID_DceActivityWebData),
                    e._firstAuth = !1
            } else Toast.launch("登录失败!", 16711680);
            UserData.getInstance().setServerTime(1e3 * t.time);
            var t = Transport.getPkg(ProtocolMgr.ID_DceUserData);
            Transport.instance.send(t)
        },
        i.dseActiveTipsHandler = function(t) {
            UserData.getInstance().activeTips = t,
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ACTIVETIPS)),
                EventManager.instance.dispatchEvent(EventTypes.RED_BALL_UPDATE),
                EventManager.instance.dispatchEvent(EventTypes.HOMEUI_REDBALL_STATE_CHANGE),
                HomeUI.instance && HomeUI.instance.updataRedPoint(t)
        },
        i.getSetRoleResult = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ChooseCamp);
            e && WindowManager.getInstance().getWindow(WindowManager.windowType.ChooseCamp).getSetRoleResult(t)
        },
        i.reNameShipHandler = function(t) {
            0 == t.res ? (Utils.getListByKeyValue("id", t.shipid, ShipManager.getInstance().shipList)[0].name = t.name, WindowManager.getInstance().hide(WindowManager.windowType.NameChange), Toast.launch("更名成功")) : Toast.launch("更名失败")
        },
        i.getWeakCamp = function(t) {
            WindowManager.getInstance().getWindow(WindowManager.windowType.ChooseCamp).getWeakCamp(t)
        },
        i.changeRole = function(t) {
            WindowManager.getInstance().getWindow(WindowManager.windowType.ChooseCamp).getChangeRoleHeadResult(t)
        },
        i.handleDseGetCenterGold = function(t) {
            WindowManager.getInstance().getWindow(WindowManager.windowType.BuJi).getCenterGoldResult(t)
        },
        i.loadShipList = function(t) {
            ShipManager.getInstance().shipList = t.shiplist
        },
        i.loadCaptainList = function(t) {
            CaptainData.updateList(t)
        },
        i.loadPartList = function(t) {
            WindowManager.getInstance().hideWaiting(),
                t.parts && (ShipManager.getInstance().partsList = t.parts.list, GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.REFRESH_PARTS_DATA)))
        },
        i.loadSoulList = function(t) {
            t.soul && (SoulManager.soulScene = t.soulscene + 1, ShipManager.getInstance().soulList = t.soul.list, SoulManager.getInstance().refreshSolusPage())
        },
        i.loadSoldierList = function(t) {
            ShipManager.getInstance().soldierList = t.soldierlist,
                ShipManager.getInstance().captionId = t.captionid
        },
        i.renameRole = function(t) {
            var e = "";
            switch (t.res) {
                case 0:
                    console.log(t.res + t.name),
                        e = "更名成功",
                        WindowManager.getInstance().hide(WindowManager.windowType.NameChange);
                    break;
                case 1:
                    console.log(t.res + t.name),
                        e = "名字重复";
                    break;
                case 3:
                    console.log(t.res + t.name),
                        e = "道具或钻石不足";
                    break;
                default:
                    console.log(t.res + t.name)
            }
            e.length > 0 && Toast.launch(e)
        },
        i.buyOil = function(t) {
            var e = "";
            switch (t.res) {
                case 0:
                    if (e = "购买成功", WindowManager.getInstance().isWindowVisible(WindowManager.windowType.OilRefining)) {
                        var a = WindowManager.getInstance().getWindow(WindowManager.windowType.OilRefining);
                        a.update()
                    }
                    break;
                case 1:
                    e = "钻石不足";
                    break;
                case 2:
                    e = "购买次数不足"
            }
            e.length > 0 && Toast.launch(e, 16777215, !1, 300)
        },
        i.dseOwnedPaper = function(t) {
            if (WindowManager.getInstance().hideWaiting(), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.WarshipHandbook)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.WarshipHandbook);
                e.setData(t)
            }
        },
        i.dsePaperListHandler = function(t) {
            ShipManager.getInstance().setPaperData(t.paperlist),
                ShipManager.getInstance().updateShipArrangeSpot()
        },
        i.dsePaperPieceListHandler = function(t) {
            ShipManager.getInstance().setPaperPieceData(t.paperpiecelist)
        },
        i.dseMilitaryRankInfo = function(t) {
            WindowManager.getInstance().hideWaiting(),
                MilitaryManager.GetInstance().SetPkg(t),
                MilitaryManager.GetInstance().MilitaryTips()
        },
        i.dseMilitaryRankUpgrad = function(t) {
            WindowManager.getInstance().hideWaiting(),
                t.issucess && (EventManager.instance.dispatchEvent(EventTypes.EVENT_MILITARY_RANK_UPGRADE), SceneManager.instance.curSceneType == SceneType.BATTLE ? UserData.getInstance().lvUpgradeFlag = !0 : WindowManager.getInstance().show(WindowManager.windowType.Upgrade, {
                    isLevelUp: !1,
                    to: t.uptolevel
                }))
        },
        i.dseMilitaryRankGetDailyReward = function(t) {
            WindowManager.getInstance().hideWaiting(),
                t.issucess && (MilitaryManager.GetInstance().pkgData.hasreward = !0, EventManager.instance.dispatchEvent(EventTypes.EVENT_MILITARY_RANK_REWARD), Toast.launch("领取成功"))
        },
        i.userData = function(t) {
            UserData.getInstance().setData(t),
                e.initedUserData || (e.initedUserData = !0, egret.callLater(function() {
                        var t = Transport.getPkg(ProtocolMgr.ID_DceShipList);
                        Transport.instance.send(t),
                            egret.callLater(function() {
                                    t = Transport.getPkg(ProtocolMgr.ID_DceCaptainList),
                                        Transport.instance.send(t),
                                        egret.callLater(function() {
                                                t = Transport.getPkg(ProtocolMgr.ID_DcePaperList),
                                                    Transport.instance.send(t),
                                                    egret.callLater(function() {
                                                            t = Transport.getPkg(ProtocolMgr.ID_DcePaperPieceList),
                                                                Transport.instance.send(t),
                                                                egret.callLater(function() {
                                                                        t = Transport.getPkg(ProtocolMgr.ID_DceSoldierList),
                                                                            Transport.instance.send(t),
                                                                            egret.callLater(function() {
                                                                                    t = Transport.getPkg(ProtocolMgr.ID_DcePartsList),
                                                                                        Transport.instance.send(t),
                                                                                        egret.callLater(function() {
                                                                                                t = Transport.getPkg(ProtocolMgr.ID_DceSoulList),
                                                                                                    Transport.instance.send(t),
                                                                                                    egret.callLater(function() {
                                                                                                            t = Transport.getPkg(ProtocolMgr.ID_DceShipFormationInfo),
                                                                                                                Transport.instance.send(t),
                                                                                                                egret.callLater(function() {
                                                                                                                        t = Transport.getPkg(ProtocolMgr.ID_DceCaptainPieceList),
                                                                                                                            Transport.instance.send(t),
                                                                                                                            egret.callLater(function() {
                                                                                                                                    t = Transport.getPkg(ProtocolMgr.ID_DceMailList),
                                                                                                                                        t.type = 1,
                                                                                                                                        Transport.instance.send(t),
                                                                                                                                        t = Transport.getPkg(ProtocolMgr.ID_DceMailList),
                                                                                                                                        t.type = 2,
                                                                                                                                        Transport.instance.send(t),
                                                                                                                                        egret.callLater(function() {
                                                                                                                                                t = Transport.getPkg(ProtocolMgr.ID_DceTaskRewardData),
                                                                                                                                                    Transport.instance.send(t),
                                                                                                                                                    egret.callLater(function() {
                                                                                                                                                            t = Transport.getPkg(ProtocolMgr.ID_DceGuildData),
                                                                                                                                                                Transport.instance.send(t),
                                                                                                                                                                egret.callLater(function() {
                                                                                                                                                                        t = Transport.getPkg(ProtocolMgr.ID_DceGuildScienceList),
                                                                                                                                                                            Transport.instance.send(t),
                                                                                                                                                                            egret.callLater(function() {
                                                                                                                                                                                    t = Transport.getPkg(ProtocolMgr.ID_DceCaptainData),
                                                                                                                                                                                        Transport.instance.send(t),
                                                                                                                                                                                        egret.callLater(function() {
                                                                                                                                                                                                t = Transport.getPkg(ProtocolMgr.ID_DceActivityWebData),
                                                                                                                                                                                                    t.type = 19,
                                                                                                                                                                                                    Transport.instance.send(t)
                                                                                                                                                                                            },
                                                                                                                                                                                            void 0)
                                                                                                                                                                                },
                                                                                                                                                                                void 0)
                                                                                                                                                                    },
                                                                                                                                                                    void 0)
                                                                                                                                                        },
                                                                                                                                                        void 0)
                                                                                                                                            },
                                                                                                                                            void 0)
                                                                                                                                },
                                                                                                                                void 0)
                                                                                                                    },
                                                                                                                    void 0)
                                                                                                        },
                                                                                                        void 0)
                                                                                            },
                                                                                            void 0)
                                                                                },
                                                                                void 0)
                                                                    },
                                                                    void 0)
                                                        },
                                                        void 0)
                                            },
                                            void 0)
                                },
                                void 0)
                    },
                    void 0), Transport.instance.send(t))
        },
        i.loadItems = function(t) {
            WindowManager.getInstance().hideWaiting(),
                ItemsManager.getInstance().setData(t.proplist);
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Store);
            e ? e.updatePage() : RequestManager.GetInstance().needShowStoreWindow && (RequestManager.GetInstance().needShowStoreWindow = !1, WindowManager.getInstance().show(WindowManager.windowType.Store)),
                EventManager.instance.dispatchEvent(EventTypes.ITEM_DATA_UPDATE),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SHIP_UPDATE)),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SoldierList_update)),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SCIENCE_ITEM_COUNT_UPDATE)),
                ShipManager.getInstance().updateShipArrangeSpot()
        },
        i.useItemHandler = function(t) {
            WindowManager.getInstance().hideWaiting();
            var e = function(t, e, a) {
                if (1 == a)
                    if (0 == t) null == e ? Toast.launch(Locales.get("panel_bag_txt_windword_3")) : Toast.launch(Locales.get("panel_bag_txt_windword_6"));
                    else if (1 == t) Toast.launch(Locales.get("panel_bag_txt_windword_4"));
                else if (2 == t) {
                    var i = ItemParser.GetInstance().getItemById(e);
                    if (ItemsManager.getInstance().getItemById(e) || ItemsManager.getInstance().getItemById(i.twinLukcyBoxId)) {
                        var n = ItemParser.GetInstance().getItemById(i.keyId);
                        Toast.launch(Locales.get("panel_bag_txt_windword_1") + n.name_l + Locales.get("panel_bag_txt_windword_2"))
                    } else Toast.launch(Locales.get("panel_bag_txt_windword_1") + i.name_l + Locales.get("panel_bag_txt_windword_2"))
                } else 3 == t ? Toast.launch(Locales.get("panel_bag_txt_windword_5")) : 5 == t && 1076 == e ? Toast.launch(Locales.get("panel_bag_txt_windword_oil")) : Toast.launch(Locales.get("panel_bag_txt_windword_6"))
            };
            if (0 == t.res) {
                if (t.droplist.droplist.length > 0) {
                    var a = ItemParser.GetInstance().getItemById(t.id);
                    if (a && 2 == a.type && 1 == a.iswallet)
                        if (1076 == t.id) Toast.launch(Locales.get("panel_shop_txt_windword_9") + Locales.get("panel_shop_txt_windword_10", (25 * t.droplist.droplist.length).toString()));
                        else if (1121 == t.id) Toast.launch(Locales.get("panel_shop_txt_windword_11", (2 * t.droplist.droplist.length).toString()));
                    else if (1131 == t.id) Toast.launch(Locales.get("panel_shop_txt_windword_9") + Locales.get("panel_shop_txt_windword_13", (5 * t.droplist.droplist.length).toString()));
                    else if (1132 == t.id) Toast.launch(Locales.get("panel_shop_txt_windword_9") + Locales.get("panel_shop_txt_windword_13", (10 * t.droplist.droplist.length).toString()));
                    else if (1344 == t.id) Toast.launch(Locales.get("panel_shop_txt_windword_9") + Locales.get("panel_shop_txt_windword_17", (t.droplist.droplist.length * t.droplist.droplist[1].count).toString()));
                    else {
                        var i = ItemParser.GetInstance().getItemById(t.id);
                        i && Toast.launch(Locales.get("panel_shop_txt_windword_9") + i.name_l)
                    } else a && 2 == a.type ? ItemsManager.getInstance().showDropTips(t.droplist.droplist) : a && 6 == a.type ? ItemsManager.getInstance().showDropTips(t.droplist.droplist) : 1 == t.useten ? ItemsManager.getInstance().showDropTips(t.droplist.droplist) : 2 == t.useten ? ItemsManager.getInstance().showDropTips(t.droplist.droplist) : ItemsManager.getInstance().showDropTips(t.droplist.droplist)
                } else 0 == t.droplist.droplist.length && e(t.res, null, 1);
                t.integral > 0 && Toast.launch(Locales.get("panel_shop_txt_windword_12", t.integral))
            } else e(t.res, t.id, 1)
        },
        i.lockShip = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.lockPaper = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.trainHandler = function(t) {
            var e = t.res,
                a = t.type;
            if (0 == e) AudioManager.instance.playSound(AudioManager.SOUND_OPEN_BOX),
                Toast.launch(Locales.get("panel_train_txt_windword_1"), 16777215, !0, 355),
                WindowManager.getInstance().getWindow(WindowManager.windowType.OperatePanel) && WindowManager.getInstance().getWindow(WindowManager.windowType.OperatePanel).setTrainBtnEanbled();
            else if (1 == e) 2 == a || 5 == a ? Toast.launch(Locales.get("panel_train_txt_windword_8"), 16777215, !0, 355) : Toast.launch(Locales.get("panel_train_txt_windword_2"), 16777215, !0, 355);
            else if (2 == e) Toast.launch(Locales.get("panel_train_txt_windword_3"), 16777215, !0, 355);
            else if (4 == e) Toast.launch(Locales.get("panel_train_txt_windword_4"), 16777215, !0, 355);
            else if (7 == e) Toast.launch(Locales.get("panel_train_txt_windword_7"), 16777215, !0, 355);
            else if (110 == e || 3 == e) {
                for (var i = 100,
                        n = 0,
                        s = VipParser.GetInstance().getDataArr(); n < s.length; n++) {
                    var r = s[n];
                    if (1 == r.autoTrainTen) {
                        i = r.level;
                        break
                    }
                }
                Toast.launch(Locales.get("panel_train_txt_windword_110", i), 16777215, !0, 355)
            }
        },
        i.shipSkillHandler = function(t) {
            4 != t.res && -1 != t.res && Toast.launch(Locales.get("panel_skill_txt_windword_" + (t.res + 1)))
        },
        i.shipUpgradeHandler = function(t) {
            Toast.launch(Locales.get("panel_science_science_txt_windword_" + (t.res + 1)))
        },
        i.lockPart = function(t) {
            WindowManager.getInstance().hideWaiting(),
                PartsManager.getInstance().handleLockPartMessage(t)
        },
        i.lockSoul = function(t) {
            WindowManager.getInstance().hideWaiting(),
                SoulManager.getInstance().handleLockSoulMessage(t)
        },
        i.lockCaptain = function(t) {
            WindowManager.getInstance().hideWaiting(),
                CaptainManager.getInstance().handleLockCaptainMessage(t)
        },
        i.autoEquipSoldier = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.createShip = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.addShip = function(t) {
            ShipManager.getInstance().addShip(t.ship)
        },
        i.setSoldier = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.equipParts = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.setCaption = function(t) {
            WindowManager.getInstance().hideWaiting(),
                0 == t.res && (ShipManager.getInstance().captionId = t.captionid, GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SoldierList_update)))
        },
        i.setTactic = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.getTactic = function(t) {
            WindowManager.getInstance().hideWaiting();
            for (var e = 0; e < t.tactic.shiplist.length; e++) ShipManager.getInstance().tacticList[e] = t.tactic.shiplist[e].id;
            WindowManager.getInstance().needShowWindow && (WindowManager.getInstance().needShowWindow = !1, WindowManager.getInstance().show(WindowManager.windowType.FormatTeam))
        },
        i.captainPieceList = function(t) {
            CaptainData.updatePieceList(t),
                ShipManager.getInstance().updateShipArrangeSpot()
        },
        i.composeCaptain = function(t) {
            CaptainManager.getInstance().handleComposeCaptainMessage(t)
        },
        i.fireCaptain = function(t) {
            CaptainManager.getInstance().handleFireCaptainMessage(t)
        },
        i.promoteCaptain = function(t) {
            Toast.launch(Locales.get("panel_jianzhang_jinsheng_wind_" + (t.res + 1))),
                0 == t.res && GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CAPTAIN_UPDATE))
        },
        i.partPieceList = function(t) {
            WindowManager.getInstance().hideWaiting(),
                PiecesManager.getInstance().partsPieces = t.partpiecelist
        },
        i.soulRemodule = function(t) {
            Toast.launch(Locales.get("Decorationgaizao_wind_" + (t.result + 1))),
                0 == t.result && GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SOULS_REMOUDLE))
        },
        i.soulEat = function(t) {
            0 == t.res ? (GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SOULS_UPDATE)), SoulManager.getInstance().refreshSolusPage()) : 1 == t.res ? Toast.launch("非法勋章") : 2 == t.res ? Toast.launch("等级已满") : 3 == t.res ? Toast.launch("玩家等级不足") : 4 == t.res ? Toast.launch("升级超出当前最高等级") : 5 == t.res ? Toast.launch("列表有非法勋章") : 6 == t.res && Toast.launch("选择勋章已被锁")
        },
        i.soulDecompose = function(t) {
            console.log("回收勋章结果(0 成功 1 不能分解 2 未知错误):" + t.result),
                console.log("勋章id(如果分解失败，此字段对应失败的勋章对应表里的id):" + t.id),
                console.log("勋章soulid(如果分解失败，此字段对应客户端传来的失败id):" + t.soulid),
                0 == t.result ? (SoulManager.getInstance().refreshSoulsByDecompose(t), Toast.launch("分解成功")) : 1 == t.result ? Toast.launch("不能分解") : 2 == t.result && Toast.launch("未知错误")
        },
        i.soulRestore = function(t) {
            console.log("还原勋章结果(0 成功 1 不能还原 2 钻石不足 3 未知错误):" + t.result),
                console.log("exploit:" + t.exploit),
                console.log("exp:" + t.exp),
                console.log("还原的勋章对应表里的id:" + t.id),
                0 == t.result ? SoulManager.getInstance().refreshSoulsByRestore(t) : 1 == t.result ? Toast.launch("不能还原") : 2 == t.result ? Toast.launch("钻石不足") : 3 == t.result && Toast.launch("未知错误")
        },
        i.soulPieceList = function(t) {
            WindowManager.getInstance().hideWaiting(),
                PiecesManager.getInstance().medalPieces = t.soulpiecelist
        },
        i.soul = function(t) {
            if (0 == t.res) SoulManager.getInstance().soulPanel(t);
            else {
                var e = ""; - 1 == t.res ? e = "非法场景" : -2 == t.res ? e = "金币不足" : -3 == t.res ? e = "探宝失败" : 1 == t.res ? e = "探宝令不足" : 2 == t.res ? e = "钻石不足" : 3 == t.res ? e = "四级场景无法高级探宝" : 4 == t.res && (e = "vip等级不足"),
                    Toast.launch(e)
            }
        },
        i.equipSoul = function(t) {
            WindowManager.getInstance().hideWaiting()
        },
        i.composeSoul = function(t) {
            if (WindowManager.getInstance().hideWaiting(), 0 == t.res) {
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.MERGE_COMPLETE));
                var e;
                WindowPrecious.selectedItem && (WindowPrecious.selectedItem.medal ? (e = ConfigData.getDataByKey("medalpiece", WindowPrecious.selectedIndex), e = ConfigData.getDataByKey("medalData", e.medal_id), Toast.launch("合成成功,获得#" + QualitySystem.getColorByQuality(e.quality).toString(16) + MedaldataParser.GetInstance().getItemById(e.id).name_l + "x" + t.count + "#", 16777215, !0)) : (e = ConfigData.getDataByKey("partspieces", WindowPrecious.selectedIndex), e = ConfigData.getDataByKey("parts", e.part_id), Toast.launch("合成成功,获得#" + QualitySystem.getColorByQuality(e.quality).toString(16) + e.name_l + "x" + t.count + "#", 16777215, !0)))
            }
        },
        i.partsRemouldHandle = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            e && e.refreshPartsByUpgrade({
                    id: t.id,
                    all: t.all,
                    res: t.res
                }),
                Toast.launch(Locales.get("panel_parts_transform_txt_windword_" + (t.res + 1)))
        },
        i.partsUpgradeHandle = function(t) {
            0 != t.res && Toast.launch(Locales.get("panel_accessories_own_txt_windword_" + (t.res + 1)));
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            e && e.refreshPartsByUpgrade({
                id: t.id,
                all: t.all,
                res: t.res,
                addlist: t.addlist
            })
        },
        i.partsReductionHandle = function(t) {
            console.log("还原配件结果(0 成功):" + t.sucess),
                console.log("返还的科技点:" + t.point),
                console.log("返还的金币:" + t.gold),
                console.log(":" + t.parttype);
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            e && e.refreshPartsByReduction({
                sucess: t.sucess,
                point: t.point,
                gold: t.gold
            })
        },
        i.partsInfoReductionHandle = function(t) {
            RetiredAlert.getInstance().showParts(t, PartsManager.getInstance().tmpPartId)
        },
        i.partsUpdateHandle = function(t) {
            ShipManager.getInstance().updatePartsList(t.parts)
        },
        i.partsDecomposeHandle = function(t) {
            console.log("回收的配件id列表:" + t.partsidlist),
                console.log(":" + t.type),
                console.log("回收结果(0 成功 1 非法id 2 金币不足):" + t.res);
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian);
            e.refreshPartsByDecompose({
                partsidlist: t.partsidlist,
                type: t.type,
                res: t.res
            })
        },
        i.paperChargeCount = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ExchangeBlueprint);
            e.setPaperChargeCountData(t)
        },
        i.captainChargeCount = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ExchangeCaptain);
            e.setCaptainChargeCountData(t)
        },
        i.captainCharge = function(t) {
            switch (t.res) {
                case -1:
                    Toast.launch("等级必须达到50级");
                    break;
                case 0:
                    Toast.launch("兑换成功");
                    var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ExchangeCaptain);
                    e.sendCaptainChargeCountMsg();
                    break;
                case 1:
                    Toast.launch("非法ID");
                    break;
                case 2:
                    Toast.launch("非法类型");
                    break;
                case 3:
                    Toast.launch("将魂不足")
            }
        },
        i.dseAllLastID = function(t) {
            if (WindowManager.getInstance().hideWaiting(), MainWorldManager.instance.initCampaign(t.stagelist, t.stagedatalist, t.laststageid), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.PVE)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.PVE);
                e.switchType(MainWorldManager.BATTLE_TYPE_NORMAL)
            } else(SceneManager.instance.curSceneType = SceneType.HOME) && WindowManager.getInstance().show(WindowManager.windowType.PVE, {
                type: BattleType.BATTLE_TYPE_MAIN_PVE
            })
        },
        i.dseStageList = function(t) {
            WindowManager.getInstance().hideWaiting(),
                3 == t.type ? StageData.init(t) : (2 == t.type && SceneManager.instance.curSceneType == SceneType.HOME && (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.PVE) || WindowManager.getInstance().show(WindowManager.windowType.PVE, {
                    type: BattleType.BATTLE_TYPE_MAIN_SPECIAL
                })), MainWorldManager.instance.openCampaignPanel(t))
        },
        i.dseStageData = function(t) {
            EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_UPDATE_STAGE, t)
        },
        i.dseResetStageCount = function(t) {
            WindowManager.getInstance().hideWaiting();
            var e = t.res;
            if (0 == e) {
                Toast.launch(Locales.get("BuyStageCountPanel_txt_wind_0"));
                for (var a = 0,
                        i = MainStageOptData.stages; a < i.length; a++) {
                    var n = i[a];
                    if (n.baseData.id == t.stageID) {
                        n.serverData.todaybuyCnt++,
                            n.serverData.todayCount = 0,
                            EventManager.instance.dispatchEvent(EventTypes.PVE_ATTACK_TIMES_UPDATE);
                        break
                    }
                }
            } else 1 == e ? Toast.launch(Locales.get("BuyStageCountPanel_txt_wind_1")) : 2 == e ? Toast.launch(Locales.get("BuyStageCountPanel_txt_wind_2")) : 3 == e && Toast.launch(Locales.get("BuyStageCountPanel_txt_wind_3"))
        },
        i.shipFormationInfo = function(t) {
            ShipManager.getInstance().setShipFormationInfo(t)
        },
        i.updateShip = function(t) {
            ShipManager.getInstance().updateShipList(t.ships)
        },
        i.updateCaptain = function(t) {
            CaptainData.updateCaptain(t.captain)
        },
        i.upgradeCaptain = function(t) {
            Toast.launch(Locales.get("panel_jianzhang_upgrade_wind_" + (t.res + 1)))
        },
        i.shipLevelUp = function(t) {
            -1 == t.errorcode ? Toast.launch("升级成功！") : Toast.launch("升级失败！")
        },
        i.chatHandler = function(t) {
            var e = "";
            switch (console.log(t.chattimes), t.res) {
                case 0:
                    ChatManager.getInstance().chatTimes = t.chattimes;
                    break;
                case 1:
                    e = "CD未到";
                    break;
                case 2:
                    e = "没有该聊天类型";
                    break;
                case 3:
                    e = "没有军团";
                    break;
                case 4:
                    e = "该玩家不存在";
                    break;
                case 5:
                    e = "该玩家不在线";
                    break;
                case 6:
                    e = "等级不够";
                    break;
                case 7:
                    e = "给自己发";
                    break;
                case 8:
                    e = "文字太长";
                    break;
                case 9:
                    e = "次数或者钻石不足"
            }
            e.length > 0 && Toast.launch(e)
        },
        i.chatMsgHandler = function(t) {
            ChatManager.getInstance().hasNewMsg(t)
        },
        i.chatMsgLogHandler = function(t) {
            ChatManager.getInstance().chatTimes = t.chattimes,
                ChatManager.getInstance().setMsgListWorld(t.msglist),
                ChatManager.getInstance().setMsgListCamp(t.campmsglist),
                ChatManager.getInstance().setMsgListGroup(t.guildmsglist)
        },
        i.InviteFriend = function(t) {
            var e = "";
            switch (t.result) {
                case 0:
                    e = "邀请成功,等待对方确认";
                    break;
                case 1:
                    e = "对方已经是好友";
                    break;
                case 2:
                    e = "达到当日邀请上限";
                    break;
                case 3:
                    e = "好友数量达到上限";
                    break;
                case 4:
                    e = "没找到该人";
                    break;
                case 5:
                    e = "不能邀请自己"
            }
            e.length > 0 && Toast.launch(e)
        },
        i.dellFrind = function(t) {
            switch (t.result) {
                case 0:
                    break;
                case 1:
                    break;
                case 2:
                    break;
                case 3:
                    GameData.uid = t.name,
                        Transport.instance.onSocketOpen();
                    break;
                case 4:
                    Transport.instance.loginConnect(GameData.longId)
            }
        },
        i.blackList = function(t) {
            BlackListManager.GetInstance().setBlackList(t)
        },
        i.blackListOpt = function(t) {
            var e = "";
            switch (t.res) {
                case 0:
                    e = "成功";
                    break;
                case 1:
                    e = "非法操作类型";
                    break;
                case 2:
                    e = "达到上限，无法添加";
                    break;
                case 3:
                    e = "该玩家已在黑名单";
                    break;
                case 4:
                    e = "该玩家不在黑名单，无法删除"
            }
            e.length > 0 && Toast.launch(e)
        },
        i.friendList = function(t) {
            FriendManager.getInstance().setMyFriendList(t)
        },
        i.recommandList = function(t) {
            FriendManager.getInstance().setRecommandList(t)
        },
        i.inviteList = function(t) {
            FriendManager.getInstance().setInvitedlist(t)
        },
        i.receiveEle = function(t) {
            FriendManager.getInstance().setReceiveElecList(t)
        },
        i.searchPlayer = function(t) {
            FriendManager.getInstance().setSearchData(t)
        },
        i.refuseAddFriend = function(t) {
            0 == t.result
        },
        i.sendEle = function(t) {
            var e = "";
            switch (t.result) {
                case 0:
                    e = "成功",
                        FriendManager.getInstance().sendEleSucess(t);
                    break;
                case 1:
                    e = "当日已经赠送";
                    break;
                case 2:
                    e = "赠送对象不存在";
                    break;
                case 3:
                    e = "已经不是好友";
                    break;
                case 4:
                    e = "没有好友可以赠送"
            }
            e.length > 0 && Toast.launch(e)
        },
        i.drawEle = function(t) {
            var e = "";
            switch (t.result) {
                case 0:
                    e = "成功领取并赠送";
                    break;
                case 1:
                    e = "成功领取但已经赠送";
                    break;
                case 2:
                    e = "超过当日领取上限";
                    break;
                case 3:
                    e = "找不到这条赠送记录";
                    break;
                case 4:
                    e = "回赠的人找不到";
                    break;
                case 5:
                    e = "已经领取但对方不是好友,不能回赠";
                    break;
                case 6:
                    e = "寻宝令数量达上限"
            }
            e.length > 0 && Toast.launch(e),
                FriendManager.getInstance().setEleGetNum(t.drawnum)
        },
        i.drawAllEle = function(t) {
            var e = "";
            e = t.successdraw > 0 ? "成功领取" + t.successdraw + "个掠夺令" : "已到上限，领取失败",
                e.length > 0 && Toast.launch(e),
                FriendManager.getInstance().setEleGetNum(t.drawnum)
        },
        i.addFriend = function(t) {
            var e = "";
            switch (t.result) {
                case 1:
                    e = "成功";
                    break;
                case 2:
                    e = "好友数量达到上限";
                    break;
                case 3:
                    e = "对方不存在";
                    break;
                case 4:
                    e = "对方的好友数量达到上限";
                    break;
                case 5:
                    e = "已经是好友";
                    break;
                case 6:
                    e = "不能加自己为好友"
            }
            e.length > 0 && Toast.launch(e)
        },
        i.dseBattleStart = function(t) {
            WindowManager.getInstance().hideWaiting(),
                BattleManager.instance.clearLoadedFlags(),
                BattleManager.instance.OnBattleStart(t)
        },
        i.dseBattleStartBySweep = function(t) {
            WindowManager.getInstance().hideWaiting();
            var e;
            t.battlelist && t.battlelist[0] && (e = t.battlelist[0].type),
                e == BattleType.BATTLE_TYPE_MAIN_PVE ? WindowManager.getInstance().show(WindowManager.windowType.BattleSweepResult, {
                    type: BattleType.BATTLE_TYPE_MAIN_PVE,
                    pkg: t.battlelist
                }) : e == BattleType.BATTLE_TYPE_MAIN_SPECIAL ? WindowManager.getInstance().show(WindowManager.windowType.BattleSweepResult, {
                    type: BattleType.BATTLE_TYPE_MAIN_SPECIAL,
                    pkg: t.battlelist
                }) : e == BattleType.BATTLE_TYPE_ROBBERY && WindowManager.getInstance().show(WindowManager.windowType.BattleSweepDrop, {
                    data: t
                })
        },
        i.dseBattleInfo = function(t) {
            EventManager.instance.dispatchEvent(EventTypes.EVENT_BATTLE_INFO, t)
        },
        i.dseScienceList = function(t) {
            ScienceData.updateLevelsList(t),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SCIENCE_UPDATE))
        },
        i.mailList = function(t) {
            MailManager.getInstance().setMailListArr(t)
        },
        i.addMail = function(t) {
            MailManager.getInstance().addNewMail(t)
        },
        i.BattleReview = function(t) {
            MailManager.getInstance().processBatleReview(t)
        },
        i.sendMail = function(t) {
            var e = "";
            switch (t.result) {
                case 0:
                    e = "成功",
                        WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Speak) && WindowManager.getInstance().hide(WindowManager.windowType.Speak);
                    break;
                case 1:
                    e = "对方不是好友或不在一个军团";
                    break;
                case 2:
                    e = "内容太长";
                    break;
                case 3:
                    e = "玩家不存在";
                    break;
                case 4:
                    e = "发送邮件失败";
                    break;
                case 5:
                    e = "不能发给自己";
                    break;
                case 6:
                    e = "您在对方的黑名单中"
            }
            e.length > 0 && Toast.launch(e)
        },
        i.dseUpgradeScience = function(t) {
            ScienceManager.getInstance().handleUpgradeScienceResult(t)
        },
        i.dseAutoUpgradeScience = function(t) {
            ScienceManager.getInstance().handleAutoUpgradeScienceResult(t)
        },
        i.dseCaptainData = function(t) {
            ShopManager.getInstance().handleCaptainData(t),
                CaptainManager.getInstance().prosseCaptainData(t),
                Main.instance.loadingPanel && (GameLayer.getInstance().showAll(), Main.instance.clearLoadingPanel(), EventManager.instance.dispatchEvent(EventTypes.ENTER_MAINSCENE))
        },
        i.dseBuyRecruitItem = function(t) {
            ShopManager.getInstance().handleBuyRecruitItem(t)
        },
        i.dseRecruitCaptain = function(t) {
            ShopManager.getInstance().handleRecruitCaptain(t)
        },
        i.dseChargePaper = function(t) {
            ShipManager.getInstance().handleChargePaper(t)
        },
        i.dseSpyData = function(t) {
            ShopManager.getInstance().handleSpyData(t)
        },
        i.dseSpy = function(t) {
            ShopManager.getInstance().handleSpy(t)
        },
        i.dseBuySpyItem = function(t) {
            ShopManager.getInstance().handleBuySpyItem(t)
        },
        i.dseShopData = function(t) {
            WindowManager.getInstance().hideWaiting(),
                ShopManager.getInstance().handleShopData(t),
                CampShopOptData.instance.init(t.shopdata)
        },
        i.dseBuy = function(t) {
            WindowManager.getInstance().hideWaiting(),
                ShopManager.getInstance().handleBuy(t),
                8 == t.res && ConfigData.preLoadList(["shopData"],
                    function() {
                        var e = ConfigData.getDataByKey("shopData", t.id);
                        Toast.launch("vip达到" + e.reqVIPLevel + "级才能购买!")
                    })
        },
        i.dseArmadaData = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.QiJvTou);
            e && e.handleArmadaData(t)
        },
        i.dseRobberyList = function(t) {
            WindowManager.getInstance().hideWaiting(),
                PiecesManager.getInstance().setRankerList(t)
        },
        i.dseEnterGuard = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.DefenseOil);
            e && e.handleEnterGuard(t),
                HegemonyItem.lvectype && HegemonyItem.lvectype.updateCount(2 + t.buyresetcount - t.resetcount)
        },
        i.dseResetGuard = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.DefenseOil);
            e && e.handleResetGuard(t)
        },
        i.dseBuyGuard = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.DefenseOil);
            e && e.handleBuyGuard(t)
        },
        i.dseGuardStage = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.DefenseOil);
            e && e.handleGuardStage(t)
        },
        i.dseGuildBattleData = function(t) {},
        i.dseGuildData = function(t) {
            GuildManager.getInstance().setGuildData(t)
        },
        i.dseGuildList = function(t) {
            GuildManager.getInstance().setGuildListData(t)
        },
        i.dseCreateGuild = function(t) {
            GuildManager.getInstance().handleCreateGuild(t)
        },
        i.dseSearchGuild = function(t) {
            GuildManager.getInstance().handleSearchGuild(t)
        },
        i.dseGuildApply = function(t) {
            GuildManager.getInstance().handleGuildApply(t)
        },
        i.dseGuildCancelApply = function(t) {
            GuildManager.getInstance().handleGuildCancelApply(t)
        },
        i.dseGuildScienceList = function(t) {
            GuildManager.getInstance().handleGuildScienceList(t)
        },
        i.dseUpgradeGuildScience = function(t) {
            GuildManager.getInstance().handleUpgradeGuildScience(t)
        },
        i.dseGuildApplyList = function(t) {
            GuildManager.getInstance().handleGuildApplyList(t)
        },
        i.dseGuildApproval = function(t) {
            GuildManager.getInstance().handleGuildApproval(t)
        },
        i.dseSetVerifyOptions = function(t) {
            GuildManager.getInstance().handleSetVerifyOptions(t)
        },
        i.dseGuildSetDeputy = function(t) {
            GuildManager.getInstance().handleGuildSetDeputy(t)
        },
        i.dseGuildFireDeputy = function(t) {
            GuildManager.getInstance().handleGuildFireDeputy(t)
        },
        i.dseGuildDemise = function(t) {
            GuildManager.getInstance().handleGuildDemise(t)
        },
        i.dseGuildExpel = function(t) {
            GuildManager.getInstance().handleGuildExpel(t)
        },
        i.dseGuildQuit = function(t) {
            GuildManager.getInstance().handleGuildQuit(t)
        },
        i.dseGuildDonate = function(t) {
            GuildManager.getInstance().handleGuildDonate(t)
        },
        i.dseModifyNotify = function(t) {
            GuildManager.getInstance().handleModifyNotify(t)
        },
        i.dseModifyDeclaration = function(t) {
            GuildManager.getInstance().handleModifyDeclaration(t)
        },
        i.dseRenameGuild = function(t) {
            GuildManager.getInstance().handleRenameGuild(t)
        },
        i.dseGuildSetMedal = function(t) {
            GuildManager.getInstance().handleGuildSetMedal(t)
        },
        i.dseGuildDismiss = function(t) {
            GuildManager.getInstance().handleGuildDismiss(t)
        },
        i.dseGuildUpgrade = function(t) {
            GuildManager.getInstance().handleGuildUpgrade(t)
        },
        i.taskHandler = function(t) {
            MissionData.init(t)
        },
        i.taskGetHandler = function(t) {
            WindowManager.getInstance().hideWaiting(),
                0 == t.res ? Toast.launch("领取成功") : Toast.launch("领取失败" + t.res)
        },
        i.dseGuildMemberList = function(t) {
            GuildManager.getInstance().handleGuildMemberList(t)
        },
        i.dseArenaData = function(t) {
            ArenaManager.instance.setRankData(t),
                EventManager.instance.dispatchEvent(EventTypes.ARENA_DATA)
        },
        i.dseEnterArena = function(t) {
            WindowManager.getInstance().hideWaiting(),
                0 != t.res && (WindowManager.getInstance().hide(WindowManager.windowType.PVP), WindowManager.getInstance().hide(WindowManager.windowType.PVPExchange))
        },
        i.dseArenaList = function(t) {
            ArenaManager.instance.setListData(t)
        },
        i.dseScoutSoldier = function(t) {
            0 == t.res && (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Friend) && WindowManager.getInstance().hide(WindowManager.windowType.Friend), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.RankList) && WindowManager.getInstance().hide(WindowManager.windowType.RankList), WindowManager.getInstance().show(WindowManager.windowType.ShipArrange, {
                data: t
            }))
        },
        i.dseArenaExchange = function(t) {
            WindowManager.getInstance().hideWaiting();
            var e = t.res;
            0 == e ? Toast.launch(Locales.get("panel_arena_txt_comment_window_1"), 16711680) : 4 == e ? Toast.launch(Locales.get("panel_PaperPanel_txt_windword_1"), 16711680) : 5 == e ? Toast.launch(Locales.get("panel_arena_txt_comment_window_5"), 16711680) : 1 == e ? Toast.launch(Locales.get("panel_arena_txt_comment_9"), 16711680) : 2 == e ? Toast.launch(Locales.get("panel_arena_txt_comment_10"), 16711680) : 3 == e ? Toast.launch(Locales.get("panel_arena_txt_comment_11"), 16711680) : 7 == e && Toast.launch(Locales.get("panel_arena_txt_show_wind_7"), 16711680),
                EventManager.instance.dispatchEvent(EventTypes.ARENA_EXCHANGE)
        },
        i.ranklist = function(t) {
            RankListManager.getInstance().setdata(t)
        },
        i.medalMsg = function(t) {
            if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Medal)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Medal);
                e.processMsg(t)
            }
        },
        i.getMedal = function(t) {
            var e = "";
            switch (t.res) {
                case 0:
                    e = "成功";
                    break;
                case 1:
                    e = "已经达到最高级";
                    break;
                case 2:
                    e = "金币不足";
                    break;
                case 3:
                    e = "战役星数不足";
                    break;
                case 4:
                    e = "非法id"
            }
            if (1 == t.all && WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Medal)) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Medal);
                a.allUpdate()
            }
            e.length > 0 && Toast.launch(e),
                2 == t.res && UserData.getInstance()._level >= 9 && (WindowManager.getInstance().show(WindowManager.windowType.BuJi), WindowManager.getInstance().hide(WindowManager.windowType.Medal), UserData.getInstance().sendDetailMessage())
        },
        i.dseEnterCampBattle = function(t) {
            WindowManager.getInstance().hideWaiting(),
                0 != t.res ? CampBattleManager.isOpen = !1 : CampBattleManager.isOpen = !0
        },
        i.dseCampBattleData = function(t) {
            if (0 != CampBattleManager.needOpen)
                if (CampBattleManager.instance.processData(t), 1 == CampBattleManager.isOpen)
                    if (WindowManager.getInstance().isWindowVisible(WindowManager.windowType.CampBattle)) {
                        var e = WindowManager.getInstance().getWindow(WindowManager.windowType.CampBattle);
                        e.updatePortList()
                    } else EffectManager.instance.initBattleEff(),
                        ResLoader.instance.loadResGroup("ZhenYingZhan",
                            function(t) {
                                WindowManager.getInstance().hideWaiting(),
                                    0 == t && WindowManager.getInstance().show(WindowManager.windowType.CampBattle)
                            });
            else CampBattleManager.needOpen = !1,
                WindowManager.getInstance().show(WindowManager.windowType.CampBattleRankingList)
        },
        i.dseCampBattleMsg = function(t) {
            WindowManager.getInstance().hideWaiting(),
                CampBattleManager.instance.showBattleMsg(t)
        },
        i.dseCampBattleMove = function(t) {
            WindowManager.getInstance().hideWaiting(),
                CampBattleManager.instance.processOptData(t)
        },
        i.dseCampBattleResult = function(t) {
            WindowManager.getInstance().hideWaiting(),
                CampBattleManager.instance.showBattleEnd(t)
        },
        i.dseCampBattleBuy = function(t) {
            WindowManager.getInstance().hideWaiting(),
                CampBattleManager.instance.processDetectAndBlood(t)
        },
        i.dseCampBattleSetTrustee = function(t) {
            WindowManager.getInstance().hideWaiting(),
                CampBattleManager.instance.processSetAI(t)
        },
        i.dseBroadCast = function(t) {
            BroadCastManager.instance.addRadio(t)
        },
        i.dseRetireShip = function(t) {
            RetiredAlert.getInstance().handleRetiredShip(t)
        },
        i.dseSalePaper = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.ShipFactory);
            e.handleSalePaper(t)
        },
        i.onlineTime = function(t) {
            var e = "",
                a = Math.floor(t.onlinetime / 3600);
            t.onlinetime < 3600 || (t.onlinetime >= 3600 && t.onlinetime < 10800 ? (e = "<font color='#00ff00'>" + Locales.get("onlineTime1", [a.toString()]) + "</font>", GameAlert.getInstance().showOnlineTime(Locales.get("onlineTime4"), e, null, null, "", "", !1, !1)) : t.onlinetime >= 10800 && t.onlinetime < 14400 ? (e = "<font color='#00ff00'>" + Locales.get("onlineTime1", [a.toString()]) + Locales.get("onlineTime2") + "</font>", GameAlert.getInstance().showOnlineTime(Locales.get("onlineTime4"), e, null, null, "", "", !1, !1)) : t.onlinetime >= 14400 && t.onlinetime < 18e3 ? (e = "<font color='#00ff00' align='center'>" + Locales.get("onlineTime0", [a.toString()]) + "\n\n</font>" + Locales.get("onlineTime3"), GameAlert.getInstance().showOnlineTime(Locales.get("onlineTime4"), e, null, null, "", "", !1, !1)) : t.onlinetime >= 18e3 && (e = "<font color='#00ff00' align='center'>" + Locales.get("onlineTime0", [a.toString()]) + "\n\n</font>" + Locales.get("onlineTime5"), GameAlert.getInstance().showOnlineTime(Locales.get("onlineTime4"), e, null, null, "", "", !1, !1)))
        },
        i.awardCenter = function(t) {
            if (GameData.funSwitch ? t.awardlist.length > 0 ? HomeUI.instance && HomeUI.instance.isShowAwardCenter(!0) : HomeUI.instance && HomeUI.instance.isShowAwardCenter(!1) : HomeUI.instance && HomeUI.instance.isShowAwardCenter(!0), WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Award)) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Award);
                e.processMsg(t)
            }
        },
        i.getAward = function(t) {
            0 == t.res ? Toast.launch("领奖成功") : Toast.launch("没有该项奖励")
        },
        i.dseAddOwnedPaper = function(t) {
            SceneManager.instance.curSceneType != SceneType.HOME ? HandbookManager.instance.pkg = t : HandbookManager.instance.showMsg(t)
        },
        i.dseAddSoulOwnedPaper = function(t) {
            HandbookManager.instance.showMedalMsg(t)
        },
        i.dseCaptainPaperAdd = function(t) {
            HandbookManager.instance.showCapMsg(t)
        },
        i.dseActivityWebData = function(t) {
            if (WindowManager.getInstance().hideWaiting(), t.type)
                if (19 == t.type)
                    if (null == t.actlist || 0 == t.actlist.length) HomeUI.instance.setMuBiaoActState(!1);
                    else {
                        HomeUI.instance.setMuBiaoActState(!0);
                        var e = WindowManager.getInstance().getWindow(WindowManager.windowType.mubiaoAct);
                        e && e.setData(t)
                    }
            else ActivityManager.instance.curActivityType = t.type,
                ActivityManager.instance.curActivityInfo = t.actlist[0],
                t.type == ActivityType.ACTIVITY_TYPE_SIGNIN ? ConfigData.preLoadDats(["giftData"], [GiftdataParser],
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.signActivity, t.actlist[0])
                    }) : t.type == ActivityType.ACTIVITY_TYPE_WHEEL ? ConfigData.preLoadDats(["giftData", "activityLuckyWheel"], [GiftdataParser, ActivityluckywheelParser],
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.luckyWheel, t.actlist[0])
                    }) : t.type == ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE ? ConfigData.preLoadDats(["giftData", "cashData"], [GiftdataParser, CashdataParser],
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.firstRecharge)
                    }) : t.type == ActivityType.ACTIVITY_TYPE_LOGINGIFT ? ConfigData.preLoadDats(["giftData"], [GiftdataParser],
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.loginReward, t.actlist[0])
                    }) : ConfigData.preLoadDats(["giftData"], [GiftdataParser],
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.listActivity, t.actlist[0])
                    });
            else {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.activity);
                a && a.setData(t)
            }
        },
        i.dseActivityData = function(t) {
            ActivityManager.instance.activityData = t,
                EventManager.instance.dispatchEvent(EventTypes.ACTIVITY_DATA_UPDATE)
        },
        i.dseActivity = function(t) {
            if (WindowManager.getInstance().hideWaiting(), 0 == t.res)
                if (t.id == ActivityType.ACTIVITY_TYPE_WHEEL) {
                    var e = WindowManager.getInstance().getWindow(WindowManager.windowType.luckyWheel);
                    e && e.turnToGift(t.item_id)
                } else if (t.id == ActivityType.ACTIVITY_TYPE_ONLINE) ConfigData.preLoadDats(["activityOLtime"], [ActivityoltimeParser],
                function() {
                    var e = ActivityoltimeParser.GetInstance().getItemById(t.item_id),
                        a = GlobalFunction.getDropDataByTypeAndId(e.type, e.item, e.count),
                        i = QualitySystem.getColorByQuality(a.quality).toString(16);
                    if (i.length < 6)
                        for (; i.length < 6;) i = "0" + i;
                    a.count && a.count > 1 ? Toast.launch("恭喜您获得#" + i + a.name + "#x" + a.count, void 0, !0) : Toast.launch("恭喜您获得#" + i + a.name + "#", void 0, !0)
                });
            else if (t.id = 19) {
                var a = WindowManager.getInstance().getWindow(WindowManager.windowType.mubiaoAct);
                a && a.setRewardBtnState(),
                    Toast.launch("领取奖励成功")
            } else Toast.launch("领取奖励成功");
            else Toast.launch(Locales.get("activity_error" + t.res));
            EventManager.instance.dispatchEvent(EventTypes.ACTIVITY_DATA_UPDATE)
        },
        i.getMailProp = function(t) {
            MailManager.getInstance().getMailItem(t)
        },
        i.dseRemouldShip = function(t) {
            WindowManager.getInstance().hideWaiting();
            var e = t.res;
            0 == e ? (AudioManager.instance.playSound(AudioManager.SOUND_SHIPS_GZ), Toast.launch(Locales.get("panel_Shiptransform_txt_windword_2"))) : 1 == e ? Toast.launch(Locales.get("panel_Shiptransform_txt_windword_3")) : 2 == e ? Toast.launch(Locales.get("panel_Shiptransform_txt_windword_4")) : 3 == e ? Toast.launch(Locales.get("panel_Shiptransform_txt_windword_5")) : -2 == e || 5 == e ? Toast.launch(Locales.get("panel_Shiptransform_txt_windword_6")) : 6 == e ? Toast.launch(Locales.get("panel_Shiptransform_txt_windword_9")) : 7 == e ? Toast.launch(Locales.get("panel_Shiptransform_txt_windword_8")) : 8 == e && Toast.launch(Locales.get("panel_Shiptransform_txt_windword_10"))
        },
        e._firstAuth = !0,
        e
}(egret.EventDispatcher);
egret.registerClass(CommunicateManager, "CommunicateManager");
var ErrorCodeManager = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.alertError = function(t) {
            void 0 != t && void 0 != t.res && 0 != Number(t.res) && Toast.launch(Locales.get("login_txt_error_2", t.res))
        },
        t
}();
egret.registerClass(ErrorCodeManager, "ErrorCodeManager");
var PkgBuffer = function() {
    function t() {
        this.buffer = "",
            this.pkglen = 0,
            this.curlen = 0,
            this.type = 0
    }
    var e = (__define, t),
        a = e.prototype;
    return a.clear = function() {
            this.buffer = "",
                this.pkglen = 0,
                this.curlen = 0,
                this.type = 0
        },
        a.complete = function() {
            return this.curlen >= this.pkglen
        },
        t
}();
egret.registerClass(PkgBuffer, "PkgBuffer");
var PkgMap = function() {
    function t() {
        this._arrIndex = {},
            this._arrTypes = {},
            this._arrHandler = {},
            this._arrIndex = {},
            this._arrTypes = {},
            this._arrHandler = {}
    }
    var e = (__define, t),
        a = e.prototype;
    return a.AddPkg = function(t, e) {
            return void 0 !== this._arrIndex[t] ? (Main.trace("Already register Pakcage Type for " + t), !1) : void 0 == e ? (Main.trace("cls is nil for type: " + t), !1) : (this._arrIndex[t] = e, void(this._arrTypes[e] = t))
        },
        a.SetPkgHandler = function(t, e) {
            void 0 !== this._arrHandler[t] ? Main.trace("Already register Handler for Package " + t) : this._arrHandler[t] = e
        },
        a.removePkgHandler = function(t, e) {
            this._arrHandler[t];
            void 0 !== this._arrHandler[t] ? Main.trace("Already register Handler for Package " + t) : this._arrHandler[t] = e
        },
        a.GetPkg = function(t) {
            return this._arrIndex[t]
        },
        a.GetPkgType = function(t) {
            return this._arrTypes[t]
        },
        a.GetPkgByType = function(t) {
            return this._arrIndex[t]
        },
        a.GetPkgHandler = function(t) {
            return this._arrHandler[t]
        },
        t
}();
egret.registerClass(PkgMap, "PkgMap");
var ProtocolMgr = function() {
    function t() {
        this._pkgMap = new PkgMap,
            this.InitPkgMap()
    }
    var e = (__define, t),
        a = e.prototype;
    return a.GetPkgMap = function() {
            return this._pkgMap
        },
        a.InitPkgMap = function() {
            this._pkgMap.AddPkg(t.ID_DceAccBind, "DceAccBind"),
                this._pkgMap.AddPkg(t.ID_DceActivity, "DceActivity"),
                this._pkgMap.AddPkg(t.ID_DceActivityData, "DceActivityData"),
                this._pkgMap.AddPkg(t.ID_DceAddFriend, "DceAddFriend"),
                this._pkgMap.AddPkg(t.ID_DceAllLastID, "DceAllLastID"),
                this._pkgMap.AddPkg(t.ID_DceApplyList, "DceApplyList"),
                this._pkgMap.AddPkg(t.ID_DceArenaExchange, "DceArenaExchange"),
                this._pkgMap.AddPkg(t.ID_DceAutoEquipSoldier, "DceAutoEquipSoldier"),
                this._pkgMap.AddPkg(t.ID_DceAwardCenter, "DceAwardCenter"),
                this._pkgMap.AddPkg(t.ID_DceBattleReview, "DceBattleReview"),
                this._pkgMap.AddPkg(t.ID_DceBattleStart, "DceBattleStart"),
                this._pkgMap.AddPkg(t.ID_DceBlackList, "DceBlackList"),
                this._pkgMap.AddPkg(t.ID_DceBlackListOpt, "DceBlackListOpt"),
                this._pkgMap.AddPkg(t.ID_DceBuy, "DceBuy"),
                this._pkgMap.AddPkg(t.ID_DceBuyGuard, "DceBuyGuard"),
                this._pkgMap.AddPkg(t.ID_DceBuyOil, "DceBuyOil"),
                this._pkgMap.AddPkg(t.ID_DceCampBattleData, "DceCampBattleData"),
                this._pkgMap.AddPkg(t.ID_DceCampBattleMove, "DceCampBattleMove"),
                this._pkgMap.AddPkg(t.ID_DceCampBattleResult, "DceCampBattleResult"),
                this._pkgMap.AddPkg(t.ID_DceCenterRecovery, "DceCenterRecovery"),
                this._pkgMap.AddPkg(t.ID_DceChargePaper, "DceChargePaper"),
                this._pkgMap.AddPkg(t.ID_DceChat, "DceChat"),
                this._pkgMap.AddPkg(t.ID_DceChatData, "DceChatData"),
                this._pkgMap.AddPkg(t.ID_DceCheckPlayerName, "DceCheckPlayerName"),
                this._pkgMap.AddPkg(t.ID_DceChristmasMineral, "DceChristmasMineral"),
                this._pkgMap.AddPkg(t.ID_DceChristmasMineralStart, "DceChristmasMineralStart"),
                this._pkgMap.AddPkg(t.ID_DceChristmasScroeExchange, "DceChristmasScroeExchange"),
                this._pkgMap.AddPkg(t.ID_DceChritmasLottery, "DceChritmasLottery"),
                this._pkgMap.AddPkg(t.ID_DceChritmasLotteryStart, "DceChritmasLotteryStart"),
                this._pkgMap.AddPkg(t.ID_DceClearCampBattleCD, "DceClearCampBattleCD"),
                this._pkgMap.AddPkg(t.ID_DceComposeParts, "DceComposeParts"),
                this._pkgMap.AddPkg(t.ID_DceConsumeExchange, "DceConsumeExchange"),
                this._pkgMap.AddPkg(t.ID_DceConsumeExchangeData, "DceConsumeExchangeData"),
                this._pkgMap.AddPkg(t.ID_DceCreateGuild, "DceCreateGuild"),
                this._pkgMap.AddPkg(t.ID_DceCreateShip, "DceCreateShip"),
                this._pkgMap.AddPkg(t.ID_DceDayLimitFightData, "DceDayLimitFightData"),
                this._pkgMap.AddPkg(t.ID_DceDecomposeParts, "DceDecomposeParts"),
                this._pkgMap.AddPkg(t.ID_DceDeleteFriend, "DceDeleteFriend"),
                this._pkgMap.AddPkg(t.ID_DceDrawAllElectric, "DceDrawAllElectric"),
                this._pkgMap.AddPkg(t.ID_DceDrawElectric, "DceDrawElectric"),
                this._pkgMap.AddPkg(t.ID_DceEnterArena, "DceEnterArena"),
                this._pkgMap.AddPkg(t.ID_DceEnterCampBattle, "DceEnterCampBattle"),
                this._pkgMap.AddPkg(t.ID_DceEnterGuard, "DceEnterGuard"),
                this._pkgMap.AddPkg(t.ID_DceEquipParts, "DceEquipParts"),
                this._pkgMap.AddPkg(t.ID_DceEquipSoul, "DceEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DceFriendList, "DceFriendList"),
                this._pkgMap.AddPkg(t.ID_DceGetAward, "DceGetAward"),
                this._pkgMap.AddPkg(t.ID_DceGetCenterGold, "DceGetCenterGold"),
                this._pkgMap.AddPkg(t.ID_DceGetDayLimitFight, "DceGetDayLimitFight"),
                this._pkgMap.AddPkg(t.ID_DceGetGuardRank, "DceGetGuardRank"),
                this._pkgMap.AddPkg(t.ID_DceGetMailProp, "DceGetMailProp"),
                this._pkgMap.AddPkg(t.ID_DceGetMedal, "DceGetMedal"),
                this._pkgMap.AddPkg(t.ID_DceGetTactic, "DceGetTactic"),
                this._pkgMap.AddPkg(t.ID_DceGetWeakCamp, "DceGetWeakCamp"),
                this._pkgMap.AddPkg(t.ID_DceGhostShip, "DceGhostShip"),
                this._pkgMap.AddPkg(t.ID_DceGhostShipData, "DceGhostShipData"),
                this._pkgMap.AddPkg(t.ID_DceGuardStage, "DceGuardStage"),
                this._pkgMap.AddPkg(t.ID_DceGuideStep, "DceGuideStep"),
                this._pkgMap.AddPkg(t.ID_DceGuildApply, "DceGuildApply"),
                this._pkgMap.AddPkg(t.ID_DceGuildApplyList, "DceGuildApplyList"),
                this._pkgMap.AddPkg(t.ID_DceGuildApproval, "DceGuildApproval"),
                this._pkgMap.AddPkg(t.ID_DceGuildBuyGift, "DceGuildBuyGift"),
                this._pkgMap.AddPkg(t.ID_DceGuildCancelApply, "DceGuildCancelApply"),
                this._pkgMap.AddPkg(t.ID_DceGuildData, "DceGuildData"),
                this._pkgMap.AddPkg(t.ID_DceGuildDemise, "DceGuildDemise"),
                this._pkgMap.AddPkg(t.ID_DceGuildDismiss, "DceGuildDismiss"),
                this._pkgMap.AddPkg(t.ID_DceGuildDismissCancel, "DceGuildDismissCancel"),
                this._pkgMap.AddPkg(t.ID_DceGuildDonate, "DceGuildDonate"),
                this._pkgMap.AddPkg(t.ID_DceGuildExpel, "DceGuildExpel"),
                this._pkgMap.AddPkg(t.ID_DceGuildFireDeputy, "DceGuildFireDeputy"),
                this._pkgMap.AddPkg(t.ID_DceGuildInvite, "DceGuildInvite"),
                this._pkgMap.AddPkg(t.ID_DceGuildList, "DceGuildList"),
                this._pkgMap.AddPkg(t.ID_DceGuildMemberList, "DceGuildMemberList"),
                this._pkgMap.AddPkg(t.ID_DceGuildQuit, "DceGuildQuit"),
                this._pkgMap.AddPkg(t.ID_DceGuildSetDeputy, "DceGuildSetDeputy"),
                this._pkgMap.AddPkg(t.ID_DceGuildSetMedal, "DceGuildSetMedal"),
                this._pkgMap.AddPkg(t.ID_DceGuildUpgrade, "DceGuildUpgrade"),
                this._pkgMap.AddPkg(t.ID_DceHeartbeat, "DceHeartbeat"),
                this._pkgMap.AddPkg(t.ID_DceInvitedList, "DceInvitedList"),
                this._pkgMap.AddPkg(t.ID_DceInviteFriend, "DceInviteFriend"),
                this._pkgMap.AddPkg(t.ID_DceLimitShip, "DceLimitShip"),
                this._pkgMap.AddPkg(t.ID_DceLimitShipData, "DceLimitShipData"),
                this._pkgMap.AddPkg(t.ID_DceLuckyGoddessData, "DceLuckyGoddessData"),
                this._pkgMap.AddPkg(t.ID_DceLuckyGoddessForFree, "DceLuckyGoddessForFree"),
                this._pkgMap.AddPkg(t.ID_DceLuckyWheelActivity, "DceLuckyWheelActivity"),
                this._pkgMap.AddPkg(t.ID_DceLuckyWheelActivityData, "DceLuckyWheelActivityData"),
                this._pkgMap.AddPkg(t.ID_DceMailList, "DceMailList"),
                this._pkgMap.AddPkg(t.ID_DceMedalData, "DceMedalData"),
                this._pkgMap.AddPkg(t.ID_DceMilitaryRankGetDailyReward, "DceMilitaryRankGetDailyReward"),
                this._pkgMap.AddPkg(t.ID_DceMilitaryRankInfo, "DceMilitaryRankInfo"),
                this._pkgMap.AddPkg(t.ID_DceMilitaryRankUpgrad, "DceMilitaryRankUpgrad"),
                this._pkgMap.AddPkg(t.ID_DceMisteryShopRefresh, "DceMisteryShopRefresh"),
                this._pkgMap.AddPkg(t.ID_DceModifyDeclaration, "DceModifyDeclaration"),
                this._pkgMap.AddPkg(t.ID_DceModifyNotify, "DceModifyNotify"),
                this._pkgMap.AddPkg(t.ID_DceMonthCard, "DceMonthCard"),
                this._pkgMap.AddPkg(t.ID_DceMonthSignTake, "DceMonthSignTake"),
                this._pkgMap.AddPkg(t.ID_DceNewDay, "DceNewDay"),
                this._pkgMap.AddPkg(t.ID_DceOwnedPaper, "DceOwnedPaper"),
                this._pkgMap.AddPkg(t.ID_DcePaperChargeCount, "DcePaperChargeCount"),
                this._pkgMap.AddPkg(t.ID_DcePaperList, "DcePaperList"),
                this._pkgMap.AddPkg(t.ID_DcePaperPieceList, "DcePaperPieceList"),
                this._pkgMap.AddPkg(t.ID_DcePartPieceList, "DcePartPieceList"),
                this._pkgMap.AddPkg(t.ID_DcePartsList, "DcePartsList"),
                this._pkgMap.AddPkg(t.ID_DcePropList, "DcePropList"),
                this._pkgMap.AddPkg(t.ID_DceQuestionAnswer, "DceQuestionAnswer"),
                this._pkgMap.AddPkg(t.ID_DceQuestionList, "DceQuestionList"),
                this._pkgMap.AddPkg(t.ID_DceQuestionRank, "DceQuestionRank"),
                this._pkgMap.AddPkg(t.ID_DceRankList, "DceRankList"),
                this._pkgMap.AddPkg(t.ID_DceRecElectricList, "DceRecElectricList"),
                this._pkgMap.AddPkg(t.ID_DceRecommandInviteList, "DceRecommandInviteList"),
                this._pkgMap.AddPkg(t.ID_DceRefuseAddFriend, "DceRefuseAddFriend"),
                this._pkgMap.AddPkg(t.ID_DceRemouldParts, "DceRemouldParts"),
                this._pkgMap.AddPkg(t.ID_DceRemouldShip, "DceRemouldShip"),
                this._pkgMap.AddPkg(t.ID_DceRenameRole, "DceRenameRole"),
                this._pkgMap.AddPkg(t.ID_DceRenameShip, "DceRenameShip"),
                this._pkgMap.AddPkg(t.ID_DceResetGuard, "DceResetGuard"),
                this._pkgMap.AddPkg(t.ID_DceResetStageCount, "DceResetStageCount"),
                this._pkgMap.AddPkg(t.ID_DceRetireShip, "DceRetireShip"),
                this._pkgMap.AddPkg(t.ID_DceRobberyList, "DceRobberyList"),
                this._pkgMap.AddPkg(t.ID_DceSalePaper, "DceSalePaper"),
                this._pkgMap.AddPkg(t.ID_DceSaveTrain, "DceSaveTrain"),
                this._pkgMap.AddPkg(t.ID_DceScienceList, "DceScienceList"),
                this._pkgMap.AddPkg(t.ID_DceScoutSoldier, "DceScoutSoldier"),
                this._pkgMap.AddPkg(t.ID_DceSearchGuild, "DceSearchGuild"),
                this._pkgMap.AddPkg(t.ID_DceSearchPlayer, "DceSearchPlayer"),
                this._pkgMap.AddPkg(t.ID_DceSellProp, "DceSellProp"),
                this._pkgMap.AddPkg(t.ID_DceSendElectric, "DceSendElectric"),
                this._pkgMap.AddPkg(t.ID_DceSendMail, "DceSendMail"),
                this._pkgMap.AddPkg(t.ID_DceSetCaption, "DceSetCaption"),
                this._pkgMap.AddPkg(t.ID_DceSetRole, "DceSetRole"),
                this._pkgMap.AddPkg(t.ID_DceSetSoldier, "DceSetSoldier"),
                this._pkgMap.AddPkg(t.ID_DceSetTactic, "DceSetTactic"),
                this._pkgMap.AddPkg(t.ID_DceSetVerifyOptions, "DceSetVerifyOptions"),
                this._pkgMap.AddPkg(t.ID_DceSevenDaysExchange, "DceSevenDaysExchange"),
                this._pkgMap.AddPkg(t.ID_DceSevenDaysExchangeData, "DceSevenDaysExchangeData"),
                this._pkgMap.AddPkg(t.ID_DceShipList, "DceShipList"),
                this._pkgMap.AddPkg(t.ID_DceShopData, "DceShopData"),
                this._pkgMap.AddPkg(t.ID_DceSoldierList, "DceSoldierList"),
                this._pkgMap.AddPkg(t.ID_DceSoul, "DceSoul"),
                this._pkgMap.AddPkg(t.ID_DceSoulEat, "DceSoulEat"),
                this._pkgMap.AddPkg(t.ID_DceSoulList, "DceSoulList"),
                this._pkgMap.AddPkg(t.ID_DceSpy, "DceSpy"),
                this._pkgMap.AddPkg(t.ID_DceSpyData, "DceSpyData"),
                this._pkgMap.AddPkg(t.ID_DceStageList, "DceStageList"),
                this._pkgMap.AddPkg(t.ID_DceTrain, "DceTrain"),
                this._pkgMap.AddPkg(t.ID_DceUnEquipParts, "DceUnEquipParts"),
                this._pkgMap.AddPkg(t.ID_DceUnEquipSoul, "DceUnEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DceUpdateElectric, "DceUpdateElectric"),
                this._pkgMap.AddPkg(t.ID_DceUpdateOil, "DceUpdateOil"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeBuild, "DceUpgradeBuild"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeParts, "DceUpgradeParts"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeScience, "DceUpgradeScience"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeShip, "DceUpgradeShip"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeSkill, "DceUpgradeSkill"),
                this._pkgMap.AddPkg(t.ID_DceUseProp, "DceUseProp"),
                this._pkgMap.AddPkg(t.ID_DceUserComeBackReward, "DceUserComeBackReward"),
                this._pkgMap.AddPkg(t.ID_DceUserData, "DceUserData"),
                this._pkgMap.AddPkg(t.ID_DceGoddessReward, "DceGoddessReward"),
                this._pkgMap.AddPkg(t.ID_DceGoddessRewardData, "DceGoddessRewardData"),
                this._pkgMap.AddPkg(t.ID_DceLuckyCatDataRequest, "DceLuckyCatDataRequest"),
                this._pkgMap.AddPkg(t.ID_DceLuckyCatRequest, "DceLuckyCatRequest"),
                this._pkgMap.AddPkg(t.ID_DceLuckBoxPointExchange, "DceLuckBoxPointExchange"),
                this._pkgMap.AddPkg(t.ID_DceLuckBoxPointExchangeOpen, "DceLuckBoxPointExchangeOpen"),
                this._pkgMap.AddPkg(t.ID_DceLoginPokerOpen, "DceLoginPokerOpen"),
                this._pkgMap.AddPkg(t.ID_DceLoginPokerAction, "DceLoginPokerAction"),
                this._pkgMap.AddPkg(t.ID_DceLoginPokerFinal, "DceLoginPokerFinal"),
                this._pkgMap.AddPkg(t.ID_DceReductionParts, "DceReductionParts"),
                this._pkgMap.AddPkg(t.ID_DceBonusFlyDataRequest, "DceBonusFlyDataRequest"),
                this._pkgMap.AddPkg(t.ID_DceBonusFlyRequest, "DceBonusFlyRequest"),
                this._pkgMap.AddPkg(t.ID_DceRechargeSevenDayRequest, "DceRechargeSevenDayRequest"),
                this._pkgMap.AddPkg(t.ID_DceRechargeSevenDayRequestData, "DceRechargeSevenDayRequestData"),
                this._pkgMap.AddPkg(t.ID_DceEnterCenterCampBattle, "DceEnterCenterCampBattle"),
                this._pkgMap.AddPkg(t.ID_DceCenterCampBattleData, "DceCenterCampBattleData"),
                this._pkgMap.AddPkg(t.ID_DceCenterCampBattleMove, "DceCenterCampBattleMove"),
                this._pkgMap.AddPkg(t.ID_DceCenterCampBattleResult, "DceCenterCampBattleResult"),
                this._pkgMap.AddPkg(t.ID_DceClearCenterCampBattleCD, "DceClearCenterCampBattleCD"),
                this._pkgMap.AddPkg(t.ID_DceCenterCampBattleRankList, "DceCenterCampBattleRankList"),
                this._pkgMap.AddPkg(t.ID_DceReductionPartsInfo, "DceReductionPartsInfo"),
                this._pkgMap.AddPkg(t.ID_DceUsePaperPieceGift, "DceUsePaperPieceGift"),
                this._pkgMap.AddPkg(t.ID_DceOnearmedBanditDataRequest, "DceOnearmedBanditDataRequest"),
                this._pkgMap.AddPkg(t.ID_DceOnearmedBanditRequest, "DceOnearmedBanditRequest"),
                this._pkgMap.AddPkg(t.ID_DceValentineDataRequest, "DceValentineDataRequest"),
                this._pkgMap.AddPkg(t.ID_DceValentineGiveGift, "DceValentineGiveGift"),
                this._pkgMap.AddPkg(t.ID_DceCampBattleBuy, "DceCampBattleBuy"),
                this._pkgMap.AddPkg(t.ID_DceCenterCampBattleBuy, "DceCenterCampBattleBuy"),
                this._pkgMap.AddPkg(t.ID_DceLuckyGoddnessForCharge, "DceLuckyGoddnessForCharge"),
                this._pkgMap.AddPkg(t.ID_DceShipFormationInfo, "DceShipFormationInfo"),
                this._pkgMap.AddPkg(t.ID_DceShipFormationLevelUp, "DceShipFormationLevelUp"),
                this._pkgMap.AddPkg(t.ID_DceShipFormationChoose, "DceShipFormationChoose"),
                this._pkgMap.AddPkg(t.ID_DceRegSecondDayGift, "DceRegSecondDayGift"),
                this._pkgMap.AddPkg(t.ID_DceBuySpyItem, "DceBuySpyItem"),
                this._pkgMap.AddPkg(t.ID_DceChallengeDataRequest, "DceChallengeDataRequest"),
                this._pkgMap.AddPkg(t.ID_DceChallengeSignUp, "DceChallengeSignUp"),
                this._pkgMap.AddPkg(t.ID_DceChallengeFight, "DceChallengeFight"),
                this._pkgMap.AddPkg(t.ID_DceChallengeAction, "DceChallengeAction"),
                this._pkgMap.AddPkg(t.ID_DceChallengeEnemyData, "DceChallengeEnemyData"),
                this._pkgMap.AddPkg(t.ID_DceChallengeRevenge, "DceChallengeRevenge"),
                this._pkgMap.AddPkg(t.ID_DceChallengeRefresh, "DceChallengeRefresh"),
                this._pkgMap.AddPkg(t.ID_DceChallengeRank, "DceChallengeRank"),
                this._pkgMap.AddPkg(t.ID_DceChallengeChampion, "DceChallengeChampion"),
                this._pkgMap.AddPkg(t.ID_DceChallengeWorship, "DceChallengeWorship"),
                this._pkgMap.AddPkg(t.ID_DceChallengeBuy, "DceChallengeBuy"),
                this._pkgMap.AddPkg(t.ID_DceChallengeRefreshCharge, "DceChallengeRefreshCharge"),
                this._pkgMap.AddPkg(t.ID_DceBuyRecruitItem, "DceBuyRecruitItem"),
                this._pkgMap.AddPkg(t.ID_DceCaptainData, "DceCaptainData"),
                this._pkgMap.AddPkg(t.ID_DceCaptainList, "DceCaptainList"),
                this._pkgMap.AddPkg(t.ID_DceCaptainPieceList, "DceCaptainPieceList"),
                this._pkgMap.AddPkg(t.ID_DceComposeCaptain, "DceComposeCaptain"),
                this._pkgMap.AddPkg(t.ID_DceEquipCaptain, "DceEquipCaptain"),
                this._pkgMap.AddPkg(t.ID_DceExchangeCaptain, "DceExchangeCaptain"),
                this._pkgMap.AddPkg(t.ID_DceFireCaptain, "DceFireCaptain"),
                this._pkgMap.AddPkg(t.ID_DceLimitCaptain, "DceLimitCaptain"),
                this._pkgMap.AddPkg(t.ID_DceLimitCaptainData, "DceLimitCaptainData"),
                this._pkgMap.AddPkg(t.ID_DcePromoteCaptain, "DcePromoteCaptain"),
                this._pkgMap.AddPkg(t.ID_DceRecruitCaptain, "DceRecruitCaptain"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeCaptain, "DceUpgradeCaptain"),
                this._pkgMap.AddPkg(t.ID_DceUseSuperCaptainGift, "DceUseSuperCaptainGift"),
                this._pkgMap.AddPkg(t.ID_DceLimitShipBuyItem, "DceLimitShipBuyItem"),
                this._pkgMap.AddPkg(t.ID_DceBuyLimitCaptain, "DceBuyLimitCaptain"),
                this._pkgMap.AddPkg(t.ID_DceBuyGhostShip, "DceBuyGhostShip"),
                this._pkgMap.AddPkg(t.ID_DceCampBattleSetTrustee, "DceCampBattleSetTrustee"),
                this._pkgMap.AddPkg(t.ID_DceMedalPromote, "DceMedalPromote"),
                this._pkgMap.AddPkg(t.ID_DceSoulDecompose, "DceSoulDecompose"),
                this._pkgMap.AddPkg(t.ID_DceSoulRestore, "DceSoulRestore"),
                this._pkgMap.AddPkg(t.ID_DceSuperExchangeInfo, "DceSuperExchangeInfo"),
                this._pkgMap.AddPkg(t.ID_DceSuperExchangeItem, "DceSuperExchangeItem"),
                this._pkgMap.AddPkg(t.ID_DceGuildScienceList, "DceGuildScienceList"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeGuildScience, "DceUpgradeGuildScience"),
                this._pkgMap.AddPkg(t.ID_DceClearGuildBattleCD, "DceClearGuildBattleCD"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleBuy, "DceGuildBattleBuy"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleData, "DceGuildBattleData"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleEnter, "DceGuildBattleEnter"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleMove, "DceGuildBattleMove"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattlePrepare, "DceGuildBattlePrepare"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleRankList, "DceGuildBattleRankList"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleResult, "DceGuildBattleResult"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleSignUp, "DceGuildBattleSignUp"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleSignUpList, "DceGuildBattleSignUpList"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandOpen, "DceGoldIslandOpen"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandSearch, "DceGoldIslandSearch"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandOccupy, "DceGoldIslandOccupy"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandHelp, "DceGoldIslandHelp"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandInviteHelp, "DceGoldIslandInviteHelp"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandDelayTime, "DceGoldIslandDelayTime"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandInviteMemberlist, "DceGoldIslandInviteMemberlist"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandAgreeApply, "DceGoldIslandAgreeApply"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandApplyHelp, "DceGoldIslandApplyHelp"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandCancel, "DceGoldIslandCancel"),
                this._pkgMap.AddPkg(t.ID_DceChangeRole, "DceChangeRole"),
                this._pkgMap.AddPkg(t.ID_DceArmadaData, "DceArmadaData"),
                this._pkgMap.AddPkg(t.ID_DceLimitTimeShopBuy, "DceLimitTimeShopBuy"),
                this._pkgMap.AddPkg(t.ID_DceLimitTimeShopInfo, "DceLimitTimeShopInfo"),
                this._pkgMap.AddPkg(t.ID_DceComposeSouls, "DceComposeSouls"),
                this._pkgMap.AddPkg(t.ID_DceSoulPieceList, "DceSoulPieceList"),
                this._pkgMap.AddPkg(t.ID_DceGetTaskReward, "DceGetTaskReward"),
                this._pkgMap.AddPkg(t.ID_DceTaskRewardData, "DceTaskRewardData"),
                this._pkgMap.AddPkg(t.ID_DceExchangeCaptainCount, "DceExchangeCaptainCount"),
                this._pkgMap.AddPkg(t.ID_DcePlotCopyWarBattleInfo, "DcePlotCopyWarBattleInfo"),
                this._pkgMap.AddPkg(t.ID_DcePlotCopyWarEnter, "DcePlotCopyWarEnter"),
                this._pkgMap.AddPkg(t.ID_DcePlotCopyWarMove, "DcePlotCopyWarMove"),
                this._pkgMap.AddPkg(t.ID_DcePlotCopyWarRollStep, "DcePlotCopyWarRollStep"),
                this._pkgMap.AddPkg(t.ID_DceActivateTalent, "DceActivateTalent"),
                this._pkgMap.AddPkg(t.ID_DceTalentList, "DceTalentList"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeTalent, "DceUpgradeTalent"),
                this._pkgMap.AddPkg(t.ID_DcePlotCopyWarOpen, "DcePlotCopyWarOpen"),
                this._pkgMap.AddPkg(t.ID_DceAutoUpgradeScience, "DceAutoUpgradeScience"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaBack, "DceGlobalArenaBack"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaBattle, "DceGlobalArenaBattle"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaBattleProgress, "DceGlobalArenaBattleProgress"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaData, "DceGlobalArenaData"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaEncourage, "DceGlobalArenaEncourage"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaPlayOffList, "DceGlobalArenaPlayOffList"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaProstrate, "DceGlobalArenaProstrate"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaSelfInfo, "DceGlobalArenaSelfInfo"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaUpdateTactic, "DceGlobalArenaUpdateTactic"),
                this._pkgMap.AddPkg(t.ID_DceSignUpAudition, "DceSignUpAudition"),
                this._pkgMap.AddPkg(t.ID_DceSalute, "DceSalute"),
                this._pkgMap.AddPkg(t.ID_DceSaluteData, "DceSaluteData"),
                this._pkgMap.AddPkg(t.ID_DceGoldLeaderExplore, "DceGoldLeaderExplore"),
                this._pkgMap.AddPkg(t.ID_DceGoldLeaderGetOrder, "DceGoldLeaderGetOrder"),
                this._pkgMap.AddPkg(t.ID_DceGoldLeaderInfo, "DceGoldLeaderInfo"),
                this._pkgMap.AddPkg(t.ID_DceGoldLeaderBuyOrder, "DceGoldLeaderBuyOrder"),
                this._pkgMap.AddPkg(t.ID_DceLuckyGodBuyItem, "DceLuckyGodBuyItem"),
                this._pkgMap.AddPkg(t.ID_DceMonthCardData, "DceMonthCardData"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaChamption, "DceGlobalArenaChamption"),
                this._pkgMap.AddPkg(t.ID_DceAutoEquipSeikoSoldier, "DceAutoEquipSeikoSoldier"),
                this._pkgMap.AddPkg(t.ID_DceComposeSeiko, "DceComposeSeiko"),
                this._pkgMap.AddPkg(t.ID_DceDecomposeSeiko, "DceDecomposeSeiko"),
                this._pkgMap.AddPkg(t.ID_DceEquipSeiko, "DceEquipSeiko"),
                this._pkgMap.AddPkg(t.ID_DceForgeSeiko, "DceForgeSeiko"),
                this._pkgMap.AddPkg(t.ID_DceReductionSeiko, "DceReductionSeiko"),
                this._pkgMap.AddPkg(t.ID_DceReductionSeikoInfo, "DceReductionSeikoInfo"),
                this._pkgMap.AddPkg(t.ID_DceRemouldSeiko, "DceRemouldSeiko"),
                this._pkgMap.AddPkg(t.ID_DceSeikoList, "DceSeikoList"),
                this._pkgMap.AddPkg(t.ID_DceSeikoPieceList, "DceSeikoPieceList"),
                this._pkgMap.AddPkg(t.ID_DceUnEquipSeiko, "DceUnEquipSeiko"),
                this._pkgMap.AddPkg(t.ID_DceUpgradeSeiko, "DceUpgradeSeiko"),
                this._pkgMap.AddPkg(t.ID_DceSaveForge, "DceSaveForge"),
                this._pkgMap.AddPkg(t.ID_DceEnterStageTower, "DceEnterStageTower"),
                this._pkgMap.AddPkg(t.ID_DceSetTacticForStageTower, "DceSetTacticForStageTower"),
                this._pkgMap.AddPkg(t.ID_DceGetTacticForStageTower, "DceGetTacticForStageTower"),
                this._pkgMap.AddPkg(t.ID_DceUpdateEnemyForStageTower, "DceUpdateEnemyForStageTower"),
                this._pkgMap.AddPkg(t.ID_DceStageTowerPurchaseAndResurr, "DceStageTowerPurchaseAndResurr"),
                this._pkgMap.AddPkg(t.ID_DceFindEnemyForStageTower, "DceFindEnemyForStageTower"),
                this._pkgMap.AddPkg(t.ID_DceSeikoShopData, "DceSeikoShopData"),
                this._pkgMap.AddPkg(t.ID_DceSeikoShopHandle, "DceSeikoShopHandle"),
                this._pkgMap.AddPkg(t.ID_DceOnearmedBanditTen, "DceOnearmedBanditTen"),
                this._pkgMap.AddPkg(t.ID_DcePaperLockOperation, "DcePaperLockOperation"),
                this._pkgMap.AddPkg(t.ID_DceShipLockOperation, "DceShipLockOperation"),
                this._pkgMap.AddPkg(t.ID_DceCaptainLockOpt, "DceCaptainLockOpt"),
                this._pkgMap.AddPkg(t.ID_DceRenameGuild, "DceRenameGuild"),
                this._pkgMap.AddPkg(t.ID_DceSeikoLockOpt, "DceSeikoLockOpt"),
                this._pkgMap.AddPkg(t.ID_DceSoulLockOpt, "DceSoulLockOpt"),
                this._pkgMap.AddPkg(t.ID_DcePartsLockOpt, "DcePartsLockOpt"),
                this._pkgMap.AddPkg(t.ID_DceGoldIslandCancelHelped, "DceGoldIslandCancelHelped"),
                this._pkgMap.AddPkg(t.ID_DceGlobalArenaCheckEncourage, "DceGlobalArenaCheckEncourage"),
                this._pkgMap.AddPkg(t.ID_DceGuildBattleAuto, "DceGuildBattleAuto"),
                this._pkgMap.AddPkg(t.ID_DceTuanGouOpt, "DceTuanGouOpt"),
                this._pkgMap.AddPkg(t.ID_DceStageTowerAcityData, "DceStageTowerAcityData"),
                this._pkgMap.AddPkg(t.ID_DceStageTowerAcityHandle, "DceStageTowerAcityHandle"),
                this._pkgMap.AddPkg(t.ID_DceSeiKoExchange, "DceSeiKoExchange"),
                this._pkgMap.AddPkg(t.ID_DceSeiKoScore, "DceSeiKoScore"),
                this._pkgMap.AddPkg(t.ID_DceWeal, "DceWeal"),
                this._pkgMap.AddPkg(t.ID_DceRechargeBackGift, "DceRechargeBackGift"),
                this._pkgMap.AddPkg(t.ID_DceRechargeBackGiftEnter, "DceRechargeBackGiftEnter"),
                this._pkgMap.AddPkg(t.ID_DceCenterCampBattleCampRank, "DceCenterCampBattleCampRank"),
                this._pkgMap.AddPkg(t.ID_DceUseSoulGift, "DceUseSoulGift"),
                this._pkgMap.AddPkg(t.ID_DceAutoEquipSoul, "DceAutoEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DceUnAutoEquipSoul, "DceUnAutoEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleSign, "DceGlobalGuildBattleSign"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleAdjust, "DceGlobalGuildBattleAdjust"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleEncourage, "DceGlobalGuildBattleEncourage"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleUpdate, "DceGlobalGuildBattleUpdate"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleData, "DceGlobalGuildBattleData"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleSeeMember, "DceGlobalGuildBattleSeeMember"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleProstrate, "DceGlobalGuildBattleProstrate"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleGuildGroupVs, "DceGlobalGuildBattleGuildGroupVs"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleGuildVs, "DceGlobalGuildBattleGuildVs"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleVsBattle, "DceGlobalGuildBattleVsBattle"),
                this._pkgMap.AddPkg(t.ID_DceScoutGuild, "DceScoutGuild"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleChamptionMember, "DceGlobalGuildBattleChamptionMember"),
                this._pkgMap.AddPkg(t.ID_DceGlobalGuildBattleChamptionList, "DceGlobalGuildBattleChamptionList"),
                this._pkgMap.AddPkg(t.ID_DceActivityWebData, "DceActivityWebData"),
                this._pkgMap.AddPkg(t.ID_DceFocusAward, "DceFocusAward"),
                this._pkgMap.AddPkg(t.ID_DceExchangeCode, "DceExchangeCode"),
                this._pkgMap.AddPkg(t.ID_DseAccBind, "DseAccBind"),
                this._pkgMap.AddPkg(t.ID_DseActiveTips, "DseActiveTips"),
                this._pkgMap.AddPkg(t.ID_DseActivity, "DseActivity"),
                this._pkgMap.AddPkg(t.ID_DseActivityData, "DseActivityData"),
                this._pkgMap.AddPkg(t.ID_DseAddFriend, "DseAddFriend"),
                this._pkgMap.AddPkg(t.ID_DseAddMail, "DseAddMail"),
                this._pkgMap.AddPkg(t.ID_DseAddOwnedPaper, "DseAddOwnedPaper"),
                this._pkgMap.AddPkg(t.ID_DseAddParts, "DseAddParts"),
                this._pkgMap.AddPkg(t.ID_DseAddShip, "DseAddShip"),
                this._pkgMap.AddPkg(t.ID_DseAllLastID, "DseAllLastID"),
                this._pkgMap.AddPkg(t.ID_DseApplyList, "DseApplyList"),
                this._pkgMap.AddPkg(t.ID_DseArenaData, "DseArenaData"),
                this._pkgMap.AddPkg(t.ID_DseArenaExchange, "DseArenaExchange"),
                this._pkgMap.AddPkg(t.ID_DseArenaList, "DseArenaList"),
                this._pkgMap.AddPkg(t.ID_DseAuthState, "DseAuthState"),
                this._pkgMap.AddPkg(t.ID_DseAutoEquipSoldier, "DseAutoEquipSoldier"),
                this._pkgMap.AddPkg(t.ID_DseAwardCenter, "DseAwardCenter"),
                this._pkgMap.AddPkg(t.ID_DseBattleInfo, "DseBattleInfo"),
                this._pkgMap.AddPkg(t.ID_DseBattleReview, "DseBattleReview"),
                this._pkgMap.AddPkg(t.ID_DseBattleStart, "DseBattleStart"),
                this._pkgMap.AddPkg(t.ID_DseBattleStartBySweep, "DseBattleStartBySweep"),
                this._pkgMap.AddPkg(t.ID_DseBlackList, "DseBlackList"),
                this._pkgMap.AddPkg(t.ID_DseBlackListOpt, "DseBlackListOpt"),
                this._pkgMap.AddPkg(t.ID_DseBroadcast, "DseBroadcast"),
                this._pkgMap.AddPkg(t.ID_DseBuy, "DseBuy"),
                this._pkgMap.AddPkg(t.ID_DseBuyGuard, "DseBuyGuard"),
                this._pkgMap.AddPkg(t.ID_DseBuyOil, "DseBuyOil"),
                this._pkgMap.AddPkg(t.ID_DseCampBattleData, "DseCampBattleData"),
                this._pkgMap.AddPkg(t.ID_DseCampBattleMove, "DseCampBattleMove"),
                this._pkgMap.AddPkg(t.ID_DseCampBattleMsg, "DseCampBattleMsg"),
                this._pkgMap.AddPkg(t.ID_DseCampBattleResult, "DseCampBattleResult"),
                this._pkgMap.AddPkg(t.ID_DseChargePaper, "DseChargePaper"),
                this._pkgMap.AddPkg(t.ID_DseChat, "DseChat"),
                this._pkgMap.AddPkg(t.ID_DseChatData, "DseChatData"),
                this._pkgMap.AddPkg(t.ID_DseChatMsg, "DseChatMsg"),
                this._pkgMap.AddPkg(t.ID_DseChatMsgLog, "DseChatMsgLog"),
                this._pkgMap.AddPkg(t.ID_DseCheckPlayerName, "DseCheckPlayerName"),
                this._pkgMap.AddPkg(t.ID_DseChristmasMineral, "DseChristmasMineral"),
                this._pkgMap.AddPkg(t.ID_DseChristmasMineralStart, "DseChristmasMineralStart"),
                this._pkgMap.AddPkg(t.ID_DseChristmasScroeExchange, "DseChristmasScroeExchange"),
                this._pkgMap.AddPkg(t.ID_DseChritmasLogin, "DseChritmasLogin"),
                this._pkgMap.AddPkg(t.ID_DseChritmasLottery, "DseChritmasLottery"),
                this._pkgMap.AddPkg(t.ID_DseChritmasLotteryDropList, "DseChritmasLotteryDropList"),
                this._pkgMap.AddPkg(t.ID_DseChritmasLotteryStart, "DseChritmasLotteryStart"),
                this._pkgMap.AddPkg(t.ID_DseClearCampBattleCD, "DseClearCampBattleCD"),
                this._pkgMap.AddPkg(t.ID_DseComposeParts, "DseComposeParts"),
                this._pkgMap.AddPkg(t.ID_DseConsumeExchange, "DseConsumeExchange"),
                this._pkgMap.AddPkg(t.ID_DseConsumeExchangeData, "DseConsumeExchangeData"),
                this._pkgMap.AddPkg(t.ID_DseCreateGuild, "DseCreateGuild"),
                this._pkgMap.AddPkg(t.ID_DseCreateShip, "DseCreateShip"),
                this._pkgMap.AddPkg(t.ID_DseDayLimitFightData, "DseDayLimitFightData"),
                this._pkgMap.AddPkg(t.ID_DseDecomposeParts, "DseDecomposeParts"),
                this._pkgMap.AddPkg(t.ID_DseDeleteFriend, "DseDeleteFriend"),
                this._pkgMap.AddPkg(t.ID_DseDelParts, "DseDelParts"),
                this._pkgMap.AddPkg(t.ID_DseDelShip, "DseDelShip"),
                this._pkgMap.AddPkg(t.ID_DseDrawAllElectric, "DseDrawAllElectric"),
                this._pkgMap.AddPkg(t.ID_DseDrawElectric, "DseDrawElectric"),
                this._pkgMap.AddPkg(t.ID_DseEnterArena, "DseEnterArena"),
                this._pkgMap.AddPkg(t.ID_DseEnterCampBattle, "DseEnterCampBattle"),
                this._pkgMap.AddPkg(t.ID_DseEnterGuard, "DseEnterGuard"),
                this._pkgMap.AddPkg(t.ID_DseEquipParts, "DseEquipParts"),
                this._pkgMap.AddPkg(t.ID_DseEquipSoul, "DseEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DseFriendList, "DseFriendList"),
                this._pkgMap.AddPkg(t.ID_DseFuncSwich, "DseFuncSwich"),
                this._pkgMap.AddPkg(t.ID_DseGetAward, "DseGetAward"),
                this._pkgMap.AddPkg(t.ID_DseGetCenterGold, "DseGetCenterGold"),
                this._pkgMap.AddPkg(t.ID_DseGetDayLimitFight, "DseGetDayLimitFight"),
                this._pkgMap.AddPkg(t.ID_DseGetGuardRank, "DseGetGuardRank"),
                this._pkgMap.AddPkg(t.ID_DseGetMailProp, "DseGetMailProp"),
                this._pkgMap.AddPkg(t.ID_DseGetMedal, "DseGetMedal"),
                this._pkgMap.AddPkg(t.ID_DseGetTactic, "DseGetTactic"),
                this._pkgMap.AddPkg(t.ID_DseGetWeakCamp, "DseGetWeakCamp"),
                this._pkgMap.AddPkg(t.ID_DseGhostShip, "DseGhostShip"),
                this._pkgMap.AddPkg(t.ID_DseGhostShipData, "DseGhostShipData"),
                this._pkgMap.AddPkg(t.ID_DseGuardStage, "DseGuardStage"),
                this._pkgMap.AddPkg(t.ID_DseGuildApply, "DseGuildApply"),
                this._pkgMap.AddPkg(t.ID_DseGuildApplyList, "DseGuildApplyList"),
                this._pkgMap.AddPkg(t.ID_DseGuildApproval, "DseGuildApproval"),
                this._pkgMap.AddPkg(t.ID_DseGuildBuyGift, "DseGuildBuyGift"),
                this._pkgMap.AddPkg(t.ID_DseGuildCancelApply, "DseGuildCancelApply"),
                this._pkgMap.AddPkg(t.ID_DseGuildData, "DseGuildData"),
                this._pkgMap.AddPkg(t.ID_DseGuildDemise, "DseGuildDemise"),
                this._pkgMap.AddPkg(t.ID_DseGuildDismiss, "DseGuildDismiss"),
                this._pkgMap.AddPkg(t.ID_DseGuildDismissCancel, "DseGuildDismissCancel"),
                this._pkgMap.AddPkg(t.ID_DseGuildDonate, "DseGuildDonate"),
                this._pkgMap.AddPkg(t.ID_DseGuildExpel, "DseGuildExpel"),
                this._pkgMap.AddPkg(t.ID_DseGuildFireDeputy, "DseGuildFireDeputy"),
                this._pkgMap.AddPkg(t.ID_DseGuildInvite, "DseGuildInvite"),
                this._pkgMap.AddPkg(t.ID_DseGuildList, "DseGuildList"),
                this._pkgMap.AddPkg(t.ID_DseGuildMemberList, "DseGuildMemberList"),
                this._pkgMap.AddPkg(t.ID_DseGuildQuit, "DseGuildQuit"),
                this._pkgMap.AddPkg(t.ID_DseGuildSetDeputy, "DseGuildSetDeputy"),
                this._pkgMap.AddPkg(t.ID_DseGuildSetMedal, "DseGuildSetMedal"),
                this._pkgMap.AddPkg(t.ID_DseGuildUpgrade, "DseGuildUpgrade"),
                this._pkgMap.AddPkg(t.ID_DseHeartbeat, "DseHeartbeat"),
                this._pkgMap.AddPkg(t.ID_DseInvitedList, "DseInvitedList"),
                this._pkgMap.AddPkg(t.ID_DseInviteFriend, "DseInviteFriend"),
                this._pkgMap.AddPkg(t.ID_DseLimitShip, "DseLimitShip"),
                this._pkgMap.AddPkg(t.ID_DseLimitShipData, "DseLimitShipData"),
                this._pkgMap.AddPkg(t.ID_DseLuckyGoddessData, "DseLuckyGoddessData"),
                this._pkgMap.AddPkg(t.ID_DseLuckyGoddessForCharge, "DseLuckyGoddessForCharge"),
                this._pkgMap.AddPkg(t.ID_DseLuckyGoddessForFree, "DseLuckyGoddessForFree"),
                this._pkgMap.AddPkg(t.ID_DseLuckyWheelActivity, "DseLuckyWheelActivity"),
                this._pkgMap.AddPkg(t.ID_DseLuckyWheelActivityData, "DseLuckyWheelActivityData"),
                this._pkgMap.AddPkg(t.ID_DseMailList, "DseMailList"),
                this._pkgMap.AddPkg(t.ID_DseMedalData, "DseMedalData"),
                this._pkgMap.AddPkg(t.ID_DseMilitaryRankGetDailyReward, "DseMilitaryRankGetDailyReward"),
                this._pkgMap.AddPkg(t.ID_DseMilitaryRankInfo, "DseMilitaryRankInfo"),
                this._pkgMap.AddPkg(t.ID_DseMilitaryRankUpgrad, "DseMilitaryRankUpgrad"),
                this._pkgMap.AddPkg(t.ID_DseMisteryShopRefresh, "DseMisteryShopRefresh"),
                this._pkgMap.AddPkg(t.ID_DseModifyDeclaration, "DseModifyDeclaration"),
                this._pkgMap.AddPkg(t.ID_DseModifyNotify, "DseModifyNotify"),
                this._pkgMap.AddPkg(t.ID_DseMonthCard, "DseMonthCard"),
                this._pkgMap.AddPkg(t.ID_DseMonthSignTake, "DseMonthSignTake"),
                this._pkgMap.AddPkg(t.ID_DseNewDay, "DseNewDay"),
                this._pkgMap.AddPkg(t.ID_DseOwnedPaper, "DseOwnedPaper"),
                this._pkgMap.AddPkg(t.ID_DseOwnedPaperFirstFlag, "DseOwnedPaperFirstFlag"),
                this._pkgMap.AddPkg(t.ID_DsePaperChargeCount, "DsePaperChargeCount"),
                this._pkgMap.AddPkg(t.ID_DsePaperList, "DsePaperList"),
                this._pkgMap.AddPkg(t.ID_DsePaperPieceList, "DsePaperPieceList"),
                this._pkgMap.AddPkg(t.ID_DsePartPieceList, "DsePartPieceList"),
                this._pkgMap.AddPkg(t.ID_DsePartsList, "DsePartsList"),
                this._pkgMap.AddPkg(t.ID_DsePropList, "DsePropList"),
                this._pkgMap.AddPkg(t.ID_DseQuestionAnswer, "DseQuestionAnswer"),
                this._pkgMap.AddPkg(t.ID_DseQuestionList, "DseQuestionList"),
                this._pkgMap.AddPkg(t.ID_DseQuestionRank, "DseQuestionRank"),
                this._pkgMap.AddPkg(t.ID_DseRankList, "DseRankList"),
                this._pkgMap.AddPkg(t.ID_DseRecElectricList, "DseRecElectricList"),
                this._pkgMap.AddPkg(t.ID_DseRecommandInviteList, "DseRecommandInviteList"),
                this._pkgMap.AddPkg(t.ID_DseRefuseAddFriend, "DseRefuseAddFriend"),
                this._pkgMap.AddPkg(t.ID_DseRemouldParts, "DseRemouldParts"),
                this._pkgMap.AddPkg(t.ID_DseRemouldShip, "DseRemouldShip"),
                this._pkgMap.AddPkg(t.ID_DseRenameRole, "DseRenameRole"),
                this._pkgMap.AddPkg(t.ID_DseRenameShip, "DseRenameShip"),
                this._pkgMap.AddPkg(t.ID_DseResetGuard, "DseResetGuard"),
                this._pkgMap.AddPkg(t.ID_DseResetStageCount, "DseResetStageCount"),
                this._pkgMap.AddPkg(t.ID_DseRetireShip, "DseRetireShip"),
                this._pkgMap.AddPkg(t.ID_DseRobberyList, "DseRobberyList"),
                this._pkgMap.AddPkg(t.ID_DseSalePaper, "DseSalePaper"),
                this._pkgMap.AddPkg(t.ID_DseScienceList, "DseScienceList"),
                this._pkgMap.AddPkg(t.ID_DseScoutSoldier, "DseScoutSoldier"),
                this._pkgMap.AddPkg(t.ID_DseSearchGuild, "DseSearchGuild"),
                this._pkgMap.AddPkg(t.ID_DseSearchPlayer, "DseSearchPlayer"),
                this._pkgMap.AddPkg(t.ID_DseSellProp, "DseSellProp"),
                this._pkgMap.AddPkg(t.ID_DseSendElectric, "DseSendElectric"),
                this._pkgMap.AddPkg(t.ID_DseSendMail, "DseSendMail"),
                this._pkgMap.AddPkg(t.ID_DseSetCaption, "DseSetCaption"),
                this._pkgMap.AddPkg(t.ID_DseSetRole, "DseSetRole"),
                this._pkgMap.AddPkg(t.ID_DseSetSoldier, "DseSetSoldier"),
                this._pkgMap.AddPkg(t.ID_DseSetTactic, "DseSetTactic"),
                this._pkgMap.AddPkg(t.ID_DseSetVerifyOptions, "DseSetVerifyOptions"),
                this._pkgMap.AddPkg(t.ID_DseSevenDaysExchange, "DseSevenDaysExchange"),
                this._pkgMap.AddPkg(t.ID_DseSevenDaysExchangeData, "DseSevenDaysExchangeData"),
                this._pkgMap.AddPkg(t.ID_DseShipList, "DseShipList"),
                this._pkgMap.AddPkg(t.ID_DseShopData, "DseShopData"),
                this._pkgMap.AddPkg(t.ID_DseSoldierList, "DseSoldierList"),
                this._pkgMap.AddPkg(t.ID_DseSoul, "DseSoul"),
                this._pkgMap.AddPkg(t.ID_DseSoulEat, "DseSoulEat"),
                this._pkgMap.AddPkg(t.ID_DseSoulList, "DseSoulList"),
                this._pkgMap.AddPkg(t.ID_DseSpy, "DseSpy"),
                this._pkgMap.AddPkg(t.ID_DseSpyData, "DseSpyData"),
                this._pkgMap.AddPkg(t.ID_DseStageData, "DseStageData"),
                this._pkgMap.AddPkg(t.ID_DseStageList, "DseStageList"),
                this._pkgMap.AddPkg(t.ID_DseStartServerActivity, "DseStartServerActivity"),
                this._pkgMap.AddPkg(t.ID_DseTrain, "DseTrain"),
                this._pkgMap.AddPkg(t.ID_DseUnEquipParts, "DseUnEquipParts"),
                this._pkgMap.AddPkg(t.ID_DseUnEquipSoul, "DseUnEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DseUpdateMail, "DseUpdateMail"),
                this._pkgMap.AddPkg(t.ID_DseUpdateParts, "DseUpdateParts"),
                this._pkgMap.AddPkg(t.ID_DseUpdateShip, "DseUpdateShip"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeBuild, "DseUpgradeBuild"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeParts, "DseUpgradeParts"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeScience, "DseUpgradeScience"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeShip, "DseUpgradeShip"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeSkill, "DseUpgradeSkill"),
                this._pkgMap.AddPkg(t.ID_DseUseProp, "DseUseProp"),
                this._pkgMap.AddPkg(t.ID_DseUserComeBack, "DseUserComeBack"),
                this._pkgMap.AddPkg(t.ID_DseUserComeBackReward, "DseUserComeBackReward"),
                this._pkgMap.AddPkg(t.ID_DseUserData, "DseUserData"),
                this._pkgMap.AddPkg(t.ID_DseGoddessReward, "DseGoddessReward"),
                this._pkgMap.AddPkg(t.ID_DseGoddessRewardData, "DseGoddessRewardData"),
                this._pkgMap.AddPkg(t.ID_DseLuckyCatDataRequest, "DseLuckyCatDataRequest"),
                this._pkgMap.AddPkg(t.ID_DseLuckyCatRequest, "DseLuckyCatRequest"),
                this._pkgMap.AddPkg(t.ID_DseLuckBoxPointExchange, "DseLuckBoxPointExchange"),
                this._pkgMap.AddPkg(t.ID_DseLuckBoxPointExchangeOpen, "DseLuckBoxPointExchangeOpen"),
                this._pkgMap.AddPkg(t.ID_DseLoginPokerOpen, "DseLoginPokerOpen"),
                this._pkgMap.AddPkg(t.ID_DseLoginPokerAction, "DseLoginPokerAction"),
                this._pkgMap.AddPkg(t.ID_DseLoginPokerFinal, "DseLoginPokerFinal"),
                this._pkgMap.AddPkg(t.ID_DseReductionParts, "DseReductionParts"),
                this._pkgMap.AddPkg(t.ID_DseBonusFlyDataRequest, "DseBonusFlyDataRequest"),
                this._pkgMap.AddPkg(t.ID_DseBonusFlyRequest, "DseBonusFlyRequest"),
                this._pkgMap.AddPkg(t.ID_DseRechargeSevenDayRequest, "DseRechargeSevenDayRequest"),
                this._pkgMap.AddPkg(t.ID_DseRechargeSevenDayRequestData, "DseRechargeSevenDayRequestData"),
                this._pkgMap.AddPkg(t.ID_DseCenterCampBattleData, "DseCenterCampBattleData"),
                this._pkgMap.AddPkg(t.ID_DseCenterCampBattleMove, "DseCenterCampBattleMove"),
                this._pkgMap.AddPkg(t.ID_DseCenterCampBattleMsg, "DseCenterCampBattleMsg"),
                this._pkgMap.AddPkg(t.ID_DseCenterCampBattleResult, "DseCenterCampBattleResult"),
                this._pkgMap.AddPkg(t.ID_DseClearCenterCampBattleCD, "DseClearCenterCampBattleCD"),
                this._pkgMap.AddPkg(t.ID_DseEnterCenterCampBattle, "DseEnterCenterCampBattle"),
                this._pkgMap.AddPkg(t.ID_DseReductionPartsInfo, "DseReductionPartsInfo"),
                this._pkgMap.AddPkg(t.ID_DseUsePaperPieceGift, "DseUsePaperPieceGift"),
                this._pkgMap.AddPkg(t.ID_DseOnearmedBanditDataRequest, "DseOnearmedBanditDataRequest"),
                this._pkgMap.AddPkg(t.ID_DseOnearmedBanditRequest, "DseOnearmedBanditRequest"),
                this._pkgMap.AddPkg(t.ID_DseValentineDataRequest, "DseValentineDataRequest"),
                this._pkgMap.AddPkg(t.ID_DseValentineGiveGift, "DseValentineGiveGift"),
                this._pkgMap.AddPkg(t.ID_DseCampBattleBuy, "DseCampBattleBuy"),
                this._pkgMap.AddPkg(t.ID_DseCenterCampBattleBuy, "DseCenterCampBattleBuy"),
                this._pkgMap.AddPkg(t.ID_DseAddSoulOwnedPaper, "DseAddSoulOwnedPaper"),
                this._pkgMap.AddPkg(t.ID_DseOwnedSoulPaperFirstFlag, "DseOwnedSoulPaperFirstFlag"),
                this._pkgMap.AddPkg(t.ID_DseLuckyGoddnessForCharge, "DseLuckyGoddnessForCharge"),
                this._pkgMap.AddPkg(t.ID_DseShipFormationInfo, "DseShipFormationInfo"),
                this._pkgMap.AddPkg(t.ID_DseShipFormationLevelUp, "DseShipFormationLevelUp"),
                this._pkgMap.AddPkg(t.ID_DseShipFormationStarUp, "DseShipFormationStarUp"),
                this._pkgMap.AddPkg(t.ID_DseShipFormationAddNotice, "DseShipFormationAddNotice"),
                this._pkgMap.AddPkg(t.ID_DseShipFormationChoose, "DseShipFormationChoose"),
                this._pkgMap.AddPkg(t.ID_DseShipFormationFistFlag, "DseShipFormationFistFlag"),
                this._pkgMap.AddPkg(t.ID_DseRegSecondDayGift, "DseRegSecondDayGift"),
                this._pkgMap.AddPkg(t.ID_DseBuySpyItem, "DseBuySpyItem"),
                this._pkgMap.AddPkg(t.ID_DseChallengeDataRequest, "DseChallengeDataRequest"),
                this._pkgMap.AddPkg(t.ID_DseChallengeSignUp, "DseChallengeSignUp"),
                this._pkgMap.AddPkg(t.ID_DseChallengeFight, "DseChallengeFight"),
                this._pkgMap.AddPkg(t.ID_DseChallengeAction, "DseChallengeAction"),
                this._pkgMap.AddPkg(t.ID_DseChallengeEnemyData, "DseChallengeEnemyData"),
                this._pkgMap.AddPkg(t.ID_DseChallengeRevenge, "DseChallengeRevenge"),
                this._pkgMap.AddPkg(t.ID_DseChallengeRefresh, "DseChallengeRefresh"),
                this._pkgMap.AddPkg(t.ID_DseChallengeRank, "DseChallengeRank"),
                this._pkgMap.AddPkg(t.ID_DseChallengeChampion, "DseChallengeChampion"),
                this._pkgMap.AddPkg(t.ID_DseChallengeWorship, "DseChallengeWorship"),
                this._pkgMap.AddPkg(t.ID_DseChallengeBuy, "DseChallengeBuy"),
                this._pkgMap.AddPkg(t.ID_DseChallengeRefreshCharge, "DseChallengeRefreshCharge"),
                this._pkgMap.AddPkg(t.ID_DseBuyRecruitItem, "DseBuyRecruitItem"),
                this._pkgMap.AddPkg(t.ID_DseCaptainData, "DseCaptainData"),
                this._pkgMap.AddPkg(t.ID_DseCaptainList, "DseCaptainList"),
                this._pkgMap.AddPkg(t.ID_DseCaptainPieceList, "DseCaptainPieceList"),
                this._pkgMap.AddPkg(t.ID_DseComposeCaptain, "DseComposeCaptain"),
                this._pkgMap.AddPkg(t.ID_DseEquipCaptain, "DseEquipCaptain"),
                this._pkgMap.AddPkg(t.ID_DseExchangeCaptain, "DseExchangeCaptain"),
                this._pkgMap.AddPkg(t.ID_DseFireCaptain, "DseFireCaptain"),
                this._pkgMap.AddPkg(t.ID_DseLimitCaptain, "DseLimitCaptain"),
                this._pkgMap.AddPkg(t.ID_DseLimitCaptainData, "DseLimitCaptainData"),
                this._pkgMap.AddPkg(t.ID_DsePromoteCaptain, "DsePromoteCaptain"),
                this._pkgMap.AddPkg(t.ID_DseRecruitCaptain, "DseRecruitCaptain"),
                this._pkgMap.AddPkg(t.ID_DseUpdateCaptain, "DseUpdateCaptain"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeCaptain, "DseUpgradeCaptain"),
                this._pkgMap.AddPkg(t.ID_DseCaptainFirstFlag, "DseCaptainFirstFlag"),
                this._pkgMap.AddPkg(t.ID_DseChallengeLogin, "DseChallengeLogin"),
                this._pkgMap.AddPkg(t.ID_DseUseSuperCaptainGift, "DseUseSuperCaptainGift"),
                this._pkgMap.AddPkg(t.ID_DseLimitShipBuyItem, "DseLimitShipBuyItem"),
                this._pkgMap.AddPkg(t.ID_DseBuyLimitCaptain, "DseBuyLimitCaptain"),
                this._pkgMap.AddPkg(t.ID_DseBuyGhostShip, "DseBuyGhostShip"),
                this._pkgMap.AddPkg(t.ID_DseCampBattleSetTrustee, "DseCampBattleSetTrustee"),
                this._pkgMap.AddPkg(t.ID_DseCaptainPaperAdd, "DseCaptainPaperAdd"),
                this._pkgMap.AddPkg(t.ID_DseCaptainPaperFirstFlag, "DseCaptainPaperFirstFlag"),
                this._pkgMap.AddPkg(t.ID_DseMedalPromote, "DseMedalPromote"),
                this._pkgMap.AddPkg(t.ID_DseSoulDecompose, "DseSoulDecompose"),
                this._pkgMap.AddPkg(t.ID_DseSoulRestore, "DseSoulRestore"),
                this._pkgMap.AddPkg(t.ID_DseSuperExchangeInfo, "DseSuperExchangeInfo"),
                this._pkgMap.AddPkg(t.ID_DseSuperExchangeItem, "DseSuperExchangeItem"),
                this._pkgMap.AddPkg(t.ID_DseGuildScienceList, "DseGuildScienceList"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeGuildScience, "DseUpgradeGuildScience"),
                this._pkgMap.AddPkg(t.ID_DseClearGuildBattleCD, "DseClearGuildBattleCD"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleBuy, "DseGuildBattleBuy"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleData, "DseGuildBattleData"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleEnter, "DseGuildBattleEnter"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleMove, "DseGuildBattleMove"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleMsg, "DseGuildBattleMsg"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattlePrepare, "DseGuildBattlePrepare"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleRankList, "DseGuildBattleRankList"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleResult, "DseGuildBattleResult"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleSignUp, "DseGuildBattleSignUp"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleSignUpList, "DseGuildBattleSignUpList"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandOpen, "DseGoldIslandOpen"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandSearch, "DseGoldIslandSearch"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandOccupy, "DseGoldIslandOccupy"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandHelp, "DseGoldIslandHelp"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandInviteHelp, "DseGoldIslandInviteHelp"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandDelayTime, "DseGoldIslandDelayTime"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandInviteMemberlist, "DseGoldIslandInviteMemberlist"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandAgreeApply, "DseGoldIslandAgreeApply"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandApplyHelp, "DseGoldIslandApplyHelp"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandCancel, "DseGoldIslandCancel"),
                this._pkgMap.AddPkg(t.ID_DseChangeRole, "DseChangeRole"),
                this._pkgMap.AddPkg(t.ID_DseArmadaData, "DseArmadaData"),
                this._pkgMap.AddPkg(t.ID_DseLimitTimeShopBuy, "DseLimitTimeShopBuy"),
                this._pkgMap.AddPkg(t.ID_DseLimitTimeShopInfo, "DseLimitTimeShopInfo"),
                this._pkgMap.AddPkg(t.ID_DseComposeSouls, "DseComposeSouls"),
                this._pkgMap.AddPkg(t.ID_DseSoulPieceList, "DseSoulPieceList"),
                this._pkgMap.AddPkg(t.ID_DseGetTaskReward, "DseGetTaskReward"),
                this._pkgMap.AddPkg(t.ID_DseTaskRewardData, "DseTaskRewardData"),
                this._pkgMap.AddPkg(t.ID_DseExchangeCaptainCount, "DseExchangeCaptainCount"),
                this._pkgMap.AddPkg(t.ID_DsePlotCopyWarBattleInfo, "DsePlotCopyWarBattleInfo"),
                this._pkgMap.AddPkg(t.ID_DsePlotCopyWarData, "DsePlotCopyWarData"),
                this._pkgMap.AddPkg(t.ID_DsePlotCopyWarEnter, "DsePlotCopyWarEnter"),
                this._pkgMap.AddPkg(t.ID_DsePlotCopyWarMove, "DsePlotCopyWarMove"),
                this._pkgMap.AddPkg(t.ID_DsePlotCopyWarRollStep, "DsePlotCopyWarRollStep"),
                this._pkgMap.AddPkg(t.ID_DseActivateTalent, "DseActivateTalent"),
                this._pkgMap.AddPkg(t.ID_DseTalentList, "DseTalentList"),
                this._pkgMap.AddPkg(t.ID_DseTalentSysFirstFlag, "DseTalentSysFirstFlag"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeTalent, "DseUpgradeTalent"),
                this._pkgMap.AddPkg(t.ID_DsePlotCopyWarOpen, "DsePlotCopyWarOpen"),
                this._pkgMap.AddPkg(t.ID_DseAutoUpgradeScience, "DseAutoUpgradeScience"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaBack, "DseGlobalArenaBack"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaBattle, "DseGlobalArenaBattle"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaBattleProgress, "DseGlobalArenaBattleProgress"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaData, "DseGlobalArenaData"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaEncourage, "DseGlobalArenaEncourage"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaPlayOffList, "DseGlobalArenaPlayOffList"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaProstrate, "DseGlobalArenaProstrate"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaSelfInfo, "DseGlobalArenaSelfInfo"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaUpdateTactic, "DseGlobalArenaUpdateTactic"),
                this._pkgMap.AddPkg(t.ID_DseSignUpAudition, "DseSignUpAudition"),
                this._pkgMap.AddPkg(t.ID_DseSaluteData, "DseSaluteData"),
                this._pkgMap.AddPkg(t.ID_DseSalute, "DseSalute"),
                this._pkgMap.AddPkg(t.ID_DseGoldLeaderExplore, "DseGoldLeaderExplore"),
                this._pkgMap.AddPkg(t.ID_DseGoldLeaderGetOrder, "DseGoldLeaderGetOrder"),
                this._pkgMap.AddPkg(t.ID_DseGoldLeaderInfo, "DseGoldLeaderInfo"),
                this._pkgMap.AddPkg(t.ID_DseGoldLeaderBuyOrder, "DseGoldLeaderBuyOrder"),
                this._pkgMap.AddPkg(t.ID_DseLuckyGodBuyItem, "DseLuckyGodBuyItem"),
                this._pkgMap.AddPkg(t.ID_DseMonthCardData, "DseMonthCardData"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaChamption, "DseGlobalArenaChamption"),
                this._pkgMap.AddPkg(t.ID_DseAutoEquipSeikoSoldier, "DseAutoEquipSeikoSoldier"),
                this._pkgMap.AddPkg(t.ID_DseComposeSeiko, "DseComposeSeiko"),
                this._pkgMap.AddPkg(t.ID_DseDecomposeSeiko, "DseDecomposeSeiko"),
                this._pkgMap.AddPkg(t.ID_DseEquipSeiko, "DseEquipSeiko"),
                this._pkgMap.AddPkg(t.ID_DseForgeSeiko, "DseForgeSeiko"),
                this._pkgMap.AddPkg(t.ID_DseReductionSeiko, "DseReductionSeiko"),
                this._pkgMap.AddPkg(t.ID_DseReductionSeikoInfo, "DseReductionSeikoInfo"),
                this._pkgMap.AddPkg(t.ID_DseRemouldSeiko, "DseRemouldSeiko"),
                this._pkgMap.AddPkg(t.ID_DseSeikoList, "DseSeikoList"),
                this._pkgMap.AddPkg(t.ID_DseSeikoPieceList, "DseSeikoPieceList"),
                this._pkgMap.AddPkg(t.ID_DseUnEquipSeiko, "DseUnEquipSeiko"),
                this._pkgMap.AddPkg(t.ID_DseUpdateSeiko, "DseUpdateSeiko"),
                this._pkgMap.AddPkg(t.ID_DseUpgradeSeiko, "DseUpgradeSeiko"),
                this._pkgMap.AddPkg(t.ID_DseSeikoSysFirstFlag, "DseSeikoSysFirstFlag"),
                this._pkgMap.AddPkg(t.ID_DseEnterStageTower, "DseEnterStageTower"),
                this._pkgMap.AddPkg(t.ID_DseSetTacticForStageTower, "DseSetTacticForStageTower"),
                this._pkgMap.AddPkg(t.ID_DseStageTowerData, "DseStageTowerData"),
                this._pkgMap.AddPkg(t.ID_DseGetTacticForStageTower, "DseGetTacticForStageTower"),
                this._pkgMap.AddPkg(t.ID_DseUpdateEnemyForStageTower, "DseUpdateEnemyForStageTower"),
                this._pkgMap.AddPkg(t.ID_DseStageTowerPurchaseAndResurr, "DseStageTowerPurchaseAndResurr"),
                this._pkgMap.AddPkg(t.ID_DseFindEnemyForStageTower, "DseFindEnemyForStageTower"),
                this._pkgMap.AddPkg(t.ID_DseSeikoShopData, "DseSeikoShopData"),
                this._pkgMap.AddPkg(t.ID_DseSeikoShopHandle, "DseSeikoShopHandle"),
                this._pkgMap.AddPkg(t.ID_DseOnearmedBanditTen, "DseOnearmedBanditTen"),
                this._pkgMap.AddPkg(t.ID_DsePaperLockOperation, "DsePaperLockOperation"),
                this._pkgMap.AddPkg(t.ID_DseShipLockOperation, "DseShipLockOperation"),
                this._pkgMap.AddPkg(t.ID_DseCaptainLockOpt, "DseCaptainLockOpt"),
                this._pkgMap.AddPkg(t.ID_DseRenameGuild, "DseRenameGuild"),
                this._pkgMap.AddPkg(t.ID_DseSeikoLockOpt, "DseSeikoLockOpt"),
                this._pkgMap.AddPkg(t.ID_DseSoulLockOpt, "DseSoulLockOpt"),
                this._pkgMap.AddPkg(t.ID_DsePartsLockOpt, "DsePartsLockOpt"),
                this._pkgMap.AddPkg(t.ID_DseGoldIslandCancelHelped, "DseGoldIslandCancelHelped"),
                this._pkgMap.AddPkg(t.ID_DseGlobalArenaCheckEncourage, "DseGlobalArenaCheckEncourage"),
                this._pkgMap.AddPkg(t.ID_DseGuildBattleAuto, "DseGuildBattleAuto"),
                this._pkgMap.AddPkg(t.ID_DseTuanGouInfo, "DseTuanGouInfo"),
                this._pkgMap.AddPkg(t.ID_DseTuanGouOpt, "DseTuanGouOpt"),
                this._pkgMap.AddPkg(t.ID_DseStageTowerAcityData, "DseStageTowerAcityData"),
                this._pkgMap.AddPkg(t.ID_DseStageTowerAcityHandle, "DseStageTowerAcityHandle"),
                this._pkgMap.AddPkg(t.ID_DseSeiKoExchange, "DseSeiKoExchange"),
                this._pkgMap.AddPkg(t.ID_DseSeiKoExchangeDataSync, "DseSeiKoExchangeDataSync"),
                this._pkgMap.AddPkg(t.ID_DseSeiKoScore, "DseSeiKoScore"),
                this._pkgMap.AddPkg(t.ID_DseWeal, "DseWeal"),
                this._pkgMap.AddPkg(t.ID_DseRechargeBackGift, "DseRechargeBackGift"),
                this._pkgMap.AddPkg(t.ID_DseRechargeBackGiftData, "DseRechargeBackGiftData"),
                this._pkgMap.AddPkg(t.ID_DseRechargeBackGiftEnter, "DseRechargeBackGiftEnter"),
                this._pkgMap.AddPkg(t.ID_DseCenterCampBattleCampRank, "DseCenterCampBattleCampRank"),
                this._pkgMap.AddPkg(t.ID_DseUseSoulGift, "DseUseSoulGift"),
                this._pkgMap.AddPkg(t.ID_DseAutoEquipSoul, "DseAutoEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DseUnAutoEquipSoul, "DseUnAutoEquipSoul"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleSign, "DseGlobalGuildBattleSign"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleAdjust, "DseGlobalGuildBattleAdjust"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleEncourage, "DseGlobalGuildBattleEncourage"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleUpdate, "DseGlobalGuildBattleUpdate"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleData, "DseGlobalGuildBattleData"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleSeeMember, "DseGlobalGuildBattleSeeMember"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleProstrate, "DseGlobalGuildBattleProstrate"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleGuildGroupVs, "DseGlobalGuildBattleGuildGroupVs"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleGuildVs, "DseGlobalGuildBattleGuildVs"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleVsBattle, "DseGlobalGuildBattleVsBattle"),
                this._pkgMap.AddPkg(t.ID_DseScoutGuild, "DseScoutGuild"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleChamptionMember, "DseGlobalGuildBattleChamptionMember"),
                this._pkgMap.AddPkg(t.ID_DseGlobalGuildBattleChamptionList, "DseGlobalGuildBattleChamptionList"),
                this._pkgMap.AddPkg(t.ID_DseOnLineTime, "DseOnLineTime"),
                this._pkgMap.AddPkg(t.ID_DseActivityWebData, "DseActivityWebData"),
                this._pkgMap.AddPkg(t.ID_DceGuideSave, "DceGuideSave"),
                this._pkgMap.AddPkg(t.ID_DseFocusAward, "DseFocusAward"),
                this._pkgMap.AddPkg(t.ID_DseRechargeInfo, "DseRechargeInfo"),
                this._pkgMap.AddPkg(t.ID_DseExchangeCode, "DseExchangeCode")
        },
        t.ID_DseAccBind = 512,
        t.ID_DseActiveTips = 513,
        t.ID_DseActivity = 514,
        t.ID_DseActivityData = 515,
        t.ID_DseAddFriend = 516,
        t.ID_DseAddMail = 517,
        t.ID_DseAddOwnedPaper = 518,
        t.ID_DseAddParts = 519,
        t.ID_DseAddShip = 520,
        t.ID_DseAllLastID = 521,
        t.ID_DseApplyList = 522,
        t.ID_DseArenaData = 523,
        t.ID_DseArenaExchange = 524,
        t.ID_DseArenaList = 525,
        t.ID_DseAuthState = 526,
        t.ID_DseAutoEquipSoldier = 527,
        t.ID_DseAwardCenter = 528,
        t.ID_DseBattleInfo = 529,
        t.ID_DseBattleReview = 530,
        t.ID_DseBattleStart = 531,
        t.ID_DseBattleStartBySweep = 532,
        t.ID_DseBlackList = 533,
        t.ID_DseBlackListOpt = 534,
        t.ID_DseBroadcast = 535,
        t.ID_DseBuy = 536,
        t.ID_DseBuyGuard = 537,
        t.ID_DseBuyOil = 538,
        t.ID_DseCampBattleData = 539,
        t.ID_DseCampBattleMove = 540,
        t.ID_DseCampBattleMsg = 541,
        t.ID_DseCampBattleResult = 542,
        t.ID_DseChargePaper = 543,
        t.ID_DseChat = 544,
        t.ID_DseChatData = 545,
        t.ID_DseChatMsg = 546,
        t.ID_DseChatMsgLog = 547,
        t.ID_DseCheckPlayerName = 548,
        t.ID_DseChristmasMineral = 549,
        t.ID_DseChristmasMineralStart = 550,
        t.ID_DseChristmasScroeExchange = 551,
        t.ID_DseChritmasLogin = 552,
        t.ID_DseChritmasLottery = 553,
        t.ID_DseChritmasLotteryDropList = 554,
        t.ID_DseChritmasLotteryStart = 555,
        t.ID_DseClearCampBattleCD = 556,
        t.ID_DseComposeParts = 557,
        t.ID_DseConsumeExchange = 558,
        t.ID_DseConsumeExchangeData = 559,
        t.ID_DseCreateGuild = 560,
        t.ID_DseCreateShip = 561,
        t.ID_DseDayLimitFightData = 562,
        t.ID_DseDecomposeParts = 563,
        t.ID_DseDeleteFriend = 564,
        t.ID_DseDelParts = 565,
        t.ID_DseDelShip = 566,
        t.ID_DseDrawAllElectric = 567,
        t.ID_DseDrawElectric = 568,
        t.ID_DseEnterArena = 569,
        t.ID_DseEnterCampBattle = 570,
        t.ID_DseEnterGuard = 571,
        t.ID_DseEquipParts = 572,
        t.ID_DseEquipSoul = 573,
        t.ID_DseFriendList = 574,
        t.ID_DseFuncSwich = 575,
        t.ID_DseGetAward = 576,
        t.ID_DseGetCenterGold = 577,
        t.ID_DseGetDayLimitFight = 578,
        t.ID_DseGetGuardRank = 579,
        t.ID_DseGetMailProp = 580,
        t.ID_DseGetMedal = 581,
        t.ID_DseGetTactic = 582,
        t.ID_DseGetWeakCamp = 583,
        t.ID_DseGhostShip = 584,
        t.ID_DseGhostShipData = 585,
        t.ID_DseGuardStage = 586,
        t.ID_DseGuildApply = 587,
        t.ID_DseGuildApplyList = 588,
        t.ID_DseGuildApproval = 589,
        t.ID_DseGuildBuyGift = 590,
        t.ID_DseGuildCancelApply = 591,
        t.ID_DseGuildData = 592,
        t.ID_DseGuildDemise = 593,
        t.ID_DseGuildDismiss = 594,
        t.ID_DseGuildDismissCancel = 595,
        t.ID_DseGuildDonate = 596,
        t.ID_DseGuildExpel = 597,
        t.ID_DseGuildFireDeputy = 598,
        t.ID_DseGuildInvite = 599,
        t.ID_DseGuildList = 600,
        t.ID_DseGuildMemberList = 601,
        t.ID_DseGuildQuit = 602,
        t.ID_DseGuildSetDeputy = 603,
        t.ID_DseGuildSetMedal = 604,
        t.ID_DseGuildUpgrade = 605,
        t.ID_DseHeartbeat = 606,
        t.ID_DseInvitedList = 607,
        t.ID_DseInviteFriend = 608,
        t.ID_DseLimitShip = 609,
        t.ID_DseLimitShipData = 610,
        t.ID_DseLuckyGoddessData = 611,
        t.ID_DseLuckyGoddessForCharge = 612,
        t.ID_DseLuckyGoddessForFree = 613,
        t.ID_DseLuckyWheelActivity = 614,
        t.ID_DseLuckyWheelActivityData = 615,
        t.ID_DseMailList = 616,
        t.ID_DseMedalData = 617,
        t.ID_DseMilitaryRankGetDailyReward = 618,
        t.ID_DseMilitaryRankInfo = 619,
        t.ID_DseMilitaryRankUpgrad = 620,
        t.ID_DseMisteryShopRefresh = 621,
        t.ID_DseModifyDeclaration = 622,
        t.ID_DseModifyNotify = 623,
        t.ID_DseMonthCard = 624,
        t.ID_DseMonthSignTake = 625,
        t.ID_DseNewDay = 626,
        t.ID_DseOwnedPaper = 627,
        t.ID_DseOwnedPaperFirstFlag = 628,
        t.ID_DsePaperChargeCount = 629,
        t.ID_DsePaperList = 630,
        t.ID_DsePaperPieceList = 631,
        t.ID_DsePartPieceList = 632,
        t.ID_DsePartsList = 633,
        t.ID_DsePropList = 634,
        t.ID_DseQuestionAnswer = 635,
        t.ID_DseQuestionList = 636,
        t.ID_DseQuestionRank = 637,
        t.ID_DseRankList = 638,
        t.ID_DseRecElectricList = 639,
        t.ID_DseRecommandInviteList = 640,
        t.ID_DseRefuseAddFriend = 641,
        t.ID_DseRemouldParts = 642,
        t.ID_DseRemouldShip = 643,
        t.ID_DseRenameRole = 644,
        t.ID_DseRenameShip = 645,
        t.ID_DseResetGuard = 646,
        t.ID_DseResetStageCount = 647,
        t.ID_DseRetireShip = 648,
        t.ID_DseRobberyList = 649,
        t.ID_DseSalePaper = 650,
        t.ID_DseScienceList = 651,
        t.ID_DseScoutSoldier = 652,
        t.ID_DseSearchGuild = 653,
        t.ID_DseSearchPlayer = 654,
        t.ID_DseSellProp = 655,
        t.ID_DseSendElectric = 656,
        t.ID_DseSendMail = 657,
        t.ID_DseSetCaption = 658,
        t.ID_DseSetRole = 659,
        t.ID_DseSetSoldier = 660,
        t.ID_DseSetTactic = 661,
        t.ID_DseSetVerifyOptions = 662,
        t.ID_DseSevenDaysExchange = 663,
        t.ID_DseSevenDaysExchangeData = 664,
        t.ID_DseShipList = 665,
        t.ID_DseShopData = 666,
        t.ID_DseSoldierList = 667,
        t.ID_DseSoul = 668,
        t.ID_DseSoulEat = 669,
        t.ID_DseSoulList = 670,
        t.ID_DseSpy = 671,
        t.ID_DseSpyData = 672,
        t.ID_DseStageData = 673,
        t.ID_DseStageList = 674,
        t.ID_DseStartServerActivity = 675,
        t.ID_DseTrain = 676,
        t.ID_DseUnEquipParts = 677,
        t.ID_DseUnEquipSoul = 678,
        t.ID_DseUpdateMail = 679,
        t.ID_DseUpdateParts = 680,
        t.ID_DseUpdateShip = 681,
        t.ID_DseUpgradeBuild = 682,
        t.ID_DseUpgradeParts = 683,
        t.ID_DseUpgradeScience = 684,
        t.ID_DseUpgradeShip = 685,
        t.ID_DseUpgradeSkill = 686,
        t.ID_DseUseProp = 687,
        t.ID_DseUserComeBack = 688,
        t.ID_DseUserComeBackReward = 689,
        t.ID_DseUserData = 690,
        t.ID_DseGoddessReward = 691,
        t.ID_DseGoddessRewardData = 692,
        t.ID_DseLuckyCatDataRequest = 693,
        t.ID_DseLuckyCatRequest = 694,
        t.ID_DseLuckBoxPointExchange = 695,
        t.ID_DseLuckBoxPointExchangeOpen = 696,
        t.ID_DseLoginPokerOpen = 697,
        t.ID_DseLoginPokerAction = 698,
        t.ID_DseLoginPokerFinal = 699,
        t.ID_DseReductionParts = 700,
        t.ID_DseBonusFlyDataRequest = 701,
        t.ID_DseBonusFlyRequest = 702,
        t.ID_DseRechargeSevenDayRequest = 703,
        t.ID_DseRechargeSevenDayRequestData = 704,
        t.ID_DseCenterCampBattleData = 705,
        t.ID_DseCenterCampBattleMove = 706,
        t.ID_DseCenterCampBattleMsg = 707,
        t.ID_DseCenterCampBattleResult = 708,
        t.ID_DseClearCenterCampBattleCD = 709,
        t.ID_DseEnterCenterCampBattle = 710,
        t.ID_DseReductionPartsInfo = 711,
        t.ID_DseUsePaperPieceGift = 712,
        t.ID_DseOnearmedBanditDataRequest = 713,
        t.ID_DseOnearmedBanditRequest = 714,
        t.ID_DseValentineDataRequest = 715,
        t.ID_DseValentineGiveGift = 716,
        t.ID_DseCampBattleBuy = 717,
        t.ID_DseCenterCampBattleBuy = 718,
        t.ID_DseAddSoulOwnedPaper = 719,
        t.ID_DseOwnedSoulPaperFirstFlag = 720,
        t.ID_DseLuckyGoddnessForCharge = 721,
        t.ID_DseShipFormationInfo = 722,
        t.ID_DseShipFormationLevelUp = 723,
        t.ID_DseShipFormationStarUp = 724,
        t.ID_DseShipFormationAddNotice = 725,
        t.ID_DseShipFormationChoose = 726,
        t.ID_DseShipFormationFistFlag = 727,
        t.ID_DseRegSecondDayGift = 728,
        t.ID_DseBuySpyItem = 729,
        t.ID_DseChallengeDataRequest = 730,
        t.ID_DseChallengeSignUp = 731,
        t.ID_DseChallengeFight = 732,
        t.ID_DseChallengeAction = 733,
        t.ID_DseChallengeEnemyData = 734,
        t.ID_DseChallengeRevenge = 735,
        t.ID_DseChallengeRefresh = 736,
        t.ID_DseChallengeRank = 737,
        t.ID_DseChallengeChampion = 738,
        t.ID_DseChallengeWorship = 739,
        t.ID_DseChallengeBuy = 740,
        t.ID_DseChallengeRefreshCharge = 741,
        t.ID_DseBuyRecruitItem = 742,
        t.ID_DseCaptainData = 743,
        t.ID_DseCaptainList = 744,
        t.ID_DseCaptainPieceList = 745,
        t.ID_DseComposeCaptain = 746,
        t.ID_DseEquipCaptain = 747,
        t.ID_DseExchangeCaptain = 748,
        t.ID_DseFireCaptain = 749,
        t.ID_DseLimitCaptain = 750,
        t.ID_DseLimitCaptainData = 751,
        t.ID_DsePromoteCaptain = 752,
        t.ID_DseRecruitCaptain = 753,
        t.ID_DseUpdateCaptain = 754,
        t.ID_DseUpgradeCaptain = 755,
        t.ID_DseCaptainFirstFlag = 756,
        t.ID_DseChallengeLogin = 757,
        t.ID_DseUseSuperCaptainGift = 758,
        t.ID_DseLimitShipBuyItem = 759,
        t.ID_DseBuyLimitCaptain = 760,
        t.ID_DseBuyGhostShip = 761,
        t.ID_DseCampBattleSetTrustee = 762,
        t.ID_DseCaptainPaperAdd = 763,
        t.ID_DseCaptainPaperFirstFlag = 764,
        t.ID_DseMedalPromote = 765,
        t.ID_DseSoulDecompose = 766,
        t.ID_DseSoulRestore = 767,
        t.ID_DseSuperExchangeInfo = 768,
        t.ID_DseSuperExchangeItem = 769,
        t.ID_DseGuildScienceList = 770,
        t.ID_DseUpgradeGuildScience = 771,
        t.ID_DseClearGuildBattleCD = 772,
        t.ID_DseGuildBattleBuy = 773,
        t.ID_DseGuildBattleData = 774,
        t.ID_DseGuildBattleEnter = 775,
        t.ID_DseGuildBattleMove = 776,
        t.ID_DseGuildBattleMsg = 777,
        t.ID_DseGuildBattlePrepare = 778,
        t.ID_DseGuildBattleRankList = 779,
        t.ID_DseGuildBattleResult = 780,
        t.ID_DseGuildBattleSignUp = 781,
        t.ID_DseGuildBattleSignUpList = 782,
        t.ID_DseGoldIslandOpen = 783,
        t.ID_DseGoldIslandSearch = 784,
        t.ID_DseGoldIslandOccupy = 785,
        t.ID_DseGoldIslandHelp = 786,
        t.ID_DseGoldIslandInviteHelp = 787,
        t.ID_DseGoldIslandDelayTime = 788,
        t.ID_DseGoldIslandInviteMemberlist = 789,
        t.ID_DseGoldIslandAgreeApply = 790,
        t.ID_DseGoldIslandApplyHelp = 791,
        t.ID_DseGoldIslandCancel = 792,
        t.ID_DseChangeRole = 793,
        t.ID_DseArmadaData = 794,
        t.ID_DseLimitTimeShopBuy = 795,
        t.ID_DseLimitTimeShopInfo = 796,
        t.ID_DseComposeSouls = 797,
        t.ID_DseSoulPieceList = 798,
        t.ID_DseGetTaskReward = 799,
        t.ID_DseTaskRewardData = 800,
        t.ID_DseExchangeCaptainCount = 801,
        t.ID_DsePlotCopyWarBattleInfo = 802,
        t.ID_DsePlotCopyWarData = 803,
        t.ID_DsePlotCopyWarEnter = 804,
        t.ID_DsePlotCopyWarMove = 805,
        t.ID_DsePlotCopyWarRollStep = 806,
        t.ID_DseActivateTalent = 807,
        t.ID_DseTalentList = 808,
        t.ID_DseTalentSysFirstFlag = 809,
        t.ID_DseUpgradeTalent = 810,
        t.ID_DsePlotCopyWarOpen = 811,
        t.ID_DseAutoUpgradeScience = 812,
        t.ID_DseGlobalArenaBack = 813,
        t.ID_DseGlobalArenaBattle = 814,
        t.ID_DseGlobalArenaBattleProgress = 815,
        t.ID_DseGlobalArenaData = 816,
        t.ID_DseGlobalArenaEncourage = 817,
        t.ID_DseGlobalArenaPlayOffList = 818,
        t.ID_DseGlobalArenaProstrate = 819,
        t.ID_DseGlobalArenaSelfInfo = 820,
        t.ID_DseGlobalArenaUpdateTactic = 821,
        t.ID_DseSignUpAudition = 822,
        t.ID_DseSaluteData = 823,
        t.ID_DseSalute = 824,
        t.ID_DseGoldLeaderExplore = 825,
        t.ID_DseGoldLeaderGetOrder = 826,
        t.ID_DseGoldLeaderInfo = 827,
        t.ID_DseGoldLeaderBuyOrder = 828,
        t.ID_DseLuckyGodBuyItem = 829,
        t.ID_DseMonthCardData = 830,
        t.ID_DseGlobalArenaChamption = 831,
        t.ID_DseAutoEquipSeikoSoldier = 832,
        t.ID_DseComposeSeiko = 833,
        t.ID_DseDecomposeSeiko = 834,
        t.ID_DseEquipSeiko = 835,
        t.ID_DseForgeSeiko = 836,
        t.ID_DseReductionSeiko = 837,
        t.ID_DseReductionSeikoInfo = 838,
        t.ID_DseRemouldSeiko = 839,
        t.ID_DseSeikoList = 840,
        t.ID_DseSeikoPieceList = 841,
        t.ID_DseUnEquipSeiko = 842,
        t.ID_DseUpdateSeiko = 843,
        t.ID_DseUpgradeSeiko = 844,
        t.ID_DseSeikoSysFirstFlag = 845,
        t.ID_DseEnterStageTower = 846,
        t.ID_DseSetTacticForStageTower = 847,
        t.ID_DseStageTowerData = 848,
        t.ID_DseGetTacticForStageTower = 849,
        t.ID_DseUpdateEnemyForStageTower = 850,
        t.ID_DseStageTowerPurchaseAndResurr = 851,
        t.ID_DseFindEnemyForStageTower = 852,
        t.ID_DseSeikoShopData = 853,
        t.ID_DseSeikoShopHandle = 854,
        t.ID_DseOnearmedBanditTen = 855,
        t.ID_DsePaperLockOperation = 856,
        t.ID_DseShipLockOperation = 857,
        t.ID_DseCaptainLockOpt = 858,
        t.ID_DseRenameGuild = 859,
        t.ID_DseSeikoLockOpt = 860,
        t.ID_DseSoulLockOpt = 861,
        t.ID_DsePartsLockOpt = 862,
        t.ID_DseGoldIslandCancelHelped = 863,
        t.ID_DseGlobalArenaCheckEncourage = 864,
        t.ID_DseGuildBattleAuto = 865,
        t.ID_DseTuanGouInfo = 866,
        t.ID_DseTuanGouOpt = 867,
        t.ID_DseStageTowerAcityData = 868,
        t.ID_DseStageTowerAcityHandle = 869,
        t.ID_DseSeiKoExchange = 870,
        t.ID_DseSeiKoExchangeDataSync = 871,
        t.ID_DseSeiKoScore = 872,
        t.ID_DseWeal = 873,
        t.ID_DseRechargeBackGift = 874,
        t.ID_DseRechargeBackGiftData = 875,
        t.ID_DseRechargeBackGiftEnter = 876,
        t.ID_DseCenterCampBattleCampRank = 877,
        t.ID_DseUseSoulGift = 878,
        t.ID_DseAutoEquipSoul = 879,
        t.ID_DseUnAutoEquipSoul = 880,
        t.ID_DseGlobalGuildBattleSign = 881,
        t.ID_DseGlobalGuildBattleAdjust = 882,
        t.ID_DseGlobalGuildBattleEncourage = 883,
        t.ID_DseGlobalGuildBattleUpdate = 884,
        t.ID_DseGlobalGuildBattleData = 885,
        t.ID_DseGlobalGuildBattleSeeMember = 886,
        t.ID_DseGlobalGuildBattleProstrate = 887,
        t.ID_DseGlobalGuildBattleGuildGroupVs = 888,
        t.ID_DseGlobalGuildBattleGuildVs = 889,
        t.ID_DseGlobalGuildBattleVsBattle = 890,
        t.ID_DseScoutGuild = 891,
        t.ID_DseGlobalGuildBattleChamptionMember = 892,
        t.ID_DseGlobalGuildBattleChamptionList = 893,
        t.ID_DseActivityWebData = 894,
        t.ID_DseOnLineTime = 895,
        t.ID_DseFocusAward = 896,
        t.ID_DseRechargeInfo = 897,
        t.ID_DseExchangeCode = 898,
        t.ID_DceAccBind = 1024,
        t.ID_DceActivity = 1025,
        t.ID_DceActivityData = 1026,
        t.ID_DceAddFriend = 1027,
        t.ID_DceAllLastID = 1028,
        t.ID_DceApplyList = 1029,
        t.ID_DceArenaExchange = 1030,
        t.ID_DceAutoEquipSoldier = 1031,
        t.ID_DceAwardCenter = 1032,
        t.ID_DceBattleReview = 1033,
        t.ID_DceBattleStart = 1034,
        t.ID_DceBlackList = 1035,
        t.ID_DceBlackListOpt = 1036,
        t.ID_DceBuy = 1037,
        t.ID_DceBuyGuard = 1038,
        t.ID_DceBuyOil = 1039,
        t.ID_DceCampBattleData = 1040,
        t.ID_DceCampBattleMove = 1041,
        t.ID_DceCampBattleResult = 1042,
        t.ID_DceCenterRecovery = 1043,
        t.ID_DceChargePaper = 1044,
        t.ID_DceChat = 1045,
        t.ID_DceChatData = 1046,
        t.ID_DceCheckPlayerName = 1047,
        t.ID_DceChristmasMineral = 1048,
        t.ID_DceChristmasMineralStart = 1049,
        t.ID_DceChristmasScroeExchange = 1050,
        t.ID_DceChritmasLottery = 1051,
        t.ID_DceChritmasLotteryStart = 1052,
        t.ID_DceClearCampBattleCD = 1053,
        t.ID_DceComposeParts = 1054,
        t.ID_DceConsumeExchange = 1055,
        t.ID_DceConsumeExchangeData = 1056,
        t.ID_DceCreateGuild = 1057,
        t.ID_DceCreateShip = 1058,
        t.ID_DceDayLimitFightData = 1059,
        t.ID_DceDecomposeParts = 1060,
        t.ID_DceDeleteFriend = 1061,
        t.ID_DceDrawAllElectric = 1062,
        t.ID_DceDrawElectric = 1063,
        t.ID_DceEnterArena = 1064,
        t.ID_DceEnterCampBattle = 1065,
        t.ID_DceEnterGuard = 1066,
        t.ID_DceEquipParts = 1067,
        t.ID_DceEquipSoul = 1068,
        t.ID_DceFriendList = 1069,
        t.ID_DceGetAward = 1070,
        t.ID_DceGetCenterGold = 1071,
        t.ID_DceGetDayLimitFight = 1072,
        t.ID_DceGetGuardRank = 1073,
        t.ID_DceGetMailProp = 1074,
        t.ID_DceGetMedal = 1075,
        t.ID_DceGetTactic = 1076,
        t.ID_DceGetWeakCamp = 1077,
        t.ID_DceGhostShip = 1078,
        t.ID_DceGhostShipData = 1079,
        t.ID_DceGuardStage = 1080,
        t.ID_DceGuideStep = 1081,
        t.ID_DceGuildApply = 1082,
        t.ID_DceGuildApplyList = 1083,
        t.ID_DceGuildApproval = 1084,
        t.ID_DceGuildBuyGift = 1085,
        t.ID_DceGuildCancelApply = 1086,
        t.ID_DceGuildData = 1087,
        t.ID_DceGuildDemise = 1088,
        t.ID_DceGuildDismiss = 1089,
        t.ID_DceGuildDismissCancel = 1090,
        t.ID_DceGuildDonate = 1091,
        t.ID_DceGuildExpel = 1092,
        t.ID_DceGuildFireDeputy = 1093,
        t.ID_DceGuildInvite = 1094,
        t.ID_DceGuildList = 1095,
        t.ID_DceGuildMemberList = 1096,
        t.ID_DceGuildQuit = 1097,
        t.ID_DceGuildSetDeputy = 1098,
        t.ID_DceGuildSetMedal = 1099,
        t.ID_DceGuildUpgrade = 1100,
        t.ID_DceHeartbeat = 1101,
        t.ID_DceInvitedList = 1102,
        t.ID_DceInviteFriend = 1103,
        t.ID_DceLimitShip = 1104,
        t.ID_DceLimitShipData = 1105,
        t.ID_DceLuckyGoddessData = 1106,
        t.ID_DceLuckyGoddessForFree = 1107,
        t.ID_DceLuckyWheelActivity = 1108,
        t.ID_DceLuckyWheelActivityData = 1109,
        t.ID_DceMailList = 1110,
        t.ID_DceMedalData = 1111,
        t.ID_DceMilitaryRankGetDailyReward = 1112,
        t.ID_DceMilitaryRankInfo = 1113,
        t.ID_DceMilitaryRankUpgrad = 1114,
        t.ID_DceMisteryShopRefresh = 1115,
        t.ID_DceModifyDeclaration = 1116,
        t.ID_DceModifyNotify = 1117,
        t.ID_DceMonthCard = 1118,
        t.ID_DceMonthSignTake = 1119,
        t.ID_DceNewDay = 1120,
        t.ID_DceOwnedPaper = 1121,
        t.ID_DcePaperChargeCount = 1122,
        t.ID_DcePaperList = 1123,
        t.ID_DcePaperPieceList = 1124,
        t.ID_DcePartPieceList = 1125,
        t.ID_DcePartsList = 1126,
        t.ID_DcePropList = 1127,
        t.ID_DceQuestionAnswer = 1128,
        t.ID_DceQuestionList = 1129,
        t.ID_DceQuestionRank = 1130,
        t.ID_DceRankList = 1131,
        t.ID_DceRecElectricList = 1132,
        t.ID_DceRecommandInviteList = 1133,
        t.ID_DceRefuseAddFriend = 1134,
        t.ID_DceRemouldParts = 1135,
        t.ID_DceRemouldShip = 1136,
        t.ID_DceRenameRole = 1137,
        t.ID_DceRenameShip = 1138,
        t.ID_DceResetGuard = 1139,
        t.ID_DceResetStageCount = 1140,
        t.ID_DceRetireShip = 1141,
        t.ID_DceRobberyList = 1142,
        t.ID_DceSalePaper = 1143,
        t.ID_DceSaveTrain = 1144,
        t.ID_DceScienceList = 1145,
        t.ID_DceScoutSoldier = 1146,
        t.ID_DceSearchGuild = 1147,
        t.ID_DceSearchPlayer = 1148,
        t.ID_DceSellProp = 1149,
        t.ID_DceSendElectric = 1150,
        t.ID_DceSendMail = 1151,
        t.ID_DceSetCaption = 1152,
        t.ID_DceSetRole = 1153,
        t.ID_DceSetSoldier = 1154,
        t.ID_DceSetTactic = 1155,
        t.ID_DceSetVerifyOptions = 1156,
        t.ID_DceSevenDaysExchange = 1157,
        t.ID_DceSevenDaysExchangeData = 1158,
        t.ID_DceShipList = 1159,
        t.ID_DceShopData = 1160,
        t.ID_DceSoldierList = 1161,
        t.ID_DceSoul = 1162,
        t.ID_DceSoulEat = 1163,
        t.ID_DceSoulList = 1164,
        t.ID_DceSpy = 1165,
        t.ID_DceSpyData = 1166,
        t.ID_DceStageList = 1167,
        t.ID_DceTrain = 1168,
        t.ID_DceUnEquipParts = 1169,
        t.ID_DceUnEquipSoul = 1170,
        t.ID_DceUpdateElectric = 1171,
        t.ID_DceUpdateOil = 1172,
        t.ID_DceUpgradeBuild = 1173,
        t.ID_DceUpgradeParts = 1174,
        t.ID_DceUpgradeScience = 1175,
        t.ID_DceUpgradeShip = 1176,
        t.ID_DceUpgradeSkill = 1177,
        t.ID_DceUseProp = 1178,
        t.ID_DceUserComeBackReward = 1179,
        t.ID_DceUserData = 1180,
        t.ID_DceGoddessReward = 1181,
        t.ID_DceGoddessRewardData = 1182,
        t.ID_DceLuckyCatDataRequest = 1183,
        t.ID_DceLuckyCatRequest = 1184,
        t.ID_DceLuckBoxPointExchange = 1185,
        t.ID_DceLuckBoxPointExchangeOpen = 1186,
        t.ID_DceLoginPokerOpen = 1187,
        t.ID_DceLoginPokerAction = 1188,
        t.ID_DceLoginPokerFinal = 1189,
        t.ID_DceReductionParts = 1190,
        t.ID_DceBonusFlyDataRequest = 1191,
        t.ID_DceBonusFlyRequest = 1192,
        t.ID_DceRechargeSevenDayRequest = 1193,
        t.ID_DceRechargeSevenDayRequestData = 1194,
        t.ID_DceEnterCenterCampBattle = 1195,
        t.ID_DceCenterCampBattleData = 1196,
        t.ID_DceCenterCampBattleMove = 1197,
        t.ID_DceCenterCampBattleResult = 1198,
        t.ID_DceClearCenterCampBattleCD = 1199,
        t.ID_DceCenterCampBattleRankList = 1200,
        t.ID_DceReductionPartsInfo = 1201,
        t.ID_DceUsePaperPieceGift = 1202,
        t.ID_DceOnearmedBanditDataRequest = 1203,
        t.ID_DceOnearmedBanditRequest = 1204,
        t.ID_DceValentineDataRequest = 1205,
        t.ID_DceValentineGiveGift = 1206,
        t.ID_DceCampBattleBuy = 1207,
        t.ID_DceCenterCampBattleBuy = 1208,
        t.ID_DceLuckyGoddnessForCharge = 1209,
        t.ID_DceShipFormationInfo = 1210,
        t.ID_DceShipFormationLevelUp = 1211,
        t.ID_DceShipFormationChoose = 1212,
        t.ID_DceRegSecondDayGift = 1213,
        t.ID_DceBuySpyItem = 1214,
        t.ID_DceChallengeDataRequest = 1215,
        t.ID_DceChallengeSignUp = 1216,
        t.ID_DceChallengeFight = 1217,
        t.ID_DceChallengeAction = 1218,
        t.ID_DceChallengeEnemyData = 1219,
        t.ID_DceChallengeRevenge = 1220,
        t.ID_DceChallengeRefresh = 1221,
        t.ID_DceChallengeRank = 1222,
        t.ID_DceChallengeChampion = 1223,
        t.ID_DceChallengeWorship = 1224,
        t.ID_DceChallengeBuy = 1225,
        t.ID_DceChallengeRefreshCharge = 1226,
        t.ID_DceBuyRecruitItem = 1227,
        t.ID_DceCaptainData = 1228,
        t.ID_DceCaptainList = 1229,
        t.ID_DceCaptainPieceList = 1230,
        t.ID_DceComposeCaptain = 1231,
        t.ID_DceEquipCaptain = 1232,
        t.ID_DceExchangeCaptain = 1233,
        t.ID_DceFireCaptain = 1234,
        t.ID_DceLimitCaptain = 1235,
        t.ID_DceLimitCaptainData = 1236,
        t.ID_DcePromoteCaptain = 1237,
        t.ID_DceRecruitCaptain = 1238,
        t.ID_DceUpgradeCaptain = 1239,
        t.ID_DceUseSuperCaptainGift = 1240,
        t.ID_DceLimitShipBuyItem = 1241,
        t.ID_DceBuyLimitCaptain = 1242,
        t.ID_DceBuyGhostShip = 1243,
        t.ID_DceCampBattleSetTrustee = 1244,
        t.ID_DceMedalPromote = 1245,
        t.ID_DceSoulDecompose = 1246,
        t.ID_DceSoulRestore = 1247,
        t.ID_DceSuperExchangeInfo = 1248,
        t.ID_DceSuperExchangeItem = 1249,
        t.ID_DceGuildScienceList = 1250,
        t.ID_DceUpgradeGuildScience = 1251,
        t.ID_DceClearGuildBattleCD = 1252,
        t.ID_DceGuildBattleBuy = 1253,
        t.ID_DceGuildBattleData = 1254,
        t.ID_DceGuildBattleEnter = 1255,
        t.ID_DceGuildBattleMove = 1256,
        t.ID_DceGuildBattlePrepare = 1257,
        t.ID_DceGuildBattleRankList = 1258,
        t.ID_DceGuildBattleResult = 1259,
        t.ID_DceGuildBattleSignUp = 1260,
        t.ID_DceGuildBattleSignUpList = 1261,
        t.ID_DceGoldIslandOpen = 1262,
        t.ID_DceGoldIslandSearch = 1263,
        t.ID_DceGoldIslandOccupy = 1264,
        t.ID_DceGoldIslandHelp = 1265,
        t.ID_DceGoldIslandInviteHelp = 1266,
        t.ID_DceGoldIslandDelayTime = 1267,
        t.ID_DceGoldIslandInviteMemberlist = 1268,
        t.ID_DceGoldIslandAgreeApply = 1269,
        t.ID_DceGoldIslandApplyHelp = 1270,
        t.ID_DceGoldIslandCancel = 1271,
        t.ID_DceChangeRole = 1272,
        t.ID_DceArmadaData = 1273,
        t.ID_DceLimitTimeShopBuy = 1274,
        t.ID_DceLimitTimeShopInfo = 1275,
        t.ID_DceComposeSouls = 1276,
        t.ID_DceSoulPieceList = 1277,
        t.ID_DceGetTaskReward = 1278,
        t.ID_DceTaskRewardData = 1279,
        t.ID_DceExchangeCaptainCount = 1280,
        t.ID_DcePlotCopyWarBattleInfo = 1281,
        t.ID_DcePlotCopyWarEnter = 1282,
        t.ID_DcePlotCopyWarMove = 1283,
        t.ID_DcePlotCopyWarRollStep = 1284,
        t.ID_DceActivateTalent = 1285,
        t.ID_DceTalentList = 1286,
        t.ID_DceUpgradeTalent = 1287,
        t.ID_DcePlotCopyWarOpen = 1288,
        t.ID_DceAutoUpgradeScience = 1289,
        t.ID_DceGlobalArenaBack = 1290,
        t.ID_DceGlobalArenaBattle = 1291,
        t.ID_DceGlobalArenaBattleProgress = 1292,
        t.ID_DceGlobalArenaData = 1293,
        t.ID_DceGlobalArenaEncourage = 1294,
        t.ID_DceGlobalArenaPlayOffList = 1295,
        t.ID_DceGlobalArenaProstrate = 1296,
        t.ID_DceGlobalArenaSelfInfo = 1297,
        t.ID_DceGlobalArenaUpdateTactic = 1298,
        t.ID_DceSignUpAudition = 1299,
        t.ID_DceSalute = 1300,
        t.ID_DceSaluteData = 1301,
        t.ID_DceGoldLeaderExplore = 1302,
        t.ID_DceGoldLeaderGetOrder = 1303,
        t.ID_DceGoldLeaderInfo = 1304,
        t.ID_DceGoldLeaderBuyOrder = 1305,
        t.ID_DceLuckyGodBuyItem = 1306,
        t.ID_DceMonthCardData = 1307,
        t.ID_DceGlobalArenaChamption = 1308,
        t.ID_DceAutoEquipSeikoSoldier = 1309,
        t.ID_DceComposeSeiko = 1310,
        t.ID_DceDecomposeSeiko = 1311,
        t.ID_DceEquipSeiko = 1312,
        t.ID_DceForgeSeiko = 1313,
        t.ID_DceReductionSeiko = 1314,
        t.ID_DceReductionSeikoInfo = 1315,
        t.ID_DceRemouldSeiko = 1316,
        t.ID_DceSeikoList = 1317,
        t.ID_DceSeikoPieceList = 1318,
        t.ID_DceUnEquipSeiko = 1319,
        t.ID_DceUpgradeSeiko = 1320,
        t.ID_DceSaveForge = 1321,
        t.ID_DceEnterStageTower = 1322,
        t.ID_DceSetTacticForStageTower = 1323,
        t.ID_DceGetTacticForStageTower = 1324,
        t.ID_DceUpdateEnemyForStageTower = 1325,
        t.ID_DceStageTowerPurchaseAndResurr = 1326,
        t.ID_DceFindEnemyForStageTower = 1327,
        t.ID_DceSeikoShopData = 1328,
        t.ID_DceSeikoShopHandle = 1329,
        t.ID_DceOnearmedBanditTen = 1330,
        t.ID_DcePaperLockOperation = 1331,
        t.ID_DceShipLockOperation = 1332,
        t.ID_DceCaptainLockOpt = 1333,
        t.ID_DceRenameGuild = 1334,
        t.ID_DceSeikoLockOpt = 1335,
        t.ID_DceSoulLockOpt = 1336,
        t.ID_DcePartsLockOpt = 1337,
        t.ID_DceGoldIslandCancelHelped = 1338,
        t.ID_DceGlobalArenaCheckEncourage = 1339,
        t.ID_DceGuildBattleAuto = 1340,
        t.ID_DceTuanGouOpt = 1341,
        t.ID_DceStageTowerAcityData = 1342,
        t.ID_DceStageTowerAcityHandle = 1343,
        t.ID_DceSeiKoExchange = 1344,
        t.ID_DceSeiKoScore = 1345,
        t.ID_DceWeal = 1346,
        t.ID_DceRechargeBackGift = 1347,
        t.ID_DceRechargeBackGiftEnter = 1348,
        t.ID_DceCenterCampBattleCampRank = 1349,
        t.ID_DceUseSoulGift = 1350,
        t.ID_DceAutoEquipSoul = 1351,
        t.ID_DceUnAutoEquipSoul = 1352,
        t.ID_DceGlobalGuildBattleSign = 1353,
        t.ID_DceGlobalGuildBattleAdjust = 1354,
        t.ID_DceGlobalGuildBattleEncourage = 1355,
        t.ID_DceGlobalGuildBattleUpdate = 1356,
        t.ID_DceGlobalGuildBattleData = 1357,
        t.ID_DceGlobalGuildBattleSeeMember = 1358,
        t.ID_DceGlobalGuildBattleProstrate = 1359,
        t.ID_DceGlobalGuildBattleGuildGroupVs = 1360,
        t.ID_DceGlobalGuildBattleGuildVs = 1361,
        t.ID_DceGlobalGuildBattleVsBattle = 1362,
        t.ID_DceScoutGuild = 1363,
        t.ID_DceGlobalGuildBattleChamptionMember = 1364,
        t.ID_DceGlobalGuildBattleChamptionList = 1365,
        t.ID_DceActivityWebData = 1366,
        t.ID_DceGuideSave = 1367,
        t.ID_DceFocusAward = 1368,
        t.ID_DceExchangeCode = 1369,
        t
}();
egret.registerClass(ProtocolMgr, "ProtocolMgr");
var RequestManager = function() {
    function t() {
        this.needShowStoreWindow = !1
    }
    var e = (__define, t),
        a = e.prototype;
    return t.GetInstance = function() {
            return t.instance
        },
        a.RequestMsg = function(t, e, a) {
            void 0 === e && (e = void 0),
                void 0 === a && (a = !0);
            var i = Transport.getPkg(t);
            if (egret.assert(i, "must be a valid protocol id:" + t), void 0 !== e)
                for (var n in e) i[n] = e[n];
            a && WindowManager.getInstance().showWaiting(),
                Transport.instance.send(i)
        },
        a.RequestHandbookInfo = function() {
            WindowManager.getInstance().showWaiting();
            var t = Transport.getPkg(ProtocolMgr.ID_DceOwnedPaper);
            Transport.instance.send(t)
        },
        a.RequestItemList = function() {
            WindowManager.getInstance().showWaiting();
            var t = Transport.getPkg(ProtocolMgr.ID_DcePropList);
            Transport.instance.send(t)
        },
        a.RequestLockShip = function(t, e) {
            WindowManager.getInstance().showWaiting();
            var a = Transport.getPkg(ProtocolMgr.ID_DceShipLockOperation);
            a.id = t,
                a.islock = e,
                Transport.instance.send(a)
        },
        a.RequestLockPaper = function(t, e) {
            WindowManager.getInstance().showWaiting();
            var a = Transport.getPkg(ProtocolMgr.ID_DcePaperLockOperation);
            a.id = t,
                a.islock = e,
                Transport.instance.send(a)
        },
        a.RequestLockParts = function(t, e) {
            WindowManager.getInstance().showWaiting();
            var a = Transport.getPkg(ProtocolMgr.ID_DcePartsLockOpt);
            a.id = t,
                a.lock = e,
                Transport.instance.send(a)
        },
        a.requestLockSoul = function(t, e) {
            WindowManager.getInstance().showWaiting();
            var a = Transport.getPkg(ProtocolMgr.ID_DceSoulLockOpt);
            a.id = t,
                a.lock = e,
                Transport.instance.send(a)
        },
        a.requestLockCaptain = function(t, e) {
            WindowManager.getInstance().showWaiting();
            var a = Transport.getPkg(ProtocolMgr.ID_DceCaptainLockOpt);
            a.captainid = t,
                a.islock = e,
                Transport.instance.send(a)
        },
        a.enterMainWorld = function() {
            this.RequestMsg(ProtocolMgr.ID_DceAllLastID)
        },
        a.enterCampaign = function(t, e) {
            this.RequestMsg(ProtocolMgr.ID_DceStageList, {
                type: t,
                campaignID: e
            })
        },
        a.RequestSetTactic = function(t) {
            WindowManager.getInstance().showWaiting();
            for (var e = Transport.getPkg(ProtocolMgr.ID_DceSetTactic), a = 0; a < t.length - 2; a++) e.shipids[a] = t[a];
            Transport.instance.send(e)
        },
        a.enterBattle = function(t, e, a, i) {
            void 0 === i && (i = 0),
                WindowManager.getInstance().showWaiting();
            var n = Transport.getPkg(ProtocolMgr.ID_DceBattleStart);
            n.type = t,
                e && (n.targetID = e.toString()),
                a && (n.rank = a),
                n.sweep = 0,
                n.partpieceid = 0,
                n.selfrank = i,
                BattleManager.instance.showCloud(function() {
                    Transport.instance.send(n)
                })
        },
        a.enterSweepBattle = function(t, e, a, i) {
            var n = Transport.getPkg(ProtocolMgr.ID_DceBattleStart);
            n.type = t,
                e && (n.targetID = e.toString()),
                a && (n.rank = a),
                i && (n.sweep = i),
                n.partpieceid = 0,
                n.selfrank = 0,
                Transport.instance.send(n),
                WindowManager.getInstance().showWaiting()
        },
        a.ArenaExchange = function(t, e) {
            e = e ? e : 1;
            var a = Transport.getPkg(ProtocolMgr.ID_DceArenaExchange);
            a.id = t,
                a.count = e || 1,
                Transport.instance.send(a),
                WindowManager.getInstance().showWaiting()
        },
        a.GetScoutSoldier = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceScoutSoldier);
            e.uid = t,
                Transport.instance.send(e),
                WindowManager.getInstance().showWaiting()
        },
        a.enterCampBattle = function() {
            var t = this;
            ConfigData.preLoadDats(["campBattleBaseData", "campBattleMapData", "campBattleNPCData", "campBattleScoreData", "HegemonyUnlock"], [CampbattlebasedataParser, CampbattlemapdataParser, CampbattlenpcdataParser, CampbattlescoredataParser, HegemonyunlockParser],
                function() {
                    CampBattleManager.instance.checkNeedUpdate();
                    var e = CampbattlebasedataParser.GetInstance().getDataArr()[0],
                        a = HegemonyunlockParser.GetInstance().getItemById(6).needlvl;
                    if (a > UserData.getInstance()._level) Toast.launch(Locales.get("panel_limit_captain_txt_6", a));
                    else {
                        var i = 0,
                            n = UserData.getInstance().getServerTime() - UserData.getInstance().getServerStartTime(),
                            s = Math.floor(n / 1e3 / 3600 / 24);
                        i = e.beginDay - s,
                            i > 0 ? Toast.launch(Locales.get("panel_active_game_txt_comment_1")) : (CampBattleManager.needOpen = !0, t.RequestMsg(ProtocolMgr.ID_DceEnterCampBattle))
                    }
                },
                this)
        },
        a.getCampBattleData = function() {
            this.RequestMsg(ProtocolMgr.ID_DceCampBattleData)
        },
        a.campBattleMove = function(t) {
            this.RequestMsg(ProtocolMgr.ID_DceCampBattleMove, {
                target: t
            })
        },
        a.campBattleEnd = function() {
            this.RequestMsg(ProtocolMgr.ID_DceCampBattleResult)
        },
        a.buyDetect = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceCampBattleBuy);
            e.type = t,
                Transport.instance.send(e),
                WindowManager.getInstance().showWaiting()
        },
        a.setAI = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceCampBattleSetTrustee);
            e.isopen = t,
                Transport.instance.send(e),
                WindowManager.getInstance().showWaiting()
        },
        a.getShopItemData = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceShopData);
            Transport.instance.send(t),
                WindowManager.getInstance().showWaiting()
        },
        a.ShopItemBuyById = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceBuy);
            a.id = t,
                a.count = e,
                Transport.instance.send(a),
                WindowManager.getInstance().showWaiting()
        },
        a.DResetStageCount = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceResetStageCount);
            e.stageID = t,
                Transport.instance.send(e),
                WindowManager.getInstance().showWaiting()
        },
        t.instance = new t,
        t
}();
egret.registerClass(RequestManager, "RequestManager");
var Transport = function() {
    function t(e) {
        this.state = 0,
            this.pkgMap = e,
            t.instance = this,
            this.init()
    }
    var e = (__define, t),
        a = e.prototype;
    return a.init = function() {
            this.socket = new egret.WebSocket,
                this.socket.addEventListener(egret.ProgressEvent.SOCKET_DATA, this.onReceiveMessage, this),
                this.socket.addEventListener(egret.Event.CONNECT, this.login2, this),
                this.socket.addEventListener(egret.Event.CLOSE, this.onSocketClose, this),
                this.socket.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onSocketError, this),
                this.socket.type = egret.WebSocket.TYPE_STRING
        },
        a.connect = function() {
            Main.trace("连接服务器>>>> ", PlatformManager.instance.serverIP, Number(PlatformManager.instance.serverPort));
            try {
                this.socket.connect(PlatformManager.instance.serverIP, Number(PlatformManager.instance.serverPort))
            } catch (t) {
                Toast.launch("服务器连接失败")
            }
        },
        a.login2 = function() {
            t.instance.onSocketOpen()
        },
        a.login = function() {
            t.loginPanelBool ? (Main.instance.loadingPanel || (Main.instance.loadingPanel = new WindowLoading), Main.instance.loadingPanel.showLogin()) : (Main.instance.setChildIndex(Main.instance.loadingPanel, Main.instance.numChildren), PlatformManager.instance.loginVerify(function() {
                Main.instance.loadingPanel || (Main.instance.loadingPanel = new WindowLoading),
                    GameData.openid = PlatformManager.instance.myself.openid,
                    GameData.uid = PlatformManager.instance.myself.userid,
                    GameData.lastServerId = PlatformManager.instance.myself.serverId,
                    GameData.pf = PlatformManager.instance.myself.platformName,
                    Main.instance.loadingPanel.showServerListUI(),
                    Main.instance.loadingPanel.requestServerList(),
                    Plantform.getInstanceOf().openGame()
            }))
        },
        a.loginConnect = function(t) {
            void 0 === t && (t = ""),
                this.socket.type = egret.WebSocket.TYPE_STRING,
                GameData.longId = t,
                this.socket.type = egret.WebSocket.TYPE_BINARY,
                Main.trace("注册成功"),
                Plantform.getInstanceOf().register(PlatformManager.instance.myself.userid)
        },
        a.onSocketClose = function() {
            this.state = 0,
                Main.trace("Close~~~~~~~~~~~"),
                this.closeSocket(),
                new WindowDuanXian
        },
        a.socketReset = function() {
            this.init(),
                this.connect()
        },
        a.onSocketError = function() {
            this.state = 0,
                Main.trace("error~~~~~~~~~~~"),
                this.closeSocket()
        },
        a.closeSocket = function() {
            this.state = 0,
                this.socket.close(),
                this.socket.removeEventListener(egret.ProgressEvent.SOCKET_DATA, this.onReceiveMessage, this),
                this.socket.removeEventListener(egret.Event.CLOSE, this.onSocketClose, this),
                this.socket.removeEventListener(egret.IOErrorEvent.IO_ERROR, this.onSocketError, this)
        },
        a.onSocketOpen = function() {
            this.socket.type = egret.WebSocket.TYPE_STRING,
                this.state = 1;
            var t = "a," + GameData.uid + "," + GameData.secret;
            this.socket.writeUTF(t),
                this.socket.flush(),
                this.socket.type = egret.WebSocket.TYPE_BINARY,
                Main.trace("连接成功，发送数据：" + t)
        },
        a.send = function(t) {
            var e = t.toArrayBuffer(),
                a = (e.byteLength, new egret.ByteArray),
                i = new egret.ByteArray(e),
                n = this.pkgMap.GetPkgType(t.toString().substr(1));
            a.writeShort(n),
                a.writeBytes(i),
                this.socket.writeBytes(a),
                this.socket.flush()
        },
        a.onReceiveMessage = function(t) {
            var e = new egret.ByteArray;
            this.socket.readBytes(e);
            var a = e.length,
                i = new egret.ByteArray;
            e.readBytes(i, 0, 1);
            var n = i.readUnsignedByte(),
                s = new egret.ByteArray;
            e.readBytes(s, 0, 1);
            var r = s.readUnsignedByte(),
                o = new egret.ByteArray;
            e.readBytes(o, 0, 1);
            var l = o.readUnsignedByte(),
                h = new egret.ByteArray;
            e.readBytes(h, 0, 1);
            var c = h.readUnsignedByte(),
                d = new egret.ByteArray;
            e.readBytes(d, 0, a - 4);
            for (var g = d.length,
                    u = new DataView(d.buffer), p = new DataView(new ArrayBuffer(g)), m = 0; g > m; m++) p.setInt8(m, u.getInt8(m));
            var _ = p.buffer,
                v = new PkgBuffer;
            v.type = 256 * n + r,
                v.pkglen = 256 * l + c,
                v.curlen = a - 4;
            var f = this.getMessageByType(v.type);
            if (f) {
                var I = f.decode(_),
                    T = this.pkgMap.GetPkgHandler(v.type);
                Main.instance.loadingPanel && Main.instance.loadingPanel.triggerPercent(v.type),
                    T && T(I)
            } else Main.trace("错误的协议 : ", v.type, "---------------------->")
        },
        a.getMessageByType = function(e) {
            var a = this.pkgMap.GetPkgByType(e);
            if (a) {
                var i = dcodeIO.ProtoBuf.loadProto(t.protoCache[a], void 0, "./resource/proto/" + a + ".proto"),
                    n = i.build(a);
                return n
            }
            return null
        },
        t.registerHandler = function(e, a) {
            void 0 == a ? Main.trace("Handler is nil for type " + e) : t.instance.pkgMap.SetPkgHandler(e, a)
        },
        t.getPkg = function(e) {
            var a = t.instance.getMessageByType(e);
            return a ? (Main.instance.loadingPanel && Main.instance.loadingPanel.triggerPercent(e), new a) : null
        },
        t.loginPanelBool = !1,
        t
}();
egret.registerClass(Transport, "Transport");
var PlatformBase = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.needShowLogin = function() {
            return !1
        },
        a.isSupportShare = function() {
            return !1
        },
        a.isSupportSubscribe = function() {
            return !1
        },
        a.isSupportToDesktop = function() {
            return !1
        },
        a.isSupportSendToDesktop = function() {
            return !1
        },
        a.isSupportSwitchAccount = function() {
            return !1
        },
        a.init = function() {},
        a.loginVerify = function(t, e) {},
        a.login = function(t, e, a) {},
        a.switchAccount = function() {
            this.isSupportSwitchAccount() && Toast.launch("此平台不支持切换账号")
        },
        a.share = function(t, e, a, i, n) {},
        a.logout = function() {},
        a.getFriends = function(t, e) {},
        a.pay = function(t, e, a, i, n, s) {},
        a.payAgain = function() {},
        a.Subscribe = function() {},
        a.ToDesktop = function(t, e) {},
        a.exist = function() {
            parent.window.location.reload(!0)
        },
        a.getWebUrl = function() {
            return "http://119.29.13.203:9001/"
        },
        t
}();
egret.registerClass(PlatformBase, "PlatformBase");
var Platform68WX = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.isSupportShare = function() {
            return !0
        },
        i.init = function() {
            this._userInfo = {};
            var t = Utils.GetQueryString("openid"),
                e = Utils.GetQueryString("pf"),
                a = Utils.GetQueryString("ts"),
                i = Utils.GetQueryString("sign");
            return null == t || null == e || null == a || null == i ? (this._loginErr = !0, alert("sdk初始化失败，请重新登录游戏"), void this.exist()) : (this._userInfo.openid = t, this._userInfo.platformName = e, this._pf = e, this._sign = i, this._ts = a, void(PlatformManager.instance.myself = this._userInfo))
        },
        i.loginVerify = function(t, a) {
            var i = this;
            Utils.reqeustURL(e.urlRoot + "/play68/verify", {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    ts: this._ts,
                    sign: this._sign
                },
                function(n) {
                    if (n) {
                        var s = JSON.parse(n);
                        s ? 0 == s.ret ? (s.lastIn && (i._userInfo.userid = s.lastIn.uid, i._userInfo.serverId = s.lastIn.serverid), Utils.reqeustURL(e.urlRoot + "/play68/userinfo", {
                                openid: i._userInfo.openid
                            },
                            function(e) {
                                var n = JSON.parse(e);
                                n ? (i._userInfo.username = n.nickname, i._userInfo.headpic = n.headimg, t && (a ? t.apply(a, [i._userInfo]) : t(i._userInfo))) : (alert("登录验证失败，请重新登录游戏"), i.exist())
                            },
                            i)) : (alert("登录验证失败:" + s.msg), i.exist()) : (alert("登录验证失败，请重新登录游戏"), i.exist())
                    } else alert("登录验证失败，请重新登录游戏"),
                        i.exist()
                },
                this)
        },
        i.login = function(t, a, i) {
            var n, s = this,
                r = "/play68/login";
            n = this._userInfo.userid ? {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: this._userInfo.userid,
                    serverid: t
                } : {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: "0",
                    serverid: t
                },
                Utils.reqeustURL(e.urlRoot + r, n,
                    function(e) {
                        if (e) {
                            var n = JSON.parse(e);
                            n ? 0 == n.ret ? (s._userInfo.userid = n.id, s._userInfo.serverKey = n.secret, s._userInfo.serverId = t, PlatformManager.instance.serverIP = n.server, PlatformManager.instance.serverPort = n.port, a && (i ? a.apply(i, [e]) : a(e))) : (alert("登录失败:" + n.msg), s.exist()) : (alert("登录失败，请重新登录游戏"), s.exist())
                        } else alert("登录失败，请重新登录游戏"),
                            s.exist()
                    },
                    this)
        },
        i.share = function(t, e, a, i, n) {
            Play68.shareFriend()
        },
        i.pay = function(t, a, i, n, s, r) {
            var o = this,
                l = {};
            l.openid = this._userInfo.openid,
                l.pf = this._userInfo.platformName,
                l.ts = this._ts,
                l.sign = this._sign,
                l.itemid = t + "_" + this._userInfo.serverId,
                l.itemname = a,
                l.price = i,
                l.count = n,
                Utils.reqeustURL(e.urlRoot + "/play68/paycheck", l,
                    function(e) {
                        if (e) {
                            var h = JSON.parse(e);
                            h ? 0 == h.ret ? (Play68.pay(t + "_" + o._userInfo.serverId, a, i, n, "", h.skey), Play68.onpaysucc(function() {
                                Toast.launch("支付成功"),
                                    s && (r ? s.apply(r, [l]) : s(l))
                            })) : Toast.launch("支付信息校验失败:" + h.msg) : Toast.launch("支付信息校验失败")
                        } else Toast.launch("支付信息校验失败")
                    },
                    this)
        },
        i.getWebUrl = function() {
            return e.urlRoot
        },
        e.urlRoot = "http://119.29.13.203:9001/",
        e
}(PlatformBase);
egret.registerClass(Platform68WX, "Platform68WX");
var PlatformBuddy = function(t) {
    function e() {
        t.call(this),
            this.areaId = 10,
            this.game_key = "444335e600f7ec88",
            this.game_Secret = "cb71b3649d0c6e6c0a6ebc665f13b741"
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this._userInfo = {},
                this._userInfo.userid = "0",
                this._userInfo.serverId = 0,
                this._userInfo.platformName = "hudie",
                this.game_key = Utils.GetQueryString("game_key"),
                this.timestamp = Utils.GetQueryString("timestamp"),
                this.nonce = Utils.GetQueryString("nonce"),
                this.login_type = Utils.GetQueryString("login_type"),
                this.ticket = Utils.GetQueryString("ticket"),
                this.game_url = decodeURIComponent(Utils.GetQueryString("game_url")),
                this.signature = Utils.GetQueryString("signature"),
                console.log("game_key=" + this.game_key + " timestamp=" + this.timestamp + " nonce=" + this.nonce + " login_type=" + this.login_type + " ticket=" + this.ticket + " game_url=" + this.game_url + " signature=" + this.signature);
            var t = new hGame({
                game_key: this.game_key,
                debug: !1
            });
            t.ready(function() {
                    console.log("sdk初始化完成，初始化后会执行hgame.ready中的代码"),
                        t.init();
                    var e = function(t) {
                        0 == t.code ? (this.platform = t.data.platform, console.log("platform:" + this.platform)) : -1 == t.code ? (console.log("取消获取渠道代码"), this.exist()) : t.showMessage ? (console.log(t.showMessage), this.exist()) : (console.log(t.message), this.exist())
                    };
                    t.getPlatform(e);
                    var a = function(t) {
                        0 == t.code ? (this.avatar = t.data.avatar, console.log("avatar:" + this.avatar), this.nickname = t.data.nickname, console.log("nickname:" + this.nickname), this.is_guest = t.data.is_guest, console.log("is_guest:" + this.is_guest)) : -1 == t.code ? (console.log("取消获取用户的基本信息"), this.exist()) : t.showMessage ? (console.log(t.showMessage), this.exist()) : (console.log(t.message), this.exist())
                    };
                    t.getUserInfo(a)
                }),
                PlatformManager.instance.myself = this._userInfo
        },
        i.loginVerify = function(t, e) {
            this.verifyCallback = t;
            var a = "?game_key=" + this.game_key + "&timestamp=" + this.timestamp + "&nonce=" + this.nonce + "&login_type=" + this.login_type + "&ticket=" + this.ticket + "&game_url=" + this.game_url + "&signature=" + this.signature,
                i = new egret.HttpRequest;
            i.responseType = egret.HttpResponseType.TEXT,
                i.open("http://119.29.224.164/hudie/verify" + a, egret.HttpMethod.GET),
                console.log("url : http://119.29.224.164/hudie/verify" + a),
                i.addEventListener(egret.Event.COMPLETE, this.onGetComplete, this),
                i.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onGetIOError, this),
                i.send()
        },
        i.onGetComplete = function(t) {
            var e = t.currentTarget,
                a = JSON.parse(e.response);
            0 == a.ret ? (a.lastIn && (this._userInfo.userid = a.lastIn.uid, this._userInfo.serverId = a.lastIn.serverid), this.open_id = a.data.open_id, this._userInfo.openid = a.data.open_id, this._userInfo.username = a.data.nickname, this._userInfo.headpic = a.data.avatar, this.verifyCallback && this.verifyCallback(this._userInfo)) : alert(a.ret.msg)
        },
        i.onGetIOError = function(t) {
            alert("检测到您的网络不畅通，请确认您的网络连接后重试!")
        },
        i.login = function(t, e, a) {
            WindowManager.getInstance().showWaiting(),
                this.tmpServerId = t,
                this.loginCallback = e;
            var i;
            i = this._userInfo.userid ? {
                openid: this._userInfo.openid,
                pf: this._userInfo.platformName,
                uid: this._userInfo.userid,
                serverid: t
            } : {
                openid: this._userInfo.openid,
                pf: this._userInfo.platformName,
                uid: "0",
                serverid: t
            };
            var n = "?openid=" + i.openid + "&pf=" + i.pf + "&uid=" + i.uid + "&serverid=" + i.serverid,
                s = new egret.HttpRequest;
            s.responseType = egret.HttpResponseType.TEXT,
                s.open("http://119.29.224.164/hudie/login" + n, egret.HttpMethod.GET),
                console.log("url : http://119.29.224.164/hudie/login" + n),
                s.addEventListener(egret.Event.COMPLETE, this.onGetComplete1, this),
                s.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onGetIOError1, this),
                s.send()
        },
        i.onGetComplete1 = function(t) {
            WindowManager.getInstance().hideWaiting();
            var e = t.currentTarget,
                a = JSON.parse(e.response);
            0 == a.ret ? (this._userInfo.userid = a.id, this._userInfo.serverKey = a.secret, this._userInfo.serverId = this.tmpServerId, PlatformManager.instance.serverIP = a.server, PlatformManager.instance.serverPort = a.port, this.loginCallback && this.loginCallback()) : alert(a.ret.msg)
        },
        i.onGetIOError1 = function(t) {
            WindowManager.getInstance().showWaiting(),
                this.login(this.tmpServerId, this.loginCallback)
        },
        i.share = function(t, e, a, i, n) {
            var s = new hGame({
                game_key: this.game_key,
                debug: !1
            });
            s.ready(function() {
                var t = {
                        open_id: this.open_id,
                        game_key: this.game_key,
                        timestamp: this.timestamp,
                        signature: this.signature,
                        title: "",
                        message: "击沉一切，目标全世界！",
                        imgUrl: "",
                        url: "",
                        extend: {}
                    },
                    e = function(t) {
                        0 == t.code ? Toast.launch("分享成功") : -1 == t.code ? Toast.launch("取消分享") : (Toast.launch("分享失败"), t.showMessage ? console.log(t.showMessage) : console.log(t.message))
                    };
                s.doExtraAction("share", t, e)
            })
        },
        i.Subscribe = function() {
            var t = this.signature,
                e = this.open_id,
                a = new hGame({
                    game_key: this.game_key,
                    debug: !1
                });
            a.ready(function() {
                var i = (new Date).valueOf(),
                    n = {
                        open_id: e,
                        game_key: this.game_key,
                        timestamp: i,
                        signature: t,
                        autoRedirect: !0
                    };
                console.log("====== 关注 ======"),
                    console.log("open_id=" + n.open_id),
                    console.log("game_key=" + n.game_key),
                    console.log("timestamp=" + n.timestamp),
                    console.log("signature=" + n.signature);
                var s = function(t) {
                    0 == t.code ? (Toast.launch("已关注"), console.log("返回数据, open_id:" + t.data.open_id)) : -1 == t.code ? Toast.launch("未关注") : (Toast.launch("关注失败"), t.showMessage ? console.log(t.showMessage) : console.log(t.message))
                };
                a.doExtraAction("subscribe", n, s)
            })
        },
        i.ToDesktop = function() {
            var t = this.signature,
                e = new hGame({
                    game_key: this.game_key,
                    debug: !1
                });
            e.ready(function() {
                var a = (new Date).valueOf(),
                    i = {
                        open_id: this.open_id,
                        game_key: this.game_key,
                        timestamp: a,
                        signature: t
                    };
                console.log("====== 添加到桌面 ======"),
                    console.log("open_id=" + i.open_id),
                    console.log("game_key=" + i.game_key),
                    console.log("timestamp=" + i.timestamp),
                    console.log("signature=" + i.signature);
                var n = function(t) {
                    0 == t.code ? Toast.launch("添加到桌面成功") : -1 == t.code ? Toast.launch("取消添加到桌面") : (Toast.launch("添加到桌面失败"), t.showMessage ? console.log(t.showMessage) : console.log(t.message))
                };
                e.doExtraAction("toDesktop", i, n)
            })
        },
        i.pay = function(t, a, i, n, s, r) {
            var o = this,
                l = new Date,
                h = l.valueOf(),
                c = {
                    game_key: this.game_key,
                    open_id: this._userInfo.openid,
                    total_fee: i,
                    game_orderno: "",
                    subject: a,
                    description: "",
                    notify_url: e.urlRoot + "/hudie/recharge",
                    timestamp: Number(h),
                    nonce: this.nonce,
                    game_area: this.areaId.toString(),
                    game_group: this._userInfo.serverId.toString(),
                    game_level: UserData.getInstance()._level.toString(),
                    game_role_id: Number(this._userInfo.userid),
                    itemid: t
                };
            console.log("game_key=" + c.game_key),
                console.log("open_id=" + c.open_id),
                console.log("total_fee=" + c.total_fee),
                console.log("game_orderno=" + c.game_orderno),
                console.log("subject=" + c.subject),
                console.log("description=" + c.description),
                console.log("notify_url=" + c.notify_url),
                console.log("timestamp=" + c.timestamp),
                console.log("nonce=" + c.nonce),
                console.log("game_area=" + c.game_area),
                console.log("game_group=" + c.game_group),
                console.log("game_level=" + c.game_level),
                console.log("game_role_id=" + c.game_role_id),
                console.log("itemid=" + c.itemid),
                Utils.reqeustURL(e.urlRoot + "/hudie/getPaySig", c,
                    function(t) {
                        if (t) {
                            console.log("ret = " + t);
                            var e = JSON.parse(t);
                            if (e) {
                                var a = new hGame({
                                    game_key: o.game_key,
                                    debug: !1
                                });
                                a.ready(function() {
                                    var t = function(t) {
                                        0 == t.code ? GameAlert.getInstance().showPaySuccess("充值成功", "充值成功") : -1 == t.code ? GameAlert.getInstance().show("取消充值", "取消充值") : t.showMessage ? GameAlert.getInstance().show(t.showMessage, t.showMessage) : GameAlert.getInstance().show(t.message, t.message)
                                    };
                                    a.pay(e, "", t)
                                })
                            } else Toast.launch("支付信息校验失败")
                        } else Toast.launch("支付信息校验失败")
                    })
        },
        i.getWebUrl = function() {
            return e.urlRoot
        },
        i.isSupportShare = function() {
            return !1
        },
        i.isSupportSubscribe = function() {
            return !1
        },
        i.isSupportToDesktop = function() {
            return !1
        },
        e.urlRoot = "http://119.29.224.164/",
        e
}(PlatformBase);
egret.registerClass(PlatformBuddy, "PlatformBuddy");
var PlatformBusiness = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.isSupportSubscribe = function() {
            return !1
        },
        i.Subscribe = function() {},
        i.init = function() {
            this._userInfo = {};
            var t = "business";
            this._userInfo.platformName = t,
                this._pf = t,
                PlatformManager.instance.myself = this._userInfo
        },
        i.loginVerify = function(t, a) {
            var i = this;
            Main.instance.loadingPanel ? Main.instance.setChildIndex(Main.instance.loadingPanel, Main.instance.numChildren) : Main.instance.loadingPanel = new WindowLoading;
            var n = !this._switchAccount;
            Main.instance.loadingPanel.showLogin(function(n) {
                    i._userInfo.openid = n,
                        Utils.reqeustURL(e.urlRoot + "/account/verify", {
                                openid: i._userInfo.openid,
                                pf: i._pf
                            },
                            function(e) {
                                if (e) {
                                    var n = JSON.parse(e);
                                    n ? 0 == n.ret ? (n.lastIn ? (i._userInfo.userid = n.lastIn.uid, i._userInfo.serverId = n.lastIn.serverid) : (i._userInfo.userid = null, i._userInfo.serverId = null), t && (a ? t.apply(a, [i._userInfo]) : t(i._userInfo))) : (alert("登录验证失败:" + n.msg), i.exist()) : (alert("登录验证失败，请重新登录游戏"), i.exist())
                                } else alert("登录验证失败，请重新登录游戏"),
                                    i.exist()
                            },
                            i)
                },
                this, n)
        },
        i.login = function(t, a, i) {
            var n, s = this,
                r = "/account/login";
            n = this._userInfo.userid ? {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: this._userInfo.userid,
                    serverid: t
                } : {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: "0",
                    serverid: t
                },
                Utils.reqeustURL(e.urlRoot + r, n,
                    function(t) {
                        if (t) {
                            var e = JSON.parse(t);
                            e ? 0 == e.ret ? (s._userInfo.userid = e.id, s._userInfo.serverKey = e.secret, PlatformManager.instance.serverIP = e.server, PlatformManager.instance.serverPort = e.port, a && (i ? a.apply(i, [t]) : a(t))) : (alert("登录失败:" + e.msg), s.exist()) : (alert("登录失败，请重新登录游戏"), s.exist())
                        } else alert("登录失败，请重新登录游戏"),
                            s.exist()
                    },
                    this)
        },
        i.switchAccount = function() {
            this._switchAccount = !0,
                WindowManager.getInstance().hideAll(),
                CommunicateManager._firstAuth = !0,
                CommunicateManager.initedUserData = !1,
                this.loginVerify(function(t) {
                    GameData.openid = PlatformManager.instance.myself.openid,
                        GameData.uid = PlatformManager.instance.myself.userid,
                        GameData.lastServerId = PlatformManager.instance.myself.serverId,
                        GameData.pf = PlatformManager.instance.myself.platformName,
                        Main.instance.loadingPanel.showServerListUI(),
                        Main.instance.loadingPanel.requestServerList()
                })
        },
        i.needShowLogin = function() {
            return !0
        },
        i.getWebUrl = function() {
            return e.urlRoot
        },
        e.urlRoot = "http://119.29.13.203:9001/",
        e
}(PlatformBase);
egret.registerClass(PlatformBusiness, "PlatformBusiness");
var PlatformHortor = function(t) {
    function e() {
        t.call(this),
            this.urlRoot = "http://119.29.224.164/",
            this.gameId = "zjdg",
            this.platObj = {
                isSubscribe: !1,
                sign: "",
                time: 0,
                friendCode: "",
                pf: "hortor"
            },
            this.orderInfo = new plat.hortor.OrderVO
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.isSupportSubscribe = function() {
            return !1
        },
        i.isSubscribed = function() {
            return this.platObj.isSubscribe
        },
        i.init = function() {
            var t = window.HORTOR_AGENT;
            return t ? (this._userInfo = {},
                this._userInfo.userid = "0", this._userInfo.serverId = 0, this._userInfo.openid = Utils.GetQueryString("userId"), this._userInfo.username = Utils.GetQueryString("userName"), this._userInfo.headpic = Utils.GetQueryString("userImg"), this._userInfo.platformName = this.platObj.pf, this.platObj.isSubscribe = "true" == Utils.GetQueryString("isSubscribe"), this.platObj.sign = Utils.GetQueryString("sign"), this.platObj.time = parseInt(Utils.GetQueryString("time")), this.platObj.friendCode = Utils.GetQueryString("friendCode"), t.init(), t.config({
                    gameId: "zjdg",
                    share: {
                        timeline: {
                            title: "战舰帝国大决战",
                            desc: "击沉一切，目标全世界！",
                            imgUrl: "../hortorgames/resource/assets/Panel/GUI_Homepage_Icon_33.png"
                                /*tpa=http://1251006671.cdn.myqcloud.com/1251006671/shipH5/hortorgames/resource/assets/Panel/GUI_Homepage_Icon_33.png*/
                                ,
                            success: this.OnShareSuc,
                            cancel: this.OnShareCancel
                        },
                        friend: {
                            title: "战舰帝国大决战",
                            desc: "击沉一切，目标全世界！",
                            imgUrl: "../hortorgames/resource/assets/Panel/GUI_Homepage_Icon_33.png"
                                /*tpa=http://1251006671.cdn.myqcloud.com/1251006671/shipH5/hortorgames/resource/assets/Panel/GUI_Homepage_Icon_33.png*/
                                ,
                            success: this.OnShareSuc,
                            cancel: this.OnPayFail
                        },
                        shareCustomParam: {}
                    },
                    pay: {
                        success: this.OnPaySuc,
                        cancel: this.OnPayFail
                    }
                }), this._userInfo.openid && this.platObj.sign ? (PlatformManager.instance.myself = this._userInfo, void EventManager.instance.addEventListener(EventTypes.ENTER_MAINSCENE, this.OnEnterScene, this)) : (alert("sdk初始化失败，请重新登录游戏"), void this.exist())) : (alert("sdk找不到"), void this.exist())
        },
        i.OnEnterScene = function() {
            if (this.platObj.isSubscribe && !UserData.getInstance().focus_award) {
                var t = Transport.getPkg(ProtocolMgr.ID_DceFocusAward);
                Transport.instance.send(t)
            }
        },
        i.loginVerify = function(t, e) {
            var a = this;
            Utils.reqeustURL(this.urlRoot + "/" + this.platObj.pf + "/verify", {
                    time: this.platObj.time,
                    sign: this.platObj.sign,
                    userId: this._userInfo.openid,
                    friendCode: this.platObj.friendCode
                },
                function(i) {
                    if (i) try {
                        var n = JSON.parse(i);
                        if (0 != n.ret) throw n.msg;
                        n.lastIn && (a._userInfo.serverId = n.lastIn.serverid, a._userInfo.userid = n.lastIn.uid),
                            t.apply(e, [a._userInfo])
                    } catch (s) {
                        return alert("登录验证返回错误：" + s),
                            void a.exist()
                    }
                },
                this)
        },
        i.login = function(t, e, a) {
            var i = this,
                n = {
                    openid: this._userInfo.openid,
                    pf: this.platObj.pf,
                    uid: this._userInfo.userid || "0",
                    serverid: t
                };
            Utils.reqeustURL(this.urlRoot + "/" + this.platObj.pf + "/login", n,
                function(n) {
                    if (n) try {
                        var s = JSON.parse(n);
                        if (0 != s.ret) throw s.msg;
                        i._userInfo.userid = s.id,
                            i._userInfo.serverKey = s.secret,
                            i._userInfo.serverId = t,
                            PlatformManager.instance.serverIP = s.server,
                            PlatformManager.instance.serverPort = s.port,
                            e.apply(a, [n])
                    } catch (r) {
                        return alert("登录返回错误：" + r),
                            void i.exist()
                    }
                },
                this)
        },
        i.OnShareSuc = function() {
            Toast.launch("分享成功!")
        },
        i.OnShareCancel = function() {},
        i.OnPaySuc = function() {
            Toast.launch("支付成功!"),
                this.orderInfo.callback && this.orderInfo.callback.apply(this.orderInfo.thisObj, [this.orderInfo])
        },
        i.OnPayFail = function() {
            Toast.launch("支付取消!")
        },
        i.switchAccount = function() {
            Toast.launch("此平台不支持切换账号")
        },
        i.share = function(t, e, a, i, n) {},
        i.Subscribe = function() {
            if (this.isSupportSubscribe())
                if (this.platObj.isSubscribe) Toast.launch("您已关注，奖励已发送至邮箱，请查收");
                else {
                    var t = window.HORTOR_AGENT;
                    t.showQRCode()
                }
        },
        i.logout = function() {},
        i.getFriends = function(t, e) {},
        i.pay = function(t, e, a, i, n, s) {
            var r = this,
                o = {
                    time: this.platObj.time,
                    sign: this.platObj.sign,
                    userId: this._userInfo.openid,
                    friendCode: this.platObj.friendCode,
                    goodsId: t,
                    goodsName: e,
                    money: a,
                    ext: this._userInfo.serverId
                };
            Utils.reqeustURL(this.urlRoot + "/" + this.platObj.pf + "/paycheck", o,
                function(t) {
                    if (t) try {
                        var o = JSON.parse(t);
                        if (0 != o.ret) throw o.msg;
                        var l = {
                                order_id: o.order_id,
                                app_id: o.app_id,
                                timestamp: o.timestamp,
                                nonce_str: o.nonce_str,
                                "package": o["package"],
                                sign_type: o.sign_type,
                                pay_sign: o.pay_sign
                            },
                            h = window.HORTOR_AGENT;
                        h.pay(l),
                            r.orderInfo.orderId = l.order_id,
                            r.orderInfo.callback = n,
                            r.orderInfo.thisObj = s,
                            r.orderInfo.itemName = e,
                            r.orderInfo.price = a,
                            r.orderInfo.count = i
                    } catch (c) {
                        return alert("支付返回错误：" + c),
                            void r.exist()
                    }
                },
                this)
        },
        i.exist = function() {
            parent.window.location.reload(!0)
        },
        i.getWebUrl = function() {
            return this.urlRoot
        },
        e
}(PlatformBase);
egret.registerClass(PlatformHortor, "PlatformHortor");
var plat;
!
function(t) {
    var e;
    !
    function(t) {
        var e = function() {
            function t() {}
            var e = (__define, t);
            e.prototype;
            return t
        }();
        t.OrderVO = e,
            egret.registerClass(e, "plat.hortor.OrderVO")
    }(e = t.hortor || (t.hortor = {}))
}(plat || (plat = {}));
var getTimer = egret.getTimer,
    PlatformLaya = function(t) {
        function e() {
            t.apply(this, arguments),
                this.urlRoot = "http://119.29.224.164/",
                this.platObj = {
                    sp: 0,
                    access_token: "",
                    pf: "laya"
                }
        }
        __extends(e, t);
        var a = (__define, e),
            i = a.prototype;
        return i.isSupportShare = function() {
                return console.log("支持分享：" + market.canShareAndFeed()),
                    market.canShareAndFeed()
            },
            i.isSupportToDesktop = function() {
                return console.log("支持发送到桌面：" + market.canSendToDesktop()),
                    market.canSendToDesktop()
            },
            i.isSupportSwitchAccount = function() {
                return console.log("支持切换账户：" + market.canLogout()),
                    market.canLogout()
            },
            i.switchAccount = function() {
                var e = this;
                t.prototype.switchAccount.call(this),
                    market.logout("",
                        function(t) {
                            try {
                                var a = JSON.parse(t);
                                if (0 != a.result) throw a.desc;
                                e.exist()
                            } catch (i) {
                                alert("注销用户失败：" + i)
                            }
                        })
            },
            i.ToDesktop = function(t, e) {
                var a = this,
                    i = {
                        title: "发送到桌面",
                        imageUrl: "resource/assets/Panel/GUI_Homepage_Icon_33.png"
                            /*tpa=resource/assets/Panel/GUI_Homepage_Icon_33.png*/
                            ,
                        pageUrl: "http://game.layabox.com/823"
                    };
                market.sendToDesktop(JSON.stringify(i),
                    function(t) {
                        try {
                            var e = JSON.parse(t);
                            0 == e.result && Toast.launch("发送桌面成功")
                        } catch (i) {
                            return alert("发送桌面失败：" + i),
                                void a.exist()
                        }
                    })
            },
            i.share = function(t, e, a, i, n) {
                var s = this,
                    r = {
                        title: "战舰帝国大决战",
                        link: "http://game.layabox.com/823",
                        desc: "击沉一切，目标全世界！",
                        imgsrc: "resource/assets/Panel/GUI_Homepage_Icon_33.png"
                            /*tpa=resource/assets/Panel/GUI_Homepage_Icon_33.png*/
                            ,
                        imgtitle: "战舰帝国大决战",
                        cutxt: ""
                    };
                market.enterShareAndFeed(JSON.stringify(r),
                    function(t) {
                        try {
                            var e = JSON.parse(t);
                            if (-1 == e.result && Toast.launch("分享取消"), 0 != e.result) throw e.desc
                        } catch (a) {
                            return alert("分享失败：" + a),
                                void s.exist()
                        }
                    })
            },
            i.init = function() {
                var t = window.localStorage.getItem("loginResult");
                if (t) {
                    var e = JSON.parse(t);
                    this.platObj.sp = e.spId,
                        this.platObj.access_token = e.data.accessToken,
                        this._userInfo = {},
                        this._userInfo.userid = "0",
                        this._userInfo.serverId = 0,
                        this._userInfo.openid = e.data.unionUserId,
                        this._userInfo.username = e.data.nickName,
                        this._userInfo.headpic = e.data.avatarUrl,
                        this._userInfo.platformName = this.platObj.pf,
                        PlatformManager.instance.myself = this._userInfo
                }
            },
            i.loginVerify = function(t, e) {
                var a = this;
                Utils.reqeustURL(this.urlRoot + "/" + this.platObj.pf + "/verify", {
                        sp: this.platObj.sp,
                        time: (new Date).getTime(),
                        openId: window.openId,
                        userId: this._userInfo.openid,
                        access_token: this.platObj.access_token
                    },
                    function(i) {
                        if (i) try {
                            var n = JSON.parse(i);
                            if (0 != n.ret) throw n.msg;
                            n.lastIn && (a._userInfo.serverId = n.lastIn.serverid, a._userInfo.userid = n.lastIn.uid),
                                t && t.apply(e, [a._userInfo])
                        } catch (s) {
                            return alert("登录验证返回错误：" + s),
                                void a.exist()
                        }
                    },
                    this)
            },
            i.login = function(t, e, a) {
                var i = this,
                    n = {
                        openid: this._userInfo.openid,
                        pf: this.platObj.pf,
                        uid: this._userInfo.userid || "0",
                        serverid: t
                    };
                Utils.reqeustURL(this.urlRoot + "/" + this.platObj.pf + "/login", n,
                    function(n) {
                        if (n) try {
                            var s = JSON.parse(n);
                            if (0 != s.ret) throw s.msg;
                            i._userInfo.userid = s.id,
                                i._userInfo.serverKey = s.secret,
                                i._userInfo.serverId = t,
                                PlatformManager.instance.serverIP = s.server,
                                PlatformManager.instance.serverPort = s.port,
                                e.apply(a, [n])
                        } catch (r) {
                            return alert("登录返回错误：" + r),
                                void i.exist()
                        }
                    },
                    this)
            },
            i.pay = function(t, e, a, i, n, s) {
                var r = this;
                RechargeManager.instance.LoadTable(function() {
                        var i = CashdataParser.GetInstance().getItemById(t),
                            n = {
                                serverid: r._userInfo.serverId,
                                itemid: t
                            },
                            s = {
                                order_id: "",
                                goods_name: e,
                                amount: 100 * a,
                                goods_desc: i.name_l,
                                serverId: r._userInfo.serverId,
                                params: JSON.stringify(n)
                            };
                        market.recharge(s,
                            function(t) {
                                console.log("recharge返回：" + t)
                            })
                    },
                    this)
            },
            i.getWebUrl = function() {
                return this.urlRoot
            },
            e
    }(PlatformBase);
egret.registerClass(PlatformLaya, "PlatformLaya");
var PlatformQQ = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.isSupportShare = function() {
            return !0
        },
        i.init = function() {
            this._userInfo = {};
            var t = Utils.GetQueryString("openid", !0),
                e = Utils.GetQueryString("openkey", !0),
                a = "1105591328",
                i = Utils.GetQueryString("sig", !0),
                n = "wanba_ts",
                s = Utils.GetQueryString("format", !0),
                r = Utils.GetQueryString("userip", !0);
            return null == t ? (this._loginErr = !0, alert("sdk初始化失败，请重新登录游戏" + window.location.href + "--->"), void this.exist()) : (this._userInfo.openid = t, this._userInfo.openkey = e, this._userInfo.platformName = n, this._userInfo.where = r, this._userInfo.format = s, this._pf = n, this._sig = i, this._ip = r, this._appId = a, this.platfortType = Number(QZAppExternal.getPlatform()), this.platfortType = this.platfortType || 1, this.platfortType = 3 == this.platfortType ? 1 : this.platfortType, void(PlatformManager.instance.myself = this._userInfo))
        },
        i.loginVerify = function(t, a) {
            var i = this;
            Utils.reqeustURL(e.urlRoot + "/wanba/verify", {
                    openid: this._userInfo.openid,
                    openkey: this._userInfo.openkey,
                    appid: this._appId,
                    sig: this._sig,
                    pf: this._pf,
                    format: "json",
                    userip: this._ip,
                    zoneid: this.platfortType
                },
                function(n) {
                    if (n) {
                        var s = JSON.parse(n);
                        s ? 0 == s.ret ? (s.lastIn && (i._userInfo.userid = s.lastIn.uid, i._userInfo.serverId = s.lastIn.serverid, e.loginUserId = s.lastIn.uid), t && (a ? t.apply(a) : t())) : (alert("登录验证失败:" + s.msg), i.exist()) : (alert("登录验证失败，请重新登录游戏"), i.exist())
                    } else alert("登录验证失败，请重新登录游戏"),
                        i.exist()
                },
                this)
        },
        i.login = function(t, a, i) {
            var n, s = this,
                r = "/wanba/login";
            n = e.loginUserId ? {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: e.loginUserId,
                    serverid: t,
                    zoneid: this.platfortType
                } : {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: "0",
                    serverid: t,
                    zoneid: this.platfortType
                },
                Utils.reqeustURL(e.urlRoot + r, n,
                    function(e) {
                        if (e) {
                            var r = JSON.parse(e);
                            r ? 0 == r.ret ? (s._userInfo.userid = r.id, s._userInfo.serverKey = r.secret, s._userInfo.serverId = t, PlatformManager.instance.serverIP = r.server, PlatformManager.instance.serverPort = r.port, a && (i ? a.apply(i, [e]) : a(e))) : (alert("登录失败:" + r.msg + Log.objectToString(n)), s.exist()) : (alert("登录失败，请重新登录游戏"), s.exist())
                        } else alert("登录失败，请重新登录游戏"),
                            s.exist()
                    },
                    this)
        },
        i.payAgain = function() {
            this.pay(this.payParames.itemid, this.payParames.itemname, this.payParames.price, this.payParames.count, this.payParames.callback, this.payParames.thisObj)
        },
        i.pay = function(t, a, i, n, s, r) {
            var o = this;
            this.payParames = {
                itemid: t,
                itemname: a,
                price: i,
                count: n,
                callback: s,
                thisObj: r
            };
            var l = {};
            l.openid = this._userInfo.openid,
                l.openkey = this._userInfo.openkey,
                l.appid = this._appId,
                l.format = "json",
                l.userip = this._ip,
                l.pf = this._userInfo.platformName,
                l.sig = this._sig,
                l.zoneid = this.platfortType,
                l.serverid = this._userInfo.serverId,
                Utils.reqeustURL(e.urlRoot + "/wanba/userinfo", l,
                    function(s) {
                        if (s) {
                            var r = JSON.parse(s);
                            r ? 0 == r.code ? r.data[0].score >= i ? (l.itemid = 1 == o.platfortType ? 7241 + Number(t) - 2 : 7249 + Number(t) - 2, l.itemname = a, l.price = i, l.count = n, Utils.reqeustURL(e.urlRoot + "/wanba/buy", l,
                                function(t) {
                                    var e = JSON.parse(t);
                                    0 == Number(e.ret) ? Toast.launch("支付成功") : Toast.launch("支付失败")
                                })) : popPayTips({
                                defaultScore: i
                            }) : Toast.launch("获取用户信息失败:" + r.subcode) : Toast.launch("获取用户信息失败")
                        } else Toast.launch("获取用户信息失败")
                    },
                    this)
        },
        i.getWebUrl = function() {
            return e.urlRoot
        },
        e.urlRoot = "http://119.29.224.164/",
        e
}(PlatformBase);
egret.registerClass(PlatformQQ, "PlatformQQ");
var PlatformQQBrowser = function(t) {
    function e() {
        t.call(this),
            this._urlRoot = "http://119.29.224.164/qweb",
            this._appId = "5295796432",
            this.areaId = 6,
            this._pf = "qweb",
            this.loginCallBackObj = {}
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.isQQBrowser = function() {
            var t = navigator.userAgent,
                e = /micromessenger/gi.test(t),
                a = /mqq/gi.test(t),
                i = /mobile.*qq/gi.test(t);
            return (i || e) && (a = !1),
                a
        },
        i.isSupportSwitchAccount = function() {
            return !0
        },
        i.isSupportToDesktop = function() {
            return this.isQQBrowser()
        },
        i.isSupportSubscribe = function() {
            return this.isQQBrowser()
        },
        i.isSupportShare = function() {
            return !0
        },
        i.ToDesktop = function(t, e) {
            this._sdk.sendToDesktop({},
                function(a, i) {
                    var n = 1 === a;
                    n ? Utils.toast("成功发送到桌面") : Utils.toast("发送到桌面失败"),
                        t && (e ? t.apply(e, n) : t.apply(n))
                })
        },
        i.init = function() {
            var t = this;
            this._userInfo = {},
                this._userInfo.platformName = this._pf,
                PlatformManager.instance.myself = this._userInfo;
            var e = window;
            this._sdk = e.sdk = e.browser.x5gameplayer;
            var a = function(e) {
                if (e && 0 === e.result) {
                    var a = t._loginType;
                    a || (a = UserDefault.instance.getStringForKey("loginType"));
                    var i = (e.msg, e.qbopenid),
                        n = e.qbopenkey,
                        s = e.refreshToken,
                        r = e.nickName,
                        o = e.avatarUrl,
                        l = e.rspsig;
                    t.store(a, "openid", i),
                        t.store(a, "openkey", n),
                        t.store(a, "refreshToken", s),
                        t.store(a, "nickname", r),
                        t.store(a, "avatar", o),
                        t.store(a, "rspsig", l),
                        t._rspsig = l;
                    var h = Utils.getCurrentTime() + 7200;
                    t.store(a, "expireTime", h.toString())
                }
            };
            this._sdk.config({
                loginCallBack: a
            });
            var i = this._sdk.version();
            i && (this._version = Number(i)),
                EventManager.instance.addEventListener(EventTypes.LOGIN_QQ, this.onEventLogin, this)
        },
        i.store = function(t, e, a) {
            UserDefault.instance.setStringForKey(t + "_" + e, a)
        },
        i.get = function(t, e) {
            return UserDefault.instance.getStringForKey(t + "_" + e)
        },
        i.onEventLogin = function(t, e) {
            var a = this;
            this._loginType = t,
                UserDefault.instance.setStringForKey("loginType", t);
            var i = !1;
            if (e) {
                var n = this.get(this._loginType, "expireTime");
                n && (n = Number(n));
                var s = this.get(t, "openid");
                "" !== s && n && n > Utils.getCurrentTime() && (this.__loginVerify(this.loginCallBackObj.callback, this.loginCallBackObj.thisobj,
                    function() {
                        a.onEventLogin(t, !1)
                    },
                    this), i = !0)
            }
            i || Utils.reqeustURL(this._urlRoot + "/getsig", null,
                function(e) {
                    var i = JSON.parse(e);
                    if (i && 0 == i.ret) {
                        var n = i.sig,
                            s = i.sigData,
                            r = {};
                        r.appid = a._appId,
                            r.appsig = n,
                            r.appsigData = s,
                            r.loginType = t,
                            a._sdk.login(r,
                                function(t) {
                                    if (t && 0 === t.result) {
                                        var e = (t.msg, t.qbopenid),
                                            i = t.qbopenkey,
                                            n = t.refreshToken,
                                            s = t.nickName,
                                            r = t.avatarUrl,
                                            o = t.rspsig;
                                        a._refreshToken = n;
                                        var l = Utils.getCurrentTime() + 7200;
                                        a.store(a._loginType, "expireTime", l.toString()),
                                            a.store(a._loginType, "openid", e),
                                            a.store(a._loginType, "openkey", i),
                                            a.store(a._loginType, "refreshToken", n),
                                            a.store(a._loginType, "nickname", s),
                                            a.store(a._loginType, "avatar", r),
                                            a.store(a._loginType, "rspsig", o),
                                            a.__loginVerify(a.loginCallBackObj.callback, a.loginCallBackObj.thisobj)
                                    } else Utils.toast("登录失败" + (t.msg ? t.msg : "")),
                                        Utils.delayCall(3e3,
                                            function() {
                                                a.exist()
                                            },
                                            a)
                                })
                    } else Utils.toast("获取登录签名失败"),
                        Utils.delayCall(3e3,
                            function() {
                                a.exist()
                            },
                            a)
                })
        },
        i.__loginVerify = function(t, e, a, i) {
            var n = this,
                s = this.get(this._loginType, "openid"),
                r = this.get(this._loginType, "openkey"),
                o = (this.get(this._loginType, "refreshToken"), this.get(this._loginType, "nickname")),
                l = this.get(this._loginType, "avatar");
            this.get(this._loginType, "rspsig");
            this._userInfo.openid = s,
                this._userInfo.openkey = r,
                this._userInfo.username = o,
                this._userInfo.headpic = l,
                Utils.reqeustURL(this._urlRoot + "/verify", {
                        openid: s
                    },
                    function(s) {
                        var r = !1;
                        if (s) {
                            var o = JSON.parse(s);
                            o && 0 == o.ret && (o.lastIn && (n._userInfo.userid = o.lastIn.uid, n._userInfo.serverId = o.lastIn.serverid), t && (e ? t.apply(e, [n._userInfo]) : t(n._userInfo)), r = !0)
                        }
                        r || (a ? Utils.call(a, i) : (Utils.toast("登录验证失败，请重新进入游戏"), Utils.delayCall(3e3,
                            function() {
                                n.exist()
                            },
                            n)))
                    })
        },
        i.loginVerify = function(t, e) {
            var a = this;
            if (this.loginCallBackObj = {
                    callback: t,
                    thisobj: e
                },
                this._sdk.getAvailableLoginType) this._sdk.getAvailableLoginType({
                    appid: this._appId
                },
                function(t) {
                    var e = !1;
                    if (t && 0 === t.result) {
                        if (1 == t.loginTypes.length) {
                            var i = t.loginTypes[0];
                            EventManager.instance.dispatchEvent(EventTypes.LOGIN_QQ, i.loginType, !!i.accInfo)
                        } else Main.instance.loadingPanel || (Main.instance.loadingPanel = new WindowLoading),
                            Main.instance.loadingPanel.showQQLogin(t);
                        e = !0
                    }
                    e || (Utils.toast("获取可用登录方式失败，重新进入游戏"), Utils.delayCall(3e3,
                        function() {
                            a.exist()
                        },
                        a))
                });
            else {
                Main.instance.loadingPanel || (Main.instance.loadingPanel = new WindowLoading);
                var i = {
                    loginTypes: [{
                            loginType: "qq"
                        },
                        {
                            loginType: "wx"
                        }
                    ]
                };
                Main.instance.loadingPanel.showQQLogin(i)
            }
        },
        i.logout = function() {
            var t = this,
                e = {};
            e.appid = this._appId,
                e.qbopenid = this._userInfo.openid,
                e.loginType = this._loginType;
            var a = this._loginType;
            this.store(a, "openid", ""),
                this._sdk.logout(e,
                    function(e) {
                        e && 0 === e.result ? t.exist() : Utils.toast("注销账号失败!" + e.msg)
                    })
        },
        i.switchAccount = function() {
            this.logout()
        },
        i.refreshToken = function(t, e) {
            var a = this,
                i = {};
            i.appid = this._appId,
                i.qbopenid = this._userInfo.openid,
                i.refreshToken = this._refreshToken,
                this._sdk.refreshToken(i,
                    function(i) {
                        if (i && 0 === i.result) {
                            var n = i.qbopenid,
                                s = i.qbopenkey,
                                r = i.rspsig;
                            a._userInfo.openid = n,
                                a._userInfo.openkey = s,
                                a._rspsig = r,
                                a.store(a._loginType, "openid", n),
                                a.store(a._loginType, "openkey", s),
                                a.store(a._loginType, "rspsig", r),
                                Utils.call(t, e)
                        } else Utils.toast("登录信息已经过期，请重新登录"),
                            Utils.delayCall(3e3,
                                function() {
                                    a.logout()
                                },
                                a)
                    })
        },
        i.login = function(t, e, a) {
            var i, n = this,
                s = "/login";
            i = this._userInfo.userid ? {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: this._userInfo.userid,
                    serverid: t
                } : {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: "0",
                    serverid: t
                },
                Utils.reqeustURL(this._urlRoot + s, i,
                    function(i) {
                        if (i) {
                            var s = JSON.parse(i);
                            s ? 0 == s.ret ? (n._userInfo.userid = s.id, n._userInfo.serverKey = s.secret, n._userInfo.serverId = t, PlatformManager.instance.serverIP = s.server, PlatformManager.instance.serverPort = s.port, e && (a ? e.apply(a, [i]) : e(i))) : (Utils.toast("登录失败:" + s.msg), Utils.delayCall(3e3,
                                function() {
                                    n.exist()
                                },
                                n)) : (Utils.toast("登录失败，请重新登录游戏"), Utils.delayCall(3e3,
                                function() {
                                    n.exist()
                                },
                                n))
                        } else Utils.toast("登录失败，请重新登录游戏"),
                            Utils.delayCall(3e3,
                                function() {
                                    n.exist()
                                },
                                n)
                    },
                    this)
        },
        i.share = function(t, e, a, i, n) {
            var s = {};
            s.url = "http://yeyou.qq.com/?gameId=" + this._appId + "#/detail/" + this._appId,
                s.title = "分享",
                s.description = "战舰帝国-大决战",
                s.imgUrl = "../qweb/resource/assets/Panel/GUI_Homepage_Icon_33.png"
                /*tpa=http://1251006671.cdn.myqcloud.com/1251006671/shipH5/qweb/resource/assets/Panel/GUI_Homepage_Icon_33.png*/
                ,
                s.imgTitle = "插图标题",
                s.cusTxt = "击沉一切，目标全世界！",
                this._sdk.share(s,
                    function(t) {
                        t && 0 == t.result ? Utils.toast("分享成功") : -2 == t.result && Utils.toast("分享失败")
                    })
        },
        i.pay = function(t, e, a, i, n, s) {
            var r = this;
            a = 10 * a;
            var o = {};
            o.appid = this._appId,
                o.appsig = "",
                o.paysig = "",
                o.qbopenid = this._userInfo.openid,
                o.qbopenkey = this._userInfo.openkey,
                o.payItem = e + "*" + a + "*1",
                o.payInfo = e + "*" + t,
                o.reqTime = Utils.getCurrentTime(),
                o.customMeta = t + "," + this._userInfo.serverId;
            var l = JSON.stringify(o);
            Utils.reqeustURL(this._urlRoot + "/getPaySig", {
                    url: "/",
                    queryMap: l
                },
                function(n) {
                    Log.logZDY("getPaySig", n);
                    var l = !1;
                    if (n) {
                        var h = JSON.parse(n);
                        if (h && 0 == h.ret) {
                            o.paysig = h.reqSigServer;
                            var c = function(n) {
                                "object" == typeof n ? "order error, ErrorCode(1101)" == n.msg ? (Utils.toast("登录已过期，请重新登录！"), Utils.delayCall(3e3,
                                    function() {
                                        r.logout()
                                    },
                                    r)) : 0 === n.result ? Utils.toast("支付操作完成") : -2 === n.result || 903 === n.result ? Utils.toast("已取消支付！") : -3 === n.result ? (Utils.toast("登录已过期，程序将自动刷新授权！"), Utils.delayCall(3e3,
                                    function() {
                                        r.refreshToken(function() {
                                                r.pay(t, e, a, i, c, s)
                                            },
                                            r)
                                    },
                                    r)) : 19 === n.result ? (Utils.toast("登录态已过期，需要重新登录！"), Utils.delayCall(3e3,
                                    function() {
                                        r.logout()
                                    },
                                    r)) : Utils.toast("支付失败！(" + n.result + "," + n.msg + ")") : Utils.toast("支付完成！")
                            };
                            r._sdk.pay(o, c),
                                l = !0
                        }
                    }
                    l || Utils.toast("获取支付签名认证失败！")
                },
                this, egret.HttpMethod.POST)
        },
        i.getUserInfo = function() {
            var t = {};
            t.appid = "",
                t.qbopenid = "",
                t.qbopenkey = "",
                this._sdk.getUserInfo(t,
                    function(t) {
                        if (t)
                            if (0 == t.result) {
                                t.nickName,
                                    t.avatarUrl,
                                    t.sex,
                                    t.language,
                                    t.isVip
                            } else Utils.toast("获取用户信息失败:" + t.msg)
                    })
        },
        i.openTopicCircle = function() {
            var t = {};
            t.appid = this._appId,
                this._sdk.openTopicCircle(t,
                    function(t) {})
        },
        i.exist = function() {
            window.location.reload()
        },
        i.getWebUrl = function() {
            return "http://119.29.224.164/"
        },
        e
}(PlatformBase);
egret.registerClass(PlatformQQBrowser, "PlatformQQBrowser");
var PlatformSimulate = function(t) {
    function e() {
        t.call(this),
            this.urlRoot = "http://119.29.224.164/"
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this._userInfo = {},
                this._userInfo.userid = Utils.GetQueryString("uid"),
                this._userInfo.serverId = parseInt(Utils.GetQueryString("serverid")),
                this._userInfo.openid = Utils.GetQueryString("openid"),
                this._userInfo.platformName = Utils.GetQueryString("pf"),
                PlatformManager.instance.myself = this._userInfo
        },
        i.loginVerify = function(t, e) {
            t && t.apply(e, [this._userInfo])
        },
        i.login = function(t, e, a) {
            var i = this,
                n = {
                    openid: this._userInfo.openid,
                    pf: this._userInfo.platformName,
                    uid: this._userInfo.userid || "0",
                    serverid: this._userInfo.serverId
                };
            Utils.reqeustURL(this.urlRoot + "/" + this._userInfo.platformName + "/login", n,
                function(n) {
                    if (n) try {
                        var s = JSON.parse(n);
                        if (0 != s.ret) throw s.msg;
                        i._userInfo.userid = s.id,
                            i._userInfo.serverKey = s.secret,
                            i._userInfo.serverId = t,
                            PlatformManager.instance.serverIP = s.server,
                            PlatformManager.instance.serverPort = s.port,
                            e.apply(a, [n])
                    } catch (r) {
                        return alert("登录返回错误：" + r),
                            void i.exist()
                    }
                },
                this)
        },
        i.getWebUrl = function() {
            return this.urlRoot
        },
        e
}(PlatformBase);
egret.registerClass(PlatformSimulate, "PlatformSimulate");
var PlatformTest = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.isSupportSubscribe = function() {
            return !1
        },
        i.Subscribe = function() {},
        i.init = function() {
            this._userInfo = {};
            var t = "develop";
            this._userInfo.platformName = t,
                this._pf = t,
                PlatformManager.instance.myself = this._userInfo
        },
        i.loginVerify = function(t, a) {
            var i = this;
            Main.instance.loadingPanel ? Main.instance.setChildIndex(Main.instance.loadingPanel, Main.instance.numChildren) : Main.instance.loadingPanel = new WindowLoading;
            var n = !this._switchAccount;
            Main.instance.loadingPanel.showLogin(function(n) {
                    i._userInfo.openid = n,
                        Utils.reqeustURL(e.urlRoot + "/account/verify", {
                                openid: i._userInfo.openid,
                                pf: i._pf
                            },
                            function(e) {
                                if (e) {
                                    var n = JSON.parse(e);
                                    n ? 0 == n.ret ? (n.lastIn ? (i._userInfo.userid = n.lastIn.uid, i._userInfo.serverId = n.lastIn.serverid) : (i._userInfo.userid = null, i._userInfo.serverId = null), t && (a ? t.apply(a, [i._userInfo]) : t(i._userInfo))) : (alert("登录验证失败:" + n.msg), i.exist()) : (alert("登录验证失败，请重新登录游戏"), i.exist())
                                } else alert("登录验证失败，请重新登录游戏"),
                                    i.exist()
                            },
                            i)
                },
                this, n)
        },
        i.login = function(t, a, i) {
            var n, s = this,
                r = "/account/login";
            n = this._userInfo.userid ? {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: this._userInfo.userid,
                    serverid: t
                } : {
                    openid: this._userInfo.openid,
                    pf: this._pf,
                    uid: "0",
                    serverid: t
                },
                Utils.reqeustURL(e.urlRoot + r, n,
                    function(t) {
                        if (t) {
                            var e = JSON.parse(t);
                            e ? 0 == e.ret ? (s._userInfo.userid = e.id, s._userInfo.serverKey = e.secret, PlatformManager.instance.serverIP = e.server, PlatformManager.instance.serverPort = e.port, a && (i ? a.apply(i, [t]) : a(t))) : (alert("登录失败:" + e.msg), s.exist()) : (alert("登录失败，请重新登录游戏"), s.exist())
                        } else alert("登录失败，请重新登录游戏"),
                            s.exist()
                    },
                    this)
        },
        i.switchAccount = function() {
            this._switchAccount = !0,
                WindowManager.getInstance().hideAll(),
                CommunicateManager._firstAuth = !0,
                CommunicateManager.initedUserData = !1,
                this.loginVerify(function(t) {
                    GameData.openid = PlatformManager.instance.myself.openid,
                        GameData.uid = PlatformManager.instance.myself.userid,
                        GameData.lastServerId = PlatformManager.instance.myself.serverId,
                        GameData.pf = PlatformManager.instance.myself.platformName,
                        Main.instance.loadingPanel.showServerListUI(),
                        Main.instance.loadingPanel.requestServerList()
                })
        },
        i.needShowLogin = function() {
            return !0
        },
        i.getWebUrl = function() {
            return e.urlRoot
        },
        e.urlRoot = "http://119.29.13.203:9001/",
        e
}(PlatformBase);
egret.registerClass(PlatformTest, "PlatformTest");
var PlatformVUTimes = function(t) {
    function e() {
        t.call(this),
            this.urlRoot = "http://119.29.224.164/",
            this.gameId = "126",
            this.payIdArr = [0, 8161, 8154, 8155, 8156, 8157, 8158, 8159, 8162, 8160],
            this.platObj = {
                isSubscribe: !1,
                token: "",
                pf: "youguang",
                secret: ""
            }
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.isSupportSubscribe = function() {
            return !0
        },
        i.isSupportShare = function() {
            return !0
        },
        i.init = function() {
            this._userInfo = {},
                this._userInfo.userid = "0",
                this._userInfo.serverId = 0,
                this.platObj.token = Utils.GetQueryString("token"),
                this.platObj.token || (window.top.location.href = "http://union.11h5.com/login.html?gameid=" + this.gameId),
                GC.enableUnionShare(function() {
                    Toast.launch("分享成功!")
                }),
                PlatformManager.instance.myself = this._userInfo,
                EventManager.instance.addEventListener(EventTypes.ENTER_MAINSCENE, this.OnEnterScene, this)
        },
        i.OnEnterScene = function() {
            var t = this;
            this.CheckSubscribe(function(e) {
                if (t.platObj.isSubscribe = e, t.platObj.isSubscribe && !UserData.getInstance().focus_award) {
                    var a = Transport.getPkg(ProtocolMgr.ID_DceFocusAward);
                    Transport.instance.send(a)
                }
            })
        },
        i.loginVerify = function(t, e) {
            var a = this;
            Utils.reqeustURLwithCookie(this.urlRoot + "/" + this.platObj.pf + "/verify", {
                    token: this.platObj.token
                },
                function(i) {
                    if (i) try {
                        var n = JSON.parse(i);
                        if (0 != n.ret) throw n.msg;
                        a._userInfo.openid = n.uid,
                            a._userInfo.username = n.nickname,
                            a._userInfo.headpic = n.headimgurl,
                            a._userInfo.platformName = a.platObj.pf,
                            n.lastIn && (a._userInfo.serverId = n.lastIn.serverid, a._userInfo.userid = n.lastIn.uid),
                            t.apply(e, [a._userInfo])
                    } catch (s) {
                        return alert("登录验证返回错误：" + s),
                            void a.exist()
                    }
                },
                this)
        },
        i.login = function(t, e, a) {
            var i = this,
                n = {
                    openid: this._userInfo.openid,
                    pf: this.platObj.pf,
                    uid: this._userInfo.userid || "0",
                    serverid: t
                };
            Utils.reqeustURL(this.urlRoot + "/" + this.platObj.pf + "/login", n,
                function(n) {
                    if (n) try {
                        var s = JSON.parse(n);
                        if (0 != s.ret) throw s.msg;
                        i._userInfo.userid = s.id,
                            i.platObj.secret = s.secret,
                            i._userInfo.serverKey = s.secret,
                            i._userInfo.serverId = t,
                            PlatformManager.instance.serverIP = s.server,
                            PlatformManager.instance.serverPort = s.port,
                            e.apply(a, [n])
                    } catch (r) {
                        return alert("登录返回错误：" + r),
                            void i.exist()
                    }
                },
                this)
        },
        i.pay = function(t, e, a, i, n, s) {
            var r = {
                uid: this._userInfo.openid,
                gameid: this.gameId,
                pid: this.payIdArr[t],
                userdata: this._userInfo.serverId + "_" + t
            };
            GC.jumpPay(r)
        },
        i.exist = function() {
            window.top.location.reload(!0)
        },
        i.Subscribe = function() {
            var t = this;
            this.CheckSubscribe(function(e) {
                t.platObj.isSubscribe = e,
                    t.platObj.isSubscribe ? Toast.launch("您已关注，奖励已发送至邮箱，请查收") : GC.focus()
            })
        },
        i.CheckSubscribe = function(t) {
            var e = this,
                a = !1;
            Utils.reqeustURL(this.urlRoot + "/" + this.platObj.pf + "/focus", {
                    uid: this._userInfo.openid
                },
                function(i) {
                    try {
                        var n = JSON.parse(i);
                        a = 0 == n.ret ? !0 : !1
                    } catch (s) {
                        return a = !1,
                            Toast.launch(s),
                            void e.exist()
                    }
                    t(a)
                },
                this)
        },
        i.getWebUrl = function() {
            return this.urlRoot
        },
        i.share = function(t, e, a, i, n) {
            window.GC.showShare()
        },
        e
}(PlatformBase);
egret.registerClass(PlatformVUTimes, "PlatformVUTimes");
var QiJvTouAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/ZB_QiJuTou_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/ZB_QiJuTou_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.rankScroller.viewport = this.rankList,
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.closeBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.closeBtn:
                    this.hide()
            }
        },
        i.showTxtDescPage = function(t, e) {
            void 0 === t && (t = "挑战七巨头"),
                this.init(),
                this.txtTitle.text = t;
            var a = this.getDescPageList(e);
            this.rankList.dataProvider = new eui.ArrayCollection(a),
                this.rankList.itemRenderer = descFactoryListItem,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showRewardPage = function() {
            var t = this;
            this.init(),
                this.txtTitle.text = "奖励预览",
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting();
                    var e = t.getRewardPageList();
                    t.rankList.dataProvider = new eui.ArrayCollection(e),
                        t.rankList.itemRenderer = rewardFactoryListItem
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.getDescPageList = function(t) {
            var e = [],
                a = {};
            return a.desc = t,
                e.push(a),
                e
        },
        i.getRewardPageList = function() {
            for (var t = [], e = BigsevenrewardParser.GetInstance().getDataArr(), a = 0; a < e.length; a++) {
                var i = {};
                i.id = e[a].id,
                    i.rankup = e[a].rankup,
                    i.rankdown = e[a].rankdown,
                    i.giftid = e[a].giftid,
                    i.reward = [];
                for (var n = GiftdataParser.GetInstance().getDataArr(), s = 0; s < n.length; s++) i.giftid == n[s].id && i.reward.push({
                    type: n[s].type,
                    count: n[s].count
                });
                t.push(i)
            }
            return t
        },
        i.getRankPageList = function(t) {
            var e = [];
            if (null != t && t.length > 0)
                for (var a = 0; a < t.length; a++) {
                    var i = {};
                    i.uid = t[a].uid,
                        i.name = t[a].name,
                        i.rank = t[a].rank,
                        i.level = t[a].level,
                        i.score = t[a].score,
                        i.head = t[a].head,
                        i.power = t[a].power,
                        i.viplevel = t[a].viplevel,
                        i.camp = t[a].camp,
                        i.guildname = t[a].guildname,
                        i.militaryrank = t[a].militaryrank,
                        i.dmg = t[a].dmg,
                        e.push(i)
                }
            return e
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("bigSevenReward"),
                e.push("giftData"),
                ConfigData.preLoadDats(e, [BigsevenrewardParser, GiftdataParser],
                    function() {
                        t()
                    })
        },
        i.showPVPReward = function() {
            var t = this;
            this.init(),
                this.txtTitle.text = "奖励预览",
                WindowManager.getInstance().showWaiting(),
                ConfigData.preLoadDats(["arenaScoreData"], [ArenascoredataParser],
                    function() {
                        WindowManager.getInstance().hideWaiting();
                        for (var e = [], a = ArenascoredataParser.GetInstance().getDataArr(), i = 0, n = a.length; n - 1 > i; ++i) {
                            var s = a[i],
                                r = a[i + 1],
                                o = {};
                            o.rankup = s.rank,
                                o.rankdown = r.rank - 1,
                                i == n - 2 && (o.lastRank = !0),
                                o.score = s.score,
                                o.honor = s.honor,
                                e.push(o)
                        }
                        t.rankList.dataProvider = new eui.ArrayCollection(e),
                            t.rankList.itemRenderer = PVPRewardItemRenderer
                    }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        e
}(eui.Component);
egret.registerClass(QiJvTouAlert, "QiJvTouAlert");
var descFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/QiJvTouItem01Skin.exml"
            /*tpa=resource/eui_skins/item/QiJvTouItem01Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data && (this.descTxt.textFlow = (new egret.HtmlTextParser).parser(this.data.desc))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(descFactoryListItem, "descFactoryListItem");
var rewardFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/ZB_QiJuTou_1_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_QiJuTou_1_Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            if (t.prototype.dataChanged.call(this), this.data) {
                this.data.rankup == this.data.rankdown ? this.txtRank.text = "第" + this.data.rankup + "名" : this.txtRank.text = "第" + this.data.rankup + "~" + this.data.rankdown + "名",
                    this.txtReward1.text = "",
                    this.TXTReward2.text = "";
                var e = this.data.reward;
                if (e)
                    for (var a = 0; a < e.length; a++) 3 == e[a].type ? this.txtReward1.text = "金币:" + e[a].count : 22 == e[a].type && (this.TXTReward2.text = "功勋点:" + e[a].count)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(rewardFactoryListItem, "rewardFactoryListItem");
var PVPRewardItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/ZB_QiJuTou_1_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_QiJuTou_1_Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastRank ? this.txtRank.text = this.data.rankup + "名以后" : this.data.rankup == this.data.rankdown ? this.txtRank.text = "第" + this.data.rankup + "名" : this.txtRank.text = "第" + this.data.rankup + "~" + this.data.rankdown + "名", this.TXTReward2.text = "荣誉:" + this.data.honor, this.txtReward1.text = "积分:" + this.data.score)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(PVPRewardItemRenderer, "PVPRewardItemRenderer");
var ThemeAdapter = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.getTheme = function(t, e, a, i) {
            function n(t) {
                e.call(i, t)
            }

            function s(e) {
                e.resItem.url == t && (RES.removeEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, s, null), a.call(i))
            }
            RES.addEventListener(RES.ResourceEvent.ITEM_LOAD_ERROR, s, null),
                RES.getResByUrl(t, n, this, RES.ResourceItem.TYPE_TEXT)
        },
        t
}();
egret.registerClass(ThemeAdapter, "ThemeAdapter", ["eui.IThemeAdapter"]);
var FuncProxy = function() {
    function t(t, e) {
        this.func = t,
            this.data = e
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(FuncProxy, "FuncProxy");
var GlobalFunction = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.getHMSBySecond = function(t, e) {
            void 0 === e && (e = ":");
            var a = Math.floor(t / 3600),
                i = Math.floor(t % 3600 / 60),
                n = Math.floor(t % 3600 % 60),
                s = "";
            return 0 == a && 0 == i && 0 == n ? s = "--" + e + "--" + e + "--" : (s += 0 == a ? "00" + e : a > 0 && 10 > a ? "0" + a + e : a + e, s += 0 == i ? "00" + e : i > 0 && 10 > i ? "0" + i + e : i + e, s += 0 == n ? "00" : n > 0 && 10 > n ? "0" + n : n)
        },
        t.getDropDataByTypeAndId = function(e, a, i) {
            var n = {};
            if (n.type = e, n.item = a, n.count = i, n.realCount = i, e == TypeDefine.Const.DROP_TYPE_ITEM) {
                var s = ItemParser.GetInstance().getItemById(a);
                s ? (n.name = s.name_l, n.desc = s.desc_l, n.icon = Path.itemIconURL + s.icon, n.quality = s.quality, n.configData = s) : Log.logError("ItemData is Null, dropType:" + e.toString() + ",id:" + a.toString())
            } else if (e == TypeDefine.Const.DROP_TYPE_PARTS) {
                var s = PartsParser.GetInstance().getItemById(a);
                s ? (n.name = s.name_l, n.icon = Path.partsIconURL + s.icon, n.quality = s.quality, n.configData = s, n.desc = s.desc_l) : Log.logError("PartData is Null, dropType:" + e.toString() + ",id:" + a.toString())
            } else if (e == TypeDefine.Const.DROP_TYPE_GOLD) n.name = Locales.get("panel_bagchestopen_txt_coin"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "jinbi.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_CASH) n.name = Locales.get("panel_bagchestopen_txt_diamond"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "zuanshi.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_SCIENCE) n.name = Locales.get("panel_bagchestopen_txt_science"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "kejidian.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_SHENGWANG) n.name = Locales.get("panel_reward_txt_comment_4"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "prestige.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_HONOR) n.name = Locales.get("panel_Military_upgrade_2"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "honor.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_GUARD_BIWU) n.name = Locales.get("panel_guard_biwu_comment_55"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "guard_biwu_prestige.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_GONGXUN) n.name = Locales.get("panel_reward_txt_comment_7"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "gongxunzhi_d.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_JINGGONG_MONEY) n.name = Locales.get("panel_jinggong_show_item_txt_2"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "money_jinggong.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_JINGGONG_POINT) n.name = Locales.get("panel_jinggong_show_item_txt_1"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "money_jinggong_point.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_GERENGONGXIAN) n.name = Locales.get("panel_globalGuildBattle_txt_72"),
                i && (n.name = i + n.name, n.count = void 0),
                n.icon = Path.itemIconURL + "global_GuildBattle_power_big.png",
                n.quality = 5;
            else if (e == TypeDefine.Const.DROP_TYPE_PAPER) {
                var s = PaperdataParser.GetInstance().getItemById(a);
                if (s) {
                    var r = ShipdataParser.GetInstance().getItemById(s.shipId).modelId,
                        o = ShipmodeldataParser.GetInstance().getItemById(r);
                    n.name = s.name_l,
                        n.icon = ShipManager.getInstance().getShipPaperIcon(o.shipType),
                        n.quality = s.quality,
                        n.configData = s,
                        n.desc = Locales.get("panel_duihuan_paper_desc_1", n.name, t.getShipType(o.shipType))
                } else Log.logError("PaperData is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_PAPERPIECE) {
                var s = PaperpiecedataParser.GetInstance().getItemById(a);
                if (s) {
                    var l = PaperdataParser.GetInstance().getItemById(s.paperId);
                    n.name = s.name_l,
                        n.icon = ShipManager.getInstance().getShipPaperIcon(l.shipType),
                        n.quality = s.quality,
                        n.configData = s,
                        n.ispieces = !0,
                        n.desc = s.desc_l
                } else Log.logError("PaperPieceData is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_VIRTUAL) {
                var s = VirtualdataParser.GetInstance().getItemById(a);
                s ? (n.name = s.name_l, n.icon = Path.itemIconURL + s.icon, n.quality = s.quality, n.configData = s, n.desc = s.desc_l) : Log.logError("VirtualData is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_PARTSPIECE) {
                var s = PartspiecesParser.GetInstance().getItemById(a);
                if (s) {
                    var h = PartsParser.GetInstance().getItemById(s.part_id);
                    n.name = s.name_l,
                        n.icon = Path.partsIconURL + s.icon,
                        n.quality = h.quality,
                        n.configData = s,
                        n.ispieces = !0,
                        n.desc = s.desc_l
                } else Log.logError("PartspiecesData is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_ACTIVITY) {
                var s = ActivityitemParser.GetInstance().getItemById(a);
                s ? (n.name = s.name_l, n.icon = Path.itemIconURL + s.icon, n.quality = s.quality, n.configData = s, n.desc = s.desc_l) : Log.logError("acitivityitem is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_MEDALPIECE) {
                var s = MedalpieceParser.GetInstance().getItemById(a);
                if (s) {
                    var c = MedaldataParser.GetInstance().getItemById(s.medal_id);
                    n.name = s.name_l,
                        n.icon = Path.itemIconURL + s.icon,
                        n.quality = c.quality,
                        n.configData = s,
                        n.desc = s.desc_l,
                        n.ispieces = !0
                } else Log.logError("medalpiece is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_CAPTAIN) {
                var s = CaptaindataParser.GetInstance().getItemById(a);
                s ? (n.name = s.name_l, n.icon = Path.captainIconURL + s.pictureSmall, n.quality = s.quality, n.configData = s, n.desc = "") : Log.logError("captaindata is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_CAPTAINPIECE) {
                var s = CaptainpiecedataParser.GetInstance().getItemById(a);
                if (s) {
                    var d = CaptaindataParser.GetInstance().getItemById(s.captainId);
                    n.name = s.name_l,
                        n.icon = Path.captainIconURL + d.pictureSmall,
                        n.quality = d.quality,
                        n.configData = s,
                        n.ispieces = !0,
                        n.desc = s.desc_l
                } else Log.logError("captainpiece is Null, dropType:" + e + ",id:" + a)
            } else if (e == TypeDefine.Const.DROP_TYPE_JINGGONG) {
                var s = SeikoParser.GetInstance().getItemById(a);
                s ? (n.name = s.name_l, n.icon = Path.seikoUrl + s.icon, n.quality = s.quality, n.configData = s, n.desc = s.desc_l) : Log.logError("seiko is Null, dropType:", e, "id:", a)
            } else if (e == TypeDefine.Const.DROP_TYPE_JINGGONG_SUIPIAN) {
                var s = SeikopieceParser.GetInstance().getItemById(a);
                if (s) {
                    SeikoParser.GetInstance().getItemById(s.seikoId);
                    n.name = s.name_l,
                        n.icon = Path.seikoUrl + s.icon,
                        n.quality = s.quality,
                        n.desc = s.desc_l,
                        n.ispieces = !0
                } else Log.logError("seikopiece is Null, dropType:", e, "id:", a)
            } else if (e == TypeDefine.Const.DROP_TYPE_XUNZHANG) {
                var s = MedaldataParser.GetInstance().getItemById(a);
                s ? (n.name = s.name_l, n.icon = Path.soulIconURL + s.icon, n.quality = s.quality, n.configData = s, n.desc = s.desc_l) : Log.logError("medaldata is Null, dropType:", e, "id:", a)
            } else e == TypeDefine.Const.DROP_TYPE_OIL && (n.name = Locales.get("panel_reward_txt_comment_5"), i && (n.name = i + n.name, n.count = void 0), n.icon = Path.itemIconURL + "yuanyou.png", n.quality = 5);
            return n
        },
        t.getShipType = function(t) {
            return Locales.get("GlobalSystem_ShipType_" + t)
        },
        t.getItemByData = function(e) {
            return t.getDropDataByTypeAndId(e.type, e.id, e.count)
        },
        t.getDateByTimeNum = function(t) {
            t = 1e3 * t;
            var e = new Date(t);
            return e
        },
        t.checkIsNPC = function(t) {
            var e = t.toString();
            return e.length < 10
        },
        t
}();
egret.registerClass(GlobalFunction, "GlobalFunction");
var Locales = function() {
    function t(e, a) {
        this._dicBase = {},
            t.instance = this,
            this._onLoaded = e,
            this._onLoadedThis = a;
        var i = "resource/config/lang/zh_CN.json"
            /*tpa=resource/config/lang/zh_CN.json*/
        ;
        RES.getResByUrl(Transport.loginPanelBool ? Path.cdnURL + i : i, this.loadJsonComplete, this, RES.ResourceItem.TYPE_TEXT)
    }
    var e = (__define, t),
        a = e.prototype;
    return a.loadJsonComplete = function(t) {
            this._dicBase = JSON.parse(t),
                this._onLoaded && (this._onLoaded.apply(this._onLoadedThis), this._onLoadedThis = void 0, this._onLoaded = void 0)
        },
        t.get = function(e) {
            for (var a = [], i = 1; i < arguments.length; i++) a[i - 1] = arguments[i];
            if (t.instance) {
                var n = t.instance._dicBase[e];
                if (null != n) {
                    if (a.length > 0)
                        for (var s = 1; s <= a.length; s++) n = n.replace("#v" + s.toString() + "#", a[s - 1].toString());
                    return n
                }
                return e
            }
        },
        t.getKey = function(t, e, a) {
            return "Config_" + t + "_" + (e - 1) + "_" + a
        },
        t.transConfig = function(e, a, i) {
            var n = t.getKey(e, a, i);
            return t.get(n)
        },
        t
}();
egret.registerClass(Locales, "Locales");
var LogUserType;
!
function(t) {
    t[t.TYPE_ALL = 0] = "TYPE_ALL",
        t[t.TYPE_ML = 1] = "TYPE_ML",
        t[t.TYPE_LP = 2] = "TYPE_LP",
        t[t.TYPE_LZN = 3] = "TYPE_LZN",
        t[t.TYPE_WX = 4] = "TYPE_WX",
        t[t.TYPE_ZDY = 5] = "TYPE_ZDY"
}(LogUserType || (LogUserType = {}));
var LogLevelType;
!
function(t) {
    t[t.TYPE_NORMAL = 0] = "TYPE_NORMAL",
        t[t.TYPE_WARNING = 1] = "TYPE_WARNING",
        t[t.TYPE_ERROR = 2] = "TYPE_ERROR"
}(LogLevelType || (LogLevelType = {}));
var Log = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.log = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_NORMAL, LogUserType.TYPE_ALL, e)
        },
        t.logWarning = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_WARNING, LogUserType.TYPE_ALL, e)
        },
        t.logError = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_ERROR, LogUserType.TYPE_ALL, e)
        },
        t.logML = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_NORMAL, LogUserType.TYPE_ML, e)
        },
        t.logMLWarning = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_WARNING, LogUserType.TYPE_ML, e)
        },
        t.logMLError = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_ERROR, LogUserType.TYPE_ML, e)
        },
        t.logLP = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_NORMAL, LogUserType.TYPE_LP, e)
        },
        t.logLPWarning = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_WARNING, LogUserType.TYPE_LP, e)
        },
        t.logLPError = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_ERROR, LogUserType.TYPE_LP, e)
        },
        t.logLZN = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_NORMAL, LogUserType.TYPE_LZN, e)
        },
        t.logLZNWarning = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_WARNING, LogUserType.TYPE_LZN, e)
        },
        t.logLZNError = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_ERROR, LogUserType.TYPE_LZN, e)
        },
        t.logWX = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_NORMAL, LogUserType.TYPE_WX, e)
        },
        t.logWXWarning = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_WARNING, LogUserType.TYPE_WX, e)
        },
        t.logWXError = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_ERROR, LogUserType.TYPE_WX, e)
        },
        t.logZDY = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_NORMAL, LogUserType.TYPE_ZDY, e)
        },
        t.logZDYWarning = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_WARNING, LogUserType.TYPE_ZDY, e)
        },
        t.logZDYError = function() {
            for (var e = [], a = 0; a < arguments.length; a++) e[a - 0] = arguments[a];
            t.logInner(LogLevelType.TYPE_ERROR, LogUserType.TYPE_ZDY, e)
        },
        t.logInner = function(e, a, i) {
            if (e >= t.s_logLevelType && (a == LogUserType.TYPE_ALL || a === t.s_logUser)) {
                for (var n = [], s = 0, r = i; s < r.length; s++) {
                    var o = r[s];
                    void 0 === o ? n.push("undefined") : null === o ? n.push("null") : n.push(o.toString())
                }
                var l = n.join(" "),
                    h = l;
                e == LogLevelType.TYPE_ERROR ? h = "[Error]" + l : e == LogLevelType.TYPE_WARNING && (h = "[Warning]" + l),
                    console.log(h),
                    t.s_logToScreen && t.s_logs.push(h)
            }
        },
        t.objectToString = function(e, a) {
            if (void 0 === a && (a = 5), null == e) return "";
            var i = [];
            return t.objectToStringInner(e, a, 0, i),
                i.join("")
        },
        t.pushNStr = function(t, e, a) {
            for (var i = 0; a > i; ++i) t.push(e)
        },
        t.objectToStringInner = function(e, a, i, n) {
            void 0 === a && (a = 5),
                void 0 === i && (i = 0),
                void 0 === n && (n = void 0);
            var s = void 0 != n ? n : [];
            if (null === e) s.push("null");
            else if (void 0 === e) s.push("undefined");
            else {
                var r = typeof e;
                if ("object" == r)
                    if (a > i) {
                        var o = !1;
                        e instanceof Array && (o = !0),
                            s.push(o ? "[\n" : "{\n");
                        for (var l in e) {
                            var h = e[l],
                                c = typeof h;
                            ("object" == c || "number" == c || "boolean" == c || "string" == c) && (t.pushNStr(s, "	", i + 1), o || (s.push(l), s.push(":")), t.objectToStringInner(h, a, i + 1, s), s.push(",\n"))
                        }
                        t.pushNStr(s, "	", i),
                            s.push(o ? "]" : "}")
                    } else s.push(e.toString());
                else "number" == r || "boolean" == r || "string" == r ? s.push(e.toString()) : "undefined" == r ? s.push("undefined") : "null" == r && s.push("null")
            }
        },
        t.Test = function() {
            t.logZDY("test1----------------", "tt"),
                t.logZDYWarning("test2----------------", "tt"),
                t.logZDYError("test3--------------", "tt"),
                t.logWX("test4--------------", "tt"),
                t.logWXWarning("test5--------------", "tt"),
                t.logWXError("test6--------------", "tt"),
                t.log("test7--------------", "tt"),
                t.logWarning("test8--------------", "tt"),
                t.logError("test9--------------", "tt")
        },
        t.s_logLevelType = LogLevelType.TYPE_NORMAL,
        t.s_logUser = LogUserType.TYPE_ZDY,
        t.s_logToScreen = !1,
        t.s_logs = [],
        t
}();
egret.registerClass(Log, "Log");
var Path = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.GetRankIconUrl = function(t) {
            return "resource/assets/Icon/rank/" + MilitaryrankParser.GetInstance().getItemById(t).picture
        },
        t.GetCampaignIconUrl = function(t, e) {
            void 0 === e && (e = !1);
            var a = CampaigndataParser.GetInstance().getItemById(t);
            return a ? e ? "resource/assets/Icon/campaign/" + a.icon + "_0.png" : "resource/assets/Icon/campaign/" + a.icon + ".png" : ""
        },
        t.GetCampaignAreaMapUrl = function(t) {
            return "resource/assets/battleWorld/area_map_" + t + ".jpg"
        },
        t.GetCampaignArrowSheetUrl = function(t) {
            return "resource/assets/battleWorld/" + t + ".json"
        },
        t.GetHeadPicUrl = function(e, a) {
            void 0 === e && (e = 101),
                void 0 === a && (a = 0);
            var i = e ? e.toString().split("0") : ["1", "1"];
            return i[0] || (i[0] = "1"),
                i[1] || (i[1] = "1"),
                0 == a ? t.headPicURL + "person-" + i[0] + "-" + i[1] + ".png" : t.headPicURL + "Picture-" + i[0] + "-" + i[1] + ".png"
        },
        t.GetCampPicUrl = function(e, a) {
            void 0 === e && (e = 1),
                void 0 === a && (a = 0);
            var i = "",
                n = ["justice_03_", "iron_03_", "glory_03_"];
            return a++,
                i = t.campURL + n[e - 1] + a + ".png"
        },
        t.GetActivityIcon = function(e) {
            return t.activityUrl + "Activity_npc_" + e + ".png"
        },
        t.GetActivityDescIcon = function(e) {
            return t.activityUrl + "Activity_reward_" + e + ".png"
        },
        t.cdnURL = "",
        t.shipURL = "resource/assets/ShipIcons/",
        t.captainIconURL = "resource/assets/Icon/captain/",
        t.shipTypeIconURL = "resource/assets/Icon/shipType/",
        t.countryURL = "resource/assets/Icon/country/",
        t.partsIconURL = "resource/assets/Icon/parts/",
        t.soulIconURL = "resource/assets/Icon/medal/",
        t.itemIconURL = "resource/assets/Icon/item/",
        t.skillIconURL = "resource/assets/Icon/skill/",
        t.itemBackURL = "resource/assets/ui/ui_common/itemBack/",
        t.militaryIconURL = "resource/assets/Icon/rank/",
        t.paperURL = "",
        t.headPicURL = "resource/assets/PlayerHead/",
        t.shipModelUrl = "resource/assets/ShipModel/",
        t.campURL = "resource/assets/Icon/camp/",
        t.effectUrl = "resource/assets/Effect/",
        t.battleEffectUrl = "resource/assets/Effect/battle/effect/",
        t.technologyURL = "resource/assets/Icon/technology/",
        t.formationURL = "resource/assets/Icon/formation/",
        t.npcURL = "resource/assets/Icon/npc/",
        t.item_sURL = "resource/assets/Icon/item_s/",
        t.zhengBaURL = "resource/assets/Icon/zhengba/",
        t.mapEffectUrl = "resource/assets/battle/map/",
        t.audioUrl = "resource/assets/audio/",
        t.resHeadUrl = "ship_json.",
        t.battleLostIconUrl = "resource/assets/Icon/battlelost/",
        t.seikoUrl = "resource/assets/Icon/seiko/",
        t.backGroundImageUrl = "resource/assets/BackGroundImage/",
        t.seaImageUrl = "resource/assets/BackGroundImage/sea/",
        t.activityEffectUrl = "resource/assets/Effect/activity/",
        t.uiUrl = "resource/assets/ui/",
        t.searchMedalUrl = "resource/assets/ui/SearchMedal/",
        t.guildUrl = "resource/assets/Icon/guild/",
        t.missionUrl = "resource/assets/Icon/mission/",
        t.guildTechUrl = "resource/assets/Icon/guild_tech/",
        t.panelUrl = "resource/assets/Panel/",
        t.campBattleUrl = "resource/assets/campBattle/",
        t.skillNameIconUrl = "resource/assets/Icon/skillname/",
        t.skillEffectUrl = "resource/assets/Effect/battle/effect/skill/",
        t.rechargeUrl = "resource/assets/Icon/recharge/",
        t.PVEIconUrl = "resource/assets/Icon/PVE/",
        t.activityUrl = "resource/assets/ui/Activity/",
        t
}();
egret.registerClass(Path, "Path");
var QualitySystem = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.getColorByQuality = function(e) {
            return e = Math.floor(e) - 1,
                0 > e && (e = 0),
                t.qualityColor[e]
        },
        t.getStrByQuality = function(e) {
            return e = Math.floor(e) - 1,
                0 > e && (e = 0),
                t.qualityStr[e]
        },
        t.getItemSmallBack = function(t) {
            return Path.itemBackURL + "itemBack_item_sml_" + t + ".png"
        },
        t.getShipHandbookSmallback = function(t) {
            return t = Math.floor(t),
                Path.itemBackURL + "itemBack_ship_sml_" + t + ".png"
        },
        t.getShipBack = function(t) {
            return t = Math.floor(t),
                Path.itemBackURL + "itemBack_ship_big_" + t + ".png"
        },
        t.getShipSmallBack = function(t) {
            return t = Math.floor(t),
                Path.itemBackURL + "itemBack_ship_sml_" + t + ".png"
        },
        t.getPaperBack = function(t) {
            return Path.itemBackURL + "GUI_Shipbuilding_tuzhi_0" + t + ".png"
        },
        t.getCaptainPiece = function(t) {
            t -= 1;
            var e = ["jianzhang_piece_b.png"
                /*tpa=jianzhang_piece_b.png*/
                , "jianzhang_piece_lv.png"
                /*tpa=jianzhang_piece_lv.png*/
                , "jianzhang_piece_lan.png"
                /*tpa=jianzhang_piece_lan.png*/
                , "jianzhang_piece_zi.png"
                /*tpa=jianzhang_piece_zi.png*/
                , "jianzhang_piece_c.png"
                /*tpa=jianzhang_piece_c.png*/
            ];
            return t <= e.length && t >= 0 ? Path.itemBackURL + e[t] : void 0
        },
        t.getCaptainSmallBack = function(t) {
            t -= 1;
            var e = ["jianzhang_bai.png"
                /*tpa=jianzhang_bai.png*/
                , "jianzhang_lv.png"
                /*tpa=jianzhang_lv.png*/
                , "jianzhang_lan.png"
                /*tpa=jianzhang_lan.png*/
                , "jianzhang_zi.png"
                /*tpa=jianzhang_zi.png*/
                , "jianzhang_cheng.png"
                /*tpa=jianzhang_cheng.png*/
            ];
            return t <= e.length && t >= 0 ? Path.itemBackURL + e[t] : void 0
        },
        t.getCaptainFrame = function(t) {
            t -= 1;
            var e = ["jianzhang_bai_frame.png"
                /*tpa=jianzhang_bai_frame.png*/
                , "jianzhang_lv_frame.png"
                /*tpa=jianzhang_lv_frame.png*/
                , "jianzhang_lan_frame.png"
                /*tpa=jianzhang_lan_frame.png*/
                , "jianzhang_zi_frame.png"
                /*tpa=jianzhang_zi_frame.png*/
                , "jianzhang_cheng_frame.png"
                /*tpa=jianzhang_cheng_frame.png*/
            ];
            return t <= e.length && t >= 0 ? Path.itemBackURL + e[t] : void 0
        },
        t.getShipPaperBackGround = function(t) {
            var e = Path.itemBackURL + "GUI_Shipbuilding_tuzhi_0" + t + ".png";
            return e
        },
        t.QUALITY_D = 1,
        t.QUALITY_C = 2,
        t.QUALITY_B = 3,
        t.QUALITY_A = 4,
        t.QUALITY_S = 5,
        t.QUALITY_SS = 6,
        t.qualityColor = [16185574, 6090031, 3518718, 9328127, 16744499, 16001803],
        t.qualityStr = ["D", "C", "B", "A", "S", "SS"],
        t
}();
egret.registerClass(QualitySystem, "QualitySystem");
var ResLoader = function() {
    function t() {
        this._loadedResMap = {},
            this._loadGroupMap = {},
            this._refMap = {},
            this._cachedTextures = {},
            this._totalArea = 0,
            this._lastCollectTime = 0,
            GameTick.registerHandler(this.collectTextureCache.bind(this), 5e3)
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return e(t, "instance",
            function() {
                return t._instance || (t._instance = new t),
                    t._instance
            }),
        i.preLoadResList = function(t, e, a) {
            return 0 == t.length ? void(e && e.apply(a, [])) : void this.loadResList({
                res: t,
                callback: e,
                thisObj: a
            })
        },
        i.unloadResList = function(t) {
            for (var e = 0,
                    a = t; e < a.length; e++) {
                var i = a[e];
                this.unloadRes(i)
            }
        },
        i.unloadRes = function(t) {
            var e = Transport.loginPanelBool ? Path.cdnURL + t : t;
            RES.destroyRes(t) || Log.logWarning("destroy res failed", t),
                delete this._loadedResMap[e],
                delete this._loadedResMap[t],
                delete this._cachedTextures[t]
        },
        i.addRef = function(t, e) {
            this._refMap[e] || (this._refMap[e] = {});
            var a = 1,
                i = this._refMap[e];
            void 0 === i[t] ? i[t] = a : i[t] = i[t] + a,
                this._loadedResMap[t] ? this._loadedResMap[t].refCount += a : this._loadedResMap[t].refCount = a
        },
        i.clearTag = function(t) {
            if (t) {
                var e = this._refMap[t],
                    a = Utils.getCurrentTime();
                if (e)
                    for (var i in e) {
                        var n = this._loadedResMap[i];
                        if (n && n.data && n.data.textureWidth && (n.refCount -= e[i], n.refCount <= 0)) {
                            n.refCount = 0;
                            var s = n.data.textureWidth * n.data.textureHeight;
                            this._cachedTextures[i] ? this._cachedTextures[i].time = a : (this._cachedTextures[i] = {
                                    url: i,
                                    area: s,
                                    time: a
                                },
                                this._totalArea += s)
                        }
                    }
                delete this._refMap[t]
            }
        },
        i.collectTextureCache = function(e) {
            void 0 === e && (e = !1);
            Utils.getCurrentTime();
            if (e || this._totalArea > t.kMaxCachedTextureArea) {
                var a = [];
                for (var i in this._cachedTextures) a.push(this._cachedTextures[i]);
                a.sort(function(t, e) {
                    return e.area - t.area
                });
                for (var n = 0,
                        s = a; n < s.length; n++) {
                    var r = s[n];
                    this._totalArea > t.kMaxCachedTextureArea && (this._totalArea -= r.area, this.unloadRes(r.url))
                }
            }
        },
        i.logCachedResCount = function() {
            var t = 0,
                e = 0;
            for (var a in this._loadedResMap) t++,
                this._loadedResMap[a].data.textureWidth && (e += this._loadedResMap[a].data.textureWidth * this._loadedResMap[a].data.textureHeight);
            Log.logZDY("resCnt:", t, 4 * e / 1024 / 1024),
                t = 0,
                e = 0;
            for (var a in this._cachedTextures) t++,
                e += this._cachedTextures[a].area;
            Log.logZDY("resCnt2:", t, 4 * e / 1024 / 1024)
        },
        i.unloadAllCachedTexture = function() {
            for (var t in this._loadedResMap) RES.destroyRes(t);
            this._loadedResMap = {},
                this._cachedTextures = {},
                this._refMap = {},
                this._totalArea = 0
        },
        i.loadResGroup = function(t, e, a) {
            if (RES.isGroupLoaded(t)) return void(e && (a ? e.apply(a, [0]) : e(0)));
            var i = !0;
            this._loadGroupMap[t] || (this._loadGroupMap[t] = [], i = !1),
                this._loadGroupMap[t].push({
                    callback: e,
                    thisObj: a
                }),
                i || (this._initedGroupLoader || (RES.addEventListener(RES.ResourceEvent.GROUP_COMPLETE, this.onResourceLoadComplete, this), RES.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR, this.onResourceLoadError, this), this._initedGroupLoader = !0), RES.loadGroup(t))
        },
        i.onResourceLoadComplete = function(t) {
            var e = this._loadGroupMap[t.groupName];
            if (e) {
                for (var a = 0,
                        i = e; a < i.length; a++) {
                    var n = i[a];
                    n.callback && (n.thisObj ? n.callback.apply(n.thisObj, [0]) : n.callback(0))
                }
                delete this._loadGroupMap[t.groupName]
            }
        },
        i.onResourceLoadError = function(t) {
            for (var e = this._loadGroupMap[t.groupName], a = 0, i = e; a < i.length; a++) {
                var n = i[a];
                n.callback && (n.thisObj ? n.callback.apply(n.thisObj, [1]) : n.callback(1))
            }
            delete this._loadGroupMap[t.groupName]
        },
        i.loadResList = function(t) {
            var e = this,
                a = 0,
                i = [],
                n = function(n) {
                    var r = t.res[n],
                        o = Transport.loginPanelBool ? Path.cdnURL + r : r;
                    if (i.push(o), s._cachedTextures[r] && (s._totalArea -= s._cachedTextures[r].area, delete s._cachedTextures[r]), s._loadedResMap[o]) {
                        if (a++, a >= t.res.length && t.callback) {
                            for (var l = [], h = 0, c = i; h < c.length; h++) {
                                var d = c[h];
                                l.push(s._loadedResMap[d].data)
                            }
                            t.callback.apply(t.thisObj, [l])
                        }
                    } else RES.getResByUrl(o,
                        function(n, s) {
                            if (n && (e._loadedResMap[o] = {
                                    data: n,
                                    refCount: 0
                                }), a++, a >= t.res.length && t.callback) {
                                for (var r = [], l = 0, h = i; l < h.length; l++) {
                                    var c = h[l];
                                    e._loadedResMap[c] ? r.push(e._loadedResMap[c].data) : r.push(null)
                                }
                                t.callback.apply(t.thisObj, [r])
                            }
                        },
                        s)
                },
                s = this;
            for (var r in t.res) n(r)
        },
        t.kMaxCachedTextureArea = 10485760,
        t.kMinCollectInterval = 30,
        t.kMaxStayCacheTime = 180,
        t
}();
egret.registerClass(ResLoader, "ResLoader");
var SimpleAnimation = function(t) {
    function e(e, a, i) {
        void 0 === a && (a = 24),
            void 0 === i && (i = !0),
            t.call(this),
            this._pause = !0,
            this.setFrames(e),
            this.frameRate = a,
            this._curFrameIndex = 0,
            this._loop = i,
            this._timeCounter = 0,
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.OnAddToStage, this)
    }
    __extends(e, t);
    var a = __define,
        i = e,
        n = i.prototype;
    return a(n, "frameRate",
            function() {
                return this._frameRate
            },
            function(t) {
                0 >= t && (t = .001),
                    t > 60 && (t = 60),
                    this._frameRate = t,
                    this._frameInterval = 1e3 / t,
                    this._totalInterval = this._frameInterval * this._framenames.length
            }),
        n.setFrames = function(t) {
            var e = this;
            0 != t.length && (this._timeCounter = 0, this._pause = !0, this._framenames = t, this._frames = [], SUI.setTextureAsync(this, this._framenames[0],
                function(t) {
                    e._frames.push(t),
                        e.texture = t;
                    for (var a = [], i = 1; i < e._framenames.length; ++i) a.push(e._framenames[i]);
                    ResLoader.instance.preLoadResList(a,
                        function(t) {
                            for (var a = 0,
                                    i = t; a < i.length; a++) {
                                var n = i[a];
                                e._frames.push(n)
                            }
                            e.GotoAndPlay(0)
                        },
                        e)
                },
                this))
        },
        n.GotoAndStop = function(t) {
            t >= 0 && t < this._frames.length && (t = Math.floor(t), this._timeCounter = this._frameInterval * t, this.texture = this._frames[t], this._pause = !0)
        },
        n.GotoAndPlay = function(t) {
            this.GotoAndStop(t),
                this._pause = !1
        },
        n.OnAddToStage = function() {
            this.addEventListener(egret.Event.ENTER_FRAME, this.OnEnterFrame, this),
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.OnRemoveFromStage, this),
                this._timeOnEnterFrame = egret.getTimer()
        },
        n.OnEnterFrame = function() {
            if (!(this._pause || this._totalInterval <= 0 || 0 == this._frames.length)) {
                var t = egret.getTimer();
                this._timeCounter += t - this._timeOnEnterFrame,
                    this._timeOnEnterFrame = t,
                    this._timeCounter > this._totalInterval && (this._loop ? (this._timeCounter = this._timeCounter % this._totalInterval, this.dispatchEventWith(egret.MovieClipEvent.LOOP_COMPLETE)) : (this._pause = !0, this._timeCounter = this._totalInterval - 1, this.dispatchEventWith(egret.MovieClipEvent.COMPLETE)));
                var e = Math.floor(this._timeCounter / this._totalInterval * this._frames.length);
                e != this._curFrameIndex && (this.texture = this._frames[e], this._curFrameIndex = e)
            }
        },
        n.OnRemoveFromStage = function() {
            this.removeEventListener(egret.Event.ENTER_FRAME, this.OnEnterFrame, this),
                this.removeEventListener(egret.Event.REMOVED_FROM_STAGE, this.OnRemoveFromStage, this)
        },
        e
}(egret.Bitmap);
egret.registerClass(SimpleAnimation, "SimpleAnimation");
var SUI = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.addClickEffect = function(t) {
            var e = t.scaleX,
                a = t.scaleY,
                i = function(t) {
                    var i = t.currentTarget;
                    i.x = i.userdata.x - .1 * i.width * e / Math.abs(e),
                        i.y = i.userdata.y - .1 * i.height * a / Math.abs(a),
                        i.scaleX = 1.2 * e,
                        i.scaleY = 1.2 * a
                },
                n = function(t) {
                    var i = t.currentTarget;
                    i.scaleX = e,
                        i.scaleY = a,
                        i.x = i.userdata.x,
                        i.y = i.userdata.y
                },
                s = function(e) {
                    e.currentTarget;
                    t.removeEventListener(egret.Event.REMOVED_FROM_STAGE, s, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, i, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_END, n, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_CANCEL, n, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, n, this)
                };
            t.userdata = {
                    x: t.x,
                    y: t.y
                },
                t.addEventListener(egret.TouchEvent.TOUCH_BEGIN, i, this),
                t.addEventListener(egret.TouchEvent.TOUCH_END, n, this),
                t.addEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, n, this),
                t.addEventListener(egret.TouchEvent.TOUCH_CANCEL, n, this),
                t.addEventListener(egret.Event.REMOVED_FROM_STAGE, s, this)
        },
        t.addClickEffect1 = function(t) {
            var e = t.x,
                a = t.y,
                i = function(t) {
                    var i = t.currentTarget;
                    i.x = e,
                        i.y = a + 5
                },
                n = function(t) {
                    var i = t.currentTarget;
                    i.x = e,
                        i.y = a
                },
                s = function(e) {
                    e.currentTarget;
                    t.removeEventListener(egret.Event.REMOVED_FROM_STAGE, s, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, i, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_END, n, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_CANCEL, n, this),
                        t.removeEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, n, this)
                };
            t.addEventListener(egret.TouchEvent.TOUCH_BEGIN, i, this),
                t.addEventListener(egret.TouchEvent.TOUCH_END, n, this),
                t.addEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE, n, this),
                t.addEventListener(egret.TouchEvent.TOUCH_CANCEL, n, this),
                t.addEventListener(egret.Event.REMOVED_FROM_STAGE, s, this)
        },
        t.setTextureAsync = function(e, a, i, n, s, r) {
            void 0 === n && (n = void 0),
                a && ResLoader.instance.preLoadResList([a],
                    function(r) {
                        var o = r[0];
                        if (o) {
                            if (e) {
                                e.texture = o;
                                var l = e;
                                if (l.addEventListener) {
                                    var h = (++t.tagInc).toString();
                                    ResLoader.instance.addRef(a, h),
                                        l.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                                            function() {
                                                ResLoader.instance.clearTag(h)
                                            },
                                            void 0)
                                }
                            }
                            i && (n ? i.apply(n, [o, a, s]) : i(o, a, s))
                        } else Log.log("load image failed:", a),
                            i && (n ? i.apply(n, [null, a, s]) : i(null, a, s))
                    })
        },
        t.setQualityColor = function(e, a) {
            var i;
            switch (+a) {
                case 1:
                    i = t.rgb2Hex(t.Color.white.r, t.Color.white.g, t.Color.white.b);
                    break;
                case 2:
                    i = t.rgb2Hex(t.Color.green.r, t.Color.green.g, t.Color.green.b);
                    break;
                case 3:
                    i = t.rgb2Hex(t.Color.blue.r, t.Color.blue.g, t.Color.blue.b);
                    break;
                case 4:
                    i = t.rgb2Hex(t.Color.purple.r, t.Color.purple.g, t.Color.purple.b);
                    break;
                case 5:
                    i = t.rgb2Hex(t.Color.gold.r, t.Color.gold.g, t.Color.gold.b);
                    break;
                default:
                    i = 16777215
            }
            egret.log("color:", i),
                e.textColor = +i
        },
        t.rgb2Hex = function(t, e, a) {
            return "0x" + (t << 16 | e << 8 | a).toString(16)
        },
        t.loadSpriteSheet = function(t, e, a, i) {
            ResLoader.instance.preLoadResList([t, e],
                function(t) {
                    a && a.apply(i, [t[0], t[1]])
                })
        },
        t.setItemIcon = function(e, a, i) {
            if (e) {
                if (!a) return void(e.visible = !1);
                var n = e.imgBg,
                    s = e.imgIcon,
                    r = e.imgPieceFlag,
                    o = e.imgFrame,
                    l = e.imgExtra,
                    h = e.txtName,
                    c = e.txtNum,
                    d = e.imgShadeFlag;
                d && (d.visible = !1),
                    o && (o.visible = !1),
                    a.type == TypeDefine.Const.DROP_TYPE_CAPTAINPIECE ? (t.setTextureAsync(n, QualitySystem.getCaptainSmallBack(a.quality)), t.setTextureAsync(o, QualitySystem.getCaptainFrame(a.quality)), o && (o.visible = !0)) : t.setTextureAsync(n, QualitySystem.getItemSmallBack(a.quality)),
                    t.setTextureAsync(s, a.icon),
                    r && (r.visible = !!a.ispieces),
                    l && (l.visible = !1),
                    h && (h.text = a.name ? a.name.toString() : "", a.quality && (h.textColor = QualitySystem.getColorByQuality(a.quality)));
                var g = "";
                a.count && a.count > 1 && (g = "x" + a.count),
                    c && (c.text = g)
            }
        },
        t.loadMovieClip = function(e, a, i, n, s) {
            ResLoader.instance.preLoadResList([e, a],
                function(e) {
                    var r = new egret.MovieClipDataFactory(e[0], e[1]),
                        o = new egret.MovieClip(r.generateMovieClipData("default"));
                    i.addChild(o),
                        o.gotoAndPlay(0, -1);
                    var l = (++t.tagInc).toString();
                    ResLoader.instance.addRef(a, l),
                        o.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                            function() {
                                ResLoader.instance.clearTag(l)
                            },
                            void 0),
                        n && n.apply(s, [o])
                })
        },
        t.Color = {
            white: {
                r: 215,
                g: 215,
                b: 215
            },
            green: {
                r: 100,
                g: 203,
                b: 60
            },
            blue: {
                r: 71,
                g: 164,
                b: 251
            },
            purple: {
                r: 223,
                g: 81,
                b: 249
            },
            gold: {
                r: 247,
                g: 175,
                b: 82
            }
        },
        t.tagInc = 0,
        t
}();
egret.registerClass(SUI, "SUI");
var UserDefault = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.setStringForKey = function(t, e) {
            t && null !== e && egret.localStorage.setItem(t, e)
        },
        a.getStringForKey = function(t) {
            if (t) {
                var e = egret.localStorage.getItem(t);
                return e ? e : ""
            }
            return ""
        },
        t.instance = new t,
        t
}();
egret.registerClass(UserDefault, "UserDefault");
var timeType;
!
function(t) {
    t[t.HMS = 0] = "HMS",
        t[t.YMD = 1] = "YMD",
        t[t.YMDHMS = 2] = "YMDHMS",
        t[t.MDHM = 3] = "MDHM",
        t[t.DAY = 4] = "DAY",
        t[t.TIMENUMBER = 5] = "TIMENUMBER",
        t[t.FORMATDATE = 6] = "FORMATDATE"
}(timeType || (timeType = {}));
var Utils = function() {
    function t() {}
    var e = (__define, t);
    e.prototype;
    return t.rnum = function(t) {
            if (t = Math.floor(t), 0 / 0 == t) return "0";
            if (t < Math.pow(10, 4)) return Math.floor(t) + "";
            var e = Math.floor(t / 10).toString().length;
            Math.pow(10, e);
            return t < Math.pow(10, 6) ? Math.floor(t / Math.pow(10, 3)) + "K" : t < Math.pow(10, 9) ? Math.floor(t / Math.pow(10, 6)) + "M" : t < Math.pow(10, 12) ? Math.floor(t / Math.pow(10, 9)) + "B" : t < Math.pow(10, 15) ? Math.floor(t / Math.pow(10, 12)) + "T" : "$$$$"
        },
        t.getDoubleNumText = function(t) {
            return t = Number(t),
                t > 9 ? t.toString() : "0" + t
        },
        t.getDateByNum = function(e, a) {
            void 0 === a && (a = timeType.HMS),
                0 > e && (e = 0);
            var i = new Date(e),
                n = t.getDoubleNumText(i.getHours()) + ":" + t.getDoubleNumText(i.getMinutes()) + ":" + t.getDoubleNumText(i.getSeconds()),
                s = t.getDoubleNumText(i.getHours()) + ":" + t.getDoubleNumText(i.getMinutes());
            return a == timeType.HMS ? n : a == timeType.YMDHMS ? i.getFullYear() + "-" + t.getDoubleNumText(i.getMonth() + 1) + "-" + t.getDoubleNumText(i.getDate()) + " " + n : a == timeType.YMD ? i.getFullYear() + "" + t.getDoubleNumText(i.getMonth() + 1) + t.getDoubleNumText(i.getDate()) : a == timeType.MDHM ? t.getDoubleNumText(i.getMonth() + 1) + "-" + t.getDoubleNumText(i.getDate()) + " " + s : a == timeType.DAY ? i.getDay() : a == timeType.TIMENUMBER ? 60 * i.getHours() + i.getMinutes() : a == timeType.FORMATDATE ? i.getMonth() + 1 + "月" + t.getDoubleNumText(i.getDate()) + "日 " + t.getDoubleNumText(i.getHours()) + ":" + t.getDoubleNumText(i.getMinutes()) : void 0
        },
        t.getTimeString = function(t) {
            0 > t && (t = 0);
            var e = Math.floor(t / 3600),
                a = Math.floor(t / 60) % 60,
                i = t % 60;
            return e.toFixedInteger(2) + ":" + a.toFixedInteger(2) + ":" + i.toFixedInteger(2)
        },
        t.getImgByUrl = function(t, e, a, i, n) {
            void 0 === a && (a = null),
                void 0 === n && (n = ""),
                t && ResLoader.instance.preLoadResList([t],
                    function(s) {
                        var r = s[0];
                        if (r) {
                            if (n && ResLoader.instance.addRef(t, n), e) {
                                e.texture = r;
                                var o = (++SUI.tagInc).toString();
                                ResLoader.instance.addRef(t, o),
                                    e.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                                        function() {
                                            ResLoader.instance.clearTag(o)
                                        },
                                        void 0)
                            }
                            a && (i ? a.apply(i, [r]) : a(r))
                        } else Log.log("load image failed:", t),
                            a && (i ? a.apply(i, [null]) : a(null))
                    })
        },
        t.textFlowByStr = function(t, e, a) {
            void 0 === e && (e = 16777215),
                void 0 === a && (a = !1);
            var i = [],
                n = t.split("#");
            i.push({
                text: n[0],
                style: {
                    textColor: e
                }
            });
            for (var s = 1; s < n.length; s += 2) "" != n[s].substr(6) && (a ? i.push({
                    text: n[s].substr(6),
                    style: {
                        textColor: e
                    }
                }) : i.push({
                    text: n[s].substr(6),
                    style: {
                        textColor: Number("0x" + n[s].substr(0, 6))
                    }
                })),
                "" != n[s + 1] && i.push({
                    text: n[s + 1],
                    style: {
                        textColor: e
                    }
                });
            return i
        },
        t.getGoodAtShip = function(t) {
            for (var e = [128, 64, 32, 16, 8, 4, 2, 1], a = [], i = 0; i < e.length; i++) {
                var n = Math.floor(t / e[i]);
                t -= e[i] * n,
                    n > 0 && a.push(e.length - i)
            }
            for (var s = "",
                    i = 0; i < a.length; i++) s += Locales.get("GlobalSystem_ShipType_" + a[i]) + "、";
            return s = s.substring(0, s.length - 1), [s, a]
        },
        t.getListByKeyValue = function(t, e, a) {
            a = a || [];
            for (var i = a.length,
                    n = [], s = 0; i > s; s++)
                if (a[s][t]) {
                    var r = egret.getQualifiedClassName(a[s][t]);
                    if ("string" == r || "number" == r) a[s][t] == e && n.push(a[s]);
                    else if ("Array" == r)
                        for (var o = a[s][t].length, l = 0; o > l; l++) a[s][t][l] == e && n.push(a[s])
                }
            return n
        },
        t.getMetalLvByExp = function(t, e) {
            var a = MedalexpdataParser.GetInstance().getDataArr();
            a || (a = ConfigData.getAllData("medalexpData"));
            var i = 0;
            if (a[0] && a[0][e]) {
                t -= Number(a[0][e]);
                for (var n in a)
                    if ("0" != n && (t -= Number(a[n][e]), 0 >= t)) {
                        i = Number(a[n].level);
                        break
                    }
            }
            return i ? i - 1 : 1
        },
        t.getMetalExpByLv = function(t, e) {
            var a = MedalexpdataParser.GetInstance().getDataArr();
            a || (a = ConfigData.getAllData("medalexpData"));
            var i = 0;
            for (var n in a) {
                if (Number(a[n].level) > t) break;
                i += Number(a[n][e])
            }
            return i
        },
        t.cloneObject = function(t) {
            var e = {};
            for (var a in t) e[a] = t[a];
            return e
        },
        t.delayCall = function(t, e, a, i) {
            return 0 >= t && (t = 1),
                egret.setTimeout(function() {
                        e.apply(a, i)
                    },
                    void 0, t)
        },
        t.cancalDelayCall = function(t) {
            egret.clearTimeout(t)
        },
        t.randInt = function(t, e) {
            var a = e - t + 1,
                i = Math.random(),
                n = Math.floor(t + a * i);
            return n == e + 1 && (n = e),
                n
        },
        t.ccp = function(t, e) {
            return {
                x: t,
                y: e
            }
        },
        t.removeNode = function(t) {
            t && t.parent && t.parent.removeChild(t)
        },
        t.setScale = function(t, e) {
            t && (t.scaleX = t.scaleY = e)
        },
        t.setPosition = function(t, e, a) {
            t && (t.x = e, t.y = a)
        },
        t.rgbToColor = function(t, e, a) {
            return t << 16 | e << 8 | a
        },
        t.call = function(t, e) {
            t && (e ? t.apply(e) : t())
        },
        t.filterStr = function(t) {
            var e = RES.getRes("FilterStr_txt"),
                a = new RegExp(e, "gi"),
                i = !1;
            return t.match(a) && (t = t.replace(new RegExp(e, "gi"), "*"), i = !0, Toast.launch("输入的文字中有敏感词汇！")), [t, i]
        },
        t.createDragonBone = function(t, e, a, i, n, s, r) {
            ResLoader.instance.preLoadResList([t, e, a],
                function(t) {
                    var e = t[2],
                        n = t[1],
                        o = t[0];
                    if (e && n && o) {
                        var l = new dragonBones.EgretFactory;
                        l.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(o)),
                            l.addTextureAtlas(new dragonBones.EgretTextureAtlas(e, n));
                        var h = l.buildArmature(i);
                        dragonBones.WorldClock.clock.add(h);
                        var c = h.animation.gotoAndPlay("normal"),
                            d = (++SUI.tagInc).toString();
                        ResLoader.instance.addRef(a, d),
                            h.display.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                                function() {
                                    ResLoader.instance.clearTag(d)
                                },
                                void 0),
                            s && (r ? s.apply(r, [h, c]) : s(h, c))
                    }
                },
                r)
        },
        t.removeDragonBone = function(e) {
            t.removeNode(e.display),
                dragonBones.WorldClock.clock.remove(e)
        },
        t.GetQueryString = function(t, e) {
            if (void 0 === e && (e = !1), e) {
                var a = new RegExp("(\\?|#|&)" + t + "=([^&#]*)(&|#|$)"),
                    i = location.href.match(a);
                return i ? decodeURIComponent(i[2]) : null
            }
            var n = new RegExp("(\\?|&)" + t + "=([^&#]*)(&|#|$)"),
                a = window.location.href.substr(1).match(n);
            return null != a ? unescape(a[2]) : null
        },
        t.GetHashString = function(t) {
            var e = new RegExp("(\\?|#)" + t + "=([^&#]*)(&|#|$)"),
                a = window.location.href.substr(1).match(e);
            return null != a ? unescape(a[2]) : null
        },
        t.reqeustURL = function(t, e, a, i, n) {
            void 0 === n && (n = egret.HttpMethod.GET);
            var s = new egret.HttpRequest;
            s.responseType = egret.HttpResponseType.TEXT,
                e = e ? e : {};
            var r = [];
            for (var o in e) r.push(o + "=" + e[o]);
            var l = r.join("&");
            if (n == egret.HttpMethod.GET)
                if ("" != l) {
                    var h = t + "?" + l;
                    Log.logError(h),
                        s.open(h, n)
                } else s.open(t, n);
            else s.open(t, n);
            s.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                s.addEventListener(egret.Event.COMPLETE,
                    function(t) {
                        var e = t.currentTarget;
                        i ? a.apply(i, [e.response]) : a(e.response)
                    },
                    void 0),
                s.addEventListener(egret.IOErrorEvent.IO_ERROR,
                    function(n) {
                        Log.logError("IOError", t, Log.objectToString(e)),
                            i ? a.apply(i) : a(null)
                    },
                    void 0),
                n == egret.HttpMethod.GET ? s.send() : s.send(l)
        },
        t.reqeustURLwithCookie = function(t, e, a, i, n) {
            void 0 === n && (n = egret.HttpMethod.GET);
            var s = new egret.HttpRequest;
            s.withCredentials = !0,
                s.responseType = egret.HttpResponseType.TEXT,
                e = e ? e : {};
            var r = [];
            for (var o in e) r.push(o + "=" + e[o]);
            var l = r.join("&");
            if (n == egret.HttpMethod.GET)
                if ("" != l) {
                    var h = t + "?" + l;
                    Log.logError(h),
                        s.open(h, n)
                } else s.open(t, n);
            else s.open(t, n);
            s.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                s.addEventListener(egret.Event.COMPLETE,
                    function(t) {
                        var e = t.currentTarget;
                        i ? a.apply(i, [e.response]) : a(e.response)
                    },
                    void 0),
                s.addEventListener(egret.IOErrorEvent.IO_ERROR,
                    function(n) {
                        Log.logError("IOError", t, Log.objectToString(e)),
                            i ? a.apply(i) : a(null)
                    },
                    void 0),
                n == egret.HttpMethod.GET ? s.send() : s.send(l)
        },
        t.getCurrentTime = function() {
            return Math.floor(Date.now() / 1e3)
        },
        t.toast = function(e, a, i, n, s) {
            if (Toast && Toast.launch) return void Toast.launch(e);
            a = a || 2e3,
                i && (e = '<span class="loader"></span><span class="loadText">' + e + "</span>");
            var r = t.addNode("div", "mod-toast-content", null, e),
                o = t.addNode("div", "mod-toast", "toast" + Math.floor(1e5 * Math.random()));
            o.style.display = "block",
                o.style.opacity = 0,
                n && (o.style.bottom = "50%"),
                o.appendChild(r);
            var l = s && 10 || 200,
                h = setTimeout(function() {
                        o.style.opacity = 1,
                            clearTimeout(h),
                            h = setTimeout(function() {
                                    clearTimeout(h),
                                        o.style.opacity = 0,
                                        h = setTimeout(function() {
                                                clearTimeout(h),
                                                    t.closeDialog(o)
                                            },
                                            l)
                                },
                                a)
                    },
                    l);
            document.body.appendChild(o)
        },
        t.addNode = function(t, e, a, i) {
            var n = document.createElement(t);
            return a && (n.id = a),
                e && (n.className = e),
                i && (n.innerHTML = i),
                n
        },
        t.closeDialog = function(t) {
            t && null != t.parentNode && t.parentNode.removeChild(t),
                t = void 0
        },
        t.getMonthDay = function(t) {
            var e = new Date(t);
            return e.setDate(31),
                31 - e.getDate()
        },
        t.getDayDiff = function(t, e) {
            if (t > e) {
                var a = t;
                t = e,
                    e = a
            }
            var i = new Date(t),
                n = new Date(e);
            i.setHours(12, 0, 0, 0),
                n.setHours(12, 0, 0, 0);
            var s = n.valueOf() - i.valueOf(),
                r = Math.floor(s / 864e5);
            return r
        },
        t.test = 1,
        t
}();
egret.registerClass(Utils, "Utils");
var ScrollerEx = function(t) {
    function e() {
        t.call(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.scrollToEx = function(t, e, a, i, n) {
            void 0 === e && (e = 0),
                void 0 === a && (a = !1),
                this.stopAnimation(),
                a ? e > 50 ? i ? egret.Tween.get(this.$Scroller[10]).to({
                        scrollV: t
                    },
                    e, egret.Ease.quartIn).call(i, n) : egret.Tween.get(this.$Scroller[10]).to({
                        scrollV: t
                    },
                    e, egret.Ease.quartIn) : (this.$Scroller[10].scrollV = t, Utils.call(i, n)) : e > 50 ? i ? egret.Tween.get(this.$Scroller[10]).to({
                        scrollH: t
                    },
                    e, egret.Ease.quartIn).call(i, n) : egret.Tween.get(this.$Scroller[10]).to({
                        scrollH: t
                    },
                    e, egret.Ease.quartIn) : (this.$Scroller[10].scrollH = t, Utils.call(i, n))
        },
        i.scrollXY = function(t, e, a, i, n, s, r) {
            void 0 === n && (n = 0),
                this.stopAnimation(),
                0 > t && (t = 0),
                0 > e && (e = 0);
            var o = a - this.width,
                l = i - this.height;
            t > o && (t = o),
                e > l && (e = l),
                n > 50 ? s ? egret.Tween.get(this.$Scroller[10]).to({
                        scrollH: t,
                        scrollV: e
                    },
                    n, egret.Ease.quartIn).call(s, r) : egret.Tween.get(this.$Scroller[10]).to({
                        scrollH: t,
                        scrollV: e
                    },
                    n, egret.Ease.quartIn) : (this.$Scroller[10].scrollH = t, this.$Scroller[10].scrollV = e, Utils.call(s, r))
        },
        i.getScrolled = function(t) {
            return void 0 === t && (t = !1),
                t ? this.$Scroller[10].scrollV : this.$Scroller[10].scrollH
        },
        i.scrollToItemIndex = function(t, e, a, i, n, s, r, o) {
            if (void 0 === s && (s = 0), this.stopAnimation(), e);
            else {
                var l = t * (a + i),
                    h = n * (a + i) - i;
                h - l < this.width && (l = h - this.width),
                    this.scrollToEx(l, s, e, r, o)
            }
        },
        i.getCurShowItems = function(t, e, a, i) {
            var n = [],
                s = this.getScrolled(t);
            if (t);
            else
                for (var r = 0; i > r; ++r) {
                    var o = r * (e + a),
                        l = o + e;
                    o - s >= 0 && o - s < this.width ? n.push(r) : l - s > 0 && l - s <= this.width && n.push(r)
                }
            return n
        },
        i.getOldScrolled = function() {
            return {
                x: this.$Scroller[10].scrollH,
                y: this.$Scroller[10].scrollV
            }
        },
        e
}(eui.Scroller);
egret.registerClass(ScrollerEx, "ScrollerEx");
var CaptainCommandItem = function(t) {
    function e(e) {
        t.call(this),
            this.sData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/shipCommandItemSkin.exml"
            /*tpa=resource/eui_skins/item/shipCommandItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["shipData", "captainData"],
                    function() {
                        t.initData()
                    }),
                WindowShipInfo.instance && WindowShipInfo.instance.reSizeItem()
        },
        i.initData = function() {
            var t, e = ConfigData.getDataByKey("captainData", this.sData.id),
                a = Utils.getListByKeyValue("captainid", this.sData.id, ShipManager.getInstance().soldierList);
            if (0 == a.length) this.nameTxt.text = Locales.get("noInSoldier"),
                this.nameTxt.textColor = 13421772;
            else {
                var i = Utils.getListByKeyValue("id", a[0].shipid, ShipManager.getInstance().shipList);
                t = ConfigData.getDataByKey("shipData", i[0].shipid),
                    this.nameTxt.text = ShipdataParser.GetInstance().getItemById(i[0].shipid).name_l,
                    Utils.getImgByUrl(ShipManager.getInstance().getShipTypeIcon(t.shipType), this.icon.imgType),
                    Utils.getImgByUrl(QualitySystem.getShipSmallBack(t.quality), this.icon.imgBg),
                    Utils.getImgByUrl(ShipManager.getInstance().getShipPicByType(i[0].shipid), this.icon.imgIcon)
            }
            for (var n = 0,
                    s = 1; 3 > s; s++) this.sData.upgradelevel >= e["activeLvLimit" + s] && t && t.country == e.country && (n += 1);
            var r = Utils.getGoodAtShip(e.goodat)[0];
            if (this.activeTxt.text = Locales.get("panel_jianzhang_detail_comment_12") + n + "/2", 1 == n ? (this.pro1Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro1", e.activeLvLimit1, Locales.get("panel_jianzhang_shuxing1_guojia_" + e.country), BuffData.getBuffNameById(e.activeType1), Number(e.activeValue1 / 100) + "%")), this.pro2Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro2", e.activeLvLimit2, r, BuffData.getBuffNameById(e.activeType2), Number(e.activeValue2 / 100) + "%"), 13421772, !0)) : 2 == n ? (this.pro1Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro1", e.activeLvLimit1, Locales.get("panel_jianzhang_shuxing1_guojia_" + e.country), BuffData.getBuffNameById(e.activeType1), Number(e.activeValue1 / 100) + "%")), this.pro2Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro2", e.activeLvLimit2, r, BuffData.getBuffNameById(e.activeType2), Number(e.activeValue2 / 100) + "%"))) : (this.pro1Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro1", e.activeLvLimit1, Locales.get("panel_jianzhang_shuxing1_guojia_" + e.country), BuffData.getBuffNameById(e.activeType1), Number(e.activeValue1 / 100) + "%"), 13421772, !0), this.pro2Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro2", e.activeLvLimit2, r, BuffData.getBuffNameById(e.activeType2), Number(e.activeValue2 / 100) + "%"), 13421772, !0)), e.matchShip) {
                for (var o = e.matchShip.split("|"), r = "", s = 1; s < o.length; s++) r += ShipdataParser.GetInstance().getItemById(o[s]).name_l + ",";
                this.reTxt.text = Locales.get("panel_jianzhang_detail_comment_25") + r.substring(0, r.length - 1)
            } else this.reTxt.text = ""
        },
        e
}(eui.Component);
egret.registerClass(CaptainCommandItem, "CaptainCommandItem");
var FormationItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/zhengrong_genhuanzhandouzhenxingSkin.exml"
            /*tpa=resource/eui_skins/item/zhengrong_genhuanzhandouzhenxingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this,
                a = ConfigData.getAllData("manualupdate"),
                i = Utils.getListByKeyValue("id", this.iData.id, ShipManager.getInstance().shipFormationList),
                n = 0;
            i.length > 0 ? (n = i[0].level, Utils.getImgByUrl(Path.formationURL + this.iData.icon, this.icon)) : (this.useBtn.enabled = this.upBtn.enabled = !1, Utils.getImgByUrl(Path.formationURL + this.iData.icon.substr(0, this.iData.icon.length - 4) + "-h.png", this.icon)),
                this.lvTxt.text = Locales.get("DecListPanel_txt_item_lvl") + n + "/" + a.length,
                this.titleTxt.text = Locales.get("formationName_" + this.iData.id);
            var s = Number(this.iData.value1) + ((0 == n ? 1 : n) - 1) * Number(this.iData.value1rate);
            this.atk1Txt.text = Locales.get("manual_buff_" + this.iData.targetType1 + this.iData.buff1) + ":" + s * i.length,
                this.iData.targetType2 ? (s = Number(this.iData.value2) + ((0 == n ? 1 : n) - 1) * Number(this.iData.value2rate), this.atk2Txt.text = Locales.get("manual_buff_" + this.iData.targetType2 + this.iData.buff2) + ":" + s * i.length) : this.atk2Txt.text = "",
                this.atkV2Txt.text = this.atkV1Txt.text = "",
                this.iData.id == ShipManager.getInstance().shipFormationSelect ? (e.useBtn && (e.useBtn.enabled = !0), this.enTxt.text = Locales.get("panel_formation_select"), this.useBtn.enabled = !1, e.useBtn = this.useBtn) : (this.enTxt.text = "", this.useBg.visible = !1),
                this.upBtn.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.upBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.updateHandler, this), this.useBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.useHandler, this), GameEventDispatcher.getInstance().addEventListener(GameEvent.FORMATION_UPDATE, this.updateCallBack, this), this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clearHandler, this)),
                0 == i.length && (this.atk2Txt.text = "", ConfigData.preLoadDats(["stageData"], [StagedataParser],
                    function() {
                        var e = StagedataParser.GetInstance().getItemById(t.iData.stage);
                        t.atk1Txt.textFlow = Utils.textFlowByStr(Locales.get("manual_" + t.iData.id + "_desc1_l", Math.floor(Number(t.iData.stage) / 1e4 - 9), e.name_l))
                    },
                    this)),
                n == a.length && (this.upBtn.enabled = !1)
        },
        i.clearHandler = function(t) {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.FORMATION_UPDATE, this.updateCallBack, this)
        },
        i.updateHandler = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.FormationUpdatePopup, {
                data: this.iData
            })
        },
        i.useHandler = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceShipFormationChoose);
            e.formationid = Number(this.iData.id),
                Transport.instance.send(e)
        },
        i.updateCallBack = function(t) {
            this.init()
        },
        e
}(eui.Component);
egret.registerClass(FormationItem, "FormationItem");
var IconItem = function(t) {
    function e(e, a, i, n) {
        void 0 === i && (i = 16777215),
            void 0 === n && (n = null),
            t.call(this),
            this.iconUrl = e,
            this.msg = a,
            this.quality = n,
            this.col = i,
            this.init()
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.visibleBool = !0,
                this.iconLabel = new eui.Label(this.msg),
                this.iconLabel.fontFamily = "黑体",
                this.iconLabel.textColor = this.col,
                this.iconLabel.size = 16,
                this.iconLabel.x = -this.iconLabel.width / 2,
                this.addChild(this.iconLabel),
                this.iconLabel.visible = this.visibleBool,
                this.quality && this.createIcon(Path.itemBackURL + "itemBack_item_sml_" + this.quality + ".png"),
                this.createIcon(this.iconUrl, .95)
        },
        i.visibleIconLabel = function(t) {
            this.visibleBool = t,
                this.iconLabel && (this.iconLabel.visible = t)
        },
        i.createIcon = function(t, e) {
            var a = this;
            void 0 === e && (e = 1);
            var i = new eui.Image;
            this.addChild(i),
                Utils.getImgByUrl(t, i,
                    function() {
                        i.scaleX = i.scaleY = e,
                            i.x = -i.width / 2 * e,
                            i.y = -i.height / 2 * e,
                            a.iconLabel.y = i.height / 2 + 10
                    })
        },
        i.destroy = function() {
            this.parent && this.parent.removeChild(this)
        },
        e
}(egret.DisplayObjectContainer);
egret.registerClass(IconItem, "IconItem");
var RoleItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/RoleItemSkin.exml"
            /*tpa=resource/eui_skins/item/RoleItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.anchorOffsetX = this.width / 2,
                this.anchorOffsetY = this.height / 2
        },
        i.setRoleInfo = function(t) {
            this.roleIcon.source = t
        },
        e
}(eui.Component);
egret.registerClass(RoleItem, "RoleItem");
var ShipInfoItem = function(t) {
    function e(e, a, i) {
        t.call(this),
            this.sData = e,
            this.myType = a,
            this.target = i,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/shipInfoItemSkin.exml"
            /*tpa=resource/eui_skins/item/shipInfoItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["shipData", "exp", "captainData", "trainData"],
                    function() {
                        t.initData()
                    }),
                this.target ? (this.updateBtn.visible = this.studyBtn.visible = !0, this.updateBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function(e) {
                        (36 == GuideManager.step || 139 == GuideManager.step) && GuideManager.nextStep(),
                            t.myType == shipInfoItemType.captainInfo ? WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                                data: t.sData,
                                type: OperateType.captain,
                                index: 1
                            }) : WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                                data: t.sData,
                                type: OperateType.ship,
                                index: 1
                            }),
                            t.target.destroy()
                    },
                    this), this.studyBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function(e) {
                        t.myType == shipInfoItemType.captainInfo ? (WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                            data: t.sData,
                            type: OperateType.captain,
                            index: 2
                        }), t.target.destroy()) : UserData.getInstance()._level < 15 ? Toast.launch(Locales.get("ui_main_function_scientific", 15)) : (WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                            data: t.sData,
                            type: OperateType.ship,
                            index: 4
                        }), t.target.destroy())
                    },
                    this)) : this.updateBtn.visible = this.studyBtn.visible = !1,
                this.getHeadTxt.text = this.getTxt.text = this.eAtkHeadTxt.text = this.eAtkTxt.text = "",
                WindowShipInfo.instance && WindowShipInfo.instance.reSizeItem()
        },
        i.getValueByAdd = function(t, e, a) {
            return Number(t.split("|")[a]) + Number(e.split("|")[a]) * (a - 1)
        },
        i.initData = function() {
            var t;
            if (this.myType == shipInfoItemType.captainInfo) {
                this.studyBtn.label = Locales.get("zz_upgrade");
                var e = this.sData.upgradelevel || 1,
                    a = this.sData.promotelevel || 1;
                t = ConfigData.getDataByKey("exp", UserData.getInstance()._level),
                    this.lvTxt.text = e + "/" + (t.captainLevelLimit || UserData.getInstance()._level),
                    t = ConfigData.getDataByKey("captainData", this.sData.id),
                    this.typeHeadTxt.text = Locales.get("panel_jianzhang_detail_comment_1"),
                    this.nameTxt.text = Locales.get("panel_jianzhang_detail_guojia_" + t.country),
                    this.qualityTxt.text = t.quality,
                    this.liveTxt.text = this.getValueByAdd(t.basicHp, t.upgradeAddHp, a).toString(),
                    this.speedHeadTxt.text = Locales.get("Rank"),
                    this.speedTxt.text = Locales.get("panel_jianzhang_junxian_" + a),
                    this.getHeadTxt.text = Locales.get("panel_jianzhang_hecheng_comment_2");
                var i = Utils.getGoodAtShip(t.goodat)[0];
                this.getTxt.text = i,
                    this.fireTxt.text = this.getValueByAdd(t.basicFireAttack, t.upgradeAddFireAttack, a).toString(),
                    this.defendTxt.text = this.getValueByAdd(t.basicFireDefen, t.upgradeAddFireDefen, a).toString(),
                    this.eAtkHeadTxt.text = Locales.get("DecListPanel_txt_item_prop_3"),
                    this.eAtkTxt.text = this.getValueByAdd(t.basicExplosionAttack, t.upgradeAddExplosionAttack, a).toString(),
                    this.exploTxt.text = this.getValueByAdd(t.basicExpDefen, t.upgradeAddExpDefen, a).toString(),
                    this.target && (this.p1.visible = RedPointManager.getCaptainUpdate(this.sData) > 0, this.p2.visible = RedPointManager.getCaptainRemodule(this.sData) > 0)
            } else {
                var e = this.sData.level || 1;
                t = ConfigData.getDataByKey("exp", UserData.getInstance()._level),
                    this.lvTxt.text = e + "/" + t.shipFactorylvlLimit,
                    t = ConfigData.getDataByKey("shipData", this.sData.shipid),
                    this.nameTxt.text = Locales.get("GlobalSystem_ShipType_" + t.shipType),
                    this.qualityTxt.text = t.quality,
                    1 == t.atkType ? (this.fireHeadTxt.text = Locales.get("DecListPanel_txt_item_prop_1"), this.fireTxt.text = this.sData.attack || this.getValueByRate(t.fire, t.fireRate / 10, e)) : (this.fireHeadTxt.text = Locales.get("DecListPanel_txt_item_prop_3"), this.fireTxt.text = this.sData.attack || this.getValueByRate(t.explosion, t.explosionRate / 10, e)),
                    this.liveTxt.text = this.sData.maxhp || this.getValueByRate(t.hp, t.hpRate / 10, e),
                    this.defendTxt.text = this.sData.firedefence || this.getValueByRate(t.fireDef, t.fireDefRate / 10, e),
                    this.speedTxt.text = this.sData.speed || t.spd,
                    this.exploTxt.text = this.sData.explosiondefence || this.getValueByRate(t.explosionDef, t.explosionDefRate / 10, e),
                    this.target && (this.p1.visible = RedPointManager.getShipUpdate(this.sData) > 0, this.p2.visible = RedPointManager.getShipTrain(this.sData) > 0)
            }
        },
        i.getValueByRate = function(t, e, a) {
            return Math.floor(Number(t) + Number(e * (a - 1))) + ""
        },
        e
}(eui.Component);
egret.registerClass(ShipInfoItem, "ShipInfoItem");
var ShipIntroduceItem = function(t) {
    function e(e, a, i) {
        t.call(this),
            this.sh = 30,
            this.sData = e,
            this.sType = a,
            this.target = i,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/shipIntroduceItemSkin.exml"
            /*tpa=resource/eui_skins/item/shipIntroduceItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["AdvancedbuffData", "skillData", "shipCollectData", "shipData", "captainData", "captainCollection", "medalData", "medalexpData"],
                    function() {
                        ConfigData.preLoadDats(["AdvancedbuffData"], [AdvancedbuffdataParser],
                            function() {
                                t.initUI()
                            },
                            t)
                    }),
                this.target || (this.btn.visible = !1),
                this.vessel.touchEnabled = !1
        },
        i.initUI = function() {
            var t = this;
            if (this.sData) {
                var e, a, i;
                if (this.sType == shipInfoItemType.remould) {
                    e = ConfigData.getDataByKey("shipData", this.sData.shipid),
                        this.titleTxt.text = Locales.get("panel_shipyard_shiptransform_btn_transform");
                    var n = Number(e.remouldLv),
                        s = Number(e.id);
                    6 == e.quality && (n = 6);
                    for (var r = 0; 6 > r; r++) {
                        var o, l = s - n + r,
                            h = ConfigData.getDataByKey("shipData", l);
                        if (o = l < this.sData.shipid && n > 0 ? 65280 : 16777215, 5 == r) {
                            if (e.quality >= 5) {
                                var c = "";
                                if (5 == e.quality) c = AdvancedbuffdataParser.GetInstance().getItemById(h.activateAddId).des_l;
                                else {
                                    var d = ConfigData.getDataByKey("shipData", l);
                                    d.activateAddId && (c = AdvancedbuffdataParser.GetInstance().getItemById(d.activateAddId).des_l)
                                }
                                c && this.createLabel(r, Locales.get("panel_ShipsDetailpanelB_jinjie") + "：" + c, o)
                            }
                        } else h.remouldAddId && this.createLabel(r, Locales.get("DecListPanel_txt_item_btn_transfrom") + "+" + (r + 1) + " : " + BuffData.getBuffNameById(h.remouldAddId) + "+" + ShipManager.getInstance().remouldValue(h.remouldAddId, h.remouldAddValue) + "%", o)
                    }
                    this.vessel.height = 5 * this.sh,
                        this.target && (this.btn.label = Locales.get("panel_jinggong_detil_btn_txt_3"), this.btn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function(e) {
                                WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                                        data: t.sData,
                                        type: OperateType.ship,
                                        index: 2
                                    }),
                                    t.target.destroy()
                            },
                            this), this.p.visible = RedPointManager.getShipRemodule(this.sData) > 0)
                } else if (this.sType == shipInfoItemType.history) {
                    e = ConfigData.getDataByKey("shipData", this.sData.shipid),
                        this.titleTxt.text = Locales.get("panel_jinggong_detil_show_txt_6");
                    var g = Number(e.id.toString().substr(0, 3) + "00");
                    e = ConfigData.getDataByKey("shipData", g),
                        a = this.createLabel(0, ShipdataParser.GetInstance().getItemById(g).desc_l, 16777215, this.vessel.width),
                        this.vessel.height = a.height,
                        this.btn.visible = !1
                } else if (this.sType == shipInfoItemType.detail) {
                    e = ConfigData.getDataByKey("shipData", this.sData.shipid),
                        this.titleTxt.text = Locales.get("panel_atlas_txt_comment_2"),
                        e = ConfigData.getDataByKey("shipCollectData", e.drawingId);
                    var u = 0;
                    this.createLabel(u++, Locales.get("panel_atlas_txt_comment_4_3") + " : " + Locales.get("panel_atlas_txt_comment_4_5", e.norDrainage)),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_4_4") + " : " + Locales.get("panel_atlas_txt_comment_4_5", e.maxDrainage)),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_5_1") + " : " + Locales.get("panel_atlas_txt_comment_5_4", e.length)),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_5_2") + " : " + Locales.get("panel_atlas_txt_comment_5_4", e.width)),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_5_3") + " : " + Locales.get("panel_atlas_txt_comment_5_4", e["draught "])),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_6_1_1") + " : " + Locales.get("panel_atlas_txt_comment_6_1_2", e.power)),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_6_1") + " : " + Locales.get("panel_atlas_txt_comment_6_2", e.speed.substr("|")[1])),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_7_1") + " : " + Locales.get("panel_atlas_txt_comment_7_2", e.durability.substr("|")[1], e.durability.substr("|")[2])),
                        this.createLabel(u++, Locales.get("panel_atlas_txt_comment_8_1") + " : " + Locales.get("panel_atlas_txt_comment_8_2", e.member)),
                        e.plant && this.createLabel(u++, Locales.get("panel_atlas_txt_comment_9_1") + " : " + Locales.get("panel_atlas_txt_comment_9_2", e.plant)),
                        this.vessel.height = u * this.sh,
                        this.btn.visible = !1
                } else if (this.sType == shipInfoItemType.weapon) {
                    e = ConfigData.getDataByKey("shipData", this.sData.shipid),
                        this.titleTxt.text = Locales.get("panel_atlas_txt_comment_3"),
                        e = ConfigData.getDataByKey("shipCollectData", e.drawingId);
                    for (var u = 0,
                            r = 0; 4 > r; r++) e["weapon" + (r + 1) + "_l"] && this.createLabel(u++, e["weapon" + (r + 1) + "_l"]);
                    this.vessel.height = u * this.sh,
                        this.btn.visible = !1
                } else if (this.sType == shipInfoItemType.captainRank) {
                    this.titleTxt.text = Locales.get("Rank"),
                        e = ConfigData.getDataByKey("captainData", this.sData.id);
                    for (var p, m = e.promoteType.split("|"), _ = e.promoteValue.split("|"), r = 1; r < m.length - 1; r++) p = this.sData.promotelevel >= r ? 65280 : 16777215,
                        0 == m[r] ? this.createLabel(r, Locales.get("panel_jianzhang_junxian_" + r) + ":" + BuffData.getAdvanceBuffDesc(e.promoteType2.split("|")[r]), p) : this.createLabel(r, Locales.get("panel_jianzhang_junxian_" + r) + ":" + BuffData.getBuffNameById(m[r]) + "+" + _[r] / 100 + "%", p);
                    this.vessel.height = r * this.sh,
                        this.btn.visible = !1
                } else if (this.sType == shipInfoItemType.captainintro) this.titleTxt.text = Locales.get("panel_jinggong_detil_show_txt_6"),
                    a = this.createLabel(0, CaptaindataParser.GetInstance().getItemById(this.sData.id).introduction_l, 16777215, this.vessel.width),
                    this.vessel.height = a.height,
                    this.btn.visible = !1;
                else if (this.sType == shipInfoItemType.captainResume) e = ConfigData.getDataByKey("captainCollection", this.sData.id),
                    this.createLabel(0, Locales.get("panel_atlas_main_panel_desc_show_text_9") + e.english_name_l),
                    this.createLabel(1, Locales.get("panel_atlas_main_panel_desc_show_text_10") + e.birth_death_l),
                    this.titleTxt.text = Locales.get("panel_jinggong_detil_show_txt_6"),
                    a = this.createLabel(3, CaptaindataParser.GetInstance().getItemById(this.sData.id).introduction_l, 16777215, this.vessel.width),
                    this.vessel.height = 3 * this.sh + a.height,
                    this.btn.visible = !1;
                else if (this.sType == shipInfoItemType.partsInfo) {
                    i = this.sData.upgradelevel || 1,
                        this.titleTxt.text = Locales.get("panel_payShipModel_title"),
                        e = ConfigData.getDataByKey("parts", this.sData.partsid),
                        a = this.createLabel(0, Locales.get("panel_parts_txt_quality_comment") + e.quality, 16711680);
                    var v = new eui.Image(RES.getRes(Path.resHeadUrl + "GUI_Shipbuilding_Icon_star_png"));
                    v.x = a.x + a.width,
                        v.y = a.y - 2,
                        this.vessel.addChild(v),
                        this.createLabel(1, Locales.get("panel_parts_txt_parts_lvl_comment") + i + "/" + 3 * UserData.getInstance()._level, 65280),
                        this.createLabel(2, BuffData.getBuffNameById(e.upgradeType) + ":" + Math.floor(Number(e.basicValue) + Number(e.upgradeValue) * (i - 1))),
                        this.createLabel(3, Locales.get("PartsSystem_txt_equip") + Utils.getGoodAtShip(e.equipfor)[0], 16777215, 450),
                        this.vessel.height = 4 * this.sh,
                        this.target && (this.btn.label = Locales.get("panel_jinggong_detil_btn_txt_4"), this.btn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function(e) {
                                WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                                        data: t.sData,
                                        type: partMetalType.parts,
                                        index: 1
                                    }),
                                    t.target.destroy()
                            },
                            this), this.p.visible = RedPointManager.getPartUpdateBool(this.sData) > 0)
                } else if (this.sType == shipInfoItemType.partsRemould) i = this.sData.remouldlevel || 0,
                    this.titleTxt.text = Locales.get("panel_shipyard_shiptransform_btn_transform"),
                    e = ConfigData.getDataByKey("parts", this.sData.partsid),
                    this.createLabel(0, Locales.get("panel_Shiptransform_txt_lvl") + i, 65280),
                    this.createLabel(1, BuffData.getBuffNameById(e.remouldType) + "+" + e.remouldValue.split("|")[i] / 100 + "%", 16760576),
                    this.vessel.height = 2 * this.sh,
                    this.target && (this.btn.label = Locales.get("panel_jinggong_detil_btn_txt_3"), this.btn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function(e) {
                            WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                                    data: t.sData,
                                    type: partMetalType.parts,
                                    index: 2
                                }),
                                t.target.destroy()
                        },
                        this), this.p.visible = RedPointManager.getPartRemoduleBool(this.sData) > 0);
                else if (this.sType == shipInfoItemType.partsResume) this.titleTxt.text = Locales.get("panel_jinggong_detil_show_txt_6"),
                    e = ConfigData.getDataByKey("parts", this.sData.partsid),
                    a = this.createLabel(0, PartsParser.GetInstance().getItemById(e.id).desc_l, 16777215, this.vessel.width),
                    this.vessel.height = a.height + 20,
                    this.btn.visible = !1;
                else if (this.sType == shipInfoItemType.soulInfo) {
                    if (e = ConfigData.getDataByKey("medalData", this.sData.soulid), 9 == e.medalType) {
                        a = this.createLabel(0, Locales.get("panel_parts_txt_quality_comment") + e.quality, 16711680);
                        var v = new eui.Image(RES.getRes(Path.resHeadUrl + "GUI_Shipbuilding_Icon_star_png"));
                        v.x = a.x + a.width,
                            v.y = a.y - 2,
                            this.vessel.addChild(v),
                            this.createLabel(1, Locales.get("DecListPanel_txt_item_prop_43") + (this.sData.point || e.exp)),
                            this.createLabel(2, Locales.get("PartsSystem_txt_equip") + Utils.getGoodAtShip(e.equipfor)[0], 16777215, 450),
                            this.vessel.height = 3 * this.sh
                    } else {
                        i = this.sData.point ? Utils.getMetalLvByExp(this.sData.point, "exp" + e.exp) : 1,
                            a = this.createLabel(0, Locales.get("panel_parts_txt_quality_comment") + e.quality, 16711680);
                        var v = new eui.Image(RES.getRes(Path.resHeadUrl + "GUI_Shipbuilding_Icon_star_png"));
                        v.x = a.x + a.width,
                            v.y = a.y - 2,
                            this.vessel.addChild(v),
                            this.createLabel(1, Locales.get("panel_parts_txt_parts_lvl_comment") + i + "/25", 65280),
                            this.createLabel(2, BuffData.getBuffNameById(e.buff) + ":" + BuffData.getBuffValue(e, i)),
                            this.createLabel(3, Locales.get("PartsSystem_txt_equip") + Utils.getGoodAtShip(e.equipfor)[0], 16777215, 450),
                            this.vessel.height = 4 * this.sh,
                            this.target && (this.p.visible = RedPointManager.getMedalUpdateBool(this.sData) > 0)
                    }
                    this.titleTxt.text = Locales.get("panel_payShipModel_title"),
                        this.target && (this.btn.label = Locales.get("panel_jinggong_detil_btn_txt_4"), this.btn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function(e) {
                                WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                                        data: t.sData,
                                        type: partMetalType.metals,
                                        index: 1
                                    }),
                                    t.target.destroy()
                            },
                            this))
                } else this.sType == shipInfoItemType.soulRemould ? (i = this.sData.promotelvl || 0, this.titleTxt.text = Locales.get("panel_shipyard_shiptransform_btn_transform"), e = ConfigData.getDataByKey("medalData", this.sData.soulid), this.createLabel(0, Locales.get("panel_Shiptransform_txt_lvl") + i, 65280), this.createLabel(1, BuffData.getBuffNameById(e.remouldType) + "+" + e.remouldValue.split("|")[i] / 100 + "%", 16760576), this.vessel.height = 2 * this.sh, this.target && (this.btn.label = Locales.get("panel_jinggong_detil_btn_txt_3"), this.btn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function(e) {
                        WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                                data: t.sData,
                                type: partMetalType.metals,
                                index: 2
                            }),
                            t.target.destroy()
                    },
                    this), this.p.visible = RedPointManager.getMedalRemoduleBool(this.sData) > 0)) : this.sType == shipInfoItemType.soulResume && (this.titleTxt.text = Locales.get("panel_jinggong_detil_show_txt_6"), a = this.createLabel(0, MedaldataParser.GetInstance().getItemById(this.sData.soulid).desc_collect_l, 16777215, this.vessel.width), this.vessel.height = a.height + 20, this.btn.visible = !1);
                this.bg.height = this.vessel.height + 80,
                    this.btnGroup.y = this.bg.y + this.bg.height - this.btn.height - 3
            } else egret.setTimeout(function() {
                    t.initUI()
                },
                this, 100);
            this.height = this.bg.height + 40,
                WindowShipInfo.instance && WindowShipInfo.instance.reSizeItem()
        },
        i.createLabel = function(t, e, a, i) {
            void 0 === a && (a = 16777215);
            var n = new eui.Label;
            return n.size = 22,
                n.textColor = a,
                n.text = e,
                i && (n.width = i, n.wordWrap = !0),
                n.y = t * this.sh,
                this.vessel.addChild(n),
                n
        },
        e
}(eui.Component);
egret.registerClass(ShipIntroduceItem, "ShipIntroduceItem");
var ShipNameItem = function(t) {
    function e(e) {
        t.call(this),
            this.sData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/shipNameItemSkin.exml"
            /*tpa=resource/eui_skins/item/shipNameItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.nameTxt.text = this.sData.name || "",
                this.changeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.nameHandler, this),
                WindowShipInfo.instance && WindowShipInfo.instance.reSizeItem(),
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clearHandler, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SHIP_UPDATE, this.updateShip, this),
                SUI.addClickEffect(this.changeBtn)
        },
        i.updateShip = function(t) {
            t.parames && (this.nameTxt.text = t.parames.name)
        },
        i.nameHandler = function(t) {
            var e = {};
            e.type = 1,
                e.shipId = this.sData.id,
                e.shipName = this.sData.name,
                e.country = 2,
                e.shipType = 2,
                WindowManager.getInstance().show(WindowManager.windowType.NameChange, e)
        },
        i.clearHandler = function(t) {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.SHIP_UPDATE, this.updateShip, this)
        },
        e
}(eui.Component);
egret.registerClass(ShipNameItem, "ShipNameItem");
var ShipSkillItem = function(t) {
    function e(e, a) {
        t.call(this),
            this.sData = e,
            this.target = a,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/shipSkillItemSkin.exml"
            /*tpa=resource/eui_skins/item/shipSkillItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["shipData", "skillData"],
                    function() {
                        t.initData()
                    }),
                this.target ? (this.updateBtn.visible = !0, this.updateBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function(e) {
                        return UserData.getInstance()._level < 6 ? void Toast.launch(Locales.get("ui_main_function_scientific", 6)) : (WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                            data: t.sData,
                            type: OperateType.ship,
                            index: 3
                        }), void t.target.destroy())
                    },
                    this)) : this.updateBtn.visible = !1,
                WindowShipInfo.instance && WindowShipInfo.instance.reSizeItem(),
                this.p.visible = RedPointManager.getShipSkill(this.sData) > 0
        },
        i.initData = function() {
            var t = ConfigData.getDataByKey("shipData", this.sData.shipid);
            this.sData.skillid ? (this.renderLabel(ConfigData.getDataByKey("skillData", this.sData.skillid), "n"), this.renderLabel(ConfigData.getDataByKey("skillData", this.sData.activeskillid), "j"), this.renderLabel(ConfigData.getDataByKey("skillData", this.sData.circleskillid), "m")) : (this.renderLabel(ConfigData.getDataByKey("skillData", t.normalSkill), "n"), this.renderLabel(ConfigData.getDataByKey("skillData", t.activeSkill), "j"), this.renderLabel(ConfigData.getDataByKey("skillData", t.leaderSkill), "m"))
        },
        i.renderLabel = function(t, e) {
            this[e + "NameTxt"].text = t.name_l,
                this[e + "LvTxt"].text = t.level + "/10",
                this[e + "InfoTxt"].textFlow = Utils.textFlowByStr(t.desc_l)
        },
        e
}(eui.Component);
egret.registerClass(ShipSkillItem, "ShipSkillItem");
var ShipTitleItem = function(t) {
    function e(e) {
        t.call(this),
            this.data = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/battle_bloodSkin.exml"
            /*tpa=resource/eui_skins/item/battle_bloodSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            SUI.setTextureAsync(this.imgShipType, ShipManager.getInstance().getShipTypeIcon(this.data.baseData.shipType));
            var t = QualitySystem.getColorByQuality(this.data.baseData.quality),
                e = "";
            if (this.data.dataType == BattleShipOptData.TYPE_PLAYER) {
                var a = this.data.serverData ? this.data.serverData.name : this.data.baseData.name_l;
                e = 1 == this.data.isCaptain ? Locales.get("ui_main_battleCaptainTile", a) : a
            } else if (this.data.dataType == BattleShipOptData.TYPE_NPC) {
                var i = this.data.baseData.name_l;
                e = 1 == this.data.isCaptain ? Locales.get("ui_main_battleCaptainTile", i) : i
            }
            this.txtName.text = e,
                this.txtName.textColor = t,
                this.progressTo = 0,
                this.updateHP(this.data.serverData.hp, this.data.serverData.maxhp)
        },
        i.setNameVisible = function(t) {
            this.txtName.visible = t
        },
        i.ChangeShipName = function(t) {
            if (this.data.dataType == BattleShipOptData.TYPE_PLAYER)
                if (this.data.serverData && 1 == t)
                    if ("" == this.data.serverData.name) 1 == this.data.isCaptain ? this.txtName.text = Locales.get("ui_main_battleCaptainTile", Locales.get("shipOptData_name")) : this.txtName.text = Locales.get("shipOptData_name");
                    else {
                        var e = QualitySystem.getColorByQuality(this.data.baseData.quality),
                            a = "";
                        a = 1 == this.data.isCaptain ? Locales.get("ui_main_battleCaptainTile", this.data.serverData.name) : this.data.serverData.name,
                            this.txtName.text = a,
                            this.txtName.textColor = e
                    }
            else {
                var e = QualitySystem.getColorByQuality(this.data.baseData.quality),
                    a = "";
                a = 1 == this.data.isCaptain ? Locales.get("ui_main_battleCaptainTile", ShipManager.getInstance().getShipNameByType(this.data.baseData.id)) : ShipManager.getInstance().getShipNameByType(this.data.baseData.id),
                    this.txtName.text = a,
                    this.txtName.textColor = e
            }
        },
        i.updateHP = function(t, e) {
            if (0 != e) {
                Log.logZDY("updateHp", this.txtName.text, t, e);
                var a = t / e,
                    i = Math.floor(100 * a);
                this.barHp.value = this.progressTo;
                var n = egret.Tween.get(this.barHp);
                n.to({
                            value: i
                        },
                        .5 * BattleManager.PLAYFRAMES * 1e3),
                    this.progressTo = i
            } else Log.logZDY("##########Error.ViewUnitTitle MaxHP is 0, id." + this.data.serverData.id)
        },
        e
}(eui.Component);
egret.registerClass(ShipTitleItem, "ShipTitleItem");
var SideItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/SideItemSkin.exml"
            /*tpa=resource/eui_skins/item/SideItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.anchorOffsetX = this.width / 2,
                this.anchorOffsetY = this.height / 2
        },
        i.setSideInfo = function(t, e, a) {
            this.sideRec.visible = t,
                this.sideIcon.source = e,
                this.sideName.text = a
        },
        i.setSideImage = function(t) {
            this.sideIcon.source = t
        },
        i.setBigSideImage = function(t) {
            this.bigSideIcon.source = t
        },
        i.setSideRec = function(t) {
            this.sideRec.visible = t
        },
        e
}(eui.Component);
egret.registerClass(SideItem, "SideItem");
var UpdatePropertyItem = function(t) {
    function e(e, a) {
        t.call(this),
            this.iType = e,
            this.iData = a,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/updatePropertyItemSkin.exml"
            /*tpa=resource/eui_skins/item/updatePropertyItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setTypeData = function(t, e) {
            this.iType = t,
                this.iData = e,
                this.init()
        },
        i.init = function() {
            var t, e = this;
            if (this.x = 9, this.up1Txt.text = "", this.up2Txt.text = "", this.junHeadTxt.text = this.junTxt.text = "", this.lvHeadTxt.text = "等    级：", this.iType == OperateItemType.captainUpdate || this.iType == OperateItemType.captainRemoudle) {
                t = ConfigData.getDataByKey("captainData", this.iData.id),
                    this.iType == OperateItemType.captainRemoudle && (this.lvHeadTxt.text = Locales.get("panel_Military_desc_1"));
                var a = this.iData.upgradelevel || 1,
                    i = this.iData.promotelevel || 1;
                if (this.lvTxt.text = this.iType == OperateItemType.captainUpdate ? a.toString() : Locales.get("panel_jianzhang_junxian_" + i), this.fireTxt.text = this.getValueByAdd(t.basicFireAttack, t.upgradeAddFireAttack, a, i).toString(), this.defTxt.text = this.getValueByAdd(t.basicFireDefen, t.upgradeAddFireDefen, a, i).toString(), this.baTxt.text = this.getValueByAdd(t.basicExplosionAttack, t.upgradeAddExplosionAttack, a, i).toString(), this.bdTxt.text = this.getValueByAdd(t.basicExpDefen, t.upgradeAddExpDefen, a, i).toString(), this.hpTxt.text = this.getValueByAdd(t.basicHp, t.upgradeAddHp, a, i).toString(), a += this.iType == OperateItemType.captainUpdate ? 1 : 0, i += this.iType == OperateItemType.captainRemoudle ? 1 : 0, this.lvUpTxt.text = this.iType == OperateItemType.captainUpdate ? a.toString() : Locales.get("panel_jianzhang_junxian_" + i), this.fireUpTxt.text = this.getValueByAdd(t.basicFireAttack, t.upgradeAddFireAttack, a, i).toString(), this.defUpTxt.text = this.getValueByAdd(t.basicFireDefen, t.upgradeAddFireDefen, a, i).toString(), this.baUpTxt.text = this.getValueByAdd(t.basicExplosionAttack, t.upgradeAddExplosionAttack, a, i).toString(), this.bdUpTxt.text = this.getValueByAdd(t.basicExpDefen, t.upgradeAddExpDefen, a, i).toString(), this.hpUpTxt.text = this.getValueByAdd(t.basicHp, t.upgradeAddHp, a, i).toString(), this.iType == OperateItemType.captainUpdate) {
                    this.junHeadTxt.text = this.junTxt.text = "";
                    var n = Utils.getGoodAtShip(t.goodat)[0];
                    this.up1Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro1", t.activeLvLimit1, Locales.get("panel_jianzhang_shuxing1_guojia_" + t.country), BuffData.getBuffNameById(t.activeType1), Number(t.activeValue1 / 100) + "%")),
                        this.up2Txt.textFlow = Utils.textFlowByStr(Locales.get("activePro2", t.activeLvLimit2, n, BuffData.getBuffNameById(t.activeType2), Number(t.activeValue2 / 100) + "%")),
                        a > UserData.getInstance()._level && (this.baUpTxt.text = this.lvUpTxt.text = this.hpUpTxt.text = this.bdUpTxt.text = this.defUpTxt.text = this.fireUpTxt.text = Locales.get("panel_jianzhang_upgrade_wind_3"))
                } else {
                    var s = t.promoteType.split("|"),
                        r = t.promoteValue.split("|");
                    this.junHeadTxt.text = Locales.get("panel_jianzhang_jinsheng_comment_1"),
                        i = this.iData.promotelevel || 1,
                        0 == s[i] ? this.junTxt.text = BuffData.getAdvanceBuffDesc(t.promoteType2.split("|")[i]) : this.junTxt.text = BuffData.getBuffNameById(s[i]) + "+" + r[i] / 100 + "%"
                }
            } else if (this.iType == OperateItemType.shipUpdate) {
                t = ConfigData.getDataByKey("shipData", this.iData.shipid);
                var a = this.iData.level;
                this.lvTxt.text = a.toString(),
                    1 == t.atkType ? (this.fireHeadTxt.text = Locales.get("DecListPanel_txt_item_prop_1"), this.fireTxt.text = this.getValueByRate(t.fire, t.fireRate / 10, a), this.fireUpTxt.text = this.getValueByRate(t.fire, t.fireRate / 10, a + 1)) : (this.fireHeadTxt.text = Locales.get("DecListPanel_txt_item_prop_3"), this.fireTxt.text = this.getValueByRate(t.explosion, t.explosionRate / 10, a), this.fireUpTxt.text = this.getValueByRate(t.explosion, t.explosionRate / 10, a + 1)),
                    this.hpTxt.text = this.getValueByRate(t.hp, t.hpRate / 10, a),
                    this.defTxt.text = this.getValueByRate(t.fireDef, t.fireDefRate / 10, a),
                    this.bdTxt.text = this.getValueByRate(t.explosionDef, t.explosionDefRate / 10, a),
                    this.baTxt.text = "",
                    this.baHeadTxt.text = "",
                    a += 1,
                    a = 201 == a ? 200 : a,
                    this.lvUpTxt.text = a.toString(),
                    this.hpUpTxt.text = this.getValueByRate(t.hp, t.hpRate / 10, a),
                    this.defUpTxt.text = this.getValueByRate(t.fireDef, t.fireDefRate / 10, a),
                    this.bdUpTxt.text = this.getValueByRate(t.explosionDef, t.explosionDefRate / 10, a),
                    this.baUpTxt.text = "",
                    this.speedArrow.visible = !1,
                    this.bg0.height = 250,
                    (a > UserData.getInstance()._level || 200 == a) && (this.lvUpTxt.text = this.hpUpTxt.text = this.bdUpTxt.text = this.defUpTxt.text = this.fireUpTxt.text = Locales.get("panel_jianzhang_upgrade_wind_3"), this.baHeadTxt.text = this.baTxt.text = "")
            } else if (this.iType == OperateItemType.shipRemoudle) {
                t = ConfigData.getDataByKey("shipData", this.iData.shipid);
                var a = this.iData.level || 1,
                    o = this.iData.shipid % 100,
                    l = !1;
                6 == t.quality ? l = !0 : t.quality < 5 && (l = o > 4);
                var h = ConfigData.getDataByKey("shipData", Number(this.iData.shipid) + 1);
                h && t.quality < h.quality ? (this.lvHeadTxt.text = Locales.get("panel_jinggong_sj_show_txt_2"), this.lvTxt.text = t.quality, this.lvUpTxt.text = h.quality, this.baHeadTxt.text = Locales.get("panel_ShipsDetailpanelB_jinjie") + "：", this.baTxt.textFlow = [], this.baTxt.text = "", this.baTxt.textColor = 16744499, t.activateAddId && ConfigData.preLoadDats(["AdvancedbuffData"], [AdvancedbuffdataParser],
                        function() {
                            var a = AdvancedbuffdataParser.GetInstance().getItemById(t.activateAddId);
                            a && (e.baTxt.text = a.des_l)
                        },
                        this)) : (this.lvHeadTxt.text = Locales.get("panel_parts_transform_txt_comment_1"), this.baHeadTxt.text = Locales.get("panel_ShipsDetailpanelB_gaizao") + "：", this.baTxt.textFlow = Utils.textFlowByStr(BuffData.getBuffNameById(t.remouldAddId) + "+" + ShipManager.getInstance().remouldValue(t.remouldAddId, t.remouldAddValue) + "%", 16744499), this.lvTxt.text = o.toString(), this.lvUpTxt.text = (o + 1).toString()),
                    this.hpTxt.text = this.getValueByRate(t.hp, t.hpRate / 10, a),
                    1 == t.atkType ? (this.fireHeadTxt.text = Locales.get("DecListPanel_txt_item_prop_1"), this.fireTxt.text = this.getValueByRate(t.fire, t.fireRate / 10, a), h && (this.fireUpTxt.text = this.getValueByRate(h.fire, h.fireRate / 10, a))) : (this.fireHeadTxt.text = Locales.get("DecListPanel_txt_item_prop_3"), this.fireTxt.text = this.getValueByRate(t.explosion, t.explosionRate / 10, a), h && (this.fireUpTxt.text = this.getValueByRate(h.explosion, h.explosionRate / 10, a))),
                    this.defTxt.text = this.getValueByRate(t.fireDef, t.fireDefRate / 10, a),
                    this.bdTxt.text = this.getValueByRate(t.explosionDef, t.explosionDefRate / 10, a),
                    h && (this.hpUpTxt.text = this.getValueByRate(h.hp, h.hpRate / 10, a), this.defUpTxt.text = this.getValueByRate(h.fireDef, h.fireDefRate / 10, a), this.bdUpTxt.text = this.getValueByRate(h.explosionDef, h.explosionDefRate / 10, a)),
                    this.baUpTxt.text = "",
                    this.speedArrow.visible = !1,
                    l && (this.lvUpTxt.text = this.hpUpTxt.text = this.bdUpTxt.text = this.defUpTxt.text = this.fireUpTxt.text = Locales.get("panel_jianzhang_upgrade_wind_3"), this.baHeadTxt.text = Locales.get("panel_ShipsDetailpanelB_gaizao") + "：", this.baTxt.text = Locales.get("panel_guard_biwu_comment_38"))
            }
        },
        i.getValueByRate = function(t, e, a) {
            return Math.floor(Number(t) + Number(e * (a - 1))) + ""
        },
        i.getValueByAdd = function(t, e, a, i) {
            return Number(t.split("|")[i]) + Number(e.split("|")[i]) * (a - 1)
        },
        e
}(eui.Component);
egret.registerClass(UpdatePropertyItem, "UpdatePropertyItem");
var ActivityItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onClear, this),
            this.skinName = "resource/eui_skins/item/HuoDong_Bar_Skin.exml"
            /*tpa=resource/eui_skins/item/HuoDong_Bar_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onClear = function() {
            EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.dataChanged, this),
                EventManager.instance.removeEventListener(EventTypes.RED_BALL_UPDATE, this.dataChanged, this)
        },
        i.onComplete = function() {
            this.touchEnabled = !0,
                this.touchChildren = !1,
                SUI.setTextureAsync(this.imgBg, Path.uiUrl + "Activity/Bar_huodong.jpg"),
                SUI.setTextureAsync(this.imgStateBg, Path.uiUrl + "Activity/Bg_huodong_hot.png"),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.dataChanged, this),
                EventManager.instance.addEventListener(EventTypes.RED_BALL_UPDATE, this.dataChanged, this)
        },
        i.dataChanged = function() {
            if (ActivityManager.instance.setImageByType(this.imgName, this.data.type), null != this.data.state && 0 != this.data.state ? (this.txtState.text = Locales.get("zz_activityState" + this.data.state), this.txtState.visible = !0) : this.HotFlag.visible = !1, this.txtDesc.text = Locales.get("zz_activityDesc1"), SUI.setTextureAsync(this.imgLeft, Path.GetActivityDescIcon(this.data.desc)), SUI.setTextureAsync(this.imgRight, Path.GetActivityIcon(this.data.icon)), this.data.type == ActivityType.ACTIVITY_TYPE_OIL) this.txtTime.text = Locales.get("zz_forever");
            else {
                var t = Utils.getDateByNum(1e3 * this.data.start_time.time, timeType.FORMATDATE),
                    e = Utils.getDateByNum(1e3 * this.data.end_time.time, timeType.FORMATDATE);
                this.data.end_time.time - this.data.start_time.time > 5184e3 ? this.txtTime.text = Locales.get("zz_forever") : this.txtTime.text = Locales.get("zz_activitytime1", t, e)
            }
            this.imgBall.visible = ActivityManager.instance.checkIsShowRedBall(this.data.type)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(ActivityItemRenderer, "ActivityItemRenderer");
var RechargeRewardItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onClear, this),
            this.skinName = "resource/eui_skins/item/HuoDong_Bar_1_Skin.exml"
            /*tpa=resource/eui_skins/item/HuoDong_Bar_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onClear = function() {},
        i.onComplete = function() {
            this.btnTake.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnTake, this),
                this.btnBlue.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnTake, this),
                SUI.setTextureAsync(this.imgBg, Path.uiUrl + "Activity/Bar_huodong_2.jpg"),
                this.imgReach.visible = !1,
                this.txtReach.visible = !1
        },
        i.OnClickBtnTake = function(t) {
            var e = ActivityManager.instance.curActivityType;
            this._canGet ? (RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                id: e,
                type: this.data.key
            }), e == ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE && WindowManager.getInstance().hide(WindowManager.windowType.listActivity)) : e == ActivityType.ACTIVITY_TYPE_LEVEL ? Toast.launch(Locales.get("panel_worldbattle_wind_6")) : WindowManager.getInstance().show(WindowManager.windowType.Recharge)
        },
        i.dataChanged = function() {
            for (var t = function(t) {
                        var a = e["reward" + t],
                            i = e.data.items[t - 1];
                        if (i) {
                            var n = GiftdataParser.GetInstance().getItemById(i.id),
                                s = GlobalFunction.getDropDataByTypeAndId(n.type, n.item, n.count);
                            SUI.setItemIcon(a, s),
                                1 == i.effect ? (a.hasEffect = !0, a.effect ? a.effect.visible = !0 : SUI.loadMovieClip(Path.activityEffectUrl + "activity_goods.json", Path.activityEffectUrl + "activity_goods.png", a,
                                    function(t) {
                                        t.x = a.imgBg.x + .5 * a.imgBg.width,
                                            t.y = a.imgBg.y + .5 * a.imgBg.height,
                                            a.effect = t,
                                            a.hasEffect || (t.visible = !1)
                                    },
                                    e)) : (a.hasEffect = !1, a.effect && (a.effect.visible = !1)),
                                a.visible = !0
                        } else a.visible = !1
                    },
                    e = this, a = 1; 4 >= a; ++a) t(a);
            var i = ActivityManager.instance.curActivityType;
            if (i == ActivityType.ACTIVITY_TYPE_RECHARGE_REWARD) {
                this.txtDesc.text = Locales.get("zz_recharge", this.data.params[0]);
                var n = 0;
                if (ActivityManager.instance.activityData.rechargecount_func && (n = ActivityManager.instance.activityData.rechargecount_func), this.data.params[0] <= n) {
                    for (var s = !1,
                            r = 0,
                            o = ActivityManager.instance.activityData.rechargelist_func; r < o.length; r++) {
                        var l = o[r];
                        if (l == this.data.key) {
                            s = !0;
                            break
                        }
                    }
                    s ? (this.btnTake.labelDisplay.text = "已领取", this.btnTake.labelDisplay.textColor = 8947848, this.btnTake.enabled = !1, this.btnBlue.visible = !1, this.btnTake.visible = !0, this._canGet = !1) : (this.btnTake.labelDisplay.text = "领取", this.btnTake.labelDisplay.textColor = 16777215, this.btnBlue.visible = !1, this.btnTake.enabled = !0, this.btnTake.visible = !0, this._canGet = !0)
                } else this.btnBlue.labelDisplay.text = "前往充值",
                    this.btnBlue.visible = !0,
                    this._canGet = !1,
                    this.btnTake.visible = !1
            } else if (i == ActivityType.ACTIVITY_TYPE_COST_REWARD) {
                this.txtDesc.text = Locales.get("zz_cost", this.data.params[0]);
                var h = 0;
                if (ActivityManager.instance.activityData.costcount && (h = ActivityManager.instance.activityData.costcount), this.data.params[0] <= h) {
                    for (var s = !1,
                            c = 0,
                            d = ActivityManager.instance.activityData.costlist; c < d.length; c++) {
                        var l = d[c];
                        if (l == this.data.key) {
                            s = !0;
                            break
                        }
                    }
                    s ? (this.btnTake.labelDisplay.text = "已领取", this.btnTake.labelDisplay.textColor = 8947848, this.btnTake.enabled = !1, this.btnBlue.visible = !1, this.btnTake.visible = !0, this._canGet = !1) : (this.btnTake.labelDisplay.text = "领取", this.btnTake.labelDisplay.textColor = 16777215, this.btnBlue.visible = !1, this.btnTake.enabled = !0, this.btnTake.visible = !0, this._canGet = !0)
                } else this.btnTake.labelDisplay.text = "领取",
                    this.btnTake.labelDisplay.textColor = 8947848,
                    this.btnBlue.visible = !1,
                    this.btnTake.enabled = !1,
                    this.btnTake.visible = !0,
                    this._canGet = !1
            } else if (i == ActivityType.ACTIVITY_TYPE_SINGLE_RECHARGE) {
                this.txtDesc.text = Locales.get("zz_singleRecharge", this.data.params[0]);
                var g = 0;
                if (ActivityManager.instance.activityData.singlecharge && (g = ActivityManager.instance.activityData.singlecharge), this.data.params[0] <= g) {
                    for (var s = !1,
                            u = 0,
                            p = ActivityManager.instance.activityData.single_gift_list; u < p.length; u++) {
                        var l = p[u];
                        if (l == this.data.key) {
                            s = !0;
                            break
                        }
                    }
                    s ? (this.btnTake.labelDisplay.text = "已领取", this.btnTake.labelDisplay.textColor = 8947848, this.btnBlue.visible = !1, this.btnTake.enabled = !1, this.btnTake.visible = !0, this._canGet = !1) : (this.btnTake.labelDisplay.text = "领取", this.btnTake.labelDisplay.textColor = 16777215, this.btnBlue.visible = !1, this.btnTake.enabled = !0, this.btnTake.visible = !0, this._canGet = !0)
                } else this.btnBlue.labelDisplay.text = "前往充值",
                    this.btnBlue.visible = !0,
                    this._canGet = !1,
                    this.btnTake.visible = !1
            } else if (i == ActivityType.ACTIVITY_TYPE_LEVEL) {
                this.txtDesc.text = Locales.get("zz_bld_lv", this.data.params[0]);
                var m = UserData.getInstance()._level;
                if (this.data.params[0] <= m) {
                    for (var s = !1,
                            _ = 0,
                            v = ActivityManager.instance.activityData.level_gifts; _ < v.length; _++) {
                        var l = v[_];
                        if (l == this.data.key) {
                            s = !0;
                            break
                        }
                    }
                    s ? (this.btnTake.labelDisplay.text = "已领取", this.btnTake.labelDisplay.textColor = 8947848, this.btnTake.enabled = !1, this.btnBlue.visible = !1, this.btnTake.visible = !0, this._canGet = !1) : (this.btnTake.labelDisplay.text = "领取", this.btnTake.labelDisplay.textColor = 16777215, this.btnBlue.visible = !1, this.btnTake.enabled = !0, this.btnTake.visible = !0, this._canGet = !0)
                } else this.btnTake.labelDisplay.text = "未达成",
                    this.btnTake.labelDisplay.textColor = 8947848,
                    this.btnBlue.visible = !1,
                    this.btnTake.enabled = !1,
                    this.btnTake.visible = !0,
                    this._canGet = !1
            } else if (i == ActivityType.ACTIVITY_TYPE_DAILY_SINGLE_RECHARGE) {
                this.txtDesc.text = Locales.get("zz_singleRecharge", this.data.params[0]);
                var g = 0;
                if (ActivityManager.instance.activityData.daily_singlerecharge_count && (g = ActivityManager.instance.activityData.daily_singlerecharge_count), this.data.params[0] <= g) {
                    for (var s = !1,
                            f = 0,
                            I = ActivityManager.instance.activityData.daily_singlerecharge_taked; f < I.length; f++) {
                        var l = I[f];
                        if (l == this.data.key) {
                            s = !0;
                            break
                        }
                    }
                    s ? (this.btnTake.labelDisplay.text = "已领取", this.btnTake.labelDisplay.textColor = 8947848, this.btnBlue.visible = !1, this.btnTake.enabled = !1, this.btnTake.visible = !0, this._canGet = !1) : (this.btnTake.labelDisplay.text = "领取", this.btnTake.labelDisplay.textColor = 16777215, this.btnBlue.visible = !1, this.btnTake.enabled = !0, this.btnTake.visible = !0, this._canGet = !0)
                } else this.btnBlue.labelDisplay.text = "前往充值",
                    this.btnBlue.visible = !0,
                    this._canGet = !1,
                    this.btnTake.visible = !1
            } else if (i == ActivityType.ACTIVITY_TYPE_DAILY_ACC_RECHARGE) {
                this.txtDesc.text = Locales.get("zz_recharge", this.data.params[0]);
                var n = 0;
                if (ActivityManager.instance.activityData.daily_accrecharge_count && (n = ActivityManager.instance.activityData.daily_accrecharge_count), this.data.params[0] <= n) {
                    for (var s = !1,
                            T = 0,
                            y = ActivityManager.instance.activityData.daily_accrecharge_taked; T < y.length; T++) {
                        var l = y[T];
                        if (l == this.data.key) {
                            s = !0;
                            break
                        }
                    }
                    s ? (this.btnTake.labelDisplay.text = "已领取", this.btnTake.labelDisplay.textColor = 8947848, this.btnTake.enabled = !1, this.btnBlue.visible = !1, this.btnTake.visible = !0, this._canGet = !1) : (this.btnTake.labelDisplay.text = "领取", this.btnTake.labelDisplay.textColor = 16777215, this.btnBlue.visible = !1, this.btnTake.enabled = !0, this.btnTake.visible = !0, this._canGet = !0)
                } else this.btnBlue.labelDisplay.text = "前往充值",
                    this.btnBlue.visible = !0,
                    this._canGet = !1,
                    this.btnTake.visible = !1
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(RechargeRewardItemRenderer, "RechargeRewardItemRenderer");
var BattleSweepItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/zhanyi_Bar4Skin.exml"
            /*tpa=resource/eui_skins/item/zhanyi_Bar4Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.txtDesc.text = Locales.get("zz_nodrops")
        },
        i.dataChanged = function() {
            if (this.txtResNum1.text = this.data.pkg.gold.toString(), this.txtResNum2.text = this.data.pkg.exp.toString(), this.data.pkg.droplist.droplist.length > 0) {
                for (var t = 0; 3 > t; ++t) {
                    var e = this["reward" + (t + 1)],
                        a = this.data.pkg.droplist.droplist[t];
                    if (a) {
                        e.visible = !0;
                        var i = GlobalFunction.getItemByData(a);
                        SUI.setItemIcon(e, i)
                    } else e.visible = !1
                }
                this.txtDesc.visible = !1,
                    this.gpItems.visible = !0
            } else this.txtDesc.visible = !0,
                this.gpItems.visible = !1;
            this.txtTimes.text = Locales.get("panel_sweep_result_title", this.data.index)
        },
        i.clear = function() {},
        e
}(eui.ItemRenderer);
egret.registerClass(BattleSweepItemRenderer, "BattleSweepItemRenderer");
var CampBattleItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/ZB_ZhenYingZhanReportItemSkin.exml"
            /*tpa=resource/eui_skins/item/ZB_ZhenYingZhanReportItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {},
        i.dataChanged = function() {
            this.txtContent.textFlow = Utils.textFlowByStr(this.data.content)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(CampBattleItemRenderer, "CampBattleItemRenderer");
var CampExchangeItemRender = function(t) {
    function e() {
        t.call(this),
            this.limitCount = 0,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/ZB_JingJiChang_3_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_JingJiChang_3_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.txtNumDesc.text = Locales.get("panel_luckgirl_txt_comment_1"),
                this.btnBuy.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnBuy, this),
                EventManager.instance.addEventListener(EventTypes.ARENA_EXCHANGE, this.dataChanged, this)
        },
        i.OnClickBtnBuy = function() {
            var t = this;
            if (AudioManager.instance.playSound(AudioManager.SOUND_BTN), this.data.reqLevel > UserData.getInstance().getPlayerLevel()) return void Toast.launch(Locales.get("panel_shop_txt_windword_2"), 16711680);
            if (CampBattleManager.instance.campbattlescore < Number(this.data.saleValue)) return void Toast.launch(Locales.get("ui_campBattle_BuyError"), 16711680);
            if (-2 == this.data.countLimit || 1 == this.data.countLimit) RequestManager.GetInstance().ShopItemBuyById(this.data.id, 1),
                Plantform.getInstanceOf().buy(this.data.saleValue, 1, this.data.id);
            else {
                var e = 0;
                e = 0 == this.data.countLimit ? -1 : this.data.count;
                var a = {
                    money: this.data.saleValue,
                    id: this.data.id,
                    timeslimit: e
                };
                a.totalMoney = CampBattleManager.instance.campbattlescore,
                    a.getLimitCountFunc = function() {
                        return t.limitCount
                    },
                    a.onConfirm = function(e, a) {
                        RequestManager.GetInstance().ShopItemBuyById(e, a),
                            Plantform.getInstanceOf().buy(t.data.saleValue, a, e)
                    },
                    WindowManager.getInstance().show(WindowManager.windowType.PVPExchangeConfirm, a)
            }
        },
        i.dataChanged = function() {
            var t = null,
                e = null,
                a = null,
                i = null,
                n = this.data;
            if (1 == n.enable && (t = CampShopOptData.instance.OnceItemById(n.id), e = CampShopOptData.instance.DayItemById(n.id), a = CampShopOptData.instance.WeekItemById(n.id), !t)) {
                i = ItemsManager.getInstance().getItemById(n.itemId),
                    i = i ? GlobalFunction.getItemByData({
                        id: n.itemId,
                        type: TypeDefine.Const.DROP_TYPE_ITEM,
                        count: i.count
                    }) : GlobalFunction.getItemByData({
                        id: n.itemId,
                        type: n.itemType
                    });
                QualitySystem.getColorByQuality(i.quality);
                SUI.setItemIcon(this.itemCompent, i),
                    this.txtName.text = i.name,
                    this.txtNum.text = i.realCount ? i.realCount.toString() : "0",
                    this.txtDesc.text = i.desc ? i.desc : "";
                UserData.getInstance().getPlayerLevel(); - 1 != n.reqLevel ? (this.canNotBuy.visible = !0, this.canBuy.visible = !1, this.txtBuyCondition.text = Locales.get("ui_campBattle_charge_reqLevel", n.reqLevel), this.limitCount = 0) : (this.canNotBuy.visible = !1, this.canBuy.visible = !0, n.saleValue > 0 ? this.btnBuy.labelDisplay.text = n.saleValue + "声望" : this.btnBuy.labelDisplay.text = Locales.get("panel_arena_charge"), this.btnBuy.enabled = !0, n.countLimit > 0 ? (this.txtBuyLimit.visible = !0, e ? (this.txtBuyLimit.text = Locales.get("panel_shoptrade_txt_title_litm_count", n.countLimit - e.count), n.countLimit - e.count <= 0 ? (this.txtBuyLimit.text = Locales.get("panel_guild_saleOut"), this.btnBuy.enabled = !1, this.limitCount = 0) : this.limitCount = n.countLimit - e.count) : (this.txtBuyLimit.text = Locales.get("panel_shoptrade_txt_title_litm_count", n.countLimit), this.limitCount = n.countLimit)) : n.countLimitWeek > 0 ? (this.txtBuyLimit.visible = !0, a ? (this.txtBuyLimit.text = Locales.get("panel_guard_biwu_comment_80", n.countLimitWeek - a.count), n.countLimitWeek - a.count <= 0 ? (this.txtBuyLimit.text = Locales.get("panel_guild_saleOut"), this.btnBuy.enabled = !1, this.limitCount = 0) : this.limitCount = n.countLimitWeek - a.count) : (this.txtBuyLimit.text = Locales.get("panel_guard_biwu_comment_80", n.countLimitWeek), this.limitCount = n.countLimit)) : (this.txtBuyLimit.visible = !1, this.limitCount = 9999))
            }
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ARENA_EXCHANGE, this.dataChanged, this)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(CampExchangeItemRender, "CampExchangeItemRender");
var WarshipInfoItemRender = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/itemrenders/jianchuanItemSkin.exml"
            /*tpa=resource/eui_skins/itemrenders/jianchuanItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.frameArr = [],
                this.frameArr.push(this.imgIcon1),
                this.frameArr.push(this.imgIcon2),
                this.frameArr.push(this.imgIcon3),
                this.nameArr = [],
                this.nameArr.push(this.txtType1),
                this.nameArr.push(this.txtType2),
                this.nameArr.push(this.txtType3),
                this.buffArr = [],
                this.buffArr.push(this.txtBuff1),
                this.buffArr.push(this.txtBuff2),
                this.buffArr.push(this.txtBuff3);
            for (var t in this.frameArr) {
                var e = this.frameArr[t];
                e.myIndex = t,
                    e.touchEnabled = !0,
                    e.touchChildren = !1,
                    e.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickFrame, this)
            }
            this.dataChanged()
        },
        i.OnClickFrame = function(t) {
            var e = t.currentTarget,
                a = e.myIndex,
                i = this.data[a],
                n = i.userData;
            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: {
                    id: n.id,
                    shipid: n.shipId
                },
                type: shipInfoWindowType.handbook
            })
        },
        e.getBuffDescForShipByData = function(t) {
            var e = 1;
            return 2 == t.buffType || 4 == t.buffType || 6 == t.buffType || 8 == t.buffType || 10 == t.buffType || 22 == t.buffType ? e = 100 : (17 == t.buffType || 19 == t.buffType) && (e = 10),
                Locales.get("panel_atlas_main_panel_buff_txt_" + t.buffType, (t.buffValue / e).toString())
        },
        i.dataChanged = function() {
            if (!(this.frameArr.length < 3 || null == this.data))
                for (var t = this.data,
                        a = 0; 3 > a; ++a) {
                    var i = this.frameArr[a],
                        n = this.nameArr[a],
                        s = this.buffArr[a];
                    if (t.length > a) {
                        var r = t[a],
                            o = i.imgIcon,
                            l = ShipdataParser.GetInstance().getItemById(r.userData.shipId),
                            h = l.modelId,
                            c = ShipmodeldataParser.GetInstance().getItemById(h);
                        n.text = l.name_l,
                            n.textColor = QualitySystem.getColorByQuality(r.userData.quality);
                        var d = Path.shipURL + "y_" + c.url;
                        SUI.setTextureAsync(o, d),
                            o = i.imgType,
                            d = Path.shipTypeIconURL + "shipType" + r.userData.shipType + ".png",
                            SUI.setTextureAsync(o, d),
                            d = QualitySystem.getShipHandbookSmallback(r.userData.quality),
                            o = i.imgBg,
                            SUI.setTextureAsync(o, d),
                            s.text = e.getBuffDescForShipByData(r.userData),
                            s.textColor = QualitySystem.getColorByQuality(r.userData.quality),
                            o = i.imgMask,
                            o.visible = !r.have,
                            i.visible = !0,
                            n.visible = !0,
                            s.visible = !0
                    } else i.visible = !1,
                        n.visible = !1,
                        s.visible = !1
                }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(WarshipInfoItemRender, "WarshipInfoItemRender");
var MedalInfoItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/itemrenders/xunzhangItemSkin.exml"
            /*tpa=resource/eui_skins/itemrenders/xunzhangItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.frameArr = [],
                this.frameArr.push(this.frame1),
                this.frameArr.push(this.frame2),
                this.frameArr.push(this.frame3),
                this.nameArr = [],
                this.nameArr.push(this.txtName1),
                this.nameArr.push(this.txtName2),
                this.nameArr.push(this.txtName3),
                this.buffArr = [],
                this.buffArr.push(this.txtBuff1),
                this.buffArr.push(this.txtBuff2),
                this.buffArr.push(this.txtBuff3);
            for (var t in this.frameArr) {
                var e = this.frameArr[t];
                e.myIndex = t,
                    e.touchEnabled = !0,
                    e.touchChildren = !1,
                    e.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickFrame, this)
            }
            this.dataChanged()
        },
        i.OnClickFrame = function(t) {
            var e = t.currentTarget,
                a = e.myIndex,
                i = this.data[a],
                n = i.userData;
            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: {
                    soulid: n.id
                },
                type: shipInfoWindowType.soulPreview
            })
        },
        i.dataChanged = function() {
            if (!(this.frameArr.length < 3 || null == this.data))
                for (var t = this.data,
                        e = 0; 3 > e; ++e) {
                    var a = this.frameArr[e],
                        i = this.nameArr[e],
                        n = this.buffArr[e];
                    if (t.length > e) {
                        var s = t[e],
                            r = QualitySystem.getColorByQuality(s.userData.quality),
                            o = MedaldataParser.GetInstance().getItemById(s.userData.id);
                        i.text = o.name_l,
                            i.textColor = r;
                        var l = a.imgMedal,
                            h = "resource/assets/Icon/medal/" + s.userData.icon;
                        SUI.setTextureAsync(l, h),
                            l = a.imgBg,
                            h = QualitySystem.getShipSmallBack(s.userData.quality),
                            SUI.setTextureAsync(l, h),
                            n.text = Locales.get("panel_atlas_main_panel_buff_txt_" + s.userData.collectbuff, s.userData.collectbuffvalue),
                            n.textColor = r,
                            l = a.imgMask,
                            l.visible = !s.have,
                            a.visible = !0,
                            i.visible = !0,
                            n.visible = !0
                    } else a.visible = !1,
                        i.visible = !1,
                        n.visible = !1
                }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(MedalInfoItemRenderer, "MedalInfoItemRenderer");
var CaptainInfoItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/itemrenders/jianzhangItemSkin.exml"
            /*tpa=resource/eui_skins/itemrenders/jianzhangItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getBuffDescForCaptainByData = function(t) {
            var e = 1;
            return 2 == t.collectbuff || 4 == t.collectbuff || 6 == t.collectbuff || 8 == t.collectbuff || 10 == t.collectbuff || 22 == t.collectbuff ? e = 100 : (17 == t.collectbuff || 19 == t.collectbuff) && (e = 10),
                Locales.get("panel_atlas_main_panel_buff_txt_" + t.collectbuff, (t.collectbuffvalue / e).toString())
        },
        i.onComplete = function() {
            this.frameArr = [],
                this.frameArr.push(this.frame1),
                this.frameArr.push(this.frame2),
                this.frameArr.push(this.frame3),
                this.nameArr = [],
                this.nameArr.push(this.txtName1),
                this.nameArr.push(this.txtName2),
                this.nameArr.push(this.txtName3),
                this.buffArr = [],
                this.buffArr.push(this.txtBuff1),
                this.buffArr.push(this.txtBuff2),
                this.buffArr.push(this.txtBuff3);
            for (var t in this.frameArr) {
                var e = this.frameArr[t];
                e.myIndex = t,
                    e.touchEnabled = !0,
                    e.touchChildren = !1,
                    e.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickFrame, this)
            }
            this.dataChanged()
        },
        i.OnClickFrame = function(t) {
            var e = t.currentTarget,
                a = e.myIndex,
                i = this.data[a],
                n = i.userData.captainData;
            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: {
                    id: n.id
                },
                type: shipInfoWindowType.captainHandbook
            })
        },
        i.dataChanged = function() {
            if (!(this.frameArr.length < 3 || null == this.data))
                for (var t = this.data,
                        a = 0; 3 > a; ++a) {
                    var i = this.frameArr[a],
                        n = this.nameArr[a],
                        s = this.buffArr[a];
                    if (t.length > a) {
                        var r = t[a],
                            o = QualitySystem.getColorByQuality(r.userData.captainData.quality),
                            l = CaptaindataParser.GetInstance().getItemById(r.userData.captainData.id);
                        n.text = l.name_l,
                            n.textColor = o;
                        var h = i.imgIcon,
                            c = "resource/assets/Icon/captain/" + r.userData.captainData.pictureSmall;
                        SUI.setTextureAsync(h, c),
                            h = i.imgBg,
                            c = QualitySystem.getCaptainSmallBack(r.userData.captainData.quality),
                            SUI.setTextureAsync(h, c),
                            h = i.imgFrame,
                            c = QualitySystem.getCaptainFrame(r.userData.captainData.quality),
                            SUI.setTextureAsync(h, c),
                            s.text = e.getBuffDescForCaptainByData(r.userData.detailData),
                            s.textColor = o,
                            h = i.imgMask,
                            h.visible = !r.have,
                            i.visible = !0,
                            n.visible = !0,
                            s.visible = !0
                    } else i.visible = !1,
                        n.visible = !1,
                        s.visible = !1
                }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(CaptainInfoItemRenderer, "CaptainInfoItemRenderer");
var ItemItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/components/itemCommonSkin.exml"
            /*tpa=resource/eui_skins/components/itemCommonSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {},
        i.dataChanged = function() {
            var t = this;
            SUI.setItemIcon(t, this.data)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(ItemItemRenderer, "ItemItemRenderer");
var MilitaryItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.OnRemoveFromStage, this),
            EventManager.instance.addEventListener(EventTypes.EVENT_MILITARY_RANK_UPGRADE, this.dataChanged, this),
            EventManager.instance.addEventListener(EventTypes.EVENT_MILITARY_RANK_REWARD, this.dataChanged, this),
            this.skinName = "resource/eui_skins/itemrenders/junxianItemSkin.exml"
            /*tpa=resource/eui_skins/itemrenders/junxianItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.OnRemoveFromStage = function() {
            EventManager.instance.removeEventListener(EventTypes.EVENT_MILITARY_RANK_UPGRADE, this.dataChanged, this),
                EventManager.instance.removeEventListener(EventTypes.EVENT_MILITARY_RANK_REWARD, this.dataChanged, this)
        },
        i.onComplete = function() {},
        i.dataChanged = function() {
            var t = this,
                e = this.data.userData,
                a = UserData.getInstance().getMilitaryranktype();
            ConfigData.preLoadDats(["MilitaryRank"], [MilitaryrankParser],
                    function() {
                        t.txtName.text = MilitaryrankParser.GetInstance().getItemById(e.index).name_l
                    },
                    this),
                SUI.setTextureAsync(this.imgIcon, Path.GetRankIconUrl(e.index)),
                e.id <= a ? this.imgMask.visible = !1 : this.imgMask.visible = !0;
            var i = !1,
                n = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype()),
                s = n.index + 1;
            if (e.index == s) {
                var r = MilitaryrankParser.GetInstance().getItemById(s);
                r && r.gold <= UserData.getInstance().getRes(TypeDefine.RES.Gold) && r.honour <= UserData.getInstance().getMilitaryrankhon() && (i = !0)
            } else e.index == n.index && MilitaryManager.GetInstance().pkgData && 0 == MilitaryManager.GetInstance().pkgData.hasreward && 0 != Math.floor(n.diamond) && (i = !0);
            this.imgTip.visible = i,
                this.data.selected ? this.imgFrame.visible = !0 : this.imgFrame.visible = !1
        },
        e
}(eui.ItemRenderer);
egret.registerClass(MilitaryItemRenderer, "MilitaryItemRenderer");
var PVEMAPAreaRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onClear, this),
            this._arrowIcons = [],
            this.skinName = "resource/eui_skins/itemrenders/pveMapItemSkin.exml"
            /*tpa=resource/eui_skins/itemrenders/pveMapItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onClear = function() {
            EventManager.instance.removeEventListener(EventTypes.PVE_CHOOSE_CAMPAIGN, this.updateLight, this)
        },
        i.onComplete = function() {
            for (var t = 1; 4 >= t; ++t) {
                var e = this["ctlLv" + t],
                    a = e.imgIcon;
                a.myUserIndex = t,
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickCampaignIcon, this),
                    SUI.addClickEffect(a)
            }
            EventManager.instance.addEventListener(EventTypes.PVE_CHOOSE_CAMPAIGN, this.updateLight, this)
        },
        i.OnClickCampaignIcon = function(t) {
            var e = t.currentTarget,
                a = e.myUserIndex - 1;
            if (this.data) {
                var i = this.data.userData,
                    n = StageDataLib.instance.getCampaignListByArea(i.id),
                    s = n[a];
                MainWorldManager.instance.chooseCampaignId = s,
                    EventManager.instance.dispatchEvent(EventTypes.EVENT_CHOOSE_CAMPAIGN, s)
            }
        },
        i.updateLight = function() {
            for (var t = this.data.userData,
                    e = StageDataLib.instance.getCampaignListByArea(t.id), a = 0, i = e.length; i > a; ++a) {
                var n = e[a],
                    s = (CampaigndataParser.GetInstance().getItemById(n), this["ctlLv" + (a + 1)]),
                    r = s.imgLight;
                if (MainWorldManager.instance.chooseCampaignId == n) {
                    if (!r.visible) {
                        r.visible = !0,
                            egret.Tween.removeTweens(r);
                        var o = r.rotation,
                            l = egret.Tween.get(r, {
                                loop: !0
                            });
                        l.to({
                                rotation: o + 360
                            },
                            3e3)
                    }
                } else egret.Tween.removeTweens(r),
                    r.visible = !1
            }
        },
        i.dataChanged = function() {
            var t = this.data.type,
                e = this.data.userData,
                a = StageDataLib.instance.getCampaignListByArea(e.id);
            this.txtTitle.text = e.name_l;
            for (var i = 0,
                    n = a.length; n > i; ++i) {
                for (var s = a[i], r = CampaigndataParser.GetInstance().getItemById(s), o = this["ctlLv" + (i + 1)], l = o.txtTitle, h = o.imgLight, c = o.imgIcon, d = o.imgGrayStar, g = [], u = 1; 3 >= u; ++u) g.push(o["imgStar" + u]);
                var p = o.txtStarNum;
                if (t == MainWorldManager.BATTLE_TYPE_NORMAL)
                    if (r.id <= MainWorldManager.instance.getCurrentCampaign()) {
                        l.visible = !0,
                            l.text = r.name_l,
                            h.visible = !1,
                            d.visible = !0;
                        for (var m = 0,
                                _ = g; m < _.length; m++) {
                            var v = _[m];
                            v.visible = !1
                        }
                        var f = StageDataLib.instance.getAreaAllStarByCampaign(s);
                        f.getStar >= f.totalStar ? p.textColor = 16776960 : p.textColor = 16777215,
                            p.text = "{0}/{1}".format(f.getStar, f.totalStar),
                            SUI.setTextureAsync(c, Path.GetCampaignIconUrl(s)),
                            c.touchEnabled = !0
                    } else {
                        SUI.setTextureAsync(c, Path.GetCampaignIconUrl(s, !0)),
                            c.touchEnabled = !1,
                            l.visible = !1,
                            h.visible = !1,
                            d.visible = !1,
                            p.text = "";
                        for (var I = 0,
                                T = g; I < T.length; I++) {
                            var v = T[I];
                            v.visible = !1
                        }
                    }
                else {
                    var y = StageSpecialDataLib.instance.getDataByCampaignId(s),
                        D = MainWorldManager.instance.getSpecialList()[r.id];
                    if (D) {
                        l.visible = !0,
                            l.text = y.name_l,
                            h.visible = !1,
                            d.visible = !1,
                            p.text = "";
                        for (var P = 0; 3 > P; ++P) g[P].visible = !1;
                        if (D.serverData)
                            for (var C = 0; C < D.serverData.star; ++C) g[C].visible = !0;
                        SUI.setTextureAsync(c, Path.GetCampaignIconUrl(s)),
                            c.touchEnabled = !0
                    } else {
                        SUI.setTextureAsync(c, Path.GetCampaignIconUrl(s, !0)),
                            c.touchEnabled = !1,
                            l.visible = !1,
                            h.visible = !1,
                            d.visible = !1,
                            p.text = "";
                        for (var E = 0,
                                S = g; E < S.length; E++) {
                            var v = S[E];
                            v.visible = !1
                        }
                    }
                }
                this.updateLight(),
                    SUI.setTextureAsync(this.imgBg, Path.GetCampaignAreaMapUrl(e.id)),
                    o.x = .5 * this.imgBg.width + r.iconX / 1.78125 - .5 * o.width,
                    o.y = .5 * this.imgBg.height + r.iconY / (640 / 361) - .5 * o.height
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(PVEMAPAreaRenderer, "PVEMAPAreaRenderer");
var PVENormalBattleItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.exp = 0,
            this.gold = 0,
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.OnRemoveFromStage, this),
            EventManager.instance.addEventListener(EventTypes.EVENT_REFRESH_PVE_LEVEL_ITEM, this.OnRefresh, this),
            EventManager.instance.addEventListener(EventTypes.PVE_ATTACK_TIMES_UPDATE, this.OnRefresh, this),
            this.skinName = "resource/eui_skins/item/zhanyi_Bar2Skin.exml"
            /*tpa=resource/eui_skins/item/zhanyi_Bar2Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {},
        i.OnRemoveFromStage = function(t) {
            EventManager.instance.removeEventListener(EventTypes.EVENT_REFRESH_PVE_LEVEL_ITEM, this.OnRefresh, this),
                EventManager.instance.removeEventListener(EventTypes.PVE_ATTACK_TIMES_UPDATE, this.OnRefresh, this),
                this._arrow && (Utils.removeNode(this._arrow.display), dragonBones.WorldClock.clock.remove(this._arrow), this._arrow = void 0)
        },
        i.OnRefresh = function() {
            this.data && this.dataChanged()
        },
        i.dataChanged = function() {
            var t = this,
                e = this.data.userData,
                a = this.data.campaignId,
                i = e.serverData,
                n = e.isLock,
                s = e.baseData;
            this.txtLevel.text = this.data.index.toString(),
                (12 == GuideManager.step || 28 == GuideManager.step) && GuideManager.nextStep(),
                SUI.setTextureAsync(this.imgBg, Path.PVEIconUrl + "guanka_bar_" + ((a - 1) % 17 + 1) + ".jpg"),
                SUI.setTextureAsync(this.imgLvBg, Path.PVEIconUrl + "icon_zhanyi_" + e.baseData.type + ".png");
            for (var r = 1; 3 >= r; ++r) {
                var o = this["imgStar" + r];
                e.serverData && e.serverData.star >= r ? o.texture = RES.getRes(Path.resHeadUrl + "icon_yinxingxing_png") : o.texture = RES.getRes(Path.resHeadUrl + "icon_anxingxing_png")
            }
            MainWorldManager.instance.allLastList[MainWorldManager.instance.allLastList.length - 1];
            if (e.serverData) this._arrow && (Utils.removeNode(this._arrow.display), dragonBones.WorldClock.clock.remove(this._arrow), this._arrow = void 0);
            else if (this._arrow) this._arrow.display.x = this.btnGoto.x - 20.5,
                this._arrow.display.y = this.btnGoto.y + 37.5;
            else {
                var l = Path.effectUrl + "arrowshine/arrowshine.json",
                    h = Path.effectUrl + "arrowshine/texture.json",
                    c = Path.effectUrl + "arrowshine/texture.png";
                Utils.createDragonBone(l, h, c, "arrowshine", "normal",
                    function(e, a) {
                        e && !t.data.userData.serverData && (t._arrow || (t.addChild(e.display), e.display.x = t.btnGoto.x - 20.5, e.display.y = t.btnGoto.y + 37.5, e.animation.timeScale = .8, t._arrow = e))
                    },
                    this)
            }
            if (MainWorldManager.instance.isShowDropInfo) {
                this.gpInfo.visible = !1,
                    this.gpDrop.visible = !0;
                for (var d = [s.showItem1, s.showItem2], r = 0; r < d.length; ++r) {
                    var g = this["item" + (r + 1)],
                        u = d[r];
                    if (u.length >= 2) {
                        g.visible = !0;
                        var p = GlobalFunction.getDropDataByTypeAndId(u[0], u[1]);
                        SUI.setItemIcon(g, p)
                    } else g.visible = !1
                }
                var m = s,
                    _ = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype()),
                    v = 2 * m.exp,
                    f = 2 * m.gold,
                    I = 0,
                    T = 0;
                if (_)
                    for (var y = _.privilege,
                            D = 0,
                            P = y; D < P.length; D++) {
                        var C = P[D],
                            E = MilitaryrightsParser.GetInstance().getItemById(C);
                        1 == E.righttype && (1 == E.numtype ? I += v * E.num / 1e3 : 2 == E.numtype && (I += E.num)),
                            10 == E.righttype && (1 == E.numtype ? T += f * E.num / 1e3 : 2 == E.numtype && (T += E.num))
                    }
                for (var S = 0,
                        b = [], L = 0, M = GuildManager.getInstance().GuildScienceList; L < M.length; L++) {
                    var w = M[L];
                    b.push({
                        basedata: GuildscienceParser.GetInstance().getItemById(w.id),
                        data: w.level
                    })
                }
                var x = null;
                b[1] && (x = GuildsciencedataParser.GetInstance().getItemById(b[1].data));
                var A = 0;
                x && (A = f * x["guildscience" + b[1].basedata.id + "Effect"] / 1e4),
                    x = null,
                    null != b[2] && (x = GuildsciencedataParser.GetInstance().getItemById(b[2].data));
                var k = 0;
                x && (k = v * x["guildscience" + b[2].basedata.id + "Effect"] / 1e4),
                    I = Math.ceil(I + S + k),
                    T = Math.ceil(T + A),
                    this.txtExp.text = I.toString(),
                    this.txtGold.text = T.toString()
            } else {
                if (this.gpInfo.visible = !0, this.gpDrop.visible = !1, this.txtName.text = s.name_l, this.txtOil.text = s.costOil.toString(), -1 == s.dayAtkCount) this.txtBattleTimes.text = Locales.get("panel_stageselect_normal_noLimit");
                else {
                    var B = i ? i.todayCount : 0,
                        R = s.dayAtkCount - B;
                    this.txtBattleTimes.text = Locales.get("panel_stageselect_normal_fightNum", R + "/" + s.dayAtkCount)
                }
                if (i)
                    if (0 != s.resetCount && i.todaybuyCnt < s.resetCount) {
                        var B = i.todayCount;
                        s.dayAtkCount - B != 0 ? this.txtBattle.text = Locales.get("panel_stageselect_normal_fightBtn") : this.txtBattle.text = Locales.get("panel_stageselect_normal_fightBtn_2")
                    } else this.txtBattle.text = Locales.get("panel_stageselect_normal_fightBtn");
                else this.txtBattle.text = Locales.get("panel_stageselect_normal_fightBtn");
                0 == n && (!i || i.star <= 0)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(PVENormalBattleItemRenderer, "PVENormalBattleItemRenderer");
var PVEChooseAreaItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/zhanyi_Bar3Skin.exml"
            /*tpa=resource/eui_skins/item/zhanyi_Bar3Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {},
        i.dataChanged = function() {
            var t = this.data.userData;
            this.txtName.text = t.name_l;
            var e = StageDataLib.instance.getCampaignListByArea(t.id),
                a = MainWorldManager.instance.getCurrentBattleType();
            a != MainWorldManager.BATTLE_TYPE_NORMAL && (this.imgStar.texture = RES.getRes("iconjinxing_png"));
            for (var i = 0,
                    n = 0,
                    s = 0,
                    r = e.length; r > s; ++s) {
                var o = e[s],
                    l = CampaigndataParser.GetInstance().getItemById(o);
                if (a == MainWorldManager.BATTLE_TYPE_NORMAL) {
                    var h = StageDataLib.instance.getAreaAllStarByCampaign(o);
                    i += h.getStar,
                        n += h.totalStar
                } else {
                    var c = (StageSpecialDataLib.instance.getDataByCampaignId(o), MainWorldManager.instance.getSpecialList()[l.id]);
                    c && c.serverData && (i += c.serverData.star),
                        n += 3
                }
                this.txtProgress.text = i + "/" + n
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(PVEChooseAreaItemRenderer, "PVEChooseAreaItemRenderer");
var PVPExchangeItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/ZB_JingJiChang_3_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_JingJiChang_3_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.txtNumDesc.text = Locales.get("panel_luckgirl_txt_comment_1"),
                this.btnBuy.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnBuy, this),
                EventManager.instance.addEventListener(EventTypes.ARENA_EXCHANGE, this.dataChanged, this)
        },
        i.OnClickBtnBuy = function() {
            AudioManager.instance.playSound(AudioManager.SOUND_BTN);
            var t = UserData.getInstance().getPlayerLevel(),
                e = this.data;
            if (t < e.buyLevelLimited) return void Toast.launch(Locales.get("panel_arena_txt_comment_window_5"), 16777215);
            Log.logZDY("itemInfo.buyTimeLimited", e.buyTimeLimited);
            var a = ArenaManager.instance.getCanDHNumById(e.id);
            if (-1 == e.buyTimeLimited || 1 == e.buyTimeLimited) RequestManager.GetInstance().ArenaExchange(e.id);
            else if (0 >= a || a < e.itemCost) Toast.launch(Locales.get("panel_DHtrade_wind_1"), 16777215);
            else {
                var i = 0;
                i = 0 == e.buyTimeLimited ? -1 : e.count;
                var n = {
                    money: e.itemCost,
                    id: e.id,
                    timeslimit: i
                };
                n.totalMoney = ArenaManager.instance.getCanDHNumById(e.id),
                    n.getLimitCountFunc = ArenaManager.getDHCountById,
                    n.onConfirm = function(t, e) {
                        RequestManager.GetInstance().ArenaExchange(t, e)
                    },
                    WindowManager.getInstance().show(WindowManager.windowType.PVPExchangeConfirm, n)
            }
        },
        i.dataChanged = function() {
            var t = this.data,
                e = ItemsManager.getInstance().getItemById(t.itemId);
            e = e ? GlobalFunction.getItemByData({
                    id: t.itemId,
                    type: TypeDefine.Const.DROP_TYPE_ITEM,
                    count: e.count
                }) : GlobalFunction.getItemByData({
                    id: t.itemId,
                    type: TypeDefine.Const.DROP_TYPE_ITEM
                }),
                SUI.setItemIcon(this.itemCompent, e),
                this.txtName.text = e.name,
                this.txtNum.text = e.realCount ? e.realCount.toString() : "0";
            var a = "";
            a = 0 == t.buyTimeLimited ? t.desc_l : -1 == t.buyTimeLimited ? Locales.get("panel_arena_txt_comment_12") + Locales.get("panel_arena_txt_comment_8", t.buyRank) + Locales.get("panel_arena_txt_comment_13") : t.desc_l,
                this.txtDesc.text = a;
            var i = 0,
                n = ArenaManager.instance.getCountById(t.id);
            i = -1 == t.buyTimeLimited ? 1 : t.buyTimeLimited - n;
            var s = UserData.getInstance().getPlayerLevel();
            t.buyLevelLimited > 0 && s < t.buyLevelLimited ? (this.canNotBuy.visible = !0, this.canBuy.visible = !1, this.txtBuyCondition.text = Locales.get("ui_campBattle_charge_reqLevel", t.buyLevelLimited)) : (this.canBuy.visible = !0, this.canNotBuy.visible = !1, this.btnBuy.enabled = !0, t.buyTimeLimited > 0 ? i > 0 ? this.txtBuyLimit.text = Locales.get("panel_shoptrade_txt_title_litm_count", i) : (this.txtBuyLimit.text = Locales.get("panel_guild_saleOut"), this.btnBuy.enabled = !1) : this.txtBuyLimit.text = "", t.itemCost > 0 ? this.btnBuy.labelDisplay.text = Locales.get("panel_activty_valentines_day_text_30", t.itemCost) : this.btnBuy.labelDisplay.text = Locales.get("panel_arena_charge"))
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ARENA_EXCHANGE, this.dataChanged, this)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(PVPExchangeItemRenderer, "PVPExchangeItemRenderer");
var Toast = function(t) {
    function e(a, i, n, s, r, o) {
        var l = this;
        void 0 === o && (o = -1),
            t.call(this),
            s = 16777215;
        var h = new egret.Bitmap(e._txtrToastBg);
        h.scale9Grid = new egret.Rectangle(1, 1, 2, 2),
            h.width = i + 100,
            this.addChild(h);
        var c = new egret.TextField;
        c.lineSpacing = 10,
            c.multiline = !0,
            c.width = 560,
            c.size = 25,
            c.strokeColor = 0,
            r ? c.textFlow = Utils.textFlowByStr(a, s) : (c.text = a, c.textColor = s),
            c.fontFamily = "黑体",
            c.textAlign = egret.HorizontalAlign.CENTER,
            c.verticalAlign = egret.VerticalAlign.MIDDLE,
            h.height = 100 + c.height,
            c.x = (h.width - c.width) / 2,
            c.y = (h.height - c.height) / 2,
            this.addChild(c),
            this.anchorOffsetX = .5 * this.width,
            this.anchorOffsetY = .5 * this.height,
            this.x = .5 * i,
            o > 0 ? this.y = o : this.y = .5 * n,
            this.alpha = 0,
            egret.Tween.get(this).to({
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 0
                },
                0, egret.Ease.quintOut).to({
                    alpha: 1,
                    scaleX: 1,
                    scaleY: 1
                },
                100, egret.Ease.quintOut).call(function() {
                console.log("tween tween tween")
            }).wait(1500).to({
                    alpha: .5,
                    scaleY: 0
                },
                100, egret.Ease.quadOut).call(function() {
                l.parent && l.parent.removeChild(l)
            })
    }
    __extends(e, t);
    var a = (__define, e);
    a.prototype;
    return e.init = function(t, e) {
            this._cont = t,
                this._txtrToastBg = e
        },
        e.launch = function(t, a, i, n) {
            if (void 0 === a && (a = 16777215), void 0 === n && (n = -1), this._cont) {
                var s = new e(t, this._cont.stage.stageWidth, this._cont.stage.stageHeight, a, i, n);
                this._cont.addChild(s)
            }
        },
        e
}(egret.DisplayObjectContainer);
egret.registerClass(Toast, "Toast");
var BattleUI = function(t) {
    function e(a) {
        void 0 === a && (a = void 0),
            t.call(this),
            this._captainIds = a,
            this.addEventListener(eui.UIEvent.COMPLETE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/Battle_BeginSkin.exml"
            /*tpa=resource/eui_skins/Battle_BeginSkin.exml*/
            ,
            e.instance = this
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.update = function() {},
        i.OnComplete = function() {
            this.btnSpeed.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnSpeed, this),
                this.btnSkip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnSkip, this),
                SUI.addClickEffect(this.btnSkip),
                SUI.addClickEffect(this.btnSpeed);
            var t = BattleManager.instance.getLeftTeam(),
                e = BattleManager.instance.getRightTeam();
            t && e && (BattleManager.instance.getBattleType() == BattleType.BATTLE_TYPE_CHALLENGEARMADA && (e.name = Locales.get("panel_challengs_win_2")), this.showSpeed(t.name, t.speed, e.name, e.speed, void 0)),
                this.setSpeed(BattleManager.CURRENT_SPEED_TYPE);
            var a = [];
            this._captainIds.length > 0 && a.push({
                    descList: this.getDescList(this._captainIds[0]),
                    isMine: !0
                }),
                this._captainIds.length > 1 && a.push({
                    descList: this.getDescList(this._captainIds[1]),
                    isMine: !1
                }),
                this.createQijianEff(a),
                this.txtReward1.visible = !1,
                this.txtReward2.visible = !1,
                this.imgReward1.visible = !1,
                this.imgReward2.visible = !1
        },
        i.OnClickBtnSpeed = function(t) {
            1 == BattleManager.CURRENT_SPEED_TYPE ? BattleManager.instance.checkSpdUpLv(2) ? (BattleManager.instance.setBattleSpeed(2, !0), this.setSpeed(2)) : (BattleManager.instance.setBattleSpeed(1, !0), this.setSpeed(1)) : 2 == BattleManager.CURRENT_SPEED_TYPE ? BattleManager.instance.checkSpdUpLv(3) ? (BattleManager.instance.setBattleSpeed(3, !0), this.setSpeed(3)) : (BattleManager.instance.setBattleSpeed(1, !0), this.setSpeed(1)) : BattleManager.instance.checkSpdUpLv(1) && (BattleManager.instance.setBattleSpeed(1, !0), this.setSpeed(1))
        },
        i.OnClickBtnSkip = function(t) {
            BattleManager.instance.endBattle(1)
        },
        i.setSpeed = function(t) {
            1 == t ? this.imgSpeed.texture = RES.getRes(Path.resHeadUrl + "battle_speed1_png") : 2 == t ? this.imgSpeed.texture = RES.getRes(Path.resHeadUrl + "battle_speed2_png") : 3 == t && (this.imgSpeed.texture = RES.getRes(Path.resHeadUrl + "battle_speed3_png"))
        },
        i.battleRoundChange = function(t, e) {
            t = 1 > t ? 1 : t,
                BattleManager.instance.battleType == BattleType.BATTLE_TYPE_CHALLENGEARMADA ? (t = t > 1 ? 1 : t, this.txtTurns.text = Locales.get("ui_mainBattle_round", t + "/1")) : (t = t > 30 ? 30 : t, this.txtTurns.text = Locales.get("ui_mainBattle_round", t + "/30"))
        },
        i.showSpeed = function(t, e, a, i, n) {
            BattleScene.ChangeNameType = !1,
                this.txtSelfName.text = t,
                this.txtEnemyName.text = a,
                this.txtSelfSpeed.text = Locales.get("ui_mainBattle_speedTitle", e),
                this.txtEnemySpeed.text = Locales.get("ui_mainBattle_speedTitle", i),
                BattleManager.instance.getBattleType() == BattleType.BATTLE_TYPE_ZONGHENG && (this.txtSelfSpeed.visible = !1, this.txtEnemySpeed.visible = !1),
                e > i ? this.imgEnemyFirst.visible = !1 : e == i ? this.imgEnemyFirst.visible = this.imgSelfFirst.visible = !1 : this.imgSelfFirst.visible = !1,
                n && n(),
                1 == BattleManager.replay_flag ? this.setEndButtonShow(!0) : this.setEndButtonShow(BattleManager.instance.checkEndButtonShow()),
                this.setRoundShow(!0)
        },
        i.createQijianEff = function(t) {
            0 == t.length && (this.txtBuff1.visible = !1, this.txtBuff2.visible = !1, this.txtBuff3.visible = !1);
            for (var e = 0,
                    a = t; e < a.length; e++) {
                var i = a[e];
                if (i.isMine)
                    for (var n = 1; 3 >= n; ++n) {
                        var s = this["txtBuff" + n];
                        n - 1 < i.descList.length ? (s.textFlow = Utils.textFlowByStr(i.descList[n - 1]), s.visible = !0) : s.visible = !1
                    }
            }
        },
        i.getDescList = function(t) {
            var e = [];
            if (null != t) {
                var a = SkilldataParser.GetInstance().getItemById(t).buff;
                if (null != a && 0 != a)
                    for (var i = BuffdataParser.GetInstance().getItemById(a), n = 1; 3 > n; ++n) {
                        var s = i["buffType" + n],
                            r = i["buffValue" + n];
                        if (s && 0 != s && r && 0 != r) {
                            var o = "#44e04f+" + BuffManager.instance.getBuffValueById(s, r) + "##ffe4c4" + Locales.get(BuffManager.instance.getBuffNameById(s).name) + "#";
                            e.push(o)
                        }
                    }
            }
            return e
        },
        i.setEndButtonShow = function(t) {
            this.gpSkip.visible = t || !0
        },
        i.setRoundShow = function(t) {
            this.txtTurns.visible = t
        },
        i.clear = function() {},
        e
}(eui.Component);
egret.registerClass(BattleUI, "BattleUI");
var BottomUI = function(t) {
    function e() {
        t.call(this),
            this.shopPage = 0,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.addEventListener(eui.UIEvent.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/BottomUISkin.exml"
            /*tpa=resource/eui_skins/BottomUISkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.btnHomeBg = new eui.Image,
                this.btnHomeBg.source = "GUI_Homepage_Icon_Bg_png",
                this.btnHomeBg.x = 0,
                this.btnHomeBg.y = 0,
                this.btnBgGroup.addChild(this.btnHomeBg),
                SUI.addClickEffect(this.btnHome),
                SUI.addClickEffect(this.btnArrange),
                SUI.addClickEffect(this.btnPVE),
                SUI.addClickEffect(this.btnPVP),
                SUI.addClickEffect(this.btnShop),
                SUI.addClickEffect(this.btnStore),
                this.btnHome.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickPageBtn, this),
                this.btnArrange.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickPageBtn, this),
                this.btnPVE.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickPageBtn, this),
                this.btnPVP.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickPageBtn, this),
                this.btnShop.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickPageBtn, this),
                this.btnStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickPageBtn, this),
                UserData.getInstance().registerActiveTip(this.spotPVE, "specialstage"),
                UserData.getInstance().registerActiveTip(this.spotPVP, "guard"),
                UserData.getInstance().registerActiveTip(this.spotShop, "vipgift"),
                UserData.getInstance().registerActiveTip(this.spotShop0, "spy")
        },
        i.setArrangeSpot = function(t) {
            this.spotArrange.visible = t
        },
        i.showHomeByForce = function() {
            this.btnHome.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        },
        i.showPveByForce = function() {
            this.btnPVE.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        },
        i.showPvpByForce = function() {
            this.btnPVP.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        },
        i.showShopForce = function(t) {
            void 0 === t && (t = 0),
                this.shopPage = t,
                this.btnShop.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        },
        i.showShipArrange = function() {
            this.btnArrange.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        },
        i.moveSelectFrameToBtn = function(t) {
            switch (t) {
                case "btnHome":
                    this.moveToPoint(0, 0);
                    break;
                case "btnStore":
                    this.moveToPoint(530, 0);
                    break;
                case "btnArrange":
                    this.moveToPoint(106, 0);
                    break;
                case "btnPVE":
                    this.moveToPoint(212, 0);
                    break;
                case "btnShop":
                    this.moveToPoint(424, 0);
                    break;
                case "btnPVP":
                    this.moveToPoint(318, 0)
            }
        },
        i.clickPageBtn = function(t) {
            var e = t.currentTarget.name;
            if ("btnPVP" == e && UserData.getInstance()._level < 12) return void Toast.launch(Locales.get("ui_main_function_scientific", 12));
            switch (this.lastBtn = t.currentTarget, this.txtBtnHome.textColor = 16777215, this.txtArrange.textColor = 16777215, this.txtPVE.textColor = 16777215, this.txtPVP.textColor = 16777215, this.txtShop.textColor = 16777215, this.txtStore.textColor = 16777215, HomeUI.instance.hideGroupExchange(), e) {
                case "btnHome":
                    this.showHome(),
                        this.moveToPoint(0, 0),
                        this.txtBtnHome.textColor = 65535;
                    break;
                case "btnStore":
                    this.showStore(),
                        this.moveToPoint(530, 0),
                        this.txtStore.textColor = 65535;
                    break;
                case "btnArrange":
                    this.showArrange(),
                        this.moveToPoint(106, 0),
                        this.txtArrange.textColor = 65535;
                    break;
                case "btnPVE":
                    this.showPVE(),
                        this.moveToPoint(212, 0),
                        this.txtPVE.textColor = 65535;
                    break;
                case "btnShop":
                    this.showShop(),
                        this.moveToPoint(424, 0),
                        this.txtShop.textColor = 65535;
                    break;
                case "btnPVP":
                    this.showPVP(),
                        this.moveToPoint(318, 0),
                        this.txtPVP.textColor = 65535
            }
        },
        i.moveToPoint = function(t, e) {
            egret.Tween.get(this.btnHomeBg).to({
                    x: t,
                    y: e
                },
                300, egret.Ease.cubicInOut)
        },
        i.showPVP = function() {
            WindowManager.getInstance().hideAll(),
                WindowManager.getInstance().show(WindowManager.windowType.Zhenba)
        },
        i.showHome = function() {
            WindowManager.getInstance().hideAll(),
                MainUI.instance.changeTopMode(topUIMode.normal)
        },
        i.showStore = function() {
            RequestManager.GetInstance().needShowStoreWindow = !0,
                RequestManager.GetInstance().RequestItemList()
        },
        i.showArrange = function() {
            WindowManager.getInstance().hideAll(),
                WindowManager.getInstance().show(WindowManager.windowType.ShipArrange, {}),
                42 == GuideManager.step && GuideManager.nextStep()
        },
        i.showPVE = function() {
            60 == GuideManager.step && GuideManager.nextStep(),
                WindowManager.getInstance().hideAll(),
                MainWorldManager.instance.openPVEWindow()
        },
        i.showShop = function() {
            WindowManager.getInstance().hideAll(),
                GameData.skipShipGuide ? (WindowShop.PAPER_INDEX = 2, WindowShop.STORE_INDEX = 0, WindowShop.VIP_INDEX = 1, WindowShop.CAPTAIN_INDEX = 3, WindowShop.MEDAL_INDEX = 4, WindowShop.CURR_PAGE = WindowShop.STORE_INDEX) : WindowShop.CURR_PAGE = this.shopPage,
                WindowManager.getInstance().show(WindowManager.windowType.Shop)
        },
        i.clear = function() {},
        e
}(eui.Component);
egret.registerClass(BottomUI, "BottomUI");
var HomeUI = function(t) {
    function e() {
        t.call(this),
            e.instance = this,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.addEventListener(eui.UIEvent.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/HomepageSkin.exml"
            /*tpa=resource/eui_skins/HomepageSkin.exml*/
            ,
            this._hasInitedMorePanel = !1
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.visibleScene = function(t) {
            this.mainGroup.visible = t,
                this.groupMore.visible = !1
        },
        i.init = function() {
            this.txtmubiao.visible = UserData.getInstance().isShowMuBiaoIcon,
                this.iconmubiao.visible = UserData.getInstance().isShowMuBiaoIcon,
                this.imgLock4.visible = !1,
                this.imgLock5.visible = !1,
                SUI.addClickEffect(this.exchangeBtn),
                SUI.addClickEffect(this.taskBtn),
                SUI.addClickEffect(this.btnChat),
                SUI.addClickEffect(this.imgShipExchange),
                SUI.addClickEffect(this.imgCaptainExchange),
                SUI.addClickEffect(this.imgRanking),
                SUI.addClickEffect(this.btnGuild),
                SUI.addClickEffect(this.btnRecharge),
                SUI.addClickEffect(this.btnZhaoMuJiangZhang),
                SUI.addClickEffect1(this.btnAward),
                SUI.addClickEffect1(this.btnActivity),
                SUI.addClickEffect1(this.btnTimeActivity),
                SUI.addClickEffect(this.iconguanzhu),
                SUI.addClickEffect1(this.btnFirstRecharge),
                SUI.addClickEffect1(this.imgLoginGift),
                egret.Tween.get(this.btnAward, {
                    loop: !0
                }).to({
                        scaleX: .85,
                        scaleY: .85
                    },
                    500).to({
                        scaleX: 1,
                        scaleY: 1
                    },
                    800),
                SUI.setTextureAsync(this.imgActivityLight, Path.uiUrl + "Activity/activity_light.png"),
                egret.Tween.get(this.imgActivityLight, {
                    loop: !0
                }).to({
                        rotation: this.imgActivityLight.rotation + 360
                    },
                    6e3),
                egret.Tween.get(this.btnActivity, {
                    loop: !0
                }).to({
                        scaleX: .9,
                        scaleY: .9
                    },
                    500).to({
                        scaleX: 1,
                        scaleY: 1
                    },
                    800),
                SUI.setTextureAsync(this.imgFirstRechargeLight, Path.uiUrl + "Activity/activity_light.png"),
                egret.Tween.get(this.imgFirstRechargeLight, {
                    loop: !0
                }).to({
                        rotation: this.imgActivityLight.rotation + 360
                    },
                    6e3),
                egret.Tween.get(this.btnFirstRecharge, {
                    loop: !0
                }).to({
                        scaleX: .9,
                        scaleY: .9
                    },
                    500).to({
                        scaleX: 1,
                        scaleY: 1
                    },
                    800),
                new ParticleDisplayObj(this.btnRecharge, ParticleType.Recharge, ShapeType.None),
                this.groupMore.visible = !1,
                this.btnMore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showMorePanel, this),
                this.exchangeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.exchangeClickHandler, this),
                this.taskBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.taskClickHandler, this),
                this.grpWorldChat.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnChatClickHandler, this),
                this.btnChat.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnChatClickHandler, this),
                this.imgShipExchange.addEventListener(egret.TouchEvent.TOUCH_TAP, this.imgExchangeHandler, this),
                this.imgCaptainExchange.addEventListener(egret.TouchEvent.TOUCH_TAP, this.imgExchangeHandler, this),
                this.btnGuild.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showGuildWindow, this),
                this.imgRanking.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showRankWindow, this),
                this.btnRecharge.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnRechargeClick, this),
                this.btnZhaoMuJiangZhang.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showZhaoMuCaptainWindow, this),
                this.btnAward.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnAwardClick, this),
                this.btnActivity.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnActivity, this),
                this.btnTimeActivity.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnTimeActivity, this),
                this.btnCampBattle.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnCamp, this),
                this.iconguanzhu.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnSubscribe, this),
                this.iconmubiao.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnMuBiao, this),
                this.btnFirstRecharge.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnFirstRecharge, this),
                this.imgLoginGift.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnLoginGift, this),
                this.tickSeaFrame = 0,
                this.SetSubscribe(),
                this.SetImgClickListener(this.btnTanSuoXunZhang,
                    function() {
                        GameData.funSwitch ? UserData.getInstance()._level >= 40 ? ConfigData.preLoadList(["medalsalvageData", "medalexpData", "medalData"],
                            function() {
                                WindowManager.getInstance().show(WindowManager.windowType.tansuo)
                            }) : Toast.launch("招募勋章功能40级开放") : ConfigData.preLoadList(["medalsalvageData", "medalexpData", "medalData"],
                            function() {
                                WindowManager.getInstance().show(WindowManager.windowType.tansuo)
                            })
                    });
            for (var t = 1; 5 >= t; ++t) {
                var e = this["Building_" + t],
                    a = this["txtBuilding" + t];
                e.touchEnabled = !0,
                    e.touchChildren = !1,
                    this.addClickEffect(e, a)
            }
            this.Building_1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showBuildShipWindow, this),
                this.Building_2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showShipManager, this),
                this.Building_3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showPeiJianWindow, this),
                this.Building_4.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showSoulWindow, this),
                this.Building_5.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showCaptainWindow, this),
                this.seaSourceList = [],
                this.loadSeaIndex = 10001,
                this.loadSeaBg(),
                this.redBallUpdate(),
                EventManager.instance.addEventListener(EventTypes.HOMEUI_REDBALL_STATE_CHANGE, this.redBallUpdate, this),
                UserData.getInstance().registerActiveTip(this.spotBuilding1, "ship"),
                UserData.getInstance().registerActiveTip(this.spotBuilding5, "captainsys"),
                UserData.getInstance().registerActiveTip(this.spotGuild, "guildapply"),
                UserData.getInstance().registerActiveTip(this.spotExchange, "charge"),
                UserData.getInstance().registerActiveTip(this.spotRecharge, "recharge"),
                UserData.getInstance()._level < 40 ? this.setTanSuoXunZhangState(!1) : this.setTanSuoXunZhangState(!0),
                UserData.getInstance()._level < 50 ? this.setZhaoMuJiangZhangState(!1) : this.setZhaoMuJiangZhangState(!0),
                this.btnCampBattle.visible = !1,
                this.txtCampBattleTime.visible = !1,
                this.txtCampBattle.visible = !1,
                this.imgCampLight.visible = !1,
                ConfigData.preLoadDats(["campBattleBaseData", "HegemonyUnlock"], [CampbattlebasedataParser, HegemonyunlockParser], this.addTicker, this),
                PlatformManager.instance.GetPlatName() == PlatformType.PF_QQBROWSER && (this.txtguanzhu.text = "发送桌面")
        },
        i.addTicker = function() {
            var t = this,
                e = -2,
                a = !1;
            this._tickHandler = GameTick.registerHandler(function() {
                    var i = ActivityManager.instance.getOnlineRewardState(); - 1 == i[0] ? e != i[0] && (t.imgActivityLightzaixian.visible = !1, t.spotActivityzaixian.visible = !1, t.btnTimeActivity.visible = !1, t.txtOnlineReward.visible = !1, t.btnTimeActivity.touchEnabled = !1, egret.Tween.removeTweens(t.imgActivityLightzaixian), egret.Tween.removeTweens(t.btnTimeActivity)) : 0 == i[0] ? (e != i[0] && (t.imgActivityLightzaixian.visible = !1, t.spotActivityzaixian.visible = !1, t.btnTimeActivity.visible = !0, t.txtOnlineReward.visible = !0, t.btnTimeActivity.touchEnabled = !1, egret.Tween.removeTweens(t.imgActivityLightzaixian), egret.Tween.removeTweens(t.btnTimeActivity)), t.txtOnlineReward.text = Utils.getTimeString(i[1])) : 1 == i[0] && e != i[0] && (t.imgActivityLightzaixian.visible = !0, SUI.setTextureAsync(t.imgActivityLightzaixian, Path.uiUrl + "Activity/activity_light.png"), t.spotActivityzaixian.visible = !0, t.btnTimeActivity.visible = !0, t.txtOnlineReward.visible = !0, t.btnTimeActivity.touchEnabled = !0, t.txtOnlineReward.text = "可领取", egret.Tween.get(t.imgActivityLightzaixian, {
                            loop: !0
                        }).to({
                                rotation: t.imgActivityLight.rotation + 360
                            },
                            6e3), egret.Tween.get(t.btnTimeActivity, {
                            loop: !0
                        }).to({
                                scaleX: .9,
                                scaleY: .9
                            },
                            500).to({
                                scaleX: 1,
                                scaleY: 1
                            },
                            800)),
                        e = i[0];
                    var n = CampBattleManager.instance.isOpened();
                    if (n) {
                        a != n && (t.btnCampBattle.visible = !0, t.txtCampBattleTime.visible = !0, t.txtCampBattle.visible = !0, SUI.setTextureAsync(t.imgCampLight, Path.uiUrl + "Activity/activity_light.png"), t.imgCampLight.visible = !0, egret.Tween.get(t.imgCampLight, {
                            loop: !0
                        }).to({
                                rotation: t.imgCampLight.rotation + 360
                            },
                            6e3), egret.Tween.get(t.btnCampBattle, {
                            loop: !0
                        }).to({
                                scaleX: .9,
                                scaleY: .9
                            },
                            500).to({
                                scaleX: 1,
                                scaleY: 1
                            },
                            800));
                        var s = new Date(UserData.getInstance().getServerTime()),
                            r = CampbattlebasedataParser.GetInstance().getDataArr()[0],
                            o = new Date(UserData.getInstance().getServerTime());
                        o.setHours(r.endTime[0], r.endTime[1], 0, 0);
                        var l = Math.floor((o.valueOf() - s.valueOf()) / 1e3);
                        t.txtCampBattleTime.text = Utils.getTimeString(l)
                    } else a != n && (t.btnCampBattle.visible = !1, t.txtCampBattleTime.visible = !1, t.txtCampBattle.visible = !1, t.imgCampLight.visible = !1, egret.Tween.removeTweens(t.btnCampBattle), egret.Tween.removeTweens(t.imgCampLight));
                    a = n;
                    var h = UserData.getInstance().getServerTime(),
                        c = 1e3 * UserData.getInstance().regtime,
                        d = new Date(c);
                    if (d.setDate(d.getDate() + 4), d.setHours(24, 0, 0, 0), h > d.valueOf() || !ActivityManager.instance.activityData) t.imgLoginGift.visible = !1,
                        t.txtLoginGift.visible = !1,
                        t.spotLoginGift.visible = !1,
                        egret.Tween.removeTweens(t.imgLoginGift);
                    else {
                        var g = UserData.getInstance().getServerTime(),
                            u = Utils.getDayDiff(c, g),
                            p = ActivityManager.instance.activityData.login_charge_gift[u];
                        4 == u && 3 == p ? (t.imgLoginGift.visible = !1, t.txtLoginGift.visible = !1, t.spotLoginGift.visible = !1, egret.Tween.removeTweens(t.imgLoginGift), t.imgLoginGift.tweening = !1) : (t.imgLoginGift.visible = !0, t.txtLoginGift.visible = !0, t.imgLoginGift.tweening || (egret.Tween.get(t.imgLoginGift, {
                            loop: !0
                        }).to({
                                scaleX: .9,
                                scaleY: .9
                            },
                            500).to({
                                scaleX: 1,
                                scaleY: 1
                            },
                            800), t.imgLoginGift.tweening = !0))
                    }
                },
                1e3)
        },
        i.onClickBtnFirstRecharge = function() {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                type: ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE
            })
        },
        i.onClickBtnLoginGift = function() {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                type: ActivityType.ACTIVITY_TYPE_LOGINGIFT
            })
        },
        i.OnClickBtnCamp = function() {
            RequestManager.GetInstance().enterCampBattle()
        },
        i.OnClickBtnSubscribe = function() {
            PlatformManager.instance.GetPlatName() == PlatformType.PF_QQBROWSER ? PlatformManager.instance.ToDesktop() : PlatformManager.instance.isSupportSubscribe() && !UserData.getInstance().focus_award && PlatformManager.instance.Subscribe()
        },
        i.OnClickBtnMuBiao = function() {
            WindowManager.getInstance().show(WindowManager.windowType.mubiaoAct)
        },
        i.SetSubscribe = function() {
            PlatformManager.instance.isSupportSubscribe() && !UserData.getInstance().focus_award ? (this.iconguanzhu.visible = !0, this.txtguanzhu.visible = !0, this.iconmubiao.y = 156, this.txtmubiao.y = 220, this.spotmubiao.y = 155, SUI.addClickEffect(this.iconmubiao)) : (this.iconguanzhu.visible = !1, this.txtguanzhu.visible = !1, this.iconmubiao.y = this.iconguanzhu.y, this.txtmubiao.y = this.txtguanzhu.y, this.spotmubiao.y = this.iconguanzhu.y, SUI.addClickEffect(this.iconmubiao))
        },
        i.setTanSuoXunZhangState = function(t) {
            this.btnTanSuoXunZhang.visible = t,
                this.txtTanSuoXunZhang.visible = t,
                this.bgTanSuoXunZhang.visible = t
        },
        i.setZhaoMuJiangZhangState = function(t) {
            this.bgZhaoMuJiangZhang.visible = t,
                this.btnZhaoMuJiangZhang.visible = t,
                this.txtZhaoMuJiangZhang.visible = t
        },
        i.updateLevelControl = function() {
            UserData.getInstance()._level >= 40 ? this.imgLock4.visible = !1 : this.imgLock4.visible = !0,
                UserData.getInstance()._level >= 50 ? (this.exchangeBtn.source = RES.getRes("GUI_Homepage_Icon_28_png"), this.txtExchange.text = "兑换", this.imgLock5.visible = !1) : (this.exchangeBtn.source = RES.getRes("GUI_Homepage_Icon_10_png"), this.txtExchange.text = "战舰兑换", this.imgLock5.visible = !0)
        },
        i.mailRedPoint = function() {
            this.imgMailBall.visible = UserData.getInstance().getUnreadMail() > 0
        },
        i.isShowAwardCenter = function(t) {
            void 0 === t && (t = !1),
                this.btnAward.visible = t,
                this.imgBgAward.visible = t,
                this.txtAward.visible = t
        },
        i.redBallUpdate = function() {
            this.imgMilitaryBall.visible = CanUseManager.instance.getMilitaryUseFlag(),
                this.spotActivity.visible = ActivityManager.instance.checkIsShowRedBall(0), !ActivityManager.instance.activityData || ActivityManager.instance.activityData.isfirst_gift ? this.FirstRecharge.visible = !1 : (this.FirstRecharge.visible = !0, ActivityManager.instance.checkIsShowRedBall(ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE) ? this.spotFirstRecharge.visible = !0 : this.spotFirstRecharge.visible = !1),
                this.spotLoginGift.visible = ActivityManager.instance.checkIsShowRedBall(ActivityType.ACTIVITY_TYPE_LOGINGIFT)
        },
        i.initRedBallEvents = function() {},
        i.loadSeaBg = function() {
            var t = this;
            Utils.getImgByUrl(Path.seaImageUrl + this.loadSeaIndex + ".jpg", null,
                function(e) {
                    t.seaSourceList.push(e),
                        t.loadSeaIndex++,
                        t.loadSeaIndex < 10008 ? t.loadSeaBg() : GameTick.registerHandler(function() {
                                t.tickSeaMotion()
                            },
                            50)
                },
                this)
        },
        i.tickSeaMotion = function() {
            this.seaSourceList.length > 0 && (this.seaBg.source = this.seaSourceList[this.tickSeaFrame], this.tickSeaFrame++, this.tickSeaFrame == this.seaSourceList.length && (this.tickSeaFrame = 0))
        },
        i.addClickEffect = function(t, e) {
            t.addEventListener(egret.TouchEvent.TOUCH_BEGIN,
                    function(t) {
                        e.textColor = 16777215
                    },
                    void 0),
                t.addEventListener(egret.TouchEvent.TOUCH_END,
                    function(t) {
                        e.textColor = 16770421
                    },
                    void 0),
                t.addEventListener(egret.TouchEvent.TOUCH_CANCEL,
                    function(t) {
                        e.textColor = 16770421
                    },
                    void 0),
                t.addEventListener(egret.TouchEvent.TOUCH_RELEASE_OUTSIDE,
                    function() {
                        e.textColor = 16770421
                    },
                    void 0)
        },
        i.showBuildShipWindow = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.tickShipFactoryId = GameTick.registerHandler(function() {
                        return t.tickShowShipWindowHandler()
                    },
                    100)
        },
        i.showPeiJianWindow = function() {
            WindowManager.getInstance().show(WindowManager.windowType.PeiJian)
        },
        i.showSoulWindow = function() {
            this.imgLock4.visible ? Toast.launch("该功能40级开放") : WindowManager.getInstance().show(WindowManager.windowType.Soul)
        },
        i.showCaptainWindow = function() {
            this.imgLock5.visible ? Toast.launch("该功能50级开放") : WindowManager.getInstance().show(WindowManager.windowType.Captain)
        },
        i.showGuildWindow = function() {
            UserData.getInstance()._level >= 18 ? (GuildManager.getInstance().isOpenWin = !0, GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_BASE, GuildManager.getInstance().sendGuildData()) : Toast.launch("该功能18级开放")
        },
        i.showRankWindow = function() {
            RankListManager.getInstance().showRankWin(0)
        },
        i.showZhaoMuCaptainWindow = function() {
            GameData.funSwitch ? UserData.getInstance()._level >= 50 ? WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain) : Toast.launch("招募舰长功能50级开放") : WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain)
        },
        i.tickShowShipWindowHandler = function() {
            ShipManager.getInstance().shipDataInit && ShipManager.getInstance().paperDataInit && ShipManager.getInstance().paperPieceDataInit && (GameTick.removeHandler(this.tickShipFactoryId), WindowManager.getInstance().hideWaiting(), WindowManager.getInstance().show(WindowManager.windowType.ShipFactory))
        },
        i.showShipManager = function() {
            WindowManager.getInstance().show(WindowManager.windowType.ShipManager)
        },
        i.showMorePanel = function() {
            var t = this;
            ResLoader.instance.logCachedResCount(),
                this.imgOilRefiningBall.visible = RedPointManager.getPointShow(null, RedPointType.buyoil),
                egret.Tween.removeTweens(this.btnMore);
            var e = egret.Tween.get(this.btnMore);
            0 == this.groupMore.visible ? (this.groupExchange.visible && (this.groupExchange.visible = !1), this.groupMore.scaleX = .1, this.groupMore.scaleY = .1, this.groupMore.visible = !0, this._hasInitedMorePanel || (this.InitMorePanel(), this._hasInitedMorePanel = !0), egret.Tween.get(this.groupMore, {
                loop: !1
            }).to({
                    scaleX: 1,
                    scaleY: 1
                },
                300), e.to({
                    rotation: 180
                },
                300)) : (egret.Tween.get(this.groupMore).to({
                    scaleX: .1,
                    scaleY: .1
                },
                300).call(function() {
                t.groupMore.visible = !1
            }), e.to({
                    rotation: 0
                },
                300))
        },
        i.InitMorePanel = function() {
            this.txtOilRefining.text = Locales.get("zz_oilRefining"),
                this.txtSupply.text = Locales.get("btn_supply"),
                this.txtScience.text = Locales.get("panel_reward_txt_comment_3"),
                this.txtExploit.text = Locales.get("btn_medal"),
                this.txtFriend.text = Locales.get("btn_friends"),
                this.txtMail.text = Locales.get("ui_main_mail"),
                this.txtRanking.text = Locales.get("panel_question_txt_comment_rank"),
                this.txtHandbook.text = Locales.get("btn_tujian"),
                this.txtVipTitle.text = Locales.get("panel_seven_day_comment_5"),
                this.txtStrategy.text = Locales.get("btn_help"),
                this.txtMilitary.text = Locales.get("zz_military"),
                this.txtSystem.text = Locales.get("ui_main_sys"),
                this.SetImgClickListener(this.imgOilRefineing,
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.OilRefining)
                    }),
                this.SetImgClickListener(this.imgSupply,
                    function() {
                        UserData.getInstance()._level >= 9 ? (WindowManager.getInstance().show(WindowManager.windowType.BuJi), UserData.getInstance().sendDetailMessage()) : Toast.launch("该功能9级开放")
                    }),
                this.SetImgClickListener(this.imgScience,
                    function() {
                        UserData.getInstance()._level >= 14 ? WindowManager.getInstance().show(WindowManager.windowType.KeJi) : Toast.launch("该功能14级开放")
                    }),
                this.SetImgClickListener(this.imgExploit,
                    function() {
                        UserData.getInstance()._level >= 6 ? WindowManager.getInstance().show(WindowManager.windowType.Medal) : Toast.launch("该功能6级开放")
                    }),
                this.SetImgClickListener(this.imgFriend,
                    function() {
                        return UserData.getInstance().getPlayerLevel() < 20 ? void Toast.launch(Locales.get("ui_main_function_scientific", 20)) : (WindowManager.getInstance().showWaiting(), FriendManager.getInstance().isWaiting = !0, FriendManager.getInstance().sendGetFriendMsg(), FriendManager.getInstance().sendGetRecommand(), FriendManager.getInstance().sendGetInvited(), void FriendManager.getInstance().sendGetReceiveEle())
                    }),
                this.SetImgClickListener(this.imgMail,
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.Mail)
                    }),
                this.SetImgClickListener(this.imgHandbook,
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.WarshipHandbook)
                    }),
                this.SetImgClickListener(this.imgVip,
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.Recharge, {
                            type: 1
                        })
                    }),
                this.SetImgClickListener(this.imgStrategy,
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.Strategy)
                    }),
                this.SetImgClickListener(this.imgMilitary,
                    function() {
                        MilitaryManager.GetInstance().OpenMilitaryWindow()
                    }),
                this.SetImgClickListener(this.imgSystem,
                    function() {
                        WindowManager.getInstance().show(WindowManager.windowType.System)
                    })
        },
        i.SetImgClickListener = function(t, e, a) {
            void 0 === a && (a = void 0),
                t.touchEnabled = !0,
                SUI.addClickEffect(t),
                t.addEventListener(egret.TouchEvent.TOUCH_TAP, e, a)
        },
        i.headImgClickHandler = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.RoleInfo)
        },
        i.taskClickHandler = function(t) {
            WindowMission.instance || WindowManager.getInstance().show(WindowManager.windowType.Mission)
        },
        i.exchangeClickHandler = function(t) {
            UserData.getInstance()._level >= 50 ? (this.groupMore.visible && (this.groupMore.visible = !1), this.groupExchange.visible ? this.groupExchange.visible = !1 : (this.groupExchange.scaleX = .1, this.groupExchange.scaleY = .1, this.groupExchange.visible = !0, egret.Tween.get(this.groupExchange, {
                loop: !1
            }).to({
                    scaleX: 1,
                    scaleY: 1
                },
                300))) : WindowManager.getInstance().show(WindowManager.windowType.ExchangeBlueprint)
        },
        i.btnChatClickHandler = function(t) {
            ChatManager.getInstance().showChatWin(0)
        },
        i.imgExchangeHandler = function(t) {
            t.target == this.imgShipExchange ? WindowManager.getInstance().show(WindowManager.windowType.ExchangeBlueprint) : t.target == this.imgCaptainExchange && ConfigData.preLoadDats(["captainChargeCount", "captainChargeData"], [CaptainchargecountParser, CaptainchargedataParser],
                function() {
                    WindowManager.getInstance().show(WindowManager.windowType.ExchangeCaptain)
                })
        },
        i.hideGroupExchange = function() {
            this.groupExchange.visible = !1
        },
        i.updateWorldChat = function(t) {
            void 0 === t && (t = ""),
                this.txtWorldChat.text = t
        },
        i.clear = function() {
            this._tickHandler && (GameTick.removeHandler(this._tickHandler), this._tickHandler = null),
                EventManager.instance.removeEventListener(EventTypes.HOMEUI_REDBALL_STATE_CHANGE, this.redBallUpdate, this),
                e.instance = null
        },
        i.btnRechargeClick = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.Recharge)
        },
        i.btnAwardClick = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.Award)
        },
        i.onClickBtnActivity = function() {
            WindowManager.getInstance().show(WindowManager.windowType.activity)
        },
        i.onClickBtnTimeActivity = function() {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                id: ActivityType.ACTIVITY_TYPE_ONLINE
            })
        },
        i.updataRedPoint = function(t) {
            this.spotShipExchange.visible = t.charge,
                this.spotCaptainExchange.visible = t.captainexchange,
                this.imgFriendBall.visible = t.friendsys,
                this.imgExploitBall.visible = t.medal,
                this.spotBuilding5.visible = t.captainsys,
                this.spotBuilding1.visible = t.ship,
                this.imgSupplyBall.visible = t.supply,
                UserData.getInstance()._level >= 14 ? this.imgScienceBall.visible = t.science : this.imgScienceBall.visible = !1,
                this.spotTask.visible = t.taskreward,
                t.guilddonate || t.guildapply ? this.spotGuild.visible = !0 : this.spotGuild.visible = !1,
                GuildManager.getInstance().sendGuildApplyList(),
                this.spotBuilding4.visible = !1,
                t.captainsys || t.friendsys || t.medal || RedPointManager.getPointShow(null, RedPointType.buyoil) || t.supply || t.science && UserData.getInstance()._level >= 14 ? this.btnMorePoint.visible = !0 : this.btnMorePoint.visible = !1,
                UserData.getInstance()._level >= 50 ? this.btnZhaoMuJiangZhangPoint.visible = t.captainrecru : this.btnZhaoMuJiangZhangPoint.visible = !1,
                this.spotmubiao.visible = !1;
            for (var e = 0; e < t.act_type.length; e++)
                if (19 == t.act_type[e]) {
                    this.spotmubiao.visible = t.act_red[e];
                    break
                }
        },
        i.setOliRedPointState = function() {
            this.imgOilRefiningBall.visible = RedPointManager.getPointShow(null, RedPointType.buyoil),
                this.spotBuilding5.visible || this.imgFriendBall.visible || this.imgExploitBall.visible || RedPointManager.getPointShow(null, RedPointType.buyoil) || this.imgSupplyBall.visible || this.imgScienceBall.visible && UserData.getInstance()._level >= 14 ? this.btnMorePoint.visible = !0 : this.btnMorePoint.visible = !1
        },
        i.setMuBiaoActState = function(t) {
            UserData.getInstance().isShowMuBiaoIcon = t,
                this.iconmubiao.visible = t,
                this.txtmubiao.visible = t
        },
        e
}(eui.Component);
egret.registerClass(HomeUI, "HomeUI");
var topUIMode;
!
function(t) {
    t[t.normal = 0] = "normal",
        t[t.simple = 1] = "simple",
        t[t.simpleLevel = 2] = "simpleLevel",
        t[t["null"] = 3] = "null"
}(topUIMode || (topUIMode = {}));
var MainUI = function(t) {
    function e() {
        t.call(this),
            e.instance = this,
            this.topModePool = [],
            this.topDataPool = [],
            this.addEventListener(egret.Event.ADDED_TO_STAGE, this.init, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.changeTopMode = function(t, e) {
            void 0 === e && (e = []),
                this.topModePool.push(t),
                t == topUIMode.normal ? (this.topUI.visible = !0, this.topUI.showNormal()) : t == topUIMode.simple ? (this.topUI.visible = !0, 0 == e.length && (e = [TypeDefine.RES.Oil, TypeDefine.RES.Gold, TypeDefine.RES.Diamond, TypeDefine.RES.XunBaoLing]), this.topUI.showSimple(e)) : t == topUIMode.simpleLevel ? (this.topUI.visible = !0, 0 == e.length && (e = [TypeDefine.RES.Oil, TypeDefine.RES.Gold, TypeDefine.RES.Diamond]), this.topUI.showSimpleLevel(e)) : this.topUI.visible = !1,
                this.topDataPool.push(e)
        },
        i.setBottomVisible = function(t) {
            this.bottomUI.visible = t
        },
        i.showLastTop = function() {
            this.topModePool.pop(),
                this.topDataPool.pop();
            var t = this.topModePool.pop(),
                e = this.topDataPool.pop();
            this.changeTopMode(t, e)
        },
        i.setSimpleTopInfo = function(t) {
            this.topUI.setSimplePanel(t)
        },
        i.setSimpleLevelTopInfo = function(t, e, a) {
            this.topUI.setSimpleLevelPanel(t, e, a)
        },
        i.init = function() {
            this.topUI = new TopUI,
                this.bottomUI = new BottomUI,
                this.addChild(this.topUI),
                this.addChild(this.bottomUI),
                this.bottomUI.y = this.stage.stageHeight - this.bottomUI.height,
                this.changeTopMode(topUIMode.normal),
                ShipManager.getInstance().updateShipArrangeSpot()
        },
        i.clear = function() {},
        e
}(egret.DisplayObjectContainer);
egret.registerClass(MainUI, "MainUI");
var PlayerGuidePanel = function(t) {
    function e(e) {
        t.call(this),
            this.parames = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/NpcTalkingSkin.exml"
            /*tpa=resource/eui_skins/NpcTalkingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            this.parames && (this.txtChat.textFlow = this.parames.txt),
                e.instance = this,
                this.bg.touchEnabled = !0,
                this.bg.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clearHandler, this),
                this.tickFrame = 0,
                this.tickId = GameTick.registerHandler(function() {
                        t.imgEye.visible = !1,
                            t.tickFrame++,
                            t.tickFrame > 7 && (t.tickFrame = 0, t.imgEye.visible = !0)
                    },
                    200)
        },
        i.clearHandler = function(t) {
            GameTick.removeHandler(this.tickId)
        },
        i.clickHandler = function(t) {
            this.parent && this.parent.removeChild(this),
                e.instance = null,
                101 == GuideManager.step || 107 == GuideManager.step ? GuideManager.clearMask() : GuideManager.nextStep()
        },
        e
}(eui.Component);
egret.registerClass(PlayerGuidePanel, "PlayerGuidePanel");
var TopUI = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.addEventListener(eui.UIEvent.REMOVED_FROM_STAGE, this.clear, this),
            this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.headImgClickHandler, this),
            this.skinName = "resource/eui_skins/TopUISkin.exml"
            /*tpa=resource/eui_skins/TopUISkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.showNormal = function() {
            this.normal.visible = !0,
                this.simple.visible = !1,
                this.simpleLevel.visible = !1
        },
        i.showSimple = function(t) {
            this.normal.visible = !1,
                this.simple.visible = !0,
                this.simpleLevel.visible = !1,
                this.simplePanelResTypes = t;
            for (var e = [], a = 0; a < t.length; a++) e.push({
                resType: t[a],
                num: UserData.getInstance().getRes(t[a])
            });
            this.setSimplePanel(e)
        },
        i.showSimpleLevel = function(t) {
            this.normal.visible = !1,
                this.simple.visible = !1,
                this.simpleLevel.visible = !0,
                this.simpleLevelPanelResTypes = t;
            for (var e = [], a = 0; a < t.length; a++) e.push({
                resType: t[a],
                num: UserData.getInstance().getRes(t[a])
            });
            this.setSimpleLevelPanel(UserData.getInstance().getPlayerLevel(), UserData.getInstance().getExpPercent(), e)
        },
        i.setSimplePanel = function(t) {
            for (var e = 1; 4 >= e; e++) t[e - 1] && (SUI.setTextureAsync(this["simple_resIcon" + e], TypeDefine.getResIcon(t[e - 1].resType)), t[e - 1].resType == TypeDefine.RES.Oil ? this["simple_resNum" + e].text = t[e - 1].num + "/" + UserData.getInstance().getMaxOil() : this["simple_resNum" + e].text = t[e - 1].num)
        },
        i.setSimpleLevelPanel = function(t, e, a) {
            for (var i = 1; 3 >= i; i++) a[i - 1] && (SUI.setTextureAsync(this["simpleLevel_resIcon" + i], TypeDefine.getResIcon(a[i - 1].resType)), a[i - 1].resType == TypeDefine.RES.Oil ? this["simpleLevel_resNum" + i].text = a[i - 1].num + "/" + UserData.getInstance().getMaxOil() : this["simpleLevel_resNum" + i].text = a[i - 1].num);
            this.simpleLevel_level.text = Locales.get("labelLevel", t),
                this.simpleLevel_expBar.value = e
        },
        i.init = function() {
            UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.updateUserInfo, this)
        },
        i.updateUserInfo = function() {
            if (Utils.getImgByUrl(Path.GetHeadPicUrl(UserData.getInstance().getHead(), 1), this.headImg), this.txtLevel.text = UserData.getInstance()._level.toString(), this.txtVip.text = "VIP" + UserData.getInstance()._vip.toString(), UserData.getInstance()._vip > 9) {
                this.imgVip2.visible = !0;
                var t = Math.floor(UserData.getInstance()._vip / 10),
                    e = UserData.getInstance()._vip % 10;
                this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP" + t + "_png"),
                    0 == e ? this.imgVip2.source = RES.getRes("GUI_Homepage_Icon_VIP10_png") : this.imgVip2.source = RES.getRes("GUI_Homepage_Icon_VIP" + e + "_png")
            } else 0 == UserData.getInstance()._vip ? this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP10_png") : this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP" + UserData.getInstance()._vip + "_png"),
                this.imgVip2.visible = !1;
            if (this.txtUserName.text = UserData.getInstance()._userName, this.txtOil.text = UserData.getInstance().getRes(TypeDefine.RES.Oil).toString() + "/" + UserData.getInstance().getMaxOil(), this.txtGold.text = UserData.getInstance().getRes(TypeDefine.RES.Gold).toString(), this.txtDiamond.text = UserData.getInstance().getRes(TypeDefine.RES.Diamond).toString(), this.txtFightPower.text = UserData.getInstance().getFightPower().toString(), this.txtRank.text = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype()).name_l, Utils.getImgByUrl(MilitaryManager.GetInstance().getPicByRankLvl(UserData.getInstance().getMilitaryranktype()), this.imgRankIcon), UserData.getInstance().getCamp() && Utils.getImgByUrl(Path.GetCampPicUrl(UserData.getInstance().getCamp(), 3), this.imgCamp), this.simple.visible)
                for (var a = 1; 4 >= a; a++) this.simplePanelResTypes[a - 1] == TypeDefine.RES.Oil ? this["simple_resNum" + a].text = UserData.getInstance().getRes(this.simplePanelResTypes[a - 1]) + "/" + UserData.getInstance().getMaxOil() : this["simple_resNum" + a].text = UserData.getInstance().getRes(this.simplePanelResTypes[a - 1]);
            else if (this.simpleLevel.visible) {
                this.simpleLevel_level.text = Locales.get("labelLevel", UserData.getInstance().getPlayerLevel()),
                    this.simpleLevel_expBar.value = UserData.getInstance().getExpPercent();
                for (var a = 1; 3 >= a; a++) this.simpleLevelPanelResTypes[a - 1] == TypeDefine.RES.Oil ? this["simpleLevel_resNum" + a].text = UserData.getInstance().getRes(this.simpleLevelPanelResTypes[a - 1]) + "/" + UserData.getInstance().getMaxOil() : this["simpleLevel_resNum" + a].text = UserData.getInstance().getRes(this.simpleLevelPanelResTypes[a - 1])
            }
        },
        i.headImgClickHandler = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.RoleInfo)
        },
        i.clear = function() {
            UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.updateUserInfo, this)
        },
        e
}(eui.Component);
egret.registerClass(TopUI, "TopUI");
var DefenseOilAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/ZB_ShouWeiYouTian_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/ZB_ShouWeiYouTian_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.rewardScroller.viewport = this.rewardList,
                this.btnClose1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.benCancel1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.btnClose1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.benCancel1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose1:
                    this.hide();
                    break;
                case this.btnClose2:
                    this.hide();
                    break;
                case this.benCancel1:
                    this.hide();
                    break;
                case this.btnConfirm1:
                    var e = WindowManager.getInstance().getWindow(WindowManager.windowType.DefenseOil);
                    e && Number(this.editLabel.text) > 0 && (e.isFirst = !0, e.sendGuardStage(Number(this.editLabel.text), !0)),
                        this.hide()
            }
        },
        i.showSaoDangPage = function(t) {
            this.viewReward.visible = !1,
                this.group2.visible = !0,
                this.init(),
                this.editLabel.text = t.toString(),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showViewRewardPage = function(t) {
            var e = this;
            this.viewReward.visible = !0,
                this.group2.visible = !1,
                this.init(),
                this.txtBattleRecord.text = "目前最高波数：" + t + "波",
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting();
                    var t = e.getRewardPageList();
                    e.rewardList.dataProvider = new eui.ArrayCollection(t),
                        e.rewardList.itemRenderer = defenceOilRewardFactoryListItem
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("defenceStageRewardData"),
                e.push("giftData"),
                e.push("virtualData"),
                ConfigData.preLoadDats(e, [DefencestagerewarddataParser, GiftdataParser, VirtualdataParser],
                    function() {
                        t()
                    })
        },
        i.getRewardPageList = function() {
            for (var t = [], e = DefencestagerewarddataParser.GetInstance().getDataArr(), a = 0; a < e.length; a++) {
                var i = {};
                i.id = e[a].id,
                    i.gold = e[a].gold,
                    i.drop = e[a].drop,
                    i.reward = [];
                for (var n = GiftdataParser.GetInstance().getDataArr(), s = 0; s < n.length; s++) i.drop == n[s].id && i.reward.push({
                    item: n[s].item,
                    type: n[s].type,
                    count: n[s].count
                });
                null != i.reward && i.reward.length > 0 && t.push(i)
            }
            return t
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        e
}(eui.Component);
egret.registerClass(DefenseOilAlert, "DefenseOilAlert");
var defenceOilRewardFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/ZB_ShouWeiYouTian_1_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_ShouWeiYouTian_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            if (t.prototype.dataChanged.call(this), this.data)
                if (this.titleLabel.text = "守卫油田 第" + this.data.id + "波", this.goldLabel.text = this.data.gold + "", -1 == this.data.drop) this.item1.visible = !1,
                    this.item2.visible = !1,
                    this.item3.visible = !1;
                else {
                    this.item1.visible = !1,
                        this.item2.visible = !1,
                        this.item3.visible = !1;
                    var e = this.data.reward;
                    if (e)
                        for (var a = 0; a < e.length; a++)
                            if (1 == e[a].type) {
                                var i = ItemParser.GetInstance().getItemById(e[a].item);
                                0 == a ? (this.item1.visible = !0, this.item1.txtNum.text = e[a].count + "", this.item1.txtName.text = i.name_l, this.item1.txtName.textColor = QualitySystem.getColorByQuality(i.quality), SUI.setTextureAsync(this.item1.imgIcon, Path.itemIconURL + i.icon), SUI.setTextureAsync(this.item1.imgBg, QualitySystem.getItemSmallBack(i.quality))) : 1 == a ? (this.item2.visible = !0, this.item2.txtNum.text = e[a].count + "", this.item2.txtName.text = i.name_l, this.item2.txtName.textColor = QualitySystem.getColorByQuality(i.quality), SUI.setTextureAsync(this.item2.imgIcon, Path.itemIconURL + i.icon), SUI.setTextureAsync(this.item1.imgBg, QualitySystem.getItemSmallBack(i.quality))) : 2 == a && (this.item3.visible = !0, this.item3.txtNum.text = e[a].count + "", this.item3.txtName.text = i.name_l, this.item3.txtName.textColor = QualitySystem.getColorByQuality(i.quality), SUI.setTextureAsync(this.item3.imgIcon, Path.itemIconURL + i.icon), SUI.setTextureAsync(this.item1.imgBg, QualitySystem.getItemSmallBack(i.quality)))
                            } else if (5 == e[a].type) 0 == a ? (this.item1.visible = !0, this.item1.txtNum.text = e[a].count + "", this.item1.txtName.text = "科技点", this.item1.txtName.textColor = QualitySystem.getColorByQuality(1), SUI.setTextureAsync(this.item1.imgIcon, Path.itemIconURL + "science.png"), SUI.setTextureAsync(this.item1.imgBg, QualitySystem.getItemSmallBack(1))) : 1 == a ? (this.item2.visible = !0, this.item2.txtNum.text = e[a].count + "", this.item2.txtName.text = "科技点", this.item2.txtName.textColor = QualitySystem.getColorByQuality(1), SUI.setTextureAsync(this.item2.imgIcon, Path.itemIconURL + "science.png"), SUI.setTextureAsync(this.item2.imgBg, QualitySystem.getItemSmallBack(1))) : 2 == a && (this.item3.visible = !0, this.item3.txtNum.text = e[a].count + "", this.item3.txtName.text = "科技点", this.item3.txtName.textColor = QualitySystem.getColorByQuality(1), SUI.setTextureAsync(this.item3.imgIcon, Path.itemIconURL + "science.png"), SUI.setTextureAsync(this.item3.imgBg, QualitySystem.getItemSmallBack(1)));
                    else if (8 == e[a].type) {
                        var n = VirtualdataParser.GetInstance().getItemById(e[a].item);
                        0 == a ? (this.item1.visible = !0, this.item1.txtNum.text = n.value + "", this.item1.txtName.text = n.name_l, this.item1.txtName.textColor = QualitySystem.getColorByQuality(n.quality), SUI.setTextureAsync(this.item1.imgIcon, Path.itemIconURL + n.icon), SUI.setTextureAsync(this.item1.imgBg, QualitySystem.getItemSmallBack(n.quality))) : 1 == a ? (this.item2.visible = !0, this.item2.txtNum.text = n.value + "", this.item2.txtName.text = n.name_l, this.item2.txtName.textColor = QualitySystem.getColorByQuality(n.quality), SUI.setTextureAsync(this.item2.imgIcon, Path.itemIconURL + n.icon), SUI.setTextureAsync(this.item2.imgBg, QualitySystem.getItemSmallBack(n.quality))) : 2 == a && (this.item3.visible = !0, this.item3.txtNum.text = n.value + "", this.item3.txtName.text = n.name_l, this.item3.txtName.textColor = QualitySystem.getColorByQuality(n.quality), SUI.setTextureAsync(this.item3.imgIcon, Path.itemIconURL + n.icon), SUI.setTextureAsync(this.item3.imgBg, QualitySystem.getItemSmallBack(n.quality)))
                    }
                }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(defenceOilRewardFactoryListItem, "defenceOilRewardFactoryListItem");
var GameAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this, !1, 1),
            this.skinName = "resource/eui_skins/gameAlertSkin.exml"
            /*tpa=resource/eui_skins/gameAlertSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeClick, this),
                this.okBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.cancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.show = function(t, e, a, i, n, s) {
            void 0 === t && (t = ""),
                void 0 === e && (e = ""),
                void 0 === a && (a = null),
                void 0 === i && (i = null),
                "" != t ? this.titleTxt.text = t : this.titleTxt.text = "提示",
                this.txtContent.text = e,
                n && (this.okBtn.labelDisplay.text = n),
                s && (this.cancelBtn.labelDisplay.text = s),
                this.okFun = a,
                this.cancelFun = i,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showPaySuccess = function(t, e, a, i, n, s) {
            void 0 === t && (t = ""),
                void 0 === e && (e = ""),
                void 0 === a && (a = null),
                void 0 === i && (i = null),
                this.titleTxt.text = "充值成功",
                this.txtContent.text = "充值成功",
                n && (this.okBtn.labelDisplay.text = n),
                s && (this.cancelBtn.labelDisplay.text = s),
                this.okFun = a,
                this.cancelFun = i,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showByHtml = function(t, e, a, i, n, s) {
            void 0 === t && (t = ""),
                void 0 === e && (e = ""),
                void 0 === a && (a = null),
                void 0 === i && (i = null),
                "" != t ? this.titleTxt.text = t : this.titleTxt.text = "提示",
                n && (this.okBtn.labelDisplay.text = n),
                s && (this.cancelBtn.labelDisplay.text = s),
                this.txtContent.textFlow = (new egret.HtmlTextParser).parser(e),
                this.okFun = a,
                this.cancelFun = i,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showOnlineTime = function(t, e, a, i, n, s, r, o) {
            void 0 === t && (t = ""),
                void 0 === e && (e = ""),
                void 0 === a && (a = null),
                void 0 === i && (i = null),
                void 0 === r && (r = !0),
                void 0 === o && (o = !0),
                "" != t ? this.titleTxt.text = t : this.titleTxt.text = "提示",
                n && (this.okBtn.labelDisplay.text = n),
                s && (this.cancelBtn.labelDisplay.text = s),
                this.txtContent.textFlow = (new egret.HtmlTextParser).parser(e),
                this.okFun = a,
                this.cancelFun = i,
                this.okBtn.visible = r,
                this.cancelBtn.visible = o,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showByLocalesHtml = function(t, e, a, i, n, s) {
            void 0 === t && (t = ""),
                void 0 === e && (e = ""),
                void 0 === a && (a = null),
                void 0 === i && (i = null),
                "" != t ? this.titleTxt.text = t : this.titleTxt.text = "提示",
                n && (this.okBtn.labelDisplay.text = n),
                s && (this.cancelBtn.labelDisplay.text = s),
                this.txtContent.textFlow = Utils.textFlowByStr(e),
                this.okFun = a,
                this.cancelFun = i,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.okBtn.visible = !0,
                this.cancelBtn.visible = !0,
                this.titleTxt.text = "",
                this.txtContent.text = "",
                this.okFun = null,
                this.cancelFun = null,
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.btnClickHandler = function(t) {
            t.target == this.okBtn ? this.okFun ? this.okFun() : this.hide() : t.target == this.cancelBtn && (this.cancelFun ? this.cancelFun() : this.hide())
        },
        i.closeClick = function(t) {
            this.hide()
        },
        e
}(eui.Component);
egret.registerClass(GameAlert, "GameAlert");
var GuildAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.canInputCount = 0,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/JunTuan_TanKuang_Skin.exml"
            /*tpa=resource/eui_skins/JunTuan_TanKuang_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCancel.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.checkbox1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.checkbox2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.editLabel2.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this),
                this.editLabel.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.editLabel2.text = "",
                this.editLabel.text = "",
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCancel.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.checkbox1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.checkbox2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.editLabel2.removeEventListener(egret.Event.CHANGE, this.editLabelHandler, this),
                this.editLabel.removeEventListener(egret.Event.CHANGE, this.editLabelHandler, this)
        },
        i.editLabelHandler = function(t) {
            var e;
            if (t.currentTarget == this.editLabel2) {
                e = Utils.filterStr(this.editLabel2.text);
                var a = e[0];
                a.length > 16 ? (Toast.launch("最多只能输入16个字符"), this.editLabel2.text = a.substring(0, 16)) : this.editLabel2.text = a
            } else if (t.currentTarget == this.editLabel) {
                e = Utils.filterStr(this.editLabel.text);
                var a = e[0];
                a.length > this.canInputCount ? (Toast.launch("最多只能输入" + this.canInputCount + "个字符"), this.editLabel.text = a.substring(0, this.canInputCount)) : this.editLabel.text = a
            }
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    this.hide();
                    break;
                case this.btnCancel:
                    this.hide();
                    break;
                case this.btnConfirm:
                    if (2 == this.currPage) this.checkbox1.selected ? GuildManager.getInstance().sendSetVerifyOptions(0) : this.checkbox2.selected && GuildManager.getInstance().sendSetVerifyOptions(1),
                        this.hide();
                    else if (0 == this.currPage)
                        if (null == this.editLabel.text || "" == this.editLabel.text) Toast.launch("内容不能为空");
                        else if (0 == this.sign) {
                        var e = Transport.getPkg(ProtocolMgr.ID_DceSendMail);
                        e.uid = this.data.uid,
                            e.text = this.editLabel.text,
                            Transport.instance.send(e),
                            this.hide()
                    } else 1 == this.sign ? (GuildManager.getInstance().sendModifyNotify(this.editLabel.text), this.hide()) : 2 == this.sign && (GuildManager.getInstance().sendModifyDeclaration(this.editLabel.text), this.hide());
                    else 3 == this.currPage && (null == this.editLabel2.text || "" == this.editLabel2.text ? Toast.launch("内容不能为空") : (GuildManager.getInstance().sendRenameGuild(this.editLabel2.text), this.hide()));
                    break;
                case this.checkbox1:
                    this.checkbox1.selected ? this.checkbox2.selected = !1 : this.checkbox2.selected = !0;
                    break;
                case this.checkbox2:
                    this.checkbox2.selected ? this.checkbox1.selected = !1 : this.checkbox1.selected = !0
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("guildContribute"),
                ConfigData.preLoadDats(e, [GuildcontributeParser],
                    function() {
                        t()
                    })
        },
        i.show = function() {
            this.init(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showGuildApprovalSet = function() {
            this.init(),
                this.currPage = 2,
                this.showPage(2),
                0 == GuildManager.getInstance().verifyoption ? (this.checkbox1.selected = !0, this.checkbox2.selected = !1) : 1 == GuildManager.getInstance().verifyoption && (this.checkbox1.selected = !1, this.checkbox2.selected = !0),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showChangeLabel = function(t, e, a, i, n) {
            void 0 === i && (i = 0),
                void 0 === n && (n = 60),
                this.init(),
                this.currPage = 0,
                this.showPage(0),
                this.txtTitle.text = t,
                this.editLabel.prompt = e,
                this.data = a,
                this.sign = i,
                this.canInputCount = n,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showChangeLabel2 = function(t, e) {
            void 0 === t && (t = "军团更名"),
                void 0 === e && (e = "请输入新的军团名称"),
                this.init(),
                this.currPage = 3,
                this.showPage(3),
                this.txtTitle.text = t,
                this.editLabel2.prompt = e,
                SUI.setTextureAsync(this.iconGuildChangeName, "resource/assets/Icon/item_s/icon_s_JTGMK.png"
                    /*tpa=resource/assets/Icon/item_s/icon_s_JTGMK.png*/
                );
            var a = ItemsManager.getInstance().getItemById(1315);
            a && a.count > 0 ? this.txt11.textFlow = (new egret.HtmlTextParser).parser("<font>消耗一张</font><font color='#ff8800'>军团更名卡</font><font>或</font><font color='#ff8800'>500</font><font>    可以更改军团名称\n优先使用</font><font color='#ff8800'>军团更名卡</font><font>,当前拥有:    </font><font color='#00ff00'>" + a.count + "</font>") : this.txt11.textFlow = (new egret.HtmlTextParser).parser("<font>消耗一张</font><font color='#ff8800'>军团更名卡</font><font>或</font><font color='#ff8800'>500</font><font>    可以更改军团名称\n优先使用</font><font color='#ff8800'>军团更名卡</font><font>,当前拥有:    </font><font color='#ff0000'>0</font>"),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.showPage = function(t) {
            for (var e = [this.ChangeLabel, this.Quit_Upgrade, this.SetExamine, this.ChangeLabel2], a = 0; a < e.length; a++) e[a].visible = !1;
            e[t].visible = !0
        },
        e
}(eui.Component);
egret.registerClass(GuildAlert, "GuildAlert");
var GuildCreateAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.guildBadge = 1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/JunTuan_CreateSkin.exml"
            /*tpa=resource/eui_skins/JunTuan_CreateSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.guildBadge = 1,
                this.badgeScroller.viewport = this.badgeList,
                SUI.setTextureAsync(this.imgBadge, Path.guildUrl + "badge_" + this.guildBadge + ".png"),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnChangeBadge.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.editGuildName.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SELECT_GUILD_BADGE_COMPLETE, this.onSelectBadgeComplete, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.CHANGE_GUILD_BADGE_COMPLETE, this.onChangeBadgeComplete, this)
        },
        i.clean = function() {
            this.data = null,
                this.editGuildName.text = "",
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnChangeBadge.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.editGuildName.removeEventListener(egret.Event.CHANGE, this.editLabelHandler, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.SELECT_GUILD_BADGE_COMPLETE, this.onSelectBadgeComplete, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.CHANGE_GUILD_BADGE_COMPLETE, this.onChangeBadgeComplete, this)
        },
        i.editLabelHandler = function(t) {
            var e = Utils.filterStr(this.editGuildName.text),
                a = e[0];
            a.length > 10 ? (Toast.launch("最多只能输入10个字符"), this.editGuildName.text = a.substring(0, 10)) : this.editGuildName.text = a
        },
        i.onSelectBadgeComplete = function(t) {
            this.BASE.visible = !0,
                this.btnClose.visible = !0,
                this.badgeScroller.visible = !1,
                this.btnBack.visible = !1,
                this.txtTitle.text = "创建军团",
                this.guildBadge = t.parames,
                SUI.setTextureAsync(this.imgBadge, Path.guildUrl + "badge_" + this.guildBadge + ".png")
        },
        i.onChangeBadgeComplete = function(t) {
            GameAlert.getInstance().hide(),
                this.hide(),
                GuildManager.getInstance().sendGuildSetMedal(t.parames),
                GuildManager.getInstance().isChangeGuildBadge = !1
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    GuildManager.getInstance().isChangeGuildBadge = !1,
                        this.hide();
                    break;
                case this.btnChangeBadge:
                    this.btnClose.visible = !1,
                        this.BASE.visible = !1,
                        this.badgeScroller.visible = !0,
                        this.btnBack.visible = !0,
                        this.txtTitle.text = "选择军团徽章",
                        this.setSelectBadgeData();
                    break;
                case this.btnConfirm:
                    null == this.editGuildName.text || "" == this.editGuildName.text ? Toast.launch("输入内容不符合要求，请重新输入") : UserData.getInstance().getRes(TypeDefine.RES.Diamond) < 100 ? (Toast.launch("钻石不足"), this.hide(), WindowManager.getInstance().show(WindowManager.windowType.Recharge)) : (GuildManager.getInstance().sendCreateGuild(this.editGuildName.text, this.guildBadge), this.hide());
                    break;
                case this.btnBack:
                    this.BASE.visible = !0,
                        this.btnClose.visible = !0,
                        this.badgeScroller.visible = !1,
                        this.btnBack.visible = !1,
                        this.txtTitle.text = "创建军团"
            }
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("defenceStageRewardData"),
                e.push("giftData"),
                e.push("virtualData"),
                ConfigData.preLoadDats(e, [DefencestagerewarddataParser, GiftdataParser, VirtualdataParser],
                    function() {
                        t()
                    })
        },
        i.showCreateGuildPage = function() {
            this.BASE.visible = !0,
                this.badgeScroller.visible = !1,
                this.btnBack.visible = !1,
                this.init(),
                this.txtTitle.text = "创建军团",
                UserData.getInstance().getPlayerLevel() >= 18 ? (this.txtForbiddenDesc.visible = !1, this.CostDesc.visible = !0, this.btnConfirm.enabled = !0) : (this.txtForbiddenDesc.visible = !0, this.CostDesc.visible = !1, this.btnConfirm.enabled = !1),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showSelectBadgePage = function() {
            GuildManager.getInstance().isChangeGuildBadge = !0,
                this.BASE.visible = !1,
                this.badgeScroller.visible = !0,
                this.btnBack.visible = !0,
                this.init(),
                this.setSelectBadgeData(),
                this.txtTitle.text = "选择军团徽章",
                this.btnClose.visible = !0,
                this.btnBack.visible = !1,
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.setSelectBadgeData = function() {
            var t = this.getBadgePageList();
            this.badgeList.dataProvider = new eui.ArrayCollection(t),
                this.badgeList.itemRenderer = badgeFactoryListItem
        },
        i.getBadgePageList = function() {
            for (var t = [], e = 1; 5 > e; e++) {
                for (var a = [], i = 1; 20 >= i; i++) 5 * e >= i && i > 5 * (e - 1) && a.push(i);
                var n = {
                    item: a
                };
                t.push(n)
            }
            return t
        },
        e
}(eui.Component);
egret.registerClass(GuildCreateAlert, "GuildCreateAlert");
var badgeFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_BadgeList_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_BadgeList_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (SUI.addClickEffect(this.imgBadge1), SUI.addClickEffect(this.imgBadge2), SUI.addClickEffect(this.imgBadge3), SUI.addClickEffect(this.imgBadge4), SUI.addClickEffect(this.imgBadge5), SUI.setTextureAsync(this.imgBadge1, Path.guildUrl + "badge_" + this.data.item[0] + ".png"), SUI.setTextureAsync(this.imgBadge2, Path.guildUrl + "badge_" + this.data.item[1] + ".png"), SUI.setTextureAsync(this.imgBadge3, Path.guildUrl + "badge_" + this.data.item[2] + ".png"), SUI.setTextureAsync(this.imgBadge4, Path.guildUrl + "badge_" + this.data.item[3] + ".png"), SUI.setTextureAsync(this.imgBadge5, Path.guildUrl + "badge_" + this.data.item[4] + ".png"), this.imgBadge1.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.imgBadge1.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().isChangeGuildBadge ? GameAlert.getInstance().show("更换徽章", "修改军团徽章消耗100钻石,您是否要修改军团徽章?",
                            function() {
                                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CHANGE_GUILD_BADGE_COMPLETE, e.data.item[0]))
                            }) : GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SELECT_GUILD_BADGE_COMPLETE, e.data.item[0]))
                    },
                    this), this.imgBadge2.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.imgBadge2.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().isChangeGuildBadge ? GameAlert.getInstance().show("更换徽章", "修改军团徽章消耗100钻石,您是否要修改军团徽章?",
                            function() {
                                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CHANGE_GUILD_BADGE_COMPLETE, e.data.item[1]))
                            }) : GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SELECT_GUILD_BADGE_COMPLETE, e.data.item[1]))
                    },
                    this), this.imgBadge3.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.imgBadge3.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().isChangeGuildBadge ? GameAlert.getInstance().show("更换徽章", "修改军团徽章消耗100钻石,您是否要修改军团徽章?",
                            function() {
                                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CHANGE_GUILD_BADGE_COMPLETE, e.data.item[2]))
                            }) : GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SELECT_GUILD_BADGE_COMPLETE, e.data.item[2]))
                    },
                    this), this.imgBadge4.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.imgBadge4.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().isChangeGuildBadge ? GameAlert.getInstance().show("更换徽章", "修改军团徽章消耗100钻石,您是否要修改军团徽章?",
                            function() {
                                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CHANGE_GUILD_BADGE_COMPLETE, e.data.item[3]))
                            }) : GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SELECT_GUILD_BADGE_COMPLETE, e.data.item[3]))
                    },
                    this), this.imgBadge5.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.imgBadge5.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().isChangeGuildBadge ? GameAlert.getInstance().show("更换徽章", "修改军团徽章消耗100钻石,您是否要修改军团徽章?",
                            function() {
                                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.CHANGE_GUILD_BADGE_COMPLETE, e.data.item[4]))
                            }) : GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.SELECT_GUILD_BADGE_COMPLETE, e.data.item[4]))
                    },
                    this))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(badgeFactoryListItem, "badgeFactoryListItem");
var GuildMemberAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/JunTuan_MemberSkin.exml"
            /*tpa=resource/eui_skins/JunTuan_MemberSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnSignOut.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCallBack.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAppoint.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRemove.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnOperate.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnView.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnTransfer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRelieve.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnSignOut.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCallBack.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAppoint.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRemove.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnOperate.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnView.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnTransfer.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRelieve.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.btnClickHandler = function(t) {
            var e = this;
            switch (t.currentTarget) {
                case this.btnClose:
                    this.hide();
                    break;
                case this.btnCallBack:
                    this.hide();
                    break;
                case this.btnSignOut:
                    GameAlert.getInstance().show("退出军团", "您是否要退出军团?",
                        function() {
                            GuildManager.getInstance().sendGuildQuit(),
                                GameAlert.getInstance().hide(),
                                e.hide()
                        });
                    break;
                case this.btnAppoint:
                    GuildManager.getInstance().sendGuildSetDeputy(this.data.uid),
                        this.hide();
                    break;
                case this.btnRemove:
                    GameAlert.getInstance().show("踢出军团", "您是否要踢出成员" + this.data.name + "?",
                        function() {
                            GuildManager.getInstance().sendGuildExpel(e.data.uid),
                                GameAlert.getInstance().hide(),
                                e.hide()
                        });
                    break;
                case this.btnOperate:
                    this.btnGroup3.visible = !0;
                    break;
                case this.btnView:
                    var a = Transport.getPkg(ProtocolMgr.ID_DceScoutSoldier);
                    a.uid = this.data.uid,
                        this.hide(),
                        WindowManager.getInstance().hide(WindowManager.windowType.Guild),
                        MainUI.instance.setBottomVisible(!0),
                        Transport.instance.send(a);
                    break;
                case this.btnTransfer:
                    GameAlert.getInstance().show("转让军团长", "您是否要将军团长职务转让给" + this.data.name + "?",
                        function() {
                            GuildManager.getInstance().sendGuildDemise(e.data.uid),
                                GameAlert.getInstance().hide(),
                                e.hide()
                        });
                    break;
                case this.btnRelieve:
                    GameAlert.getInstance().show("解除职务", "您是否要解除" + this.data.name + "职务?",
                        function() {
                            GuildManager.getInstance().sendGuildFireDeputy(e.data.uid),
                                GameAlert.getInstance().hide(),
                                e.hide()
                        });
                    break;
                case this.btnClose1:
                    this.btnGroup3.visible = !1;
                    break;
                case this.btn1:
                    if (this.btnGroup3.visible = !1, UserData.getInstance().getPlayerLevel() < 20) Toast.launch("该功能20级开启");
                    else {
                        var i = this.data.uid,
                            n = this.data.name;
                        FriendManager.getInstance().ReqInivitFriend(i, n, !0,
                            function() {
                                e.hide()
                            }.bind(this))
                    }
                    break;
                case this.btn2:
                    GuildAlert.getInstance().showChangeLabel("对 " + this.data.name + " 留言", "可以输入60字", this.data),
                        this.btnGroup3.visible = !1;
                    break;
                case this.btn3:
                    var a = Transport.getPkg(ProtocolMgr.ID_DceBlackListOpt);
                    a.uid = this.data.uid,
                        this.data.isInBlackList ? GameAlert.getInstance().show("提示", "解除屏蔽后可收到【" + this.data.name + "】的聊天、私聊信息以及留言,确认将【" + this.data.name + "】移除屏蔽列表?",
                            function() {
                                a.type = 1,
                                    Transport.instance.send(a),
                                    GameAlert.getInstance().hide(),
                                    e.hide()
                            }) : GameAlert.getInstance().show("提示", "确认将【" + this.data.name + "】加入屏蔽列表?屏蔽后无法收到【" + this.data.name + "】聊天、私聊信息以及留言",
                            function() {
                                a.type = 0,
                                    Transport.instance.send(a),
                                    GameAlert.getInstance().hide(),
                                    e.hide()
                            })
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("defenceStageRewardData"),
                ConfigData.preLoadDats(e, [DefencestagerewarddataParser],
                    function() {
                        t()
                    })
        },
        i.show = function(t) {
            this.data = t,
                SUI.setTextureAsync(this.imgHead, Path.GetHeadPicUrl(this.data.face, 0)),
                SUI.setTextureAsync(this.imgRank, MilitaryManager.GetInstance().getPicByRankLvl(this.data.militaryranktype)),
                this.txtName.text = this.data.name,
                this.txtLevel.text = this.data.level,
                this.txtBattlePoint.text = this.data.power,
                this.txtTotleRes2.text = this.data.totalcontribute,
                this.txtRes2.text = this.data.contribute,
                this.txtRank.text = MilitaryrankParser.GetInstance().getItemByField("id", this.data.militaryranktype).name_l,
                this.data.isInBlackList ? this.btn3.label = "解除屏蔽" : this.btn3.label = "屏蔽",
                this.data.uid == UserData.getInstance().uid ? (this.btnGroup1.visible = !1, this.btnGroup2.visible = !0, this.btnGroup3.visible = !1, 0 == this.data.pos ? this.btnSignOut.enabled = !1 : this.btnSignOut.enabled = !0) : (this.btnGroup1.visible = !0, this.btnGroup2.visible = !1, this.btnGroup3.visible = !1, 0 == this.data.pos ? (this.btnRemove.enabled = !1, this.btnAppoint.enabled = !1, this.btnGroup11.visible = !0, this.btnGroup22.visible = !1) : 1 == this.data.pos ? 0 == GuildManager.getInstance().pos ? (this.btnGroup11.visible = !1, this.btnGroup22.visible = !0) : (this.btnGroup11.visible = !0, this.btnGroup22.visible = !1, this.btnRemove.enabled = !1, this.btnAppoint.enabled = !1) : 2 == this.data.pos && (2 == GuildManager.getInstance().pos ? (this.btnGroup11.visible = !0, this.btnGroup22.visible = !1, this.btnRemove.enabled = !1, this.btnAppoint.enabled = !1) : 1 == GuildManager.getInstance().pos ? (this.btnGroup11.visible = !0, this.btnGroup22.visible = !1, this.btnRemove.enabled = !0, this.btnAppoint.enabled = !1) : 0 == GuildManager.getInstance().pos && (this.btnGroup11.visible = !0, this.btnGroup22.visible = !1, this.btnRemove.enabled = !0, this.btnAppoint.enabled = !0))),
                this.init(),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        e
}(eui.Component);
egret.registerClass(GuildMemberAlert, "GuildMemberAlert");
var GuildVerifyAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/JunTuan_VerifySkin.exml"
            /*tpa=resource/eui_skins/JunTuan_VerifySkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.scroller.viewport = this.list,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnSet.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRefuseAll.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnSet.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRefuseAll.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    this.hide();
                    break;
                case this.btnSet:
                    GuildAlert.getInstance().showGuildApprovalSet();
                    break;
                case this.btnRefuseAll:
                    GuildManager.getInstance().sendGuildApproval("", 2)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("defenceStageRewardData"),
                ConfigData.preLoadDats(e, [DefencestagerewarddataParser],
                    function() {
                        t()
                    })
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.show = function() {
            this.init(),
                0 == GuildManager.getInstance().pos ? this.btnSet.enabled = !0 : this.btnSet.enabled = !1,
                GameLayer.getInstance().windowLayer.addChild(this),
                GuildManager.getInstance().sendGuildApplyList()
        },
        i.setListData = function() {
            var t = this.getList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = verifyFactoryListItem
        },
        i.getList = function() {
            for (var t = [], e = GuildManager.getInstance().applylist, a = 0; a < e.length; a++) {
                var i = {};
                i.uid = e[a].uid,
                    i.name = e[a].name,
                    i.face = e[a].face,
                    i.power = e[a].power,
                    i.level = e[a].level,
                    i.levelTxt = "Lv " + e[a].level,
                    i.militaryrank = e[a].militaryrank,
                    t.push(i)
            }
            return t
        },
        e
}(eui.Component);
egret.registerClass(GuildVerifyAlert, "GuildVerifyAlert");
var verifyFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_8_VerifyBar_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_8_VerifyBar_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.btnAgree.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnAgree.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().sendGuildApproval(e.data.uid, 0)
                    },
                    this), this.btnRefuse.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnRefuse.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().sendGuildApproval(e.data.uid, 1)
                    },
                    this), SUI.setTextureAsync(this.imgHead, Path.GetHeadPicUrl(this.data.face, 1)))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(verifyFactoryListItem, "verifyFactoryListItem");
var LoginAlert = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/Test_LoginSkin.exml"
            /*tpa=resource/eui_skins/Test_LoginSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.btnStart.addEventListener(egret.TouchEvent.TOUCH_TAP, this.startGame, this),
                GameLayer.getInstance().uiLayer.addChild(this),
                this.editLable.text = "zzz"
        },
        i.startGame = function(t) {
            0 != this.editLable.text.length && (GameLayer.getInstance().uiLayer.removeChild(this), Transport.instance.loginConnect(this.editLable.text))
        },
        e
}(eui.Component);
egret.registerClass(LoginAlert, "LoginAlert");
var MakeShipAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.tmpQuality = 0,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/MakeShipSkin.exml"
            /*tpa=resource/eui_skins/MakeShipSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            (6 == GuideManager.step || 19 == GuideManager.step || 22 == GuideManager.step) && (GuideManager.clearMask(), 19 == GuideManager.step ? (GuideManager.createMaskTarget(570, 30, 80, 30, 90, 110, 8), GuideManager.createParticleRec(570, 0, 75, 60)) : (GuideManager.createMaskTarget(200, 700, 210, 70, 90, 120, -10), GuideManager.createParticleRec(215, 665, 210, 65))),
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            19 == GuideManager.step ? this.shipGroup.visible = !1 : this.shipGroup.visible = !0,
                this.btnBack1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRandom.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.REFRESH_MAKE_SHIP_ALERT_COUNT, this.onChangeBadgeComplete, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.REFRESH_SPY_ALERT_COUNT, this.onChangeSypBadgeComplete, this),
                SUI.setTextureAsync(this.bg, Path.backGroundImageUrl + "Bg_lottery.jpg")
        },
        i.clean = function() {
            this.huode && (Utils.removeNode(this.huode.display), dragonBones.WorldClock.clock.remove(this.huode), this.huode = void 0),
                this.huodeback && (Utils.removeNode(this.huodeback.display), dragonBones.WorldClock.clock.remove(this.huodeback), this.huodeback = void 0),
                GuideManager.clearMask(),
                this.data = null,
                this.pkg = null,
                this.btnBack1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnRandom.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnConfirm.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBack0.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAgain0.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.REFRESH_MAKE_SHIP_ALERT_COUNT, this.onChangeBadgeComplete, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.REFRESH_SPY_ALERT_COUNT, this.onChangeSypBadgeComplete, this)
        },
        i.onChangeBadgeComplete = function(t) {
            this.refreshTenCaptainCount(),
                this.refreshOneCaptainCount()
        },
        i.onChangeSypBadgeComplete = function(t) {
            this.refreshTenSpyCount(),
                this.refreshOneSpyCount()
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnBack1:
                    this.hide();
                    break;
                case this.btnAgain1:
                    ShopManager.getInstance().sendSpy(Number(this.data.id), 3, !0, this.data);
                    break;
                case this.btnBack:
                    this.hide(),
                        19 == GuideManager.step && GuideManager.nextStep();
                    break;
                case this.btnAgain:
                    this.huode && (Utils.removeNode(this.huode.display), dragonBones.WorldClock.clock.remove(this.huode), this.huode = void 0),
                        this.huodeback && (Utils.removeNode(this.huodeback.display), dragonBones.WorldClock.clock.remove(this.huodeback), this.huodeback = void 0),
                        ShopManager.getInstance().sendSpy(Number(this.data.id), 3, !1, this.data);
                    break;
                case this.btnRandom:
                    var e = PaperdataParser.GetInstance().getItemById(this.data.id),
                        a = ShipdataParser.GetInstance().getItemById(e.shipId);
                    new NameRandomTool(1, this.editLabelShipName.text, this.editLabelShipName, -1, a);
                    break;
                case this.btnConfirm:
                    RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceCreateShip, {
                            shipid: +this.data.shipid,
                            name: this.editLabelShipName.text
                        }, !0),
                        this.hide(),
                        (6 == GuideManager.step || 22 == GuideManager.step || 68 == GuideManager.step) && GuideManager.nextStep();
                    break;
                case this.btnBack2:
                    this.hide();
                    break;
                case this.btnAgain2:
                    ShopManager.getInstance().sendRecruitCaptain(this.data.id, 1, this.data);
                    break;
                case this.btnBack0:
                    this.hide();
                    break;
                case this.btnAgain0:
                    ShopManager.getInstance().sendRecruitCaptain(this.data.id, 2, this.data)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("paperData"),
                e.push("shipData"),
                e.push("shipModelData"),
                e.push("captainData"),
                e.push("captainPieceData"),
                e.push("MilitaryRank"),
                ConfigData.preLoadDats(e, [PaperdataParser, ShipdataParser, ShipmodeldataParser, CaptaindataParser, CaptainpiecedataParser, MilitaryrankParser],
                    function() {
                        t()
                    })
        },
        i.show = function() {
            this.init(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showMakeShip = function(t) {
            var e = this;
            if (this.init(), this.currPage = 0, this.showPage(0), this.data = t, WindowManager.getInstance().showWaiting(), this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting();
                    var a = PaperdataParser.GetInstance().getItemById(t.id),
                        i = ShipdataParser.GetInstance().getItemById(a.shipId),
                        n = ShipmodeldataParser.GetInstance().getItemById(i.modelId);
                    e.txtShipType.text = a.name_l,
                        e.txtShipType.textColor = QualitySystem.getColorByQuality(a.quality),
                        SUI.setTextureAsync(e.imgShip, Path.shipURL + "y_" + n.url),
                        SUI.setTextureAsync(e.imgBg, Path.itemBackURL + "itemBack_ship_big_" + a.quality + ".png"),
                        SUI.setTextureAsync(e.imgType, Path.shipTypeIconURL + "shipType" + a.shipType + ".png"),
                        SUI.setTextureAsync(e.imgCountry, Path.countryURL + "country_" + i.country + ".jpg"),
                        SUI.setTextureAsync(e.imgItemIcon, t.itemIcon),
                        new NameRandomTool(1, "", e.editLabelShipName, -1, i)
                }), GameLayer.getInstance().windowLayer.addChild(this), this.huode) this.huode.display.x = 320,
                this.huode.display.y = 386;
            else {
                var a = Path.effectUrl + "effect_huode/effect_huode.json",
                    i = Path.effectUrl + "effect_huode/texture.json",
                    n = Path.effectUrl + "effect_huode/texture.png";
                Utils.createDragonBone(a, i, n, "effect_huode", "normal",
                    function(t, a) {
                        t && (e.huode || (e.MakeShip.addChild(t.display), t.display.scaleX = 2.8, t.display.scaleY = 2, t.display.x = 320, t.display.y = 386, e.huode = t, t.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                            function() {
                                Utils.removeNode(e.huode.display),
                                    dragonBones.WorldClock.clock.remove(e.huode),
                                    e.huode = void 0
                            },
                            e)))
                    },
                    this)
            }
        },
        i.showGetOneCaptainPaper = function(t, e) {
            var a = this;
            this.init(),
                this.currPage = 3,
                this.showPage(3),
                this.data = e,
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        a.pkg = t;
                    var i = CaptaindataParser.GetInstance().getItemById(a.pkg.captainid[0]);
                    switch (SUI.setTextureAsync(a.captain.imgHead, CaptainManager.getInstance().getCaptainPicById(i.picture)), SUI.setTextureAsync(a.captain.imgCountry, CaptainManager.getInstance().getCountryIconById(i.country.toString())), a.captain.imgName.text = i.name_l, i.quality) {
                        case 1:
                            SUI.setTextureAsync(a.captain.imgBg, Path.itemBackURL + "jianzhang_bai_da.png"),
                                SUI.setTextureAsync(a.captain.imgQuality, Path.itemBackURL + "jianzhang_bai_da_frame.png");
                            break;
                        case 2:
                            SUI.setTextureAsync(a.captain.imgBg, Path.itemBackURL + "jianzhang_lv_da.png"),
                                SUI.setTextureAsync(a.captain.imgQuality, Path.itemBackURL + "jianzhang_lv_da_frame.png");
                            break;
                        case 3:
                            SUI.setTextureAsync(a.captain.imgBg, Path.itemBackURL + "jianzhang_lan_da.png"),
                                SUI.setTextureAsync(a.captain.imgQuality, Path.itemBackURL + "jianzhang_lan_da_frame.png");
                            break;
                        case 4:
                            SUI.setTextureAsync(a.captain.imgBg, Path.itemBackURL + "jianzhang_zi_da.png"),
                                SUI.setTextureAsync(a.captain.imgQuality, Path.itemBackURL + "jianzhang_zi_da_frame.png");
                            break;
                        case 5:
                            SUI.setTextureAsync(a.captain.imgBg, Path.itemBackURL + "jianzhang_cheng_da.png"),
                                SUI.setTextureAsync(a.captain.imgQuality, Path.itemBackURL + "jianzhang_cheng_da_frame.png")
                    }
                    for (var n = CaptainData.captainlist,
                            s = 0; s < n.length; s++)
                        if (n[s].id == i.id) {
                            a.captain.imgRank.text = MilitaryrankParser.GetInstance().getItemByField("index", n[s].promotelevel).name_l,
                                a.captain.imgLevel.text = n[s].upgradelevel + "级";
                            break
                        }
                    a.pkg.ishave[0] ? (a.captain.hasGroup.visible = !0, a.captain.txtTransformNum.text = "已拥有，转化为" + i.turnPiece, SUI.setTextureAsync(a.captain.imgTransformIcon, Path.itemBackURL + "jz_piece_" + i.quality + ".png")) : a.captain.hasGroup.visible = !1;
                    var r = 0,
                        o = ItemsManager.getInstance().getItemById(Number(e.itemId));
                    if (null != o && (r += o.count), -1 != e.itemId2) {
                        var l = ItemsManager.getInstance().getItemById(Number(e.itemId2));
                        null != l && (r += l.count)
                    }
                    a.txtItemNum2.text = "x" + r,
                        SUI.setTextureAsync(a.imgItemIcon2, e.itemIcon)
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.refreshOneCaptainCount = function() {
            var t = 0;
            if (this.data) {
                var e = ItemsManager.getInstance().getItemById(Number(this.data.itemId));
                if (null != e && (t += e.count), -1 != this.data.itemId2) {
                    var a = ItemsManager.getInstance().getItemById(Number(this.data.itemId2));
                    null != a && (t += a.count)
                }
                this.txtItemNum2.text = "x" + t
            }
        },
        i.refreshOneSpyCount = function() {
            var t = 0;
            if (this.data) {
                var e = ItemsManager.getInstance().getItemById(Number(this.data.itemId));
                if (null != e && (t += e.count), -1 != this.data.itemId2) {
                    var a = ItemsManager.getInstance().getItemById(Number(this.data.itemId2));
                    null != a && (t += a.count)
                }
                this.txtItemNum.text = "x" + t
            }
        },
        i.showGetTenCaptainPaper = function(t, e) {
            var a = this;
            this.init(),
                this.currPage = 4,
                this.showPage(4),
                this.data = e,
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        a.pkg = t;
                    for (var i = 0; i < a.pkg.captainid.length; i++) {
                        var n = CaptaindataParser.GetInstance().getItemById(a.pkg.captainid[i]);
                        switch (SUI.setTextureAsync(a["captain" + (i + 1)].imgHead, CaptainManager.getInstance().getCaptainPicById(n.picture)), SUI.setTextureAsync(a["captain" + (i + 1)].imgCountry, CaptainManager.getInstance().getCountryIconById(n.country.toString())), a["captain" + (i + 1)].imgName.text = n.name_l, n.quality) {
                            case 1:
                                SUI.setTextureAsync(a["captain" + (i + 1)].imgBg, Path.itemBackURL + "jianzhang_bai_da.png"),
                                    SUI.setTextureAsync(a["captain" + (i + 1)].imgQuality, Path.itemBackURL + "jianzhang_bai_da_frame.png");
                                break;
                            case 2:
                                SUI.setTextureAsync(a["captain" + (i + 1)].imgBg, Path.itemBackURL + "jianzhang_lv_da.png"),
                                    SUI.setTextureAsync(a["captain" + (i + 1)].imgQuality, Path.itemBackURL + "jianzhang_lv_da_frame.png");
                                break;
                            case 3:
                                SUI.setTextureAsync(a["captain" + (i + 1)].imgBg, Path.itemBackURL + "jianzhang_lan_da.png"),
                                    SUI.setTextureAsync(a["captain" + (i + 1)].imgQuality, Path.itemBackURL + "jianzhang_lan_da_frame.png");
                                break;
                            case 4:
                                SUI.setTextureAsync(a["captain" + (i + 1)].imgBg, Path.itemBackURL + "jianzhang_zi_da.png"),
                                    SUI.setTextureAsync(a["captain" + (i + 1)].imgQuality, Path.itemBackURL + "jianzhang_zi_da_frame.png");
                                break;
                            case 5:
                                SUI.setTextureAsync(a["captain" + (i + 1)].imgBg, Path.itemBackURL + "jianzhang_cheng_da.png"),
                                    SUI.setTextureAsync(a["captain" + (i + 1)].imgQuality, Path.itemBackURL + "jianzhang_cheng_da_frame.png")
                        }
                        for (var s = CaptainData.captainlist,
                                r = 0; r < s.length; r++)
                            if (s[r].id == n.id) {
                                a["captain" + (i + 1)].imgRank.text = MilitaryrankParser.GetInstance().getItemByField("index", s[r].promotelevel).name_l,
                                    a["captain" + (i + 1)].imgLevel.text = s[r].upgradelevel + "级";
                                break
                            }
                        a.pkg.ishave[i] ? (a["captain" + (i + 1)].hasGroup.visible = !0, a["captain" + (i + 1)].txtTransformNum.text = "已拥有，转化为" + n.turnPiece, SUI.setTextureAsync(a["captain" + (i + 1)].imgTransformIcon, Path.itemBackURL + "jz_piece_" + n.quality + ".png")) : a["captain" + (i + 1)].hasGroup.visible = !1
                    }
                    var o = 0,
                        l = ItemsManager.getInstance().getItemById(Number(e.itemId));
                    if (null != l && (o += l.count), -1 != e.itemId2) {
                        var h = ItemsManager.getInstance().getItemById(Number(e.itemId2));
                        null != h && (o += h.count)
                    }
                    a.txtItemNum0.text = "x" + o,
                        SUI.setTextureAsync(a.imgItemIcon0, e.itemIcon)
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.refreshTenCaptainCount = function() {
            var t = 0;
            if (this.data) {
                var e = ItemsManager.getInstance().getItemById(Number(this.data.itemId));
                if (null != e && (t += e.count), -1 != this.data.itemId2) {
                    var a = ItemsManager.getInstance().getItemById(Number(this.data.itemId2));
                    null != a && (t += a.count)
                }
                this.txtItemNum0.text = "x" + t,
                    this.data.count = t
            }
        },
        i.refreshTenSpyCount = function() {
            var t = 0;
            if (this.data) {
                var e = ItemsManager.getInstance().getItemById(Number(this.data.itemId));
                if (null != e && (t += e.count), -1 != this.data.itemId2) {
                    var a = ItemsManager.getInstance().getItemById(Number(this.data.itemId2));
                    null != a && (t += a.count)
                }
                this.txtItemNum1.text = "x" + t,
                    this.data.count = t
            }
        },
        i.showGetOnePaper = function(t, e) {
            var a = this;
            if (this.init(), this.currPage = 1, this.showPage(1), this.data = e, WindowManager.getInstance().showWaiting(), this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        a.pkg = t;
                    var i = a.pkg.paperlist,
                        n = PaperdataParser.GetInstance().getItemById(i[0]),
                        s = ShipdataParser.GetInstance().getItemById(n.shipId);
                    a.tmpQuality = s.quality;
                    var r = ShipmodeldataParser.GetInstance().getItemById(s.modelId);
                    a.ship.txtShipName.text = n.name_l,
                        a.ship.txtShipName.textColor = QualitySystem.getColorByQuality(n.quality),
                        SUI.setTextureAsync(a.ship.imgShip, Path.shipURL + "y_" + r.url),
                        SUI.setTextureAsync(a.ship.imgBg, Path.itemBackURL + "GUI_Shipbuilding_tuzhi_big_0" + n.quality + ".png"),
                        SUI.setTextureAsync(a.ship.imgShipType, Path.shipTypeIconURL + "shipType" + n.shipType + ".png"),
                        SUI.setTextureAsync(a.imgItemIcon, e.itemIcon);
                    var o = --e.count;
                    0 > o && (o = 0),
                        a.txtItemNum.text = "x" + o
                }), GameLayer.getInstance().windowLayer.addChild(this), this.tmpQuality >= 4) {
                if (this.huodeback) this.huodeback.display.x = 324,
                    this.huodeback.display.y = 425;
                else {
                    var i = Path.effectUrl + "effect_huodeback/effect_huodeback.json",
                        n = Path.effectUrl + "effect_huodeback/texture.json",
                        s = Path.effectUrl + "effect_huodeback/texture.png";
                    Utils.createDragonBone(i, n, s, "effect_huodeback", "normal",
                        function(t, e) {
                            t && (a.huodeback || (a.GetOnePaper.addChildAt(t.display, 0), t.display.scaleX = 2.4, t.display.scaleY = 2.7, t.display.x = 324, t.display.y = 425, t.animation.gotoAndPlay("normal", void 0, void 0, 0), a.huodeback = t))
                        },
                        this)
                }
                this.tmpQuality = 0
            }
            if (this.huode) this.huode.display.x = 320,
                this.huode.display.y = 420;
            else {
                var i = Path.effectUrl + "effect_huode/effect_huode.json",
                    n = Path.effectUrl + "effect_huode/texture.json",
                    s = Path.effectUrl + "effect_huode/texture.png";
                Utils.createDragonBone(i, n, s, "effect_huode", "normal",
                    function(t, e) {
                        t && (a.huode || (a.GetOnePaper.addChild(t.display), t.display.scaleX = 2, t.display.scaleY = 2, t.display.x = 320, t.display.y = 420, a.huode = t, t.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                            function() {
                                Utils.removeNode(a.huode.display),
                                    dragonBones.WorldClock.clock.remove(a.huode),
                                    a.huode = void 0
                            },
                            a)))
                    },
                    this)
            }
        },
        i.showGetTenPapers = function(t, e) {
            var a = this;
            this.init(),
                this.currPage = 2,
                this.showPage(2),
                this.data = e,
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        a.pkg = t;
                    for (var i, n, s, r, o = a.pkg.paperlist,
                            l = 0; l < o.length; l++) i = PaperdataParser.GetInstance().getItemById(o[l]),
                        n = ShipdataParser.GetInstance().getItemById(i.shipId),
                        s = ShipmodeldataParser.GetInstance().getItemById(n.modelId),
                        0 == l ? r = a.ship1 : 1 == l ? r = a.ship2 : 2 == l ? r = a.ship3 : 3 == l ? r = a.ship4 : 4 == l ? r = a.ship5 : 5 == l ? r = a.ship6 : 6 == l ? r = a.ship7 : 7 == l ? r = a.ship8 : 8 == l ? r = a.ship9 : 9 == l && (r = a.ship10),
                        r.txtShipName.text = i.name_l,
                        r.txtShipName.textColor = QualitySystem.getColorByQuality(i.quality),
                        SUI.setTextureAsync(r.imgShip, Path.shipURL + "y_" + s.url),
                        SUI.setTextureAsync(r.imgBg, Path.itemBackURL + "GUI_Shipbuilding_tuzhi_0" + i.quality + ".png"),
                        SUI.setTextureAsync(r.imgShipType, Path.shipTypeIconURL + "shipType" + i.shipType + ".png");
                    SUI.setTextureAsync(a.imgItemIcon1, e.itemIcon);
                    var h = 0,
                        c = ItemsManager.getInstance().getItemById(Number(a.data.itemId));
                    if (null != c && (h += c.count), -1 != a.data.itemId2) {
                        var d = ItemsManager.getInstance().getItemById(Number(a.data.itemId2));
                        null != d && (h += d.count)
                    }
                    a.txtItemNum1.text = "x" + h
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.showPage = function(t) {
            for (var e = [this.MakeShip, this.GetOnePaper, this.GetTenPapers, this.GetOneCaptain, this.GetTenCaptain], a = 0; a < e.length; a++) e[a].visible = !1;
            e[t].visible = !0
        },
        i.handAddOwnedPaper = function(t) {
            t.paperID,
                t.newpower
        },
        e
}(eui.Component);
egret.registerClass(MakeShipAlert, "MakeShipAlert");
var RechargeCell = function(t) {
    function e() {
        t.call(this),
            this.itemNumArr = new Array,
            this.addEventListener(eui.UIEvent.COMPLETE, this.OnUiComplete, this),
            this.skinName = "resource/eui_skins/item/RechargeCellSkin.exml"
            /*tpa=resource/eui_skins/item/RechargeCellSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.OnUiComplete = function() {
            this.bg.touchEnabled = !0,
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClick, this);
            for (var t = 0; 5 > t; t++) {
                var e = this["imgNum" + t];
                this.itemNumArr[t] = e
            }
            this.Redraw()
        },
        i.OnClick = function() {
            if (this.data.dayCount > 0 && UserData.getInstance().monthcarddate > 0 && !UserData.getInstance().monthcardreceived) {
                var t = Transport.getPkg(ProtocolMgr.ID_DceMonthCard);
                return void Transport.instance.send(t)
            }
            return this.data.dayCount > 0 && UserData.getInstance().monthcarddate >= this.data.dayLimit ? void Toast.launch("月卡剩余时间达上限") : void PlatformManager.instance.pay(this.data.id.toString(), this.data.name_l, this.data.sale, 1, void 0)
        },
        i.Redraw = function() {
            if (this.data && this.stage) {
                var t = GetPlatType();
                this.costTf.text = "" + this.data.sale + (t == PlatformType.PF_QQ ? "星星" : "元"),
                    this.bg.source = RES.getRes("common_bar_png"),
                    this.notifyImg.visible = !1;
                for (var e = 0; 5 > e; e++) this.itemNumArr[e].visible = !1;
                switch (this.data.state) {
                    case 0:
                        this.cornerImg.source = null,
                            this.infoTf.text = "";
                        break;
                    case 1:
                        this.cornerImg.source = RES.getRes("jiaobiao1_png"),
                            this.infoTf.text = "热卖";
                        break;
                    case 2:
                        this.cornerImg.source = RES.getRes("jiaobiao2_png"),
                            this.infoTf.text = "推荐";
                        break;
                    case 3:
                        this.cornerImg.source = RES.getRes("jiaobiao2_png"),
                            this.infoTf.text = "双倍"
                }
                if (Utils.getImgByUrl(Path.rechargeUrl + this.data.icon, this.icon), 0 == this.data.dayCount) {
                    for (var a = this.data.cash.toString().split("").reverse().join(""), i = 0; i < a.length; i++) this.itemNumArr[i].visible = !0,
                        this.itemNumArr[i].source = RES.getRes("GUI_Homepage_Icon_VIP" + ("0" == a[i] ? "10" : a[i]) + "_png");
                    this.descTf.text = RechargeManager.instance.CanFirstRechargeByID(this.data.id) ? "首充赠送" + this.data.firstGet + "钻石\n(仅限购一次)" : ""
                } else this.titleImg.source = RES.getRes("chongzhi_yuekaText_png"),
                    UserData.getInstance().monthcarddate > 0 ? (this.descTf.text = "连续" + this.data.dayCount + "天可领取" + this.data.dayGet + "钻石\n剩余天数" + UserData.getInstance().monthcarddate, UserData.getInstance().monthcarddate <= this.data.renew ? this.notifyImg.visible = !0 : this.notifyImg.visible = !1, UserData.getInstance().monthcardreceived ? this.costTf.text = "续费" : (this.costTf.text = "领取", this.notifyImg.visible = !0, this.bg.source = RES.getRes("panel_allGameRank_bg_small_1_png"))) : this.descTf.text = "连续" + this.data.dayCount + "天可领取" + this.data.dayGet + "钻石\n月卡计入充值活动"
            }
        },
        e
}(eui.Component);
egret.registerClass(RechargeCell, "RechargeCell");
var RetiredType;
!
function(t) {
    t[t.NORAMLRETIRED = 0] = "NORAMLRETIRED",
        t[t.STRONGRETIRED = 1] = "STRONGRETIRED"
}(RetiredType || (RetiredType = {}));
var RetiredAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.NORAMLRETIRED_RATE = .8,
            this.STRONGRETIRED_RATE = 1,
            this.currPage = 0,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/ShipSellSkin.exml"
            /*tpa=resource/eui_skins/ShipSellSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnSell.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.type = null,
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnSell.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    this.hide();
                    break;
                case this.btnSell:
                    0 == this.currPage ? this.type == RetiredType.NORAMLRETIRED ? this.sendRetiredShip(this.data.id, 0) : this.type == RetiredType.STRONGRETIRED && this.sendRetiredShip(this.data.id, 1) : 1 == this.currPage ? (PartsManager.getInstance().sendReductionParts(this.tmpPartId), this.hide()) : 2 == this.currPage ? (PartsManager.getInstance().sendDecomposeParts(PartsManager.getInstance().reductionPartsIds, !1), this.hide()) : 3 == this.currPage ? (SoulManager.getInstance().sendRestoreSoulMessage(this.data.id), this.hide()) : 4 == this.currPage ? (SoulManager.getInstance().sendDecomposeSoulMessage(SoulManager.getInstance().reductionSoulsIds), this.hide()) : 5 == this.currPage && (CaptainManager.getInstance().sendFireCaptainMessage(CaptainManager.getInstance().reductionCaptainsIds), this.hide())
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("shipUpgrade"),
                e.push("item"),
                e.push("trainData"),
                e.push("shipData"),
                e.push("paperSaleData"),
                e.push("paperData"),
                e.push("part"),
                e.push("medalData"),
                e.push("medalexpData"),
                e.push("captainRetireData"),
                e.push("captainUpgradeData"),
                e.push("captainPieceData"),
                ConfigData.preLoadDats(e, [ShipupgradeParser, ItemParser, TraindataParser, ShipdataParser, PapersaledataParser, PaperdataParser, PartsParser, MedaldataParser, MedalexpdataParser, CaptainretiredataParser, CaptainupgradedataParser, CaptainpiecedataParser],
                    function() {
                        t()
                    })
        },
        i.showCapationHuiShou = function() {
            var t = this;
            this.currPage = 5,
                this.btnSell.label = "确定",
                this.btnSell.skinName = "anniu_hongSkin",
                this.txtTitle.text = "确认解雇",
                this.imgCostIcon.visible = !1,
                this.txtCostNum.visible = !1,
                this.scroller.viewport = this.list,
                this.init(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        t.setCapationsHuiShouListData()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.setCapationsHuiShouListData = function() {
            var t = this.getCapationsHuiShouList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = retiredFactoryListItem
        },
        i.getCapationsHuiShouList = function() {
            for (var t = [], e = WindowManager.getInstance().getWindow(WindowManager.windowType.Captain), a = 0, i = 0, n = 0, s = 0; s < e.dsListParts.length; s++)
                for (var r = 0; r < CaptainManager.getInstance().reductionCaptainsIds.length; r++)
                    if (e.dsListParts[s].id == CaptainManager.getInstance().reductionCaptainsIds[r]) {
                        for (var o = 0,
                                l = 1; l <= e.dsListParts[s].upgradelevel; l++) o += CaptainupgradedataParser.GetInstance().getItemById(l)["upgradeCost" + e.dsListParts[s].quality];
                        for (var h = 0,
                                c = 0; c < e.dsListParts[s].promotelevel - 1; c++) h += CaptaindataParser.GetInstance().getItemById(e.dsListParts[s].id).promoteCostGold[c];
                        var d = Math.floor(.8 * (o + h));
                        a += d;
                        for (var g = 0,
                                u = 0; u < e.dsListParts[s].promotelevel - 1; u++) g += CaptaindataParser.GetInstance().getItemById(e.dsListParts[s].id).promoteCostSoul[u];
                        for (var p = 0,
                                m = 0; m < CaptainData.captainPiecelist.length; m++) {
                            var _ = CaptainData.captainPiecelist[m],
                                v = CaptainpiecedataParser.GetInstance().getItemById(_.id);
                            if (v.captainId == CaptainManager.getInstance().reductionCaptainsIds[r]) {
                                p = _.count;
                                break
                            }
                        }
                        var f = 0,
                            I = 0,
                            T = CaptainretiredataParser.GetInstance().getItemById(e.dsListParts[s].quality);
                        f = T.count,
                            I = T.type;
                        var y = 0,
                            D = 0;
                        1 == I ? (D += ((g + p) / e.dsListParts[s].turnPiece + 1) * f, D = Math.floor(D)) : (y += ((g + p) / e.dsListParts[s].turnPiece + 1) * f, y = Math.floor(y));
                        for (var P = 1; P <= e.dsListParts[s].upgradelevel; P++) D += CaptainupgradedataParser.GetInstance().getItemById(P)["upgradeCostSoul" + e.dsListParts[s].quality];
                        D *= .8,
                            y *= .8,
                            y = Math.round(y),
                            D = Math.round(D),
                            i += y,
                            n += D
                    }
            if (a > 0) {
                var C = {};
                C.name = "金币",
                    C.count = a,
                    C.icon = Path.itemIconURL + "coin.png",
                    C.quality = 1,
                    t.push(C)
            }
            if (i > 0) {
                var E = {};
                E.name = "高级将魂",
                    E.count = i,
                    E.icon = Path.itemIconURL + "gj_jh_d.png",
                    E.quality = 1,
                    t.push(E)
            }
            if (n > 0) {
                var S = {};
                S.name = "普通将魂",
                    S.count = n,
                    S.icon = Path.itemIconURL + "pt_jh_d.png",
                    S.quality = 1,
                    t.push(S)
            }
            return t
        },
        i.showSoulHuiShou = function() {
            var t = this;
            this.currPage = 4,
                this.btnSell.label = "确定",
                this.btnSell.skinName = "anniu_hongSkin",
                this.txtTitle.text = "确认分解",
                this.imgCostIcon.visible = !1,
                this.txtCostNum.visible = !1,
                this.scroller.viewport = this.list,
                this.init(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        t.setSoulsHuiShouListData()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.setSoulsHuiShouListData = function() {
            var t = this.getSoulsHuiShouList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = retiredFactoryListItem
        },
        i.getSoulsHuiShouList = function() {
            for (var t = [], e = WindowManager.getInstance().getWindow(WindowManager.windowType.Soul), a = 0, i = 0, n = 0; n < e.dsListParts.length; n++)
                for (var s = 0; s < SoulManager.getInstance().reductionSoulsIds.length; s++)
                    if (SoulManager.getInstance().reductionSoulsIds[s] == e.dsListParts[n].id) {
                        var r = e.dsListParts[n];
                        if (-1 == r.id) break;
                        i += r.decomposepoints;
                        for (var o = 0,
                                l = 0; l < r.promotelvl; l++) o += r.remouldCostPoint[l];
                        o *= .8,
                            i += o;
                        var h = 0;
                        h = 2 == r.quality ? MedalexpdataParser.GetInstance().getItemById(1).exp1 : 3 == r.quality ? MedalexpdataParser.GetInstance().getItemById(1).exp2 : 4 == r.quality ? MedalexpdataParser.GetInstance().getItemById(1).exp3 : MedalexpdataParser.GetInstance().getItemById(1).exp4,
                            a += r.exp - h
                    }
            if (i = Math.floor(i), a = Math.floor(.8 * a), i > 0) {
                var c = {};
                c.name = "功勋点数",
                    c.count = i,
                    c.icon = Path.itemIconURL + "gongxunzhi_d.png",
                    c.quality = 1,
                    t.push(c)
            }
            if (a > 0) {
                var d = {};
                d.name = "勋章经验",
                    d.count = a,
                    d.icon = Path.itemIconURL + "Experience-in-diamond-medal_03.png",
                    d.quality = 1,
                    t.push(d)
            }
            return t
        },
        i.showSoulHuanYuan = function(t) {
            var e = this;
            this.currPage = 3,
                this.btnSell.label = "确定",
                this.btnSell.skinName = "anniu_hongSkin",
                this.txtTitle.text = "确认还原",
                this.imgCostIcon.visible = !1,
                this.txtCostNum.visible = !1,
                this.scroller.viewport = this.list,
                this.data = t,
                this.init(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        e.setSoulsHuanYuanListData()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.setSoulsHuanYuanListData = function() {
            var t = this.getSoulsHuanYuanList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = retiredFactoryListItem
        },
        i.getSoulsHuanYuanList = function() {
            var t = [],
                e = {};
            e.name = this.data.name,
                e.count = 1,
                e.icon = this.data.pic,
                e.quality = this.data.quality,
                t.push(e);
            var a = !1;
            a = 0 == this.data.promotelvl ? !1 : !0;
            var i = 0;
            if (a)
                for (var n = MedaldataParser.GetInstance().getItemById(this.data.soulid), s = 0; s < this.data.promotelvl; s++) i += n.remouldCostPoint[s];
            if (i > 0) {
                var r = {};
                r.name = "功勋点数",
                    r.count = i,
                    r.icon = Path.itemIconURL + "gongxunzhi_d.png",
                    r.quality = 1,
                    t.push(r)
            }
            var o = this.data.point;
            if (o > 0) {
                var r = {};
                r.name = "勋章经验",
                    r.count = o,
                    r.icon = Path.itemIconURL + "Experience-in-diamond-medal_03.png",
                    r.quality = 1,
                    t.push(r)
            }
            return t
        },
        i.showPartsHuiShou = function() {
            var t = this;
            this.currPage = 2,
                this.btnSell.label = "确定",
                this.btnSell.skinName = "anniu_hongSkin",
                this.txtTitle.text = "分解",
                this.imgCostIcon.visible = !1,
                this.txtCostNum.visible = !1,
                this.scroller.viewport = this.list,
                this.init(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        t.setPartsHuiShouListData()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.setPartsHuiShouListData = function() {
            var t = this.getPartsHuiShouList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = retiredFactoryListItem
        },
        i.getPartsHuiShouList = function() {
            for (var t = [], e = 0, a = 0, i = ShipManager.getInstance().partsList, n = PartsManager.getInstance().reductionPartsIds, s = 0; s < n.length; s++)
                for (var r = 0; r < i.length; r++)
                    if (n[s] == i[r].id) {
                        e += Math.ceil(i[r].upgradegold * this.NORAMLRETIRED_RATE),
                            a += Math.ceil(i[r].point * this.NORAMLRETIRED_RATE) + PartsParser.GetInstance().getItemById(i[r].partsid).decomposepoints;
                        break
                    }
            var o = {};
            o.name = "金币",
                o.count = e,
                o.icon = Path.itemIconURL + "coin.png",
                o.quality = 1,
                o.count > 0 && t.push(o);
            var l = {};
            return l.name = "科技点数",
                l.count = a,
                l.icon = Path.itemIconURL + "kejidian.png",
                l.quality = 1,
                l.count > 0 && t.push(l),
                t
        },
        i.showParts = function(t, e) {
            var a = this;
            this.currPage = 1,
                this.btnSell.label = "确定",
                this.btnSell.skinName = "anniu_hongSkin",
                this.txtTitle.text = "还原",
                this.imgCostIcon.visible = !1,
                this.txtCostNum.visible = !1,
                this.scroller.viewport = this.list,
                this.init(),
                this.tmpPartId = e,
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        a.setPartsListData(t)
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.setPartsListData = function(t) {
            var e = this.getPartsList(t);
            this.list.dataProvider = new eui.ArrayCollection(e),
                this.list.itemRenderer = retiredFactoryListItem
        },
        i.getPartsList = function(t) {
            var e = [];
            if (t.sucess) {
                var a = {};
                a.name = "金币",
                    a.count = t.cash,
                    a.icon = Path.itemIconURL + "coin.png",
                    a.quality = 1,
                    a.count > 0 && e.push(a);
                var i = {};
                i.name = "科技点数",
                    i.count = t.points,
                    i.icon = Path.itemIconURL + "kejidian.png",
                    i.quality = 1,
                    i.count > 0 && e.push(i);
                var n = {},
                    s = PartsParser.GetInstance().getItemById(t.itemid);
                n.name = s.name_l,
                    n.count = 1,
                    n.icon = Path.partsIconURL + s.icon,
                    n.quality = s.quality,
                    e.push(n)
            }
            return e
        },
        i.show = function(t, e) {
            var a = this;
            this.currPage = 0,
                this.data = t,
                this.type = e,
                this.txtTitle.text = "战舰回收",
                e == RetiredType.NORAMLRETIRED ? (this.imgCostIcon.visible = !1, this.txtCostNum.visible = !1, this.btnSell.label = "普通回收", this.btnSell.skinName = "anniu_lan") : e == RetiredType.STRONGRETIRED && (this.imgCostIcon.visible = !0, this.txtCostNum.visible = !0, this.btnSell.label = "高级回收", this.btnSell.skinName = "anniu_hongSkin"),
                this.scroller.viewport = this.list,
                this.init(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    WindowManager.getInstance().hideWaiting(),
                        a.setListData()
                }),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.setListData = function() {
            var t = this.getList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = retiredFactoryListItem
        },
        i.getList = function() {
            for (var t = [], e = 0, a = 1; a <= this.data.lv; a++) 1 == this.data.qualityNum ? e += ShipupgradeParser.GetInstance().getItemById(a).quality1 : 2 == this.data.qualityNum ? e += ShipupgradeParser.GetInstance().getItemById(a).quality2 : 3 == this.data.qualityNum ? e += ShipupgradeParser.GetInstance().getItemById(a).quality3 : 4 == this.data.qualityNum ? e += ShipupgradeParser.GetInstance().getItemById(a).quality4 : 5 == this.data.qualityNum ? e += ShipupgradeParser.GetInstance().getItemById(a).quality5 : 6 == this.data.qualityNum && (e += ShipupgradeParser.GetInstance().getItemById(a).quality6);
            if (0 != e) {
                var i = {};
                i.name = "金币",
                    this.type == RetiredType.NORAMLRETIRED ? i.count = Math.ceil(e * this.NORAMLRETIRED_RATE) : this.type == RetiredType.STRONGRETIRED && (i.count = Math.ceil(e * this.STRONGRETIRED_RATE)),
                    i.icon = Path.itemIconURL + "coin.png",
                    i.quality = 1,
                    t.push(i)
            }
            var n = this.data.usepropcount;
            if (0 != n) {
                var s = {},
                    r = ItemParser.GetInstance().getItemById(TraindataParser.GetInstance().getItemById(1).costItem);
                s.name = r.name_l,
                    this.type == RetiredType.NORAMLRETIRED ? s.count = Math.ceil(n * this.NORAMLRETIRED_RATE) : this.type == RetiredType.STRONGRETIRED && (s.count = Math.ceil(n * this.STRONGRETIRED_RATE)),
                    s.icon = Path.itemIconURL + "trainammo.png",
                    s.quality = r.quality,
                    t.push(s)
            }
            var o = this.data.skillusepropcnt + this.data.activeskillusepropcnt + this.data.circleskillusepropcnt;
            if (0 != o) {
                var l = {},
                    h = ItemParser.GetInstance().getItemById(SkilldataParser.GetInstance().getItemById(this.data.skillid).upgradeCostItem);
                l.name = h.name_l,
                    this.type == RetiredType.NORAMLRETIRED ? l.count = Math.ceil(o * this.NORAMLRETIRED_RATE) : this.type == RetiredType.STRONGRETIRED && (l.count = Math.ceil(o * this.STRONGRETIRED_RATE)),
                    l.icon = Path.itemIconURL + "trainbook.png",
                    l.quality = h.quality,
                    t.push(l)
            }
            var c = 0,
                d = 0,
                g = 0;
            if (6 == this.data.quality)
                for (var u = 1; u <= this.data.remouldLv + 6; u++) {
                    var p = ShipdataParser.GetInstance().getItemById(this.data.shipid - u);
                    d += p.remouldCount,
                        g += p.remouldSeniorPaper,
                        c += p.remouldMaterial
                } else
                    for (var a = 1; a <= this.data.remouldLv; a++) {
                        var p = ShipdataParser.GetInstance().getItemById(this.data.shipid - a);
                        d += p.remouldCount
                    }
            if (0 != c) {
                var m = {},
                    _ = ItemParser.GetInstance().getItemById(1246);
                m.name = _.name_l,
                    this.type == RetiredType.NORAMLRETIRED ? m.count = Math.ceil(c * this.NORAMLRETIRED_RATE) : this.type == RetiredType.STRONGRETIRED && (m.count = Math.ceil(c * this.STRONGRETIRED_RATE)),
                    m.icon = Path.itemIconURL + _.icon,
                    m.quality = _.quality,
                    t.push(m)
            }
            d += 1;
            var v = {};
            return 1 == PapersaledataParser.GetInstance().getItemById(PaperdataParser.GetInstance().getItemById(this.data.drawingId).quality).type ? (v.name = "普通万能图纸", v.icon = Path.itemIconURL + "dijiwanneng.png") : (v.name = "高级万能图纸", v.icon = Path.itemIconURL + "powerfulbook.png"),
                this.type == RetiredType.NORAMLRETIRED ? v.count = Math.ceil((d * PapersaledataParser.GetInstance().getItemById(PaperdataParser.GetInstance().getItemById(this.data.drawingId).quality).count + g) * this.NORAMLRETIRED_RATE) : this.type == RetiredType.STRONGRETIRED && (v.count = Math.ceil((d * PapersaledataParser.GetInstance().getItemById(PaperdataParser.GetInstance().getItemById(this.data.drawingId).quality).count + g) * this.STRONGRETIRED_RATE)),
                v.quality = PaperdataParser.GetInstance().getItemById(this.data.drawingId).quality,
                t.push(v),
                t
        },
        i.sendRetiredShip = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceRetireShip);
            a.id = t,
                a.type = e,
                Transport.instance.send(a)
        },
        i.handleRetiredShip = function(t) {
            if (t.id, t.type, 0 == t.res) {
                var e = Transport.getPkg(ProtocolMgr.ID_DceShipList);
                Transport.instance.send(e),
                    this.hide()
            } else 1 == t.res ? Toast.launch("非法id") : 2 == t.res ? Toast.launch("非法类型") : 3 == t.res ? Toast.launch("非法图纸id") : 4 == t.res ? Toast.launch("船不存在") : 5 == t.res && Toast.launch("高级退役钻石不足")
        },
        e
}(eui.Component);
egret.registerClass(RetiredAlert, "RetiredAlert");
var retiredFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/TongYongWuPin_2_Skin.exml"
            /*tpa=resource/eui_skins/item/TongYongWuPin_2_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data && (SUI.setTextureAsync(this.imgBg, QualitySystem.getItemSmallBack(this.data.quality)), SUI.setTextureAsync(this.imgIcon, this.data.icon), this.txtName.text = this.data.name, this.txtNum.text = this.data.count)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(retiredFactoryListItem, "retiredFactoryListItem");
var ShopSpyAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.type = 0,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/ShangCheng_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/ShangCheng_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.btnClose_1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose_2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnTenTimes.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnOneTimes.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyCost1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyCost2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyCost3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAddOne.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAddTen.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCutOne.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCutTen.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose_3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.data = null,
                this.btnClose_1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose_2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnTenTimes.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnOneTimes.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyCost1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyCost2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyCost3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAddOne.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnAddTen.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCutOne.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnCutTen.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnClose_3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btnBuyConfirm.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose_1:
                    this.hide();
                    break;
                case this.btnClose_2:
                    this.hide();
                    break;
                case this.btnClose_3:
                    this.hide();
                    break;
                case this.btnTenTimes:
                    0 == this.type ? ShopManager.getInstance().sendSpy(Number(this.data.id), 3, !0, this.data) : ShopManager.getInstance().sendRecruitCaptain(this.data.id, 2, this.data),
                        this.hide();
                    break;
                case this.btnOneTimes:
                    19 == GuideManager.step && (GuideManager.setGuideStep(20), GuideManager.clearMask()),
                        0 == this.type ? ShopManager.getInstance().sendSpy(Number(this.data.id), 3, !1, this.data) : ShopManager.getInstance().sendRecruitCaptain(this.data.id, 1, this.data),
                        this.hide();
                    break;
                case this.btnBuyCost1:
                    UserData.getInstance().getRes(TypeDefine.RES.Diamond) < this.tenprice ? GameAlert.getInstance().show("提示", "钻石不足,是否前往充值?",
                        function() {
                            GameAlert.getInstance().hide(),
                                WindowManager.getInstance().show(WindowManager.windowType.Recharge, {
                                    type: 0
                                })
                        }) : 0 == this.type ? ShopManager.getInstance().sendBuySpyItem(5, 2, 1) : 1 == this.type && ShopManager.getInstance().sendBuyRecruitItem(3, 2, 1);
                    break;
                case this.btnBuyCost2:
                    UserData.getInstance().getRes(TypeDefine.RES.Diamond) < this.seniorprice ? GameAlert.getInstance().show("提示", "钻石不足,是否前往充值?",
                        function() {
                            GameAlert.getInstance().hide(),
                                WindowManager.getInstance().show(WindowManager.windowType.Recharge, {
                                    type: 0
                                })
                        }) : 0 == this.type ? ShopManager.getInstance().sendBuySpyItem(3, 2, 1) : 1 == this.type && ShopManager.getInstance().sendBuyRecruitItem(2, 2, 1);
                    break;
                case this.btnBuyCost3:
                    UserData.getInstance().getRes(TypeDefine.RES.Diamond) < this.midprice ? GameAlert.getInstance().show("提示", "钻石不足,是否前往充值?",
                        function() {
                            GameAlert.getInstance().hide(),
                                WindowManager.getInstance().show(WindowManager.windowType.Recharge, {
                                    type: 0
                                })
                        }) : 0 == this.type ? ShopManager.getInstance().sendBuySpyItem(2, 2, 1) : 1 == this.type && ShopManager.getInstance().sendBuyRecruitItem(1, 2, 1);
                    break;
                case this.btnAddOne:
                    this.editBuyNum.text = Number(this.editBuyNum.text) + 1 + "",
                        this.txtTotlePrice.text = Number(this.data.saleValue) * Number(this.editBuyNum.text) + "";
                    break;
                case this.btnAddTen:
                    this.editBuyNum.text = Number(this.editBuyNum.text) + 10 + "",
                        this.txtTotlePrice.text = Number(this.data.saleValue) * Number(this.editBuyNum.text) + "";
                    break;
                case this.btnCutOne:
                    Number(this.editBuyNum.text) - 1 < 1 ? this.editBuyNum.text = "1" : this.editBuyNum.text = Number(this.editBuyNum.text) - 1 + "",
                        this.txtTotlePrice.text = Number(this.data.saleValue) * Number(this.editBuyNum.text) + "";
                    break;
                case this.btnCutTen:
                    Number(this.editBuyNum.text) - 10 < 1 ? this.editBuyNum.text = "1" : this.editBuyNum.text = Number(this.editBuyNum.text) - 10 + "",
                        this.txtTotlePrice.text = Number(this.data.saleValue) * Number(this.editBuyNum.text) + "";
                    break;
                case this.btnBuyConfirm:
                    ShopManager.getInstance().sendBuy(Number(this.data.id), Number(this.editBuyNum.text), this.data.name, this.data),
                        this.hide()
            }
        },
        i.showPaiQianPage = function(t) {
            this.txtTitle.text = "派遣间谍",
                this.txtTimes1.text = "派遣10次",
                this.txtTimes2.text = "派遣1次",
                this.btnTenTimes.label = "派遣",
                this.btnOneTimes.label = "派遣",
                this.type = 0,
                this.data = t,
                this.ChooseShipLotteryTimes.visible = !0,
                this.ChooseBuyItemNum.visible = !1,
                this.selectBuyItemNum.visible = !1,
                1 == t.id || 3 == t.id ? this.btnTenTimes.enabled = !0 : this.btnTenTimes.enabled = !1,
                this.init(),
                SUI.setTextureAsync(this.imgCostItem1, this.data.itemIcon),
                SUI.setTextureAsync(this.imgCostItem2, this.data.itemIcon),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showZhaoMuPage = function(t) {
            this.txtTitle.text = "高级招募",
                this.txtTimes1.text = "招募10次",
                this.txtTimes2.text = "招募1次",
                this.btnTenTimes.label = "招募",
                this.btnOneTimes.label = "招募",
                this.type = 1,
                this.data = t,
                this.ChooseShipLotteryTimes.visible = !0,
                this.ChooseBuyItemNum.visible = !1,
                this.selectBuyItemNum.visible = !1,
                1 == t.id || 3 == t.id ? this.btnTenTimes.enabled = !0 : this.btnTenTimes.enabled = !1,
                this.init(),
                SUI.setTextureAsync(this.imgCostItem1, this.data.itemIcon),
                SUI.setTextureAsync(this.imgCostItem2, this.data.itemIcon),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showBuySpyPage = function(t) {
            this.type = 0,
                this.txtTitle0.text = "购买金币送特工令",
                this.txtSend1.text = "高级特工令×10",
                this.txtSend2.text = "高级特工令×1",
                this.txtSend3.text = "中级特工令×1",
                this.data = t,
                this.ChooseShipLotteryTimes.visible = !1,
                this.ChooseBuyItemNum.visible = !0,
                this.selectBuyItemNum.visible = !1,
                this.init(),
                SUI.setTextureAsync(this.imgItem1, Path.item_sURL + "spy_icon_3.png"),
                SUI.setTextureAsync(this.imgItem2, Path.item_sURL + "spy_icon_3.png"),
                SUI.setTextureAsync(this.imgItem3, Path.item_sURL + "spy_icon_2.png"),
                this.midprice = t.midprice,
                this.seniorprice = t.seniorprice,
                this.tenprice = t.tenprice,
                this.btnBuyCost1.icon.source = "GUI_Homepage_Icon_32_png",
                this.btnBuyCost2.icon.source = "GUI_Homepage_Icon_32_png",
                this.btnBuyCost3.icon.source = "GUI_Homepage_Icon_32_png",
                this.btnBuyCost1.label = this.tenprice.toString(),
                this.btnBuyCost2.label = this.seniorprice.toString(),
                this.btnBuyCost3.label = this.midprice.toString(),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showBuyCaptainPage = function(t) {
            this.type = 1,
                this.txtTitle0.text = "购买金币送招募令",
                this.txtSend1.text = "高级招募令×10",
                this.txtSend2.text = "高级招募令×1",
                this.txtSend3.text = "中级招募令×1",
                this.data = t,
                this.ChooseShipLotteryTimes.visible = !1,
                this.ChooseBuyItemNum.visible = !0,
                this.selectBuyItemNum.visible = !1,
                this.init(),
                SUI.setTextureAsync(this.imgItem1, Path.item_sURL + "zml_z_x.png"),
                SUI.setTextureAsync(this.imgItem2, Path.item_sURL + "zml_z_x.png"),
                SUI.setTextureAsync(this.imgItem3, Path.item_sURL + "zml_lan_x.png"),
                this.midprice = t.midprice,
                this.seniorprice = t.seniorprice,
                this.tenprice = t.tenprice,
                this.btnBuyCost1.icon.source = "GUI_Homepage_Icon_32_png",
                this.btnBuyCost2.icon.source = "GUI_Homepage_Icon_32_png",
                this.btnBuyCost3.icon.source = "GUI_Homepage_Icon_32_png",
                this.btnBuyCost1.label = this.tenprice.toString(),
                this.btnBuyCost2.label = this.seniorprice.toString(),
                this.btnBuyCost3.label = this.midprice.toString(),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.showBuyItemPage = function(t, e) {
            void 0 === e && (e = !0),
                this.buyItemIcon.visible = e,
                this.data = t,
                this.ChooseShipLotteryTimes.visible = !1,
                this.ChooseBuyItemNum.visible = !1,
                this.selectBuyItemNum.visible = !0,
                this.init(),
                this.editBuyNum.text = "1",
                this.TXTBuyTarget.text = '请选择购买 "' + t.name + ' "的数量',
                "2" == t.costType && (this.buyItemIcon.source = "GUI_Homepage_Icon_32_png"),
                this.txtTotlePrice.text = Number(this.data.saleValue) * Number(this.editBuyNum.text) + "",
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        i.setPrice = function(t, e, a) {
            this.midprice = t,
                this.seniorprice = e,
                this.tenprice = a
        },
        e
}(eui.Component);
egret.registerClass(ShopSpyAlert, "ShopSpyAlert");
var TiaoZhuanAlert = function(t) {
    function e() {
        t.call(this),
            this.__inited = !1,
            this.addEventListener(eui.UIEvent.ADDED_TO_STAGE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/TiaoZhuanPanerlSkin.exml"
            /*tpa=resource/eui_skins/TiaoZhuanPanerlSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return e.getInstance = function() {
            return this._instance || (this._instance = new e),
                this._instance
        },
        i.OnComplete = function() {
            this.__inited = !0,
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
            var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
            egret.log("depth:", t),
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.Jump1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.Jump2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.clean = function() {
            this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.Jump1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.Jump2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    this.hide();
                    break;
                case this.Jump1:
                    this.fun1(),
                        this.hide();
                    break;
                case this.Jump2:
                    this.fun2(),
                        this.hide()
            }
        },
        i.show = function(t, e, a, i, n) {
            this.txtTitle.text = t,
                this.txtName1.text = e,
                this.txtName2.text = a,
                this.fun1 = i,
                this.fun2 = n,
                this.init(),
                GameLayer.getInstance().windowLayer.addChild(this)
        },
        i.hide = function() {
            this.clean(),
                GameLayer.getInstance().windowLayer.removeChild(this),
                GameLayer.getInstance().windowLayer.removeChild(this._block)
        },
        e
}(eui.Component);
egret.registerClass(TiaoZhuanAlert, "TiaoZhuanAlert");
var WindowBase = function(t) {
    function e(e, a) {
        t.call(this),
            this.__inited = !1,
            this.isPopWindow = !!e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.OnComplete, this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this, !1, 1),
            this.addEventListener(eui.UIEvent.REMOVED_FROM_STAGE, this.onRemoveFromState, this),
            a || (e ? GameLayer.getInstance().windowLayer.addChild(this) : GameLayer.getInstance().pageLayer.addChild(this))
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.getWindowName = function() {
            return this.windowName
        },
        i.setWindowName = function(t) {
            this.windowName = t
        },
        i.OnComplete = function() {
            if (!this._closed && (this.__inited = !0, this.__cachedData && this.setData(this.__cachedData), this._needBlock)) {
                this._block || (this._block = new egret.Shape, this._block.graphics.beginFill(0, .5), this._block.graphics.drawRect(0, 0, GameData.designWidth, GameData.designHeight), this._block.graphics.endFill(), this._block.touchEnabled = !0);
                var t = GameLayer.getInstance().windowLayer.getChildIndex(this);
                GameLayer.getInstance().windowLayer.addChildAt(this._block, t)
            }
        },
        i.setData = function(t) {},
        i.init = function() {},
        i.onRemoveFromState = function() {
            this._block && this._block.parent && this._block.parent.removeChild(this._block),
                this.clear(),
                ResLoader.instance.collectTextureCache(),
                this._closed = !0,
                Log.log("Window closed:", this.windowName)
        },
        i.clear = function() {},
        i.destroy = function() {
            this.isPopWindow && this.parent ? GameLayer.getInstance().windowLayer.removeChild(this) : !this.itemBool && this.parent && (GameLayer.getInstance().pageLayer.removeChild(this), MainUI.instance.showLastTop()),
                this._block && this._block.parent && this._block.parent.removeChild(this._block),
                WindowManager.getInstance().clearCache(this.windowName)
        },
        i.close = function() {
            WindowManager.getInstance().hide(this.windowName)
        },
        e
}(eui.Component);
egret.registerClass(WindowBase, "WindowBase");
var WindowActivity = function(t) {
    function e() {
        t.call(this, !0),
            this._activityDatas = [],
            this.skinName = "resource/eui_skins/HuoDongSkin.exml"
            /*tpa=resource/eui_skins/HuoDongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                this.onActivityDataUpdate()
        },
        i.init = function() {
            this.btnInfo.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnInfo, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                    type: 0
                }),
                this.lstCenter.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.OnClickItem, this),
                this.lstCenter.itemRenderer = ActivityItemRenderer,
                this.scvCenter.viewport = this.lstCenter,
                SUI.setTextureAsync(this.imgBg, Path.backGroundImageUrl + "Bg_huodong.jpg"),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onActivityDataUpdate, this)
        },
        i.onActivityDataUpdate = function() {
            if (this._data) {
                for (var t = [], e = 0, a = this._data.actlist; e < a.length; e++) {
                    var i = a[e];
                    if (19 != i.type) {
                        var n = !0;
                        if (i.type == ActivityType.ACTIVITY_TYPE_LOGINGIFT) {
                            i.show_start.time = UserData.getInstance().regtime;
                            var s = 1e3 * i.show_start.time,
                                r = new Date(s);
                            r.setDate(r.getDate() + 4),
                                r.setHours(24, 0, 0, 0),
                                i.show_endL.time = Math.floor(r.valueOf() / 1e3)
                        }
                        ActivityManager.instance.checkIsBetweenTime(i.show_start.time, i.show_endL.time, i.start_time.type) || (n = !1),
                            i.type == ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE && (n = !1),
                            n && t.push(i)
                    }
                }
                t.push({
                    type: ActivityType.ACTIVITY_TYPE_OIL,
                    desc: "box",
                    icon: 5
                });
                var o = !1;
                if (t.length == this._activityDatas.length) {
                    for (var l = 0; l < this._activityDatas.length; ++l)
                        if (this._activityDatas[l].type != t[l].type) {
                            o = !0;
                            break
                        }
                } else o = !0;
                o && (this._activityDatas = t, this.lstCenter.dataProvider = new eui.ArrayCollection(this._activityDatas))
            }
        },
        i.OnClickItem = function(t) {
            var e = this.lstCenter.selectedIndex,
                a = this._activityDatas[e];
            a && (a.type == ActivityType.ACTIVITY_TYPE_OIL ? WindowManager.getInstance().show(WindowManager.windowType.oilActivity, a) : RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                type: a.type
            }))
        },
        i.OnClickBtnInfo = function(t) {
            var e = Locales.get("zz_activity"),
                a = Locales.get("zz_activityDesc1");
            QiJvTouAlert.getInstance().showTxtDescPage(e, a)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onActivityDataUpdate, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowActivity, "WindowActivity");
var WindowActivityOil = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/HuoDong_list_Skin.exml"
            /*tpa=resource/eui_skins/HuoDong_list_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                ActivityManager.instance.setImageByType(this.imgTitle, t.type),
                SUI.setTextureAsync(this.imgShow, Path.GetActivityIcon(this._data.icon))
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnOil.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnOil, this),
                SUI.addClickEffect(this.btnOil),
                SUI.setTextureAsync(this.imgBg, Path.backGroundImageUrl + "Bg_huodong.jpg"),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgSkip, Path.uiUrl + "Activity/Activity_fengetiao.png"),
                SUI.setTextureAsync(this.imgLight, Path.uiUrl + "Activity/activity_light.png"),
                this.DayOil.visible = !0,
                this.txtTotalNum.visible = !1,
                this.scvCenter.visible = !1,
                this.txtTime.text = Locales.get("zz_forever");
            var t = 60,
                e = UserData.getInstance().getMilitaryranktype(),
                a = MilitaryrankParser.GetInstance().getItemByField("id", e);
            if (a) {
                for (var i = 0,
                        n = 0,
                        s = 0,
                        r = a.privilege; s < r.length; s++) {
                    var o = r[s],
                        l = MilitaryrightsParser.GetInstance().getItemById(o);
                    5 == l.righttype && (1 == l.numtype ? i += l.num / 1e3 : n += l.num)
                }
                t = t * (1 + i) + n
            }
            this.txtDesc.textFlow = Utils.textFlowByStr(Locales.get("zz_activityIntroOil", t)),
                this.txtOilNum.text = Locales.get("zz_oilNum", t),
                this._timer = new egret.Timer(1e3, 0),
                this._timer.addEventListener(egret.TimerEvent.TIMER, this.onTick, this),
                this._timer.start(),
                this.txtOilDesc.text = Locales.get("zz_clickGet"),
                this.onTick(null),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onTick, this)
        },
        i.onTick = function(t) {
            var e = ActivityManager.instance.getOilGiftTimeIndex();
            if (this._index = null, 0 > e) this.txtOilDesc.text = "补给未到",
                this.imgLight.visible = !1,
                this.btnOil.touchEnabled = !1;
            else {
                var a = !1;
                0 != e || ActivityManager.instance.activityData.oil_noon || (a = !0, this._index = 0),
                    1 != e || ActivityManager.instance.activityData.oil_evening || (a = !0, this._index = 1),
                    2 != e || ActivityManager.instance.activityData.oil_midnight || (a = !0, this._index = 2),
                    this.txtOilDesc.visible = !0,
                    a ? (this.txtOilDesc.text = Locales.get("zz_clickGet"), this.txtOilDesc.textColor = 2227968, this.imgLight.visible = !0, this.btnOil.touchEnabled = !0) : (this.txtOilDesc.text = Locales.get("panel_mail_txt_porped"), this.txtOilDesc.textColor = 16711680, this.imgLight.visible = !1, this.btnOil.touchEnabled = !1)
            }
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnOil = function(t) {
            if (null != this._index) {
                var e = 0;
                e = 0 == this._index ? ActivityType.ACTIVITY_TYPE_OIL_NOON : 1 == this._index ? ActivityType.ACTIVITY_TYPE_OIL_EVENING : ActivityType.ACTIVITY_TYPE_OIL_MIDNIGHT,
                    RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                        id: e,
                        type: 0
                    })
            }
        },
        i.clear = function() {
            this._timer && (this._timer.stop(), this._timer = null),
                EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onTick, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowActivityOil, "WindowActivityOil");
var WindowAward = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/LingJiangZhongXinSkin.exml"
            /*tpa=resource/eui_skins/LingJiangZhongXinSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.msgData = null,
                this.msgData = null,
                this.txtRewardNum.text = "当前奖励数：",
                WindowManager.getInstance().showWaiting(),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closebtn, this),
                this.btnGetReward.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnGetRewardClick, this),
                this.rewardScroller.viewport = this.list,
                this.itemScroller.viewport = this.list0,
                this.itemScroller.visible = !1,
                this.list0.visible = !1,
                this.initConfig();
            var t = Transport.getPkg(ProtocolMgr.ID_DceAwardCenter);
            Transport.instance.send(t)
        },
        i.initConfig = function() {
            var t = this;
            this.awardDataArr || ConfigData.preLoadDats(["awardCenterData"], [AwardcenterdataParser],
                function() {
                    t.awardDataArr = AwardcenterdataParser.GetInstance().getDataArr(),
                        t.initComplete()
                })
        },
        i.processMsg = function(t) {
            this.msgData = t,
                this.initComplete()
        },
        i.initComplete = function() {
            if (this.awardDataArr && this.msgData) {
                WindowManager.getInstance().hideWaiting(),
                    this.txtRewardNum.text = "当前奖励数：" + this.msgData.awardlist.length,
                    this.dataList = [];
                for (var t = 0; t < this.msgData.awardlist.length; t++) {
                    var e = new AwardData;
                    e.id = this.msgData.awardlist[t].id,
                        e.awardid = this.msgData.awardlist[t].awardid,
                        e.time = this.msgData.awardlist[t].time,
                        e.param = this.msgData.awardlist[t].param,
                        0 == e.awardid ? (e.title = this.msgData.awardlist[t].param[0], e.dec = this.msgData.awardlist[t].param[1]) : 20 == e.awardid || 22 == e.awardid || 23 == e.awardid || 32 == e.awardid || 37 == e.awardid || 39 == e.awardid || 42 == e.awardid || 43 == e.awardid || 47 == e.awardid || 64 == e.awardid || 66 == e.awardid || 86 == e.awardid || 87 == e.awardid || 88 == e.awardid || 89 == e.awardid ? (e.title = this.awardDataArr[e.awardid - 1].name_l, e.dec = this.awardDataArr[e.awardid - 1].desc_l[0] + this.msgData.awardlist[t].param[0] + this.awardDataArr[e.awardid - 1].desc_l[1]) : (e.title = this.awardDataArr[e.awardid - 1].name_l, e.dec = this.awardDataArr[e.awardid - 1].desc_l[0]);
                    for (var a = 0; a < this.msgData.awardlist[t].droplist.droplist.length; a++) {
                        var i = this.msgData.awardlist[t].droplist.droplist[a];
                        e.droplist.push(i)
                    }
                    e.index = t,
                        this.dataList.push(e)
                }
                this.list.visible && (this.list.dataProvider = new eui.ArrayCollection(this.dataList), this.list.itemRenderer = awardItemRenderer)
            }
        },
        i.btnGetRewardClick = function(t) {
            if (this.rewardScroller.visible) {
                var e = Transport.getPkg(ProtocolMgr.ID_DceGetAward);
                e.all = !0,
                    Transport.instance.send(e)
            } else this.rewardScroller.visible = !0,
                this.list.visible = !0,
                this.itemScroller.visible = !1,
                this.list0.visible = !1,
                this.btnGetReward.label = "全部领取",
                this.list.dataProvider = new eui.ArrayCollection(this.dataList),
                this.list.itemRenderer = awardItemRenderer
        },
        i.showAllAward = function(t) {
            if (void 0 === t && (t = -1), !(0 > t)) {
                this.btnGetReward.label = "返回",
                    this.rewardScroller.visible = !1,
                    this.list.visible = !1,
                    this.itemScroller.visible = !0,
                    this.list0.visible = !0;
                for (var e = [], a = Math.floor(this.dataList[t].droplist.length / 4), i = this.dataList[t].droplist, n = 0; a > n; n++) {
                    for (var s = [], r = 0; 4 > r; r++) s.push(i.shift());
                    e.push(s)
                }
                i.length > 0 && e.push(i),
                    this.list0.dataProvider = new eui.ArrayCollection(e),
                    this.list0.itemRenderer = awardItemRenderer2
            }
        },
        i.closebtn = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.Award)
        },
        e
}(WindowBase);
egret.registerClass(WindowAward, "WindowAward");
var awardItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/LJZX_1_Skin.exml"
            /*tpa=resource/eui_skins/item/LJZX_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.girdArr = [this.reward1, this.reward2, this.reward3],
                this.btnCheck.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHnadler, this)
        },
        i.dataChanged = function() {
            this.reward1.visible = !1,
                this.reward2.visible = !1,
                this.reward3.visible = !1,
                this.txtTitle.text = this.data.title,
                this.txtTime.text = GlobalFunction.getDateByTimeNum(this.data.time).getFullYear().toString() + "年" + (GlobalFunction.getDateByTimeNum(this.data.time).getMonth() + 1) + "月" + GlobalFunction.getDateByTimeNum(this.data.time).getDate().toString() + "日",
                this.txtDesc.text = this.data.dec;
            for (var t = this.data.droplist.length > 3 ? 3 : this.data.droplist.length, e = 0; t > e; e++) {
                this.girdArr[e].visible = !0;
                var a = GlobalFunction.getDropDataByTypeAndId(this.data.droplist[e].type, this.data.droplist[e].id, this.data.droplist[e].count);
                SUI.setTextureAsync(this.girdArr[e].imgBg, QualitySystem.getItemSmallBack(a.quality)),
                    SUI.setTextureAsync(this.girdArr[e].imgIcon, a.icon),
                    this.girdArr[e].txtName.text = a.name,
                    this.girdArr[e].txtNum.text = a.count
            }
        },
        i.clickHnadler = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGetAward);
            e.all = !1,
                e.id = this.data.id,
                Transport.instance.send(e);
            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.Award);
            a.showAllAward(this.data.index)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(awardItemRenderer, "awardItemRenderer");
var awardItemRenderer2 = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/LJZX_2_Skin.exml"
            /*tpa=resource/eui_skins/item/LJZX_2_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.girdArr = [this.reward1, this.reward2, this.reward3, this.reward4]
        },
        i.dataChanged = function() {
            var t = this.data.length;
            this.reward1.visible = !1,
                this.reward2.visible = !1,
                this.reward3.visible = !1,
                this.reward4.visible = !1;
            for (var e = 0; t > e; e++) {
                this.girdArr[e].visible = !0;
                var a = GlobalFunction.getDropDataByTypeAndId(this.data[e].type, this.data[e].id, this.data[e].count);
                SUI.setTextureAsync(this.girdArr[e].imgBg, QualitySystem.getItemSmallBack(a.quality)),
                    SUI.setTextureAsync(this.girdArr[e].imgIcon, a.icon),
                    this.girdArr[e].txtName.text = a.name,
                    this.girdArr[e].txtNum.text = a.count
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(awardItemRenderer2, "awardItemRenderer2");
var AwardData = function() {
    function t() {
        this.id = "",
            this.awardid = 0,
            this.time = 0,
            this.droplist = [],
            this.param = [],
            this.title = "",
            this.dec = "",
            this.index = 0
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(AwardData, "AwardData");
var WindowBattleResult = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZhanDouJieSuanSkin.exml"
            /*tpa=resource/eui_skins/ZhanDouJieSuanSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            SceneManager.instance.stopShake(),
                this.root = this.VSInfo.parent,
                this.battleType = BattleManager.instance.battleType,
                this.battleResult = t,
                AudioManager.instance.stopMusic(),
                this.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY ? this.isWin = MailManager.getInstance().pkg.attackerWin : this.isWin = this.battleResult.star > 0,
                UnlockManager.BattleWin = this.isWin,
                this.componentArr = [this.Lost, this.Complete, this.Victory, this.VSInfo, this.DamageDesc, this.BaseReward, this.DuoBaoQiBing, this.JingJiChang, this.PVE, this.LostJump, this.Result, this.VictoryStar];
            for (var e = 0,
                    a = this.componentArr; e < a.length; e++) {
                var i = a[e];
                i.visible = !1
            }
            this.isWin ? AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_WIN) : AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_LOSE),
                this.battleType == BattleType.BATTLE_TYPE_MAIN_PVE || this.battleType == BattleType.BATTLE_TYPE_MAIN_SPECIAL ? this.initPVESpecial() : this.battleType == BattleType.BATTLE_TYPE_ARENA || this.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY ? this.initPVPSpecial() : this.battleType == BattleType.BATTLE_TYPE_CHALLENGEARMADA ? this.initChallenGearmadaSpecial() : this.battleType == BattleType.BATTLE_TYPE_ROBBERY ? this.initRobberySpecial() : this.battleType == BattleType.BATTLE_TYPE_GUARD_OIL ? this.initGuardOilSpecial() : this.initPVESpecial();
            for (var n = 0,
                    s = this.componentArr; n < s.length; n++) {
                var i = s[n];
                i.visible || Utils.removeNode(i)
            }
        },
        i.initPVESpecial = function() {
            MainWorldManager.newStar = this.battleResult.star;
            BattleManager.instance.getBattleType();
            this.showBaseReward(),
                this.isWin ? (this.showStar(), this.showDropList()) : (this.Lost.visible = !0, this.showFailedJump()),
                this.showBtns()
        },
        i.initGuardOilSpecial = function() {
            var t = this;
            if (this.showBtns(), this.isWin) {
                this.Victory.visible = !0,
                    this.showLight1(),
                    new ParticleDisplayObj(this.Victory, ParticleType.LightSpot, ShapeType.None),
                    this.Result.visible = !0;
                var e = "",
                    a = void 0,
                    i = void 0,
                    n = WindowDefenseOil.curstage + 1,
                    s = DefencestagedataParser.GetInstance().getItemById(n).conditionsType,
                    r = DefencestagedataParser.GetInstance().getItemById(n).coefficient;
                1 == this.battleResult.condition ? (e = Locales.get("panel_oilfiled_battle_result_1"), a = 16711680, -1 == s ? i = Locales.get("panel_oilfiled_battle_condition1", r) : 1 == s ? i = Locales.get("panel_oilfiled_battle_condition2", r) : 2 == s ? i = Locales.get("panel_oilfiled_battle_condition3", r) : 3 == s && (i = Locales.get("panel_oilfiled_battle_condition4", r))) : 0 == this.battleResult.star ? (e = Locales.get("panel_oilfiled_battle_result_2"), a = 16711680) : this.battleResult.star > 0 && (e = Locales.get("panel_oilfiled_battle_result_3"), a = 65280),
                    this.txtResult.textColor = a,
                    this.txtResult.text = e,
                    i ? this.txtWinCondition.text = i : Utils.removeNode(this.txtWinCondition),
                    this.showBaseReward(),
                    this.showDropList(),
                    1 != this.battleResult.condition && this.battleResult.star > 0 && (this.btnNext.visible = !0, this.btnNext.labelDisplay.text = Locales.get("panel_game_over_fight_3"), this.btnNext.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnNext, this), this.btnNext.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            BattleManager.onemoreplay_flag_lost = !0,
                                BattleManager.replay_flag = !1,
                                t.close(),
                                BattleManager.instance.quickFight()
                        },
                        this), WindowDefenseOil.curstage++)
            } else this.Lost.visible = !0,
                this.showFailedJump(),
                this.Result.visible = !0,
                this.txtWinCondition.visible = !1,
                this.txtResult.text = Locales.get("panel_oilfiled_battle_result_2")
        },
        i.initRobberySpecial = function() {
            var t = this;
            if (this.showBtns(), this.showVSInfo(), this.isWin) {
                this.Victory.visible = !0,
                    this.showLight1(),
                    new ParticleDisplayObj(this.Victory, ParticleType.LightSpot, ShapeType.None),
                    this.VictoryStar.visible = !1,
                    this.txtExtraReward.text = Locales.get("panel_game_over_txt_suipian_comment_3"),
                    this.DuoBaoQiBing.visible = !0;
                var a = !!e.OldRandomItemData;
                a ? this.OpenBoxAction() : (ConfigData.preLoadDats(["ClientDropData"], [ClientdropdataParser],
                    function() {
                        e.OldRandomItemData = [];
                        for (var a = 0; 3 > a; ++a) {
                            var i = t["robItem" + (a + 1)],
                                n = t["box" + (a + 1)];
                            n.index = a,
                                i.visible = !1;
                            var s = t.battleResult.dropList[a];
                            if (s && (1 == t.battleResult.dropList.length || 2 == t.battleResult.dropList.length && 0 == a)) 2 == t.battleResult.dropList.length && 0 == a && (s = t.battleResult.dropList[a + 1]),
                                s.baseData.light = !0,
                                e.OldRandomItemData.push(s.baseData);
                            else {
                                var r = ClientDropDataLib.instance.getDataBy();
                                e.OldRandomItemData.push(GlobalFunction.getDropDataByTypeAndId(r.type, r.item, r.count))
                            }
                            n.touchEnabled = !0,
                                n.addEventListener(egret.TouchEvent.TOUCH_TAP,
                                    function(e) {
                                        AudioManager.instance.playSound(AudioManager.SOUND_BTN);
                                        var a = e.currentTarget.index;
                                        t.OpenBoxAction(a)
                                    },
                                    t)
                        }
                    },
                    this), this.btnClose.enabled = !1, this.btnReplay.enabled = !1, this.btnNext.enabled = !1);
                var i = !1;
                if (this.battleResult.dropList.length > 1) {
                    var n = this.battleResult.dropList[0];
                    if (n.baseData.type != TypeDefine.Const.DROP_TYPE_GOLD && n.baseData.type != TypeDefine.Const.DROP_TYPE_CASH) {
                        i = !0,
                            this.btnNext.visible = !1;
                        var s = Locales.get("panel_game_over_txt_suipian_comment_1"),
                            r = QualitySystem.getColorByQuality(n.baseData.quality),
                            o = r.toString(16);
                        if (o.length < 6)
                            for (var l = 0,
                                    h = o.length; 6 - h > l; ++l) o = "0" + o;
                        s += "#" + o,
                            s += n.baseData.name,
                            s += "#x1",
                            this.txtRobDesc.textFlow = Utils.textFlowByStr(s)
                    }
                }
                i || (this.txtRobDesc.text = Locales.get("panel_game_over_txt_suipian_comment_2")),
                    a || (this.btnClose.enabled = !1)
            } else this.Lost.visible = !0,
                this.showFailedJump()
        },
        i.setRobItem = function(t) {
            var a = this["robItem" + (t + 1)],
                i = this["box" + (t + 1)];
            a.visible = !0,
                i.visible = !1,
                SUI.setItemIcon(a, e.OldRandomItemData[t]),
                e.OldRandomItemData[t].light && SUI.loadMovieClip(Path.activityEffectUrl + "activity_goods.json", Path.activityEffectUrl + "activity_goods.png", a,
                    function(t) {
                        t.x = a.imgBg.x + .5 * a.imgBg.width,
                            t.y = a.imgBg.y + .5 * a.imgBg.height
                    },
                    this)
        },
        i.OpenBoxAction = function(t) {
            if (t) {
                var a = e.OldRandomItemData[t];
                e.OldRandomItemData[t] = e.OldRandomItemData[0],
                    e.OldRandomItemData[0] = a
            }
            for (var i = 0; 3 > i; ++i) this.setRobItem(i);
            this.btnClose.enabled = !0,
                this.btnReplay.enabled = !0,
                this.btnNext.enabled = !0,
                107 == GuideManager.step && GuideManager.nextStep()
        },
        i.initPVPSpecial = function() {
            if (MainWorldManager.newStar = this.battleResult.star, UnlockManager.BattleWin = this.isWin, this.showVSInfo(), this.isWin)
                if (this.Victory.visible = !0, this.showLight1(), new ParticleDisplayObj(this.Victory, ParticleType.LightSpot, ShapeType.None), this.JingJiChang.visible = !0, this.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY) this.txtJJCRankPromote.visible = !1,
                    this.imgJJCRankFlag.visible = !1,
                    this.txtJJCRankChangeDesc.text = "",
                    this.txtJJCRankReward.text = "",
                    this.txtJJCHonourAdd.text = "",
                    this.txtJJCScoreAdd.text = "";
                else {
                    Toast.launch(Locales.get("arenaBattleResult_1")),
                        this.txtJJCRankChangeDesc.text = Locales.get("panel_game_over_pvp_1");
                    var t = ArenaManager.instance.getArena_value(),
                        e = (t[0], t[1], t[2], t[3]),
                        a = t[4];
                    t[5],
                        t[6];
                    a - e > 0 ? this.txtJJCRankPromote.text = (a - e).toString() : (this.txtJJCRankPromote.visible = !1, this.imgJJCRankFlag.visible = !1, this.txtJJCRankChangeDesc.text = Locales.get("panel_game_over_pvp_4"));
                    var i = Locales.get("panel_game_over_pvp_2"),
                        n = null;
                    a - e > 0 ? (n = ArenaScoreDataLib.instance.getRankData(e), i += "#99fc88" + n.score + "#", this.txtJJCScoreAdd.text = "") : (n = ArenaScoreDataLib.instance.getRankData(a), i += "#99fc88" + n.score + "#", this.txtJJCScoreAdd.text = ""),
                        i += Locales.get("panel_game_over_pvp_3");
                    var s = VipParser.GetInstance().getItemById(UserData.getInstance()._vip).militaryHonourAdd;
                    s || (s = 0);
                    var r = void 0;
                    r = 0 != s ? n.honor + Math.ceil(n.honor * (s / 100)) : n.honor,
                        i += "#99fc88" + r + "#",
                        i += Locales.get("panel_game_over_pvp_7"),
                        this.txtJJCRankReward.textFlow = Utils.textFlowByStr(i),
                        this.txtJJCHonourAdd.text = ""
                }
            else Toast.launch(Locales.get("arenaBattleResult_2")),
                this.Lost.visible = !0,
                this.showFailedJump();
            this.showBtns()
        },
        i.initChallenGearmadaSpecial = function() {
            this.Complete.visible = !0,
                this.showLight(),
                new ParticleDisplayObj(this.Complete, ParticleType.LightSpot, ShapeType.None),
                this.PVE.visible = !0,
                this.DamageDesc.visible = !0,
                this.txtDamageDesc.text = Locales.get("panel_game_over_challenge_comment_1"),
                this.txtDamage.text = this.battleResult.dmg.toString(),
                this.showBtns(),
                Utils.removeNode(this.scvDrops),
                this.txtPVEDesc.visible = !1,
                this.dropItem7Boss.visible = !0;
            var t = GlobalFunction.getItemByData({
                type: TypeDefine.Const.DROP_TYPE_GOLD,
                count: this.battleResult.gold
            });
            SUI.setItemIcon(this.dropItem7Boss, t)
        },
        i.showStar = function() {
            this.Victory.visible = !0,
                this.showLight1(),
                new ParticleDisplayObj(this.Victory, ParticleType.LightSpot, ShapeType.None),
                this.VictoryStar.visible = !0;
            for (var t = 1; 3 >= t; ++t) {
                var e = this["imgVictoryStar" + t];
                if (t <= this.battleResult.star) {
                    this.battleType == BattleType.BATTLE_TYPE_MAIN_PVE && (e.texture = RES.getRes("victory_Star_2_png")),
                        e.visible = !1;
                    var a = egret.Tween.get(e);
                    a.wait(500 * t).call(function(t) {
                            t.visible = !0,
                                t.alpha = 155 / 255,
                                Utils.setScale(t, 3)
                        },
                        this, [e]).to({
                            scaleX: 1,
                            scaleY: 1,
                            alpha: 1
                        },
                        1e3, egret.Ease.quadIn)
                } else e.visible = !1
            }
        },
        i.showLight = function() {
            this.imgLight.visible = !0,
                egret.Tween.removeTweens(this.imgLight);
            var t = this.imgLight.rotation,
                e = egret.Tween.get(this.imgLight, {
                    loop: !0
                });
            e.to({
                    rotation: t + 360
                },
                6e3)
        },
        i.showLight1 = function() {
            this.imgLight1.visible = !0,
                egret.Tween.removeTweens(this.imgLight1);
            var t = this.imgLight1.rotation,
                e = egret.Tween.get(this.imgLight1, {
                    loop: !0
                });
            e.to({
                    rotation: t + 360
                },
                6e3)
        },
        i.showBaseReward = function() {
            this.BaseReward.visible = !0,
                this.txtLevel.text = Locales.get("banshuduiying_dengji") + ":" + UserData.getInstance().getPlayerLevel(),
                this.txtReward1.text = this.battleResult.gold.toString(),
                this.txtReward2.text = this.battleResult.exp ? this.battleResult.exp.toString() : "0"
        },
        i.showBtns = function() {
            var t = this;
            this.btnReplay.labelDisplay.text = Locales.get("panel_game_over_replay"),
                this.btnReplay.visible = BattleManager.instance.checkReplayShow();
            var e, a, i = BattleManager.instance.checkFightisShow();
            if (this.battleType == BattleType.BATTLE_TYPE_MAIN_PVE || this.battleType == BattleType.BATTLE_TYPE_MAIN_SPECIAL) {
                var n = BattleManager.instance.getNextStageId();
                e = n[0],
                    a = n[1],
                    this.autoNextTimer = new egret.Timer(1e3),
                    this.autoNextTimer.addEventListener(egret.TimerEvent.TIMER, this.OnTick, this),
                    this.autoNextTimer.start(),
                    e !== !1 && 1 !== e || !this.isWin || (MainWorldManager.instance.chooseCampaignId = -1, MainWorldManager.instance.scrolled = -1, WindowPVE.lastScrolled = null, WindowPVE.lastShowDrop = !1),
                    (e === !1 || 1 === e) && this.isWin && i ? (this.btnNext.labelDisplay.text = Locales.get("panel_game_over_fight_5"), this.autoNext.imgCheck.visible = "true" == UserDefault.instance.getStringForKey("zz_auto_next_battle") && GuideManager.guideComplete, this.autoNext.touchEnabled = !0, this.autoNext.touchChildren = !1, this.autoNext.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            t.autoNext.imgCheck.visible = !t.autoNext.imgCheck.visible,
                                UserDefault.instance.setStringForKey("zz_auto_next_battle", t.autoNext.imgCheck.visible.toString()),
                                t._tickNumber = 4,
                                t.OnTick(),
                                t.autoNext.imgCheck.visible && t.autoNextTimer.start()
                        },
                        this), this._tickNumber = 4, this.OnTick(), this.autoNext.imgCheck.visible && this.autoNextTimer) : (this.btnNext.labelDisplay.text = Locales.get("panel_game_over_fight"), this.autoNext.visible = !1, this.autoNextDesc.visible = !1)
            } else this.autoNextDesc.visible = !1,
                this.autoNext.visible = !1,
                this.btnNext.labelDisplay.text = Locales.get("panel_game_over_fight");
            this.btnNext.visible = i,
                this.btnNext.visible && (this.btnNext.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnNext, this), this.btnNext.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        t.battleType == BattleType.BATTLE_TYPE_MAIN_PVE || t.battleType == BattleType.BATTLE_TYPE_MAIN_SPECIAL ? (BattleManager.onemoreplay_flag_win = !0, BattleManager.replay_flag = !1, e === !1 && t.isWin ? (t.close(), BattleManager.instance.quickFight(a)) : 1 === e ? Toast.launch(Locales.get("battleResult_2")) : (t.close(), BattleManager.instance.quickFight())) : (BattleManager.onemoreplay_flag_lost = !0, BattleManager.replay_flag = !1, t.close(), BattleManager.instance.quickFight())
                    },
                    this)),
                this.battleType == BattleType.BATTLE_TYPE_ROBBERY && (this.isWin ? this.btnNext.visible = !1 : this.btnNext.labelDisplay.text = Locales.get("panel_game_over_fight_2")),
                this.btnClose.labelDisplay.text = Locales.get("panel_game_over_close")
        },
        i.OnTick = function() {
            var t = WindowManager.getInstance().isWindowVisible(WindowManager.windowType.Upgrade);
            !t && this.autoNext.imgCheck.visible && void 0 != this._tickNumber && this._tickNumber > 0 && (this._tickNumber--, this.autoNextDesc.text = Locales.get("zz_autonextlevel", this._tickNumber), 0 == this._tickNumber && (this.btnNext.dispatchEventWith(egret.TouchEvent.TOUCH_TAP), this.autoNextTimer && (this.autoNextTimer.stop(), this.autoNextTimer = void 0)))
        },
        i.showDropList = function() {
            this.PVE.visible = !0,
                this.dropItem7Boss.visible = !1,
                (this.battleType == BattleType.BATTLE_TYPE_MAIN_PVE || this.battleType == BattleType.BATTLE_TYPE_MAIN_SPECIAL) && this.battleResult.exp > 2 * BattleManager.instance.getFirstBaseExpData() && this.battleResult.gold > 2 * BattleManager.instance.getFirstBaseGoldData() ? this.txtPVEDesc.text = Locales.get("panel_game_over_win_first_1") : this.txtPVEDesc.text = Locales.get("panel_game_over_getList"),
                this.scvDrops.viewport = this.lstScvDrops;
            for (var t = [], e = 0, a = this.battleResult.dropList; e < a.length; e++) {
                var i = a[e];
                t.push(i.baseData)
            }
            this.lstScvDrops.itemRenderer = ItemItemRenderer,
                this.lstScvDrops.dataProvider = new eui.ArrayCollection(t)
        },
        i.showVSInfo = function() {
            if (this.VSInfo.visible = !0, this.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY) {
                var t = MailManager.getInstance().atkInfo;
                SUI.setTextureAsync(this.imgCampOfSelf, Path.GetCampPicUrl(t.camp, 3)),
                    this.txtNameOfSelf.text = t.name,
                    this.txtBPOfSelf.text = t.power
            } else SUI.setTextureAsync(this.imgCampOfSelf, Path.GetCampPicUrl(UserData.getInstance().getCamp(), 3)),
                this.txtNameOfSelf.text = UserData.getInstance().getUserName(),
                this.txtBPOfSelf.text = UserData.getInstance()._fightPower.toString();
            if (this.battleType == BattleType.BATTLE_TYPE_ROBBERY) SUI.setTextureAsync(this.imgCampOfEnemy, Path.GetCampPicUrl(WindowPreciousBattle.selectedItem.armyCapm)),
                this.txtNameOfEnemy.text = WindowPreciousBattle.selectedItem.armyName,
                this.txtBPOfEnemy.text = WindowPreciousBattle.selectedItem.armyPower.toString();
            else if (this.battleType == BattleType.BATTLE_TYPE_ARENA) {
                var e = ArenaManager.instance.getArena_value();
                SUI.setTextureAsync(this.imgCampOfEnemy, Path.GetCampPicUrl(e[2], 3)),
                    this.txtNameOfEnemy.text = e[0],
                    this.txtBPOfEnemy.text = e[1].toString()
            } else if (this.battleType == BattleType.BATTLE_TYPE_EMAIL_REPLAY) {
                var e = MailManager.getInstance().defInfo;
                SUI.setTextureAsync(this.imgCampOfEnemy, Path.GetCampPicUrl(e.camp, 3)),
                    this.txtNameOfEnemy.text = e.name,
                    this.txtBPOfEnemy.text = e.power
            }
        },
        i.showFailedJump = function() {
            var t = this;
            this.LostJump.visible = !0;
            for (var e = 0; e < this.LostJump.numChildren; ++e) this.LostJump.getChildAt(e).visible = !1;
            ConfigData.preLoadDats(["battleLost"], [BattlelostParser],
                function() {
                    for (var e = 0; e < t.LostJump.numChildren; ++e) t.LostJump.getChildAt(e).visible = !0;
                    if (t.autoNext.visible = !1, t.autoNextDesc.visible = !1, ActivityManager.instance.activityData.isfirst_gift) {
                        t.imgFirstRecharge.visible = !1,
                            t.txtLostDesc.text = Locales.get("panel_game_over_getUp");
                        for (var e = 1; 3 >= e; ++e) {
                            var a = t["imgBattleLostIcon" + e];
                            SUI.addClickEffect(a),
                                a.touchEnabled = !0
                        }
                        var i = UserData.getInstance().getPlayerLevel(),
                            n = BattleLostDataLib.instance.getDataBylvl(i).content1,
                            s = "jianchuanpeijian.png"
                            /*tpa=jianchuanpeijian.png*/
                        ;
                        4 == n ? s = "peijiangaizao.png"
                            /*tpa=peijiangaizao.png*/
                            :
                            2 == n && (s = "jianchuanxunlian.png"
                                /*tpa=jianchuanxunlian.png*/
                            ),
                            SUI.setTextureAsync(t.imgBattleLostIcon1, Path.battleLostIconUrl + s),
                            t.imgBattleLostIcon1.addEventListener(egret.TouchEvent.TOUCH_TAP,
                                function() {
                                    2 == n ? BattleManager.instance.existBattle(function() {
                                                WindowManager.getInstance().show(WindowManager.windowType.ShipManager)
                                            },
                                            void 0, !1) : BattleManager.instance.existBattle(function() {
                                                WindowManager.getInstance().show(WindowManager.windowType.PeiJian)
                                            },
                                            void 0, !1),
                                        t.close()
                                },
                                t);
                        var r = BattleLostDataLib.instance.getDataBylvl(i).content2;
                        s = "jianchuanxunlian.png"
                            /*tpa=jianchuanxunlian.png*/
                            ,
                            5 == r && (s = "xunzhangshengji.png"
                                /*tpa=xunzhangshengji.png*/
                            ),
                            SUI.setTextureAsync(t.imgBattleLostIcon2, Path.battleLostIconUrl + s),
                            t.imgBattleLostIcon2.addEventListener(egret.TouchEvent.TOUCH_TAP,
                                function() {
                                    5 == r ? BattleManager.instance.existBattle(function() {
                                                WindowManager.getInstance().show(WindowManager.windowType.Soul)
                                            },
                                            void 0, !1) : BattleManager.instance.existBattle(function() {
                                                WindowManager.getInstance().show(WindowManager.windowType.ShipManager)
                                            },
                                            void 0, !1),
                                        t.close()
                                },
                                t);
                        var o = BattleLostDataLib.instance.getDataBylvl(i).content3;
                        s = "jianchuangenghuan.png"
                            /*tpa=jianchuangenghuan.png*/
                            ,
                            5 == o && (s = "xunzhangshengji.png"
                                /*tpa=xunzhangshengji.png*/
                            ),
                            SUI.setTextureAsync(t.imgBattleLostIcon3, Path.battleLostIconUrl + s),
                            t.imgBattleLostIcon3.addEventListener(egret.TouchEvent.TOUCH_TAP,
                                function() {
                                    5 == o ? BattleManager.instance.existBattle(function() {
                                                WindowManager.getInstance().show(WindowManager.windowType.Soul)
                                            },
                                            void 0, !1) : BattleManager.instance.existBattle(function() {
                                                WindowManager.getInstance().show(WindowManager.windowType.ShipManager)
                                            },
                                            void 0, !1),
                                        t.close()
                                },
                                t),
                            1 == n ? t.txtJump1.text = Locales.get("panel_game_over_part") : 4 == n ? t.txtJump1.text = Locales.get("panel_game_over_part_2") : 2 == n ? t.txtJump1.text = Locales.get("panel_game_over_train") : t.txtJump1.text = Locales.get("panel_game_over_part"),
                            2 == r ? t.txtJump2.text = Locales.get("panel_game_over_train") : 5 == r ? t.txtJump2.text = Locales.get("panel_game_over_getShip_2") : t.txtJump2.text = Locales.get("panel_game_over_train"),
                            3 == o ? t.txtJump3.text = Locales.get("panel_game_over_getShip") : 5 == o ? t.txtJump3.text = Locales.get("panel_game_over_getShip_2") : t.txtJump3.text = Locales.get("panel_game_over_getShip")
                    } else t.imgFirstRecharge.visible = !0,
                        SUI.setTextureAsync(t.imgFirstRecharge, Path.uiUrl + "Activity_defeat.png"),
                        t.imgFirstRecharge.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function() {
                                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                                    type: ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE
                                })
                            },
                            t)
                },
                this)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnReplay.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnReplay, this),
                this.btnNext.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnNext, this),
                (2 == GuideManager.step || 14 == GuideManager.step || 30 == GuideManager.step || 106 == GuideManager.step) && GuideManager.nextStep(),
                SUI.setTextureAsync(this.imgBlueBg, "resource/assets/ui/battleAccount/battleAccount_Bg1.jpg"
                    /*tpa=resource/assets/ui/battleAccount/battleAccount_Bg1.jpg*/
                ),
                SUI.setTextureAsync(this.imgPVEBg, "resource/assets/ui/battleAccount/battleAccount_Bg1.jpg"
                    /*tpa=resource/assets/ui/battleAccount/battleAccount_Bg1.jpg*/
                ),
                SUI.setTextureAsync(this.imgDuobaoBg, "resource/assets/ui/battleAccount/battleAccount_Bg1.jpg"
                    /*tpa=resource/assets/ui/battleAccount/battleAccount_Bg1.jpg*/
                ),
                SUI.setTextureAsync(this.imgLostBg, "resource/assets/ui/battleAccount/battleAccount_Bg1.jpg"
                    /*tpa=resource/assets/ui/battleAccount/battleAccount_Bg1.jpg*/
                ),
                SUI.setTextureAsync(this.imgLight, "resource/assets/ui/battle_light.png"
                    /*tpa=resource/assets/ui/battle_light.png*/
                ),
                SUI.setTextureAsync(this.imgLight1, "resource/assets/ui/battle_light.png"
                    /*tpa=resource/assets/ui/battle_light.png*/
                ),
                this.imgLight.visible = !1,
                this.imgLight1.visible = !1
        },
        i.OnClickBtnClose = function(t) {
            this.close(),
                BattleManager.instance.existBattle(),
                108 == GuideManager.step && GuideManager.clearMask()
        },
        i.OnClickBtnReplay = function(t) {
            this.close(),
                SceneManager.instance.SwitchScene(SceneType.BATTLE),
                BattleManager.instance.replay()
        },
        i.OnClickBtnNext = function(t) {
            BattleManager.instance.quickFight()
        },
        i.clear = function() {
            this.autoNextTimer && (this.autoNextTimer.stop(), this.autoNextTimer = void 0)
        },
        e.ReplayFlag = !1,
        e.Replayexistpiece = null,
        e.ReplayName = null,
        e.Replay_r = 0,
        e.Replay_g = 0,
        e.Replay_b = 0,
        e
}(WindowBase);
egret.registerClass(WindowBattleResult, "WindowBattleResult");
var WindowBattleSweepDrop = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZB_DuoBaoQiBing_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/ZB_DuoBaoQiBing_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this.txtCostItemNum.text = "-" + (e.jiluXunBao - UserData.getInstance().getRes(TypeDefine.RES.XunBaoLing));
            var a = !1,
                i = [];
            t = t.data;
            for (var n = 0; n < t.battlelist.length; n++)
                for (var s = 0; s < t.battlelist[n].droplist.droplist.length; s++) 1 == s && (a = !0),
                    i.push(t.battlelist[n].droplist.droplist[s]);
            for (n = 0; n < i.length; n++) {
                var r = new DropItem(i[n]);
                this.vessel.addChild(r),
                    r.x = n % 5 * 95,
                    r.y = 125 * Math.floor(n / 5)
            }
            if (a) {
                var o, l = WindowPreciousBattle._instance.pData;
                l.type == preciousBattleType.part ? o = ConfigData.getDataByKey("partspieces", String(l.id)) : l.type == preciousBattleType.medal && (o = ConfigData.getDataByKey("medalpiece", l.id)),
                    this.txtResult.textFlow = Utils.textFlowByStr(Locales.get("xunbao", t.battlelist.length, o.name_l)),
                    WindowPreciousBattle._instance.destroy(),
                    this.btnRobAgain.enabled = !1
            } else this.txtResult.text = Locales.get("panel_PlunderOpenTen_txt_comment_2");
            e.instance = this,
                this.btnRobAgain.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.btnConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                WindowPrecious.guideBool && (WindowPrecious.guideBool = !1, this.destroy())
        },
        i.clickHandler = function(t) {
            t.currentTarget == this.btnRobAgain && (e.jiluXunBao = UserData.getInstance().getRes(TypeDefine.RES.XunBaoLing), WindowPreciousBattle.preciousBattle(1)),
                this.destroy()
        },
        i.clear = function() {
            e.instance = null
        },
        e
}(WindowBase);
egret.registerClass(WindowBattleSweepDrop, "WindowBattleSweepDrop");
var DropItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/TongYongWuPinSkin.exml"
            /*tpa=resource/eui_skins/item/TongYongWuPinSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = GlobalFunction.getDropDataByTypeAndId(this.iData.type, this.iData.id, this.iData.count);
            SUI.setItemIcon(this, t)
        },
        e
}(eui.Component);
egret.registerClass(DropItem, "DropItem");
var WindowBattleSweepResult = function(t) {
    function e() {
        t.call(this, !0),
            this._playingAnim = !1,
            this.skinName = "resource/eui_skins/ZhanYiSaoDangSkin.exml"
            /*tpa=resource/eui_skins/ZhanYiSaoDangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            var e = t.pkg ? t.pkg.length : 1;
            MainWorldManager.instance.currentSweepCampaign.serverData.todayCount += e,
                EventManager.instance.dispatchEvent(EventTypes.PVE_ATTACK_TIMES_UPDATE);
            for (var a = [], i = 0; i < t.pkg.length; ++i) a.push({
                index: i + 1,
                pkg: t.pkg[i]
            });
            this.lstCenter.dataProvider = new eui.ArrayCollection(a);
            var n = VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()),
                s = n.saodangcishu - UserData.getInstance().sweepcount; - 1 != n.saodangcishu ? s > 0 ? (this.txtLeftTimesDesc.text = Locales.get("zz_saodang1", s), this.txtLeftTimesDesc.textColor = 16777215) : (this.txtLeftTimesDesc.text = Locales.get("zz_saodang1", 0), this.txtLeftTimesDesc.textColor = 16711680, this.btnSweep.enabled = !1) : this.txtLeftTimesDesc.text = Locales.get("panel_sweep_txt_saodangcount");
            var r = 3;
            MainWorldManager.instance.currentSweepType == BattleType.BATTLE_TYPE_MAIN_PVE && (r = 5);
            var o = BattleManager.instance.getSweepCount(MainWorldManager.instance.currentSweepCampaign, MainWorldManager.instance.currentSweepTimesType, r),
                l = o[0];
            if (this.RealSweepCount = Number(o[1]), this.btnSweep.labelDisplay.text = l.toString(), 0 == this.RealSweepCount) {
                var h = 1;
                1 == MainWorldManager.instance.currentSweepType && (h = r),
                    l = Locales.get("panel_sweep_btn_saodang", h),
                    this.btnSweep.labelDisplay.text = l.toString(),
                    MainWorldManager.instance.currentSweepType == BattleType.BATTLE_TYPE_MAIN_PVE && 3 != MainWorldManager.instance.currentSweepCampaign.baseData.type && (this.btnSweep.enabled = !1)
            }
            var c = MainWorldManager.instance.currentSweepCampaign.serverData ? MainWorldManager.instance.currentSweepCampaign.serverData.todayCount : 0,
                d = MainWorldManager.instance.currentSweepCampaign.baseData.dayAtkCount - c;
            0 == Math.floor(d) && (this.btnSweep.enabled = !1),
                this.txtBattleTimes.text = d + "/" + MainWorldManager.instance.currentSweepCampaign.baseData.dayAtkCount
        },
        i.init = function() {
            var t = this;
            this.btnSweep.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnSweep, this),
                this.btnConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnConfirm, this),
                this.txtTitle.text = Locales.get("panel_sweep_result_txt_title"),
                this.txtBattleTimesDesc.text = Locales.get("panel_stageselect_normal_fightNum1"),
                this.scvCenter.viewport = this.lstCenter,
                this.lstCenter.itemRenderer = BattleSweepItemRenderer;
            var e = Path.effectUrl + "saodangchenggong/effect_saodangchenggong.json",
                a = Path.effectUrl + "saodangchenggong/texture.json",
                i = Path.effectUrl + "saodangchenggong/texture.png";
            this._playingAnim = !0,
                Utils.createDragonBone(e, a, i, "saodangchenggong", "normal",
                    function(e, a) {
                        e ? (t.addChild(e.display), e.display.x = .5 * t.width, e.display.y = .5 * t.height, e.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                            function() {
                                Utils.delayCall(1e3,
                                    function() {
                                        t._playingAnim = !1,
                                            Utils.removeDragonBone(e)
                                    },
                                    t)
                            },
                            t)) : t._playingAnim = !1
                    },
                    this)
        },
        i.OnClickBtnSweep = function(t) {
            this._playingAnim || (Log.logZDY("RealSweepCount -== " + this.RealSweepCount), 0 != this.RealSweepCount ? 0 == MainWorldManager.instance.currentSweepTimesType ? BattleManager.instance.sweepCheck(MainWorldManager.instance.currentSweepCampaign) && (MainWorldManager.instance.currentSweepType == BattleType.BATTLE_TYPE_MAIN_PVE ? MainWorldManager.instance.sendNormalSweepBattle(MainWorldManager.instance.currentSweepCampaign, void 0, 1) : MainWorldManager.instance.sendSpeSweepBattle(MainWorldManager.instance.currentSweepCampaign, 1), this.close()) : 1 == MainWorldManager.instance.currentSweepTimesType && BattleManager.instance.sweepCheck(MainWorldManager.instance.currentSweepCampaign, this.RealSweepCount) && (MainWorldManager.instance.currentSweepType == BattleType.BATTLE_TYPE_MAIN_PVE ? MainWorldManager.instance.sendNormalSweepBattle(MainWorldManager.instance.currentSweepCampaign, void 0, 2) : MainWorldManager.instance.sendSpeSweepBattle(MainWorldManager.instance.currentSweepCampaign, 2), this.close()) : BattleManager.instance.checkCount(MainWorldManager.instance.currentSweepCampaign, MainWorldManager.instance.currentSweepCampaign.baseData))
        },
        i.OnClickBtnConfirm = function(t) {
            this._playingAnim || this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowBattleSweepResult, "WindowBattleSweepResult");
var WindowBroadCast = function(t) {
    function e(a) {
        t.call(this),
            e.broadCastList || (e.broadCastList = []),
            this.parames = a,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/GunDongGongGaoSkin.exml"
            /*tpa=resource/eui_skins/GunDongGongGaoSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            this.enabled = !1,
                this.x = GameData.designWidth,
                this.y = GameData.designHeight / 5,
                GameLayer.getInstance().topLayer.addChild(this),
                this.txt = new eui.Label,
                this.txt.size = 20,
                this.txt.x = 5,
                this.txt.y = 5,
                this.txt.textFlow = this.parames,
                this.bg.width = this.txt.width + 5,
                this.bW = this.bg.width,
                this.addChild(this.txt);
            for (var a = 0,
                    i = 0; i < e.broadCastList.length; i++) a += e.broadCastList[i].x + e.broadCastList[i].bW + 50;
            0 != a && (this.x = a),
                this.tickId = GameTick.registerHandler(function() {
                        if (t.x < -t.width) {
                            GameTick.removeHandler(t.tickId),
                                GameLayer.getInstance().topLayer.removeChild(t);
                            for (var a = 0; a < e.broadCastList.length; a++)
                                if (e.broadCastList[a] == t) {
                                    e.broadCastList.splice(a, 1);
                                    break
                                }
                        } else t.x -= 5
                    },
                    50),
                e.broadCastList.push(this)
        },
        e
}(eui.Component);
egret.registerClass(WindowBroadCast, "WindowBroadCast");
var WindowBuJi = function(t) {
    function e() {
        t.call(this, !1),
            this.letfTime = 0,
            this.tickIndex = 0,
            this.level = 1,
            this.militaryranktype = 10,
            this.vipLv = 1,
            this.privilege = [],
            this.addgold = 0,
            this.skinName = "resource/eui_skins/Buji.exml"
            /*tpa=resource/eui_skins/Buji.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setComGroupLeftTime = function(t) {
            this.timeLabel.text = t
        },
        i.showComGroupData = function() {
            this.comTitleLabel.text = Locales.get("panel_supply_btn_normal_supply"),
                this.BuJiShengYuCiShu.text = Locales.get("panel_supply_txt_surplus"),
                this.lingquBtn.label = Locales.get("panel_next_day_activity_btn_name_1"),
                this.BuJiTime.text = Locales.get("panel_supply_txt_next_supply_time")
        },
        i.setComGroupData = function(t, e) {
            this.countLabel.text = t,
                this.timeLabel.text = e
        },
        i.showVipGroupData = function() {
            this.vipTitleLabel.text = Locales.get("panel_supply_btn_strong_supply"),
                this.vipBuJiShengYuCiShu.text = Locales.get("panel_supply_txt_surplus"),
                this.vipLingquBtn.label = Locales.get("panel_next_day_activity_btn_name_1"),
                this.BuJiXiaoHao.text = Locales.get("panel_supply_txt_supply_consume")
        },
        i.setVipGroupData = function(t, e) {
            this.vipCountLabel.text = t,
                this.needCountLabel.text = e
        },
        i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                })
        },
        i.preloadConfigs = function(t) {
            ConfigData.preLoadDats(["exp", "MilitaryRights", "centerAddData", "MilitaryRank", "vip"], [ExpParser, MilitaryrightsParser, CenteradddataParser, MilitaryrankParser, VipParser],
                function() {
                    ConfigData.getAllData("Talent",
                        function() {
                            t()
                        })
                })
        },
        i.initUI = function() {
            UserData.getInstance()._level >= 9 && !GuideManager.bujiGuideBool && GuideManager.nextStep(62),
                WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.showComGroupData(),
                this.setComGroupData("/6", GlobalFunction.getHMSBySecond(0)),
                this.addChild(this.comBuJiItem),
                this.showVipGroupData(),
                this.setVipGroupData("0/5", "0"),
                this.addChild(this.vipBuJiItem),
                this.lingquBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.vipLingquBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.setPanelData, this),
                this.titleLabel.text = Locales.get("panel_supply_txt_title"),
                this.BuJiLabel_01.text = Locales.get("panel_supply_txt_earnings"),
                this.BuJiLabel_02.text = Locales.get("panel_supply_txt_building_lvl"),
                this.BuJiLabel_03.text = Locales.get("panel_supply_txt_building_lvl_vip"),
                this.BuJiLabel_04.text = Locales.get("panel_supply_txt_base_supply_junxian"),
                this.BuJiLabel_05.text = Locales.get("panel_supply_txt_base_supply"),
                this.BuJiLabel_06.text = Locales.get("panel_supply_txt_base_supply_vip"),
                this.BuJiLabel_07.text = Locales.get("panel_supply_txt_base_supply_vip"),
                this.BuJiDes.text = Locales.get("panel_supply_txt_vip_comment"),
                this.setPanelData()
        },
        i.initComItem = function() {
            this.showComGroupData(),
                this.setComGroupData("/6", GlobalFunction.getHMSBySecond(0)),
                this.addChild(this.comBuJiItem),
                this.lingquBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.initVipItem = function() {
            this.showVipGroupData(),
                this.setVipGroupData("0/5", "0"),
                this.addChild(this.vipBuJiItem),
                this.vipLingquBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.clear = function() {
            this.lingquBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.vipLingquBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.setPanelData, this)
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.lingquBtn:
                    console.log("点击了普通补给的领取按钮"),
                        63 == GuideManager.step && GuideManager.nextStep(),
                        this.sendGetCenterGold(1);
                    break;
                case this.vipLingquBtn:
                    console.log("点击了VIP补给的领取按钮");
                    var e = 0;
                    e = VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddCnt - UserData.getInstance().getCostcashcount() != 0 ? CenterAddDataTool.getInstance().getDataByCount(UserData.getInstance().getCostcashcount() + 1).cash : 0,
                        UserData.getInstance().getRes(TypeDefine.RES.Diamond) >= e ? this.strongSupplyCheck() && this.sendGetCenterGold(2) : (Toast.launch("钻石不足"), WindowManager.getInstance().show(WindowManager.windowType.Recharge));
                    break;
                case this.btnClose:
                    this.tickIndex > 0 && (GameTick.removeHandler(this.tickIndex), this.letfTime = 0, this.tickIndex = 0),
                        WindowManager.getInstance().hide(WindowManager.windowType.BuJi),
                        UserData.getInstance().isKeJiJump ? (MainUI.instance.setBottomVisible(!1), UserData.getInstance().isKeJiJump = !1) : MainUI.instance.setBottomVisible(!0)
            }
        },
        i.sendGetCenterGold = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGetCenterGold);
            e.type = t,
                Transport.instance.send(e)
        },
        i.getCenterGoldResult = function(t) {
            console.log("领取补给类型(1 普通  2 紧急): " + t.type),
                console.log("领取补给结果(0 成功  1 cd中  2 没次数  3 钻石不足): " + t.result),
                0 == t.result ? Toast.launch("补给成功", 16777215, !0, 320) : 1 == t.result ? Toast.launch("cd中", 16777215, !0, 320) : 2 == t.result ? Toast.launch("没次数", 16777215, !0, 320) : 3 == t.result && Toast.launch("钻石不足", 16777215, !0, 320)
        },
        i.updateTime = function() {
            return 0 == this.letfTime ? (GameTick.removeHandler(this.tickIndex), void(this.tickIndex = 0)) : void this.setComGroupLeftTime(GlobalFunction.getHMSBySecond(--this.letfTime))
        },
        i.setPanelData = function() {
            var t = this;
            if (this.basegold = ExpParser.GetInstance().getItemById(UserData.getInstance().getPlayerLevel()).centerAddGold, console.log("每次补给金币数 basegold: " + this.basegold), this.addgold = 0, MilitaryrankParser.GetInstance().getItemById(UserData.getInstance().getMilitaryranktype()) && (this.privilege = MilitaryrankParser.GetInstance().getItemById(UserData.getInstance().getMilitaryranktype()).privilege), null != this.privilege)
                for (var e in this.privilege) 3 == MilitaryrightsParser.GetInstance().getItemById(this.privilege[e]).righttype && (1 == MilitaryrightsParser.GetInstance().getItemById(this.privilege[e]).numtype ? this.addgold += this.basegold * MilitaryrightsParser.GetInstance().getItemById(this.privilege[e]).num / 1e3 : 2 == MilitaryrightsParser.GetInstance().getItemById(this.privilege[e]).numtype && (this.addgold += MilitaryrightsParser.GetInstance().getItemById(this.privilege[e]).num));
            console.log("经过计算后，军衔对补给加成 addgold: " + this.addgold),
                this.gold_jichu = Math.ceil(this.basegold),
                console.log("gold_jichu: " + this.gold_jichu),
                this.gold_military = Math.ceil(this.addgold),
                console.log("gold_military: " + this.gold_military),
                this.gold_telent = Math.ceil(this.basegold * TalentTool.getInstance().getTotalData().addPercent),
                console.log("gold_telent: " + this.gold_telent),
                this.gold_vip = Math.ceil((this.basegold + this.gold_telent + this.gold_military) * VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddPer / 100),
                console.log("gold_vip: " + this.gold_vip),
                this.gold_total = this.gold_jichu + this.gold_military + this.gold_telent + this.gold_vip,
                console.log("gold_total: " + this.gold_total),
                this.lvlvLabel.text = UserData.getInstance().getPlayerLevel().toString(),
                this.vipLabel.text = UserData.getInstance().getVipLevel().toString(),
                this.militaryRankLabel.text = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype()).name_l,
                Utils.getImgByUrl(MilitaryManager.GetInstance().getPicByRankLvl(UserData.getInstance().getMilitaryranktype()), this.mrIcon),
                this.lvProduceLabel.text = this.gold_jichu.toString(),
                this.vipProduceLabel.text = this.gold_vip.toString(),
                this.mrProduceLabel.text = this.gold_military.toString(),
                this.sumGainsLabel.text = this.gold_total.toString(),
                UserData.getInstance().getCentergoldcount() > 0 ? this.redPoint.visible = !0 : this.redPoint.visible = !1,
                6 == UserData.getInstance().getCentergoldcount() ? this.setComGroupData(UserData.getInstance().getCentergoldcount() + "/6", GlobalFunction.getHMSBySecond(0)) : (console.log("----------------------- OldServerTime" + UserData.getInstance().getOldServerTime()), console.log("----------------------- Lastcenterrecoverytime" + UserData.getInstance().getLastcenterrecoverytime()), this.letfTime = 7200 - (UserData.getInstance().getOldServerTime() / 1e3 - UserData.getInstance().getLastcenterrecoverytime()), this.setComGroupData(UserData.getInstance().getCentergoldcount() + "/6", GlobalFunction.getHMSBySecond(this.letfTime)), 0 == this.tickIndex && (this.tickIndex = GameTick.registerHandler(function() {
                        t.updateTime()
                    },
                    1e3))),
                0 == UserData.getInstance().getCentergoldcount() ? this.lingquBtn.enabled = !1 : this.lingquBtn.enabled = !0,
                VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddCnt - UserData.getInstance().getCostcashcount() > 0 ? this.redPoint2.visible = !0 : this.redPoint2.visible = !1,
                VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddCnt - UserData.getInstance().getCostcashcount() == 0 ? this.vipLingquBtn.enabled = !1 : this.vipLingquBtn.enabled = !0,
                this.setVipGroupData(VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddCnt - UserData.getInstance().getCostcashcount() + "/" + VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddCnt, "0"),
                VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddCnt - UserData.getInstance().getCostcashcount() != 0 ? this.needCountLabel.text = CenterAddDataTool.getInstance().getDataByCount(UserData.getInstance().getCostcashcount() + 1).cash + "" : this.needCountLabel.text = "0"
        },
        i.strongSupplyCheck = function() {
            return VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).dayCenterAddCnt - UserData.getInstance().getCostcashcount() > 0 ? !0 : !1
        },
        e
}(WindowBase);
egret.registerClass(WindowBuJi, "WindowBuJi");
var WindowCamp = function(t) {
    function e() {
        t.call(this, !1),
            this.currCampID = 2,
            this.currHeadID = 1,
            this.currSex = 2,
            this.currPage = -1,
            this.skinName = "resource/eui_skins/xuanzezhenyingSkin.exml"
            /*tpa=resource/eui_skins/xuanzezhenyingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            WindowManager.getInstance().showWaiting(),
                this.initUI(),
                this.sideLeftBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.sideRightBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.sideSubmitBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnEnter.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.shaiziBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.roleSubmitBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSure.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnCancle.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.roleLeftBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.roleRightBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                WindowManager.getInstance().hideWaiting()
        },
        i.clear = function() {
            MainUI.instance.changeTopMode(topUIMode.normal),
                MainUI.instance.changeTopMode(topUIMode.normal),
                this.sideLeftBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.sideRightBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.sideSubmitBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnEnter.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.shaiziBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.roleSubmitBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSure.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnCancle.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.roleLeftBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.roleRightBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.sideLeftBtn:
                    break;
                case this.sideRightBtn:
                    break;
                case this.sideSubmitBtn:
                    break;
                case this.btnEnter:
                    break;
                case this.shaiziBtn:
                    break;
                case this.roleSubmitBtn:
                    break;
                case this.btnSure:
                    break;
                case this.btnCancle:
                    break;
                case this.roleLeftBtn:
                    break;
                case this.roleRightBtn:
            }
        },
        i.initUI = function() {
            MainUI.instance.changeTopMode(topUIMode["null"]),
                MainUI.instance.setBottomVisible(!1),
                SUI.setTextureAsync(this.imgIcon, Path.item_sURL + "reset_head.png"),
                this.setChangeHeadCardNum()
        },
        i.showWitchGroup = function(t) {
            void 0 === t && (t = 0),
                this.currPage = t,
                0 == t ? (this.chooseSideGroup.visible = !0, this.chooseRoleGroup.visible = !1) : 1 == t ? (this.chooseSideGroup.visible = !1, this.chooseRoleGroup.visible = !0, this.chooseRoleHead.visible = !0, this.changeHeadDesGroup.visible = !1) : 2 == t && (this.chooseSideGroup.visible = !1, this.chooseRoleGroup.visible = !0, this.chooseRoleHead.visible = !1, this.changeHeadDesGroup.visible = !0)
        },
        i.setChangeHeadCardNum = function() {
            for (var t = ItemsManager.getInstance().getListByType(3), e = 0; e < t.length; e++) {
                var a = t[e];
                if (1287 == a.id) {
                    this.txtNum.text = "x" + a.count,
                        a.count > 0 ? this.txtNum.textColor = 65280 : this.txtNum.textColor = 16711680;
                    break
                }
            }
        },
        e
}(WindowBase);
egret.registerClass(WindowCamp, "WindowCamp");
var WindowCampBattle = function(t) {
    function e() {
        t.call(this, !0),
            this.portList = {},
            this.msgList = [],
            this.pointCount = 0,
            this.iconSizes = {
                "campBattle_square_high_2.png"
                /*tpa=campBattle_square_high_2.png*/
                : [80, 80],
                "campBattle_square_high_3.png"
                /*tpa=campBattle_square_high_3.png*/
                : [80, 80],
                "campBattle_square_high_0.png"
                /*tpa=campBattle_square_high_0.png*/
                : [80, 80],
                "campBattle_star_high_2.png"
                /*tpa=campBattle_star_high_2.png*/
                : [120, 120],
                "campBattle_star_3.png"
                /*tpa=campBattle_star_3.png*/
                : [120, 120],
                "campBattle_star_2.png"
                /*tpa=campBattle_star_2.png*/
                : [120, 120],
                "campBattle_star_0.png"
                /*tpa=campBattle_star_0.png*/
                : [120, 120],
                "campBattle_circle_high_1.png"
                /*tpa=campBattle_circle_high_1.png*/
                : [60, 70],
                "campBattle_circle_high_0.png"
                /*tpa=campBattle_circle_high_0.png*/
                : [60, 70],
                "campBattle_circle_high_3.png"
                /*tpa=campBattle_circle_high_3.png*/
                : [60, 70],
                "campBattle_headImg_back.png"
                /*tpa=campBattle_headImg_back.png*/
                : [69, 85],
                "campBattle_square_1.png"
                /*tpa=campBattle_square_1.png*/
                : [80, 80],
                "campBattle_square_2.png"
                /*tpa=campBattle_square_2.png*/
                : [80, 80],
                "campBattle_square_3.png"
                /*tpa=campBattle_square_3.png*/
                : [80, 80],
                "campBattle_star_1.png"
                /*tpa=campBattle_star_1.png*/
                : [120, 120],
                "campBattle_circle_0.png"
                /*tpa=campBattle_circle_0.png*/
                : [60, 70],
                "campBattle_circle_2.png"
                /*tpa=campBattle_circle_2.png*/
                : [60, 70],
                "campBattle_baseCenter_2.png"
                /*tpa=campBattle_baseCenter_2.png*/
                : [82, 104],
                "campBattle_square_0.png"
                /*tpa=campBattle_square_0.png*/
                : [80, 80],
                "campBattle_boss_2.png"
                /*tpa=campBattle_boss_2.png*/
                : [123, 61],
                "campBattle_circle_1.png"
                /*tpa=campBattle_circle_1.png*/
                : [60, 70],
                "campBattle_star_high_0.png"
                /*tpa=campBattle_star_high_0.png*/
                : [120, 120],
                "campBattle_circle_high_2.png"
                /*tpa=campBattle_circle_high_2.png*/
                : [60, 70],
                "campBattle_baseCenter_1.png"
                /*tpa=campBattle_baseCenter_1.png*/
                : [81, 107],
                "campBattle_star_high_3.png"
                /*tpa=campBattle_star_high_3.png*/
                : [120, 120],
                "campBattle_star_high_1.png"
                /*tpa=campBattle_star_high_1.png*/
                : [120, 120],
                "campBattle_square_high_1.png"
                /*tpa=campBattle_square_high_1.png*/
                : [80, 80],
                "campBattle_boss_1.png"
                /*tpa=campBattle_boss_1.png*/
                : [123, 61],
                "campBattle_boss_3.png"
                /*tpa=campBattle_boss_3.png*/
                : [123, 61],
                "campBattle_opt_mov.png"
                /*tpa=campBattle_opt_mov.png*/
                : [33, 44],
                "campBattle_circle_3.png"
                /*tpa=campBattle_circle_3.png*/
                : [60, 70],
                "campBattle_opt_atk.png"
                /*tpa=campBattle_opt_atk.png*/
                : [60, 76],
                "campBattle_baseCenter_3.png"
                /*tpa=campBattle_baseCenter_3.png*/
                : [81, 102]
            },
            this.skinName = "resource/eui_skins/ZB_ZhenYingZhanSkin.exml"
            /*tpa=resource/eui_skins/ZB_ZhenYingZhanSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnMenu.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnMenu, this),
                this.btnPosition.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnPosition, this),
                this.btnDetect.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnDetect, this),
                this.btnDead.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnDead, this),
                this.btnRecord.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRecord, this),
                SUI.addClickEffect(this.btnRecord),
                this.btnArrange.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnArrange, this),
                SUI.addClickEffect(this.btnArrange),
                this.btnRanking.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRanking, this),
                SUI.addClickEffect(this.btnRanking),
                this.btnIntro.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnIntro, this),
                SUI.addClickEffect(this.btnIntro),
                this.btnChat.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnChat, this),
                SUI.addClickEffect(this.btnChat),
                this.btnAI.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnAI, this),
                CampBattleManager.instance,
                this.initMap(),
                this.initUI(),
                this.inited = !0,
                this.btnDetect.icon.source = Path.item_sURL + "icon_s_credit.png",
                this.btnDead.icon.source = Path.item_sURL + "icon_s_credit.png"
        },
        i.updateMorale = function() {
            var t = Locales.get("ui_campBattle_over_shiqiTitle");
            t += ":",
                CampBattleManager.instance.morale >= 70 ? t += "#00f445" : CampBattleManager.instance.morale >= 30 ? t += "#ffff00" : CampBattleManager.instance.morale < 30 && (t += "#ff0000"),
                t += CampBattleManager.instance.morale,
                t += "#/",
                t += CampBattleManager.instance.moraleLmt,
                this.txtShiQi.textFlow = Utils.textFlowByStr(t)
        },
        i.initUI = function() {
            113 == GuideManager.step && GuideManager.nextStep(),
                this.updateUI(),
                this.updateQuickMsg(),
                this.txtTimeDesc.text = Locales.get("ui_campBattle_endTimeTitle"),
                this.txtTime.text = "00:00",
                this.txtDesc.text = Locales.get("ui_campBattle_endTimeReward"),
                this.txtCampTitle.text = Locales.get("ui_campBattle_campTitle"),
                this.txtCampResTitle.text = Locales.get("ui_campBattle_resTitle"),
                this.txtCampPortTitle.text = Locales.get("ui_campBattle_portTitle"),
                this.txtCampName1.text = Locales.get("ui_campBattle_campTitle1"),
                this.txtCampName2.text = Locales.get("ui_campBattle_campTitle2"),
                this.txtCampName3.text = Locales.get("ui_campBattle_campTitle3"),
                this.txtCDDesc.text = Locales.get("ui_campBattle_cdTitle"),
                this.txtCD.text = Locales.get("ui_campBattle_cd", 0),
                this.txtCDDesc.visible = !1,
                this.txtCD.visible = !1,
                this.txtDetect.text = Locales.get("ui_campbattle_detectDesc"),
                this.btnDetect.labelDisplay.text = CampbattlebasedataParser.GetInstance().getDataArr()[0].detectCost.toString(),
                this.txtDead.text = Locales.get("ui_campbattle_bloodDesc"),
                this.txtIntro.text = Locales.get("panel_oilfiled_txt_btn_1"),
                this.txtRecord.text = Locales.get("ui_campBattle_zhanbao"),
                this.txtArrange.text = Locales.get("btn_marine"),
                this.txtRanking.text = Locales.get("ui_mainWorld_rank"),
                this.More.visible = !0,
                this.btnMenu.currentState = this.More.visible ? "close" : "open"
        },
        i.updateEndTime = function(t, e) {
            var a = t.split(".");
            if (this.txtTime.text = a[1] + ":" + a[2], 1 == e) {
                egret.Tween.removeTweens(this.txtTime);
                var i = egret.Tween.get(this.txtTime);
                this.txtTime.textColor = Utils.rgbToColor(255, 39, 41),
                    i.to({
                            alpha: 0
                        },
                        250).to({
                            alpha: 1
                        },
                        250)
            } else this.txtTime.textColor = 16777215;
            if (1 == CampBattleManager.isAutoBattle) {
                this.pointCount = this.pointCount + 1,
                    this.pointCount > 4 && (this.pointCount = 0);
                for (var n = "",
                        s = 0; s < this.pointCount; ++s) n += ".";
                this.btnAI.visible = !0,
                    this.txtAI.visible = !0,
                    this.txtAI.text = Locales.get("ui_campBattle_campLite_AIing") + n
            } else this.btnAI.visible = !1,
                this.txtAI.visible = !1
        },
        i.updateUI = function() {
            this.updateMorale(),
                this.txtZhanGong.text = Locales.get("ui_campBattle_zgRank_zgTitle") + CampBattleManager.instance.score;
            var t = CampBattleManager.instance.serverCampList;
            this.txtCampRes11.text = t[CampBattleManager.JUSTICE].resource,
                this.txtCampRes21.text = t[CampBattleManager.PREDATOR].resource,
                this.txtCampRes31.text = t[CampBattleManager.HONOUR].resource;
            var e = t[CampBattleManager.JUSTICE].portlist.length;
            e > 0 && (e -= 1),
                this.txtCampRes12.text = e.toString(),
                e = t[CampBattleManager.PREDATOR].portlist.length,
                e > 0 && (e -= 1),
                this.txtCampRes22.text = e.toString(),
                e = t[CampBattleManager.HONOUR].portlist.length,
                e > 0 && (e -= 1),
                this.txtCampRes32.text = e.toString();
            var a = CampbattlebasedataParser.GetInstance().getDataArr()[0],
                i = CampBattleManager.instance.bloodUseTimes * a.bloodCostPlus + a.bloodCost;
            this.btnDead.labelDisplay.text = i.toString(),
                CampBattleManager.instance.bloodTimes > 0 ? (this.txtDead.text = Locales.get("ui_campbattle_bloodTimeDesc", CampBattleManager.instance.bloodTimes + "/" + a.bloodTimes), this.btnDead.enabled = !1) : (this.txtDead.text = Locales.get("ui_campbattle_bloodDesc"), this.btnDead.enabled = !0);
            var n = CampbattlemapdataParser.GetInstance().getItemById(CampBattleManager.instance.getCurrentPositionData().baseData.id).name_l;
            this.txtPosition.text = Locales.get("currentPort", n)
        },
        i.updateDetectTime = function(t) {
            if (t > 0) {
                if (10 > t) {
                    this.txtDetect.textColor = 16711680,
                        egret.Tween.removeTweens(this.txtDetect);
                    var e = egret.Tween.get(this.txtDetect);
                    e.to({
                            alpha: 0
                        },
                        250).to({
                            alpha: 1
                        },
                        250)
                } else this.txtDetect.textColor = 16777215;
                this.btnDetect.enabled = !1,
                    this.txtDetect.text = Locales.get("ui_campbattle_detectTimeDesc", t)
            } else this.btnDetect.enabled = !0,
                this.txtDetect.text = Locales.get("ui_campbattle_detectDesc"),
                this.txtDetect.textColor = 16777215
        },
        i.updateCDTime = function(t) {
            if (0 >= t) return this.txtCD.visible = !1,
                void(this.txtCDDesc.visible = !1);
            if (this.txtCD.visible = !0, this.txtCDDesc.visible = !0, this.txtCD.text = Locales.get("ui_campBattle_cd", t), 10 > t) {
                egret.Tween.removeTweens(this.txtCD);
                var e = egret.Tween.get(this.txtCD);
                e.to({
                        alpha: 0
                    },
                    250).to({
                        alpha: 1
                    },
                    250)
            }
        },
        i.initMap = function() {
            this.mapLayer = new eui.Group,
                this.scvMap = new ScrollerEx,
                this.scvMap.bounces = !1,
                this.scvMap.width = this.mapContainer.width,
                this.scvMap.height = this.mapContainer.height,
                this.mapLayer.width = 1500,
                this.mapLayer.height = 1200,
                this.scvMap.viewport = this.mapLayer,
                this.mapContainer.addChild(this.scvMap);
            var t = new eui.Image;
            SUI.setTextureAsync(t, Path.campBattleUrl + "campBattle_bg_map.jpg"),
                this.mapLayer.addChild(t),
                this.updatePortList(),
                Utils.delayCall(500,
                    function() {
                        CampBattleManager.instance.moveToCurrentPosition()
                    })
        },
        i.onClickPort = function(t) {
            var e = t.currentTarget;
            if (CampBattleManager.instance.checkCanOpt(e.optData.baseData.id) && e.optData.baseData.portType != CampBattleManager.PORT_CENTER) {
                Log.logZDY("XXXXXXXXXXX." + e.optData.baseData.id + ",camp." + e.optData.camp);
                var a = null;
                a = e.optData.serverData && e.optData.camp != UserData.getInstance().getCamp() && 0 != e.optData.camp && e.optData.camp ? CampBattleManager.OPT_ATK : CampBattleManager.OPT_MOV,
                    CampBattleManager.instance.moveAndAtkPort(e.optData, a)
            }
        },
        i.updatePortList = function() {
            var t = this,
                e = CampBattlePortOptData.getPortList(),
                a = null,
                i = "circle",
                n = 0,
                s = 18,
                r = 0,
                o = CampBattleManager.instance.bossList;
            for (var l in e) {
                var h = e[l],
                    c = null;
                null == this.portList[l] ? (c = new eui.Group, this.portList[l] = c, this.mapLayer.addChild(c), c.touchEnabled = !0, c.touchChildren = !1, c.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickPort, this)) : c = this.portList[l],
                    Utils.setPosition(c, h.baseData.position[0] + 750, h.baseData.position[1] + 600),
                    c.optData = h,
                    r = null != h.serverData ? h.serverData.playernum : 0,
                    CampBattleManager.PORT_CENTER == h.baseData.portType ? (i = "baseCenter", s = 24) : CampBattleManager.PORT_ARMY == h.baseData.portType ? (i = "square", s = 18) : CampBattleManager.PORT_OIL == h.baseData.portType ? (i = "star", s = 24) : CampBattleManager.PORT_NORMAL == h.baseData.portType && (i = "circle", s = 18),
                    n = h.camp;
                var d = "campBattle_" + i + "_" + n + ".png";
                a = Path.campBattleUrl + "campBattleSceneLite/" + d;
                var g = this.iconSizes[d];
                if (a != c.iconURL || !c.icon) {
                    Utils.removeNode(c.icon),
                        c.iconURL = a;
                    var u = new eui.Image;
                    c.icon = u,
                        u.width = g.width,
                        u.height = g.height,
                        u.anchorOffsetX = .5 * g[0] - 5,
                        u.anchorOffsetY = .5 * g[1] + 5,
                        SUI.setTextureAsync(u, a),
                        c.addChild(u)
                }
                var p = CampBattleManager.COLOR_LIST[n];
                if (null == c.portName) {
                    var m = CampbattlemapdataParser.GetInstance().getItemById(h.baseData.id).name_l,
                        _ = new eui.Label(m);
                    c.portName = _,
                        _.size = s,
                        _.textAlign = egret.HorizontalAlign.CENTER,
                        _.verticalAlign = egret.VerticalAlign.MIDDLE,
                        _.textColor = p,
                        _.fontFamily = Const.DEFAULT_FONT,
                        _.height = 35.7,
                        _.anchorOffsetX = _.width / 2,
                        _.anchorOffsetY = _.height / 2,
                        _.y = c.icon.y + g[1] / 2,
                        _.bold = !0,
                        _.strokeColor = 0,
                        _.stroke = 2,
                        c.addChild(c.portName)
                }
                if (c.portName.textColor = p, !c.portNum) {
                    var v = new eui.Label("0");
                    c.portNum = v,
                        v.size = s,
                        v.textAlign = egret.HorizontalAlign.CENTER,
                        v.verticalAlign = egret.VerticalAlign.MIDDLE,
                        v.textColor = Utils.rgbToColor(255, 192, 0),
                        v.fontFamily = Const.DEFAULT_FONT,
                        v.height = 35.7,
                        v.anchorOffsetX = v.width / 2,
                        v.anchorOffsetY = v.height / 2,
                        v.x = c.portName.x,
                        v.y = c.portName.y + c.portName.height / 2 + 5,
                        v.bold = !0,
                        v.strokeColor = 0,
                        v.stroke = 2,
                        c.addChild(c.portNum)
                }
                if (Math.floor(r) <= 0 && (r = 0), CampBattleManager.instance.detectTime > 0 ? (c.portNum.text = r.toString(), c.portNum.visible = !0) : UserData.getInstance().getCamp() == h.camp && h.baseData.portType != CampBattleManager.PORT_CENTER ? (c.portNum.text = r.toString(), c.portNum.visible = !0) : c.portNum.visible = !1, null != c.optData.preCamp && c.optData.preCamp != c.optData.camp) {
                    Log.logZDY("////////////////preCamp." + c.optData.preCamp + ",camp." + c.optData.camp);
                    var f = Path.campBattleUrl + "campBattle_capture.json",
                        I = Path.campBattleUrl + "campBattle_capture.png";
                    SUI.loadMovieClip(f, I, c,
                        function(t) {
                            t.width = GameData.designWidth,
                                t.height = GameData.designHeight,
                                t.y = -50,
                                t.gotoAndPlay(0, 1),
                                t.addEventListener(egret.Event.COMPLETE,
                                    function() {
                                        Utils.removeNode(t)
                                    },
                                    void 0)
                        },
                        this)
                }
                Utils.removeNode(c.optTypeGroup),
                    delete c.optTypeGroup;
                var T = c.optData.checkCanOpt();
                if (null != T && h.baseData.portType != CampBattleManager.PORT_CENTER) {
                    c.optData.preCamp != c.optData.camp && c.canOpt && (Utils.removeNode(c.canOpt), c.canOpt = null);
                    var y = 0,
                        D = 0,
                        P = "",
                        C = 0,
                        E = new eui.Group,
                        S = new eui.Image;
                    E.addChild(S),
                        c.optTypeGroup = E,
                        c.addChild(c.optTypeGroup);
                    var b = [0, 0];
                    T == CampBattleManager.OPT_ATK ? (y = -2, C = Utils.rgbToColor(255, 39, 41), P = Locales.get("ui_campBattle_opt_atk_name"), SUI.setTextureAsync(S, Path.campBattleUrl + "campBattleSceneLite/campBattle_opt_mov.png"), b = this.iconSizes["campBattle_opt_mov.png"
                            /*tpa=campBattle_opt_mov.png*/
                        ]) : T == CampBattleManager.OPT_MOV && (y = -2, C = Utils.rgbToColor(255, 222, 69), P = Locales.get("ui_campBattle_opt_mov_name"), SUI.setTextureAsync(S, Path.campBattleUrl + "campBattleSceneLite/campBattle_opt_mov.png"), b = this.iconSizes["campBattle_opt_mov.png"
                            /*tpa=campBattle_opt_mov.png*/
                        ]),
                        E.width = b[0],
                        E.height = b[1],
                        E.anchorOffsetX = .5 * E.width,
                        E.anchorOffsetY = .5 * E.height,
                        Utils.setPosition(c.optTypeGroup, c.icon.x + y, c.icon.y - g[1] / 2 - D - 10);
                    var L = E.y,
                        M = egret.Tween.get(c.optTypeGroup, {
                            loop: !0
                        });
                    M.to({
                            y: L - 20
                        },
                        500, egret.Ease.quadOut).to({
                            y: L
                        },
                        500, egret.Ease.quartIn);
                    var w = new eui.Label(P);
                    if (w.size = 18, w.textAlign = egret.HorizontalAlign.CENTER, w.verticalAlign = egret.VerticalAlign.MIDDLE, w.textColor = C, w.fontFamily = Const.DEFAULT_FONT, w.height = 35.7, w.anchorOffsetX = .5 * w.width, w.anchorOffsetY = w.height, w.x = .5 * b[0], w.y = 10, w.bold = !0, w.strokeColor = 0, w.stroke = 2, E.addChild(w), null == c.canOpt) {
                        var x = new eui.Image,
                            A = this.iconSizes["campBattle_" + i + "_high_" + n + ".png"];
                        SUI.setTextureAsync(x, Path.campBattleUrl + "campBattleSceneLite/campBattle_" + i + "_high_" + n + ".png"),
                            x.anchorOffsetX = A[0] / 2 - 5,
                            x.anchorOffsetY = A[1] / 2 + 5,
                            c.canOpt = x;
                        var k = egret.Tween.get(c.canOpt, {
                            loop: !0
                        });
                        k.to({
                                    alpha: 0
                                },
                                500).to({
                                    alpha: 1
                                },
                                500),
                            c.addChild(c.canOpt)
                    }
                } else c.canOpt && (Utils.removeNode(c.canOpt), delete c.canOpt);
                for (var B = null,
                        R = 0,
                        U = o; R < U.length; R++) {
                    var G = U[R];
                    G.port && h.baseData.id == Math.floor(G.port) && (B = G)
                }
                if (c.boss && (delete c.boss.name, delete c.boss.back, delete c.boss.timeLeft, Utils.removeNode(c.boss), delete c.boss), null != B) {
                    var G = new eui.Group;
                    c.boss = G,
                        c.addChild(c.boss);
                    CampbattlenpcdataParser.GetInstance().getItemById(B.id);
                    c.boss.back = new eui.Image;
                    var O = this.iconSizes["campBattle_boss_" + B.camp + ".png"];
                    SUI.setTextureAsync(c.boss.back, Path.campBattleUrl + "campBattleSceneLite/campBattle_boss_" + B.camp + ".png"),
                        c.boss.back.anchorOffsetX = .5 * O.width,
                        c.boss.back.anchorOffsetX = .5 * O.height,
                        c.boss.back.x = 5,
                        c.boss.addChild(c.boss.back);
                    var N = new eui.Label(B.name_l);
                    N.size = 18,
                        N.textAlign = egret.HorizontalAlign.CENTER,
                        N.verticalAlign = egret.VerticalAlign.MIDDLE,
                        N.textColor = p,
                        N.fontFamily = Const.DEFAULT_FONT,
                        N.height = 35.7,
                        N.anchorOffsetX = .5 * N.width,
                        N.anchorOffsetY = .5 * N.height,
                        N.y = -O[1] / 2,
                        N.bold = !0,
                        N.strokeColor = 0,
                        N.stroke = 2,
                        c.boss.addChild(N),
                        c.boss.name = N;
                    var H = new eui.Label("");
                    H.size = 22,
                        H.textAlign = egret.HorizontalAlign.CENTER,
                        H.verticalAlign = egret.VerticalAlign.MIDDLE,
                        H.textColor = Utils.rgbToColor(255, 235, 15),
                        H.fontFamily = Const.DEFAULT_FONT,
                        H.height = 35.7,
                        H.anchorOffsetX = .5 * H.width,
                        H.anchorOffsetY = .5 * H.height,
                        H.y = -O[1] / 2 - 20,
                        c.boss.addChild(H),
                        c.boss.timeLeft = H,
                        c.boss.addChild(c.boss.timeLeft)
                }
                c.optData.preCamp = c.optData.camp
            }
            if ((!this.currentPortLite || this.currentPortLite.optData && this.currentPortLite.optData.baseData.id != CampBattleManager.instance.currentPortId) && (this.currentPortLite && this.currentPortLite.myPoint && (Utils.removeNode(this.currentPortLite.headImgBack), dragonBones.WorldClock.clock.remove(this.currentPortLite.myPointArmature), Utils.removeNode(this.currentPortLite.myPoint), Utils.removeNode(this.currentPortLite.headImg), Utils.removeNode(this.currentPortLite.headEffect), delete this.currentPortLite.headEffect), this.currentPortLite = this.portList[CampBattleManager.instance.currentPortId], this.currentPortLite)) {
                var W = Path.campBattleUrl + "mypoint/lightcircle.json",
                    F = Path.campBattleUrl + "mypoint/texture.png",
                    V = Path.campBattleUrl + "mypoint/texture.json";
                ResLoader.instance.preLoadResList([F, V, W],
                        function(e) {
                            var a = e[0],
                                i = e[1],
                                n = e[2],
                                s = new dragonBones.EgretFactory;
                            s.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(n)),
                                s.addTextureAtlas(new dragonBones.EgretTextureAtlas(a, i));
                            var r = s.buildArmature("Stage");
                            dragonBones.WorldClock.clock.add(r),
                                r.animation.gotoAndPlay("newAnimation"),
                                t.currentPortLite.addChildAt(r.display, 0),
                                t.currentPortLite.myPoint = r.display,
                                t.currentPortLite.myPointArmature = r
                        },
                        this),
                    this.currentPortLite.headImgBack = new eui.Image;
                var q = this.iconSizes["campBattle_headImg_back.png"
                        /*tpa=campBattle_headImg_back.png*/
                    ],
                    Y = this.currentPortLite.iconURL.replace(Path.campBattleUrl + "campBattleSceneLite/", ""),
                    j = this.iconSizes[Y];
                SUI.setTextureAsync(this.currentPortLite.headImgBack, Path.campBattleUrl + "campBattleSceneLite/campBattle_headImg_back.png"),
                    this.currentPortLite.optData.baseData.portType != CampBattleManager.PORT_CENTER ? Utils.setPosition(this.currentPortLite.headImgBack, this.currentPortLite.icon.x, this.currentPortLite.icon.y - j[1]) : Utils.setPosition(this.currentPortLite.headImgBack, this.currentPortLite.icon.x, this.currentPortLite.icon.y - j[1] + 40),
                    this.currentPortLite.headImgBack.anchorOffsetX = .5 * q[0],
                    this.currentPortLite.headImgBack.anchorOffsetY = .5 * q[1],
                    this.currentPortLite.addChildAt(this.currentPortLite.headImgBack, 1),
                    this.currentPortLite.headImg = new eui.Image;
                var z = parseInt(UserData.getInstance().getCamp() + "0" + UserData.getInstance().getHead());
                SUI.setTextureAsync(this.currentPortLite.headImg, Path.GetHeadPicUrl(z, 1),
                        function(e) {
                            t.currentPortLite.headImg.anchorOffsetX = .5 * e.textureWidth,
                                t.currentPortLite.headImg.anchorOffsetY = .5 * e.textureHeight
                        },
                        this),
                    Utils.setScale(this.currentPortLite.headImg, .6),
                    Utils.setPosition(this.currentPortLite.headImg, this.currentPortLite.headImgBack.x - 1, this.currentPortLite.headImgBack.y - 10),
                    this.currentPortLite.addChildAt(this.currentPortLite.headImg, 2)
            }
            this.processBlood(),
                this.updateBossLeftTime()
        },
        i.processBlood = function() {
            var t = this;
            if (this.currentPortLite && (Utils.removeNode(this.currentPortLite.headEffect), delete this.currentPortLite.headEffect, CampBattleManager.instance.bloodTimes > 0)) {
                var e = Path.campBattleUrl + "campBattle_bloodEffect.json",
                    a = Path.campBattleUrl + "campBattle_bloodEffect.png";
                this.currentPortLite;
                SUI.loadMovieClip(e, a, this.currentPortLite,
                    function(e) {
                        CampBattleManager.instance.bloodTimes > 0 ? (t.currentPortLite.addChildAt(e, 0), e.width = GameData.designWidth, e.height = GameData.designHeight, e.y = t.currentPortLite.headImgBack.y - 25, t.currentPortLite.headEffect = e) : (Utils.removeNode(e), delete t.currentPortLite.headEffect)
                    },
                    this)
            }
        },
        i.updateBossLeftTime = function() {
            for (var t = CampBattleManager.instance.bossList,
                    e = 0,
                    a = t; e < a.length; e++) {
                var i = a[e];
                if (i.id > 0) {
                    var n = this.portList[i.port];
                    if (n) {
                        var s = i.cd - UserData.getInstance().getOldServerTime() / 1e3;
                        i.cd > 0 && s > 0 ? n.boss && n.boss.timeLeft && (n.boss.timeLeft.visible = !0, n.boss.timeLeft.text = GlobalFunction.getHMSBySecond(s)) : n.boss && n.boss.timeLeft && (n.boss.timeLeft.visible = !1)
                    }
                }
            }
        },
        i.update = function() {
            CampBattleManager.needPosition && (CampBattleManager.needPosition = !1, this.moveToCurrentPosition())
        },
        i.moveToCurrentPosition = function(t) {
            var e = this.portList[CampBattleManager.instance.currentPortId],
                a = e.x,
                i = e.y;
            a -= .5 * this.scvMap.width,
                i -= .5 * this.scvMap.height;
            var n = t ? 0 : 200;
            this.scvMap.scrollXY(a, i, 1500, 1200, n)
        },
        i.processDetect = function() {
            this.updatePortList()
        },
        i.setQuickMsg = function(t) {
            this.msgList.push(t),
                this.msgList.length > 4 && this.msgList.shift(),
                this.updateQuickMsg()
        },
        i.updateQuickMsg = function() {
            for (var t = 0; 4 > t; ++t) {
                var e = this["record" + (t + 1)];
                t < this.msgList.length ? (e.visible = !0, e.text = this.msgList[t]) : e.visible = !1
            }
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnMenu = function(t) {
            this.More.visible = !this.More.visible,
                this.btnMenu.currentState = this.More.visible ? "close" : "open"
        },
        i.OnClickBtnPosition = function(t) {
            this.moveToCurrentPosition()
        },
        i.OnClickBtnDetect = function(t) {
            CampBattleManager.instance.buyDetect()
        },
        i.OnClickBtnDead = function(t) {
            CampBattleManager.instance.buyBlood()
        },
        i.OnClickBtnRecord = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.CampBattleReports)
        },
        i.OnClickBtnAI = function(t) {
            GameAlert.getInstance().show(Locales.get("ui_campBattle_campLite_alert_content"), Locales.get("ui_campBattle_campLite_cancelAI"),
                function() {
                    RequestManager.GetInstance().setAI(!1)
                },
                void 0, Locales.get("panel_retired_btn_blue"))
        },
        i.OnClickBtnArrange = function(t) {
            WindowManager.getInstance().needShowWindow = !0,
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceGetTactic, null, !0)
        },
        i.OnClickBtnRanking = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.CampBattleRankingList)
        },
        i.OnClickBtnIntro = function(t) {
            var e = Locales.get("ui_campBattle_desc_title"),
                a = Locales.get("ui_campBattle_desc_content1");
            QiJvTouAlert.getInstance().showTxtDescPage(e, a)
        },
        i.OnClickBtnChat = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.Chat)
        },
        i.clear = function() {
            CampBattleManager.needOpen = !1,
                this.currentPortLite && this.currentPortLite.myPointArmature && dragonBones.WorldClock.clock.remove(this.currentPortLite.myPointArmature);
            var t = Path.campBattleUrl + "mypoint/lightcircle.json",
                e = Path.campBattleUrl + "mypoint/texture.png",
                a = Path.campBattleUrl + "mypoint/texture.json";
            ResLoader.instance.unloadResList([t, e, a])
        },
        e
}(WindowBase);
egret.registerClass(WindowCampBattle, "WindowCampBattle");
var WindowCampBattleEnd = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZB_ZhenYingZhan_JieSuanSkin.exml"
            /*tpa=resource/eui_skins/ZB_ZhenYingZhan_JieSuanSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this.data = t,
                this.txtAttackTimes.text = Locales.get("ui_campBattle_end_atkCount", this.data.attacknum),
                this.txtDefendTimes.text = Locales.get("ui_campBattle_end_defCount", this.data.defendnum),
                this.txtKill.text = Locales.get("ui_campBattle_end_killCount", this.data.killnum),
                this.txtOccupy.text = Locales.get("ui_campBattle_end_portCount", this.data.occupynum),
                this.txtScore1.text = Locales.get("ui_campBattle_end_zhangong", CampBattleManager.instance.score),
                this.txtRanking1.text = Locales.get("ui_campBattle_end_zgRank", this.data.rank);
            var e = CampbattlescoredataParser.GetInstance().getItemById(this.data.rank),
                a = 0;
            e && CampBattleManager.instance.score > 0 && (a = e.score),
                this.txtScore2.text = Locales.get("ui_campBattle_end_sw", a),
                this.txtDesc.text = Locales.get("ui_campBattle_end_desc"),
                this.btnHome.labelDisplay.text = Locales.get("ui_campBattle_return");
            var i = [];
            i.push({
                    x: this.CAMP1.x,
                    y: this.CAMP1.y
                }),
                i.push({
                    x: this.CAMP2.x,
                    y: this.CAMP2.y
                }),
                i.push({
                    x: this.CAMP3.x,
                    y: this.CAMP3.y
                });
            var n = CampBattleManager.instance.generalCampRankList();
            for (var s in n) {
                var r = n[s],
                    o = r.campid,
                    l = this["CAMP" + o];
                l.touchEnabled = !1,
                    l.touchChildren = !1;
                var h = this["imgIcon" + o];
                SUI.setTextureAsync(h, Path.GetCampPicUrl(o, 0)),
                    l.y = i[s].y,
                    l.x = i[s].x
            }
        },
        i.init = function() {
            this.btnHome.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnHome, this),
                this.txtName.text = UserData.getInstance().getUserName(),
                SUI.setTextureAsync(this.imgHead, Path.GetHeadPicUrl(UserData.getInstance().getHead())),
                this.txtVIP.text = Locales.get("ui_main_vipLevel", UserData.getInstance().getVipLevel())
        },
        i.OnClickBtnHome = function(t) {
            WindowManager.getInstance().hideAll()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowCampBattleEnd, "WindowCampBattleEnd");
var WindowCampBattleOver = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZB_zZhenYingZhan_ZhanDouSkin.exml"
            /*tpa=resource/eui_skins/ZB_zZhenYingZhan_ZhanDouSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.playBattle = function(t, e, a) {
            var i, n = t.x,
                s = 0,
                r = 1,
                o = 0;
            3 == a || 5 == a ? (r = .8, o = 5) : 2 == a || 4 == a ? (r = .8, o = 5) : r = 1.1,
                e ? (i = -24, s = n - 50, t.x = s) : (i = 24, s = n + 50, t.x = s);
            var l = 10 * Utils.randInt(0, 50),
                h = 10 * Utils.randInt(20, 50),
                c = 10 * Utils.randInt(10, 50),
                d = egret.Tween.get(t);
            d.to({
                    x: n
                },
                500, egret.Ease.quadIn).wait(l).call(function() {
                var a = 0;
                a = e ? t.x + t.width + 30 : t.x - t.width - 30,
                    EffectManager.instance.getShipFireEff(t.parent, {
                        x: a,
                        y: t.y - t.height
                    }, !e, 0)
            }).wait(h).call(function() {
                var e = t.x + Utils.randInt(-30, 30);
                EffectManager.instance.getShipHitEff(t.parent, void 0, {
                        x: e,
                        y: t.y
                    },
                    r)
            }).wait(c).call(function() {
                var e = t.x + Utils.randInt(-30, 30);
                EffectManager.instance.getShipHitEff(t.parent, void 0, {
                        x: e,
                        y: t.y
                    },
                    r)
            });
            var g = Path.effectUrl + "campBattle_water.json",
                u = Path.effectUrl + "campBattle_water.png";
            SUI.loadSpriteSheet(g, u,
                function(a, i) {
                    var n = new egret.MovieClipDataFactory(a, i),
                        s = new egret.MovieClip(n.generateMovieClipData("default"));
                    s.width = GameData.designWidth,
                        s.height = GameData.designHeight,
                        t.addChild(s),
                        s.gotoAndPlay(0, -1);
                    var o = (++SUI.tagInc).toString();
                    ResLoader.instance.addRef(u, o),
                        s.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                            function() {
                                ResLoader.instance.clearTag(o)
                            },
                            void 0),
                        e || (s.scaleX = -1),
                        s.x = .3 * t.width,
                        s.y = t.height,
                        s.scaleX = s.scaleY = r + .2
                })
        },
        i.setData = function(t) {
            var e = this;
            this.data = t;
            var a, i = t.atkTac,
                n = t.defTac;
            this.txtSelfName.text = i.name;
            var s = "";
            GlobalFunction.checkIsNPC(t.targetID) ? (a = CampbattlenpcdataParser.GetInstance().getItemById(t.targetID), s = a.name_l) : s = n.name,
                this.txtEnemyName.text = s;
            for (var r = 1; 5 >= r; ++r) this.playBattle(this["ship" + r], !0, r),
                this.playBattle(this["enemy" + r], !1, r);
            this.Result.visible = !1,
                Utils.delayCall(4e3,
                    function() {
                        e.Result.visible = !0,
                            e.Battle.visible = !1,
                            t.star <= 0 ? (e.Lose.visible = !0, e.Win.visible = !1) : (e.Win.visible = !0, e.Lose.visible = !1),
                            SUI.setTextureAsync(e.imgSelfCamp, Path.GetCampPicUrl(t.atkTac.camp, 3)),
                            SUI.setTextureAsync(e.imgSelfHead, Path.GetHeadPicUrl(t.atkTac.head)),
                            e.txtShiQiValue.text = "-" + t.campbattle.morale.toString(),
                            e.txtShiQi.text = Locales.get("ui_campBattle_over_shiqiTitle"),
                            e.txtSelfName1.text = t.atkTac.name,
                            a ? (SUI.setTextureAsync(e.imgEnemyCamp, Path.GetCampPicUrl(a.camp, 3)), SUI.setTextureAsync(e.imgEnemyHead, Path.GetHeadPicUrl(Number(a.icon))), e.txtEnemyName1.text = a.name_l) : (SUI.setTextureAsync(e.imgEnemyCamp, Path.GetCampPicUrl(t.defTac.camp, 3)), SUI.setTextureAsync(e.imgEnemyHead, Path.GetHeadPicUrl(t.defTac.head)), e.txtEnemyName1.text = t.defTac.name),
                            e.txtOhterShiQi.text = Locales.get("ui_campBattle_over_shiqiTitle"),
                            e.txtEnemyCost.text = "-" + t.campbattle.targetmorale.toString(),
                            e.txtZhanGong.text = Locales.get("ui_campBattle_getZhangong"),
                            e.txtExtraZhanGong.text = Locales.get("ui_campBattle_over_ewaiZhangong"),
                            e.txtRongYu.text = Locales.get("ui_campBattle_getRongyu");
                        var i = t.campbattle.campbattlescore;
                        Log.logZDY("////-campbattlescore." + t.campbattle.campbattlescore + ",attacknum." + t.campbattle.attacknum);
                        var n = CampbattlelimitscoredataParser.GetInstance().getItemById(t.campbattle.attacknum);
                        if (n) {
                            var s = CampbattlelimitscoredataParser.GetInstance().length - t.campbattle.attacknum;
                            i -= n.socre,
                                e.txtExtraZhanGongValue.text = "+" + n.socre,
                                0 > s ? (e.txtExtraZhanGong.visible = !1, e.txtExtraZhanGongValue.visible = !1, e.txtRongYu.y = e.txtExtraZhanGong.y, e.txtRongYuValue.y = e.txtExtraZhanGongValue.y, e.txtExtraZhanGongDesc.visible = !1) : e.txtExtraZhanGongDesc.text = Locales.get("ui_campBattle_over_ewaiCountDesc") + Locales.get("ui_campBattle_over_ewaiCount", s)
                        } else e.txtExtraZhanGong.visible = !1,
                            e.txtExtraZhanGongValue.visible = !1,
                            e.txtRongYu.y = e.txtExtraZhanGong.y,
                            e.txtRongYuValue.y = e.txtExtraZhanGongValue.y,
                            e.txtExtraZhanGongDesc.visible = !1;
                        if (e.txtZhanGongValue.text = "+ " + i, e.txtRongYuValue.text = "+ " + t.militaryhonour, e.txtKill.text = Locales.get("ui_campBattle_over_kill"), e.txtKill.visible = !1, 1 == t.campbattle.kill) {
                            var r = Path.effectUrl + "campBattleOver_kill.json",
                                o = Path.effectUrl + "campBattleOver_kill.png";
                            SUI.loadSpriteSheet(r, o,
                                function(t, a) {
                                    var i = new egret.MovieClipDataFactory(t, a),
                                        n = new egret.MovieClip(i.generateMovieClipData("default"));
                                    n.width = GameData.designWidth,
                                        n.height = GameData.designHeight,
                                        e.Result.addChild(n),
                                        n.gotoAndPlay(0, 1);
                                    var s = (++SUI.tagInc).toString();
                                    ResLoader.instance.addRef(o, s),
                                        n.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                                            function() {
                                                ResLoader.instance.clearTag(s)
                                            },
                                            void 0),
                                        n.x = e.imgEnemyHead.x + .5 * e.imgEnemyHead.width + 5,
                                        n.y = e.imgEnemyHead.y + .5 * e.imgEnemyHead.height + 5;
                                    var r = egret.Tween.get(e.txtKill);
                                    r.wait(500).call(function() {
                                            e.txtKill.visible = !0,
                                                e.txtKill.scaleX = e.txtKill.scaleY = 3
                                        },
                                        e).to({
                                            scaleX: 1,
                                            scaleY: 1
                                        },
                                        2).call(function() {
                                        SceneManager.instance.sceneShake(SceneManager.SHAKE_HIGH)
                                    })
                                },
                                e)
                        }
                        var l = t.campbattle.winningsteak - 1;
                        l > 0 ? e.txtWinTimes.text = Locales.get("countinusWin", t.campbattle.winningsteak) : e.txtWinTimes.text = "",
                            Utils.delayCall(2500,
                                function() {
                                    e.close()
                                },
                                e)
                    },
                    this)
        },
        i.init = function() {},
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowCampBattleOver, "WindowCampBattleOver");
var WindowCampBattleRankingList = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZB_ZhenYingZhan_PaiHangSkin.exml"
            /*tpa=resource/eui_skins/ZB_ZhenYingZhan_PaiHangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.init = function() {
            113 == GuideManager.step && GuideManager.nextStep(),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnIntro.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnIntro, this),
                SUI.addClickEffect(this.btnIntro),
                this.btnRanking.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRanking, this),
                SUI.addClickEffect(this.btnRanking),
                this.btnStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnStore, this),
                SUI.addClickEffect(this.btnStore),
                this.btnAI.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnAI, this),
                this.txtTitle.text = Locales.get("panel_active_game_campBattle_title"),
                this.txtIntro.text = Locales.get("panel_luckgirl_txt_comment_2"),
                this.txtRanking.text = Locales.get("panel_arena_btn_topten"),
                this.txtStore.text = Locales.get("btn_paper"),
                this.btnAI.labelDisplay.text = Locales.get("ui_campBattle_campLite_alert_ok"),
                this.txtFightStartTime.text = Locales.get("ui_campBattle_campLite_next");
            var t = CampBattleManager.instance.serverStartTime;
            this.txtDesc.text = Locales.get("campBattleStartTime", t[0]),
                SUI.addClickEffect(this.btnAI),
                this.btnAI.visible = !1,
                this.btnAI.labelDisplay.text = Locales.get("ui_campBattle_campLite_setAI"),
                this.txtFightStartTime.visible = !1,
                this.txtTime.visible = !1,
                this.txtDesc.visible = !1;
            for (var e = CampBattleManager.instance.generalCampRankList(), a = [166, 391, 616], i = 0, n = 0, s = e; n < s.length; n++) {
                var r = s[n],
                    o = r.campid,
                    l = this["Camp" + o];
                l.touchEnabled = !1,
                    l.touchChildren = !1;
                var h = this["imgCamp" + o];
                SUI.setTextureAsync(h, Path.GetCampPicUrl(o, 0));
                var c = this["imgCampName" + o];
                c.text = Locales.get("panel_personinf_txt_camp_" + o);
                var d = this["txtCampResDesc" + o];
                d.text = Locales.get("ui_campBattle_resTitle");
                var g = this["txtCampPortDesc" + o];
                g.text = Locales.get("ui_campBattle_portTitle");
                var u = this["txtCampRes" + o];
                u.text = r.resource.toString();
                var p = this["txtCampPort" + o],
                    m = r.portlist.length;
                m > 0 && m--,
                    p.text = m.toString(),
                    l.y = a[i],
                    ++i
            }
            this.inited = !0
        },
        i.updateTime = function(t, e) {
            this.btnAI && (0 == e ? (this.btnAI.visible = !1, this.txtDesc.visible = !0, this.txtTime.visible = !1, this.txtFightStartTime.visible = !1) : -1 == e ? (this.Prepare.visible = !1, this.txtDesc.visible = !1) : (this.btnAI.visible = !0, this.txtTime.text = t, this.txtTime.visible = !0, this.txtFightStartTime.visible = !0, this.txtDesc.visible = !1), 1 == CampBattleManager.isAutoBattle ? (this.btnAI.labelDisplay.text = Locales.get("ui_campBattle_campLite_cancelAI"), this.btnAI.currentState = "on") : (this.btnAI.labelDisplay.text = Locales.get("ui_campBattle_campLite_setAI"), this.btnAI.currentState = "off"))
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnIntro = function(t) {
            var e = Locales.get("ui_campBattle_desc_title"),
                a = Locales.get("ui_campBattle_desc_content1");
            QiJvTouAlert.getInstance().showTxtDescPage(e, a)
        },
        i.OnClickBtnRanking = function(t) {
            RankListManager.getInstance().showRankWin(7)
        },
        i.OnClickBtnStore = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.CampExchange),
                this.close(),
                WindowManager.getInstance().hide(WindowManager.windowType.CampBattle)
        },
        i.OnClickBtnAI = function(t) {
            return UserData.getInstance().getVipLevel() < 4 ? void Toast.launch(Locales.get("ui_campBattle_campLite_setAI_fail1")) : void(CampBattleManager.isAutoBattle ? RequestManager.GetInstance().setAI(!1) : GameAlert.getInstance().show(Locales.get("ui_campBattle_campLite_alert_ok"), Locales.get("ui_campBattle_campLite_alert_content2"),
                function() {
                    RequestManager.GetInstance().setAI(!0),
                        GameAlert.getInstance().hide()
                }))
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowCampBattleRankingList, "WindowCampBattleRankingList");
var WindowCampBattleReports = function(t) {
    function e() {
        t.call(this, !0),
            this.currentListType = 0,
            this.Max_rank = 50,
            this.skinName = "resource/eui_skins/ZB_ZhenYingZhan_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/ZB_ZhenYingZhan_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.scvReports.viewport = this.lstReports,
                this.lstReports.itemRenderer = CampBattleItemRenderer,
                this.txtTitle.text = "战报",
                this.checkBoxs = [];
            for (var t = 1; 4 >= t; ++t) {
                var e = this["checkBox" + t];
                e._tag = t,
                    this.checkBoxs.push(e),
                    e.touchChildren = !1,
                    e.touchEnabled = !0,
                    e.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickCheckBox, this)
            }
            this.checkBoxClick(1)
        },
        i.checkBoxClick = function(t) {
            AudioManager.instance.playSound(AudioManager.SOUND_BTN);
            for (var e = 0,
                    a = this.checkBoxs; e < a.length; e++) {
                var i = a[e];
                i._tag == t ? i.imgCheck.visible = !0 : i.imgCheck.visible = !1
            }
            this.addItemToList(CampBattleManager.instance.getBattleReportList(t)),
                this.currentListType = t
        },
        i.addItemToList = function(t) {
            for (var e = [], a = 0, i = t; a < i.length; a++) {
                var n = i[a],
                    s = "";
                for (var r in n.content) {
                    var o = n.content[r],
                        l = parseInt(o),
                        h = void 0,
                        c = void 0;
                    h = l && n.color[l - 1] ? n.color[l - 1] : "ffffff",
                        c = l && n.pkgParam[l - 1] ? n.pkgParam[l - 1] : o,
                        s += "#" + h + c + "#"
                }
                e.push({
                    content: s
                })
            }
            this.lstReports.dataProvider = new eui.ArrayCollection(e)
        },
        i.OnClickCheckBox = function(t) {
            var e = t.currentTarget,
                a = e._tag;
            a && this.checkBoxClick(a)
        },
        i.OnClickBtnClose = function(t) {
            AudioManager.instance.playSound(AudioManager.SOUND_CLOSE_BTN),
                this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowCampBattleReports, "WindowCampBattleReports");
var WindowCampExchange = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ZB_JingJiChang_DuiHuanSkin.exml"
            /*tpa=resource/eui_skins/ZB_JingJiChang_DuiHuanSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.init = function() {
            this.btnStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnStore, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                EventManager.instance.addEventListener(EventTypes.CAMP_SHOP_UPDATE, this.updatePanel, this),
                MainUI.instance.changeTopMode(topUIMode.simple),
                this.btnStore.labelDisplay.text = Locales.get("panel_guard_biwu_btn_name_16"),
                this.txtScoreDesc.text = "当前声望：",
                this.lstGoods.itemRenderer = CampExchangeItemRender,
                CampShopOptData.instance.isInit ? this.updatePanel() : RequestManager.GetInstance().getShopItemData()
        },
        i.refreshNumber = function() {
            this.txtScore.text = CampBattleManager.instance.campbattlescore.toString()
        },
        i.updatePanel = function() {
            for (var t = [], e = 0, a = 0, i = ShopDataLib.instance.getShopDataByCampType(); a < i.length; a++) {
                var n = i[a];
                if (1 == n.enable) {
                    var s = CampShopOptData.instance.OnceItemById(n.id),
                        r = CampShopOptData.instance.DayItemById(n.id);
                    if (!s) {
                        e += 1,
                            n.index = e,
                            t.push(n);
                        var o = 0;
                        o = r && n.countLimit >= 1 ? n.countLimit - r.count : n.countLimit,
                            n.lastNum = o
                    }
                }
            }
            t.sort(function(t, e) {
                    return t.order - e.order
                }),
                this.AllList = t,
                this.refreshNumber();
            var l = !1;
            if (this.lstGoods.dataProvider)
                for (var h = 0; h < this.lstGoods.dataProvider.length; ++h) this.lstGoods.dataProvider.getItemAt(h) && this.AllList[h] && this.lstGoods.dataProvider.getItemAt(h).id != this.AllList[h].id && (l = !0);
            else l = !0;
            if (l) {
                var c = new eui.ArrayCollection(this.AllList),
                    d = this.lstGoods.scrollV;
                this.lstGoods.dataProvider = c,
                    this.lstGoods.validateNow(),
                    this.lstGoods.scrollV = d
            }
        },
        i.OnClickBtnStore = function(t) {},
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.CAMP_SHOP_UPDATE, this.updatePanel, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowCampExchange, "WindowCampExchange");
var WindowCaptain = function(t) {
    function e() {
        t.call(this, !1),
            this.currPage = 0,
            this.dsListParts = [],
            this.pos = 0,
            this.skinName = "resource/eui_skins/zhuye_PeijianSkin.exml"
            /*tpa=resource/eui_skins/zhuye_PeijianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnChangeToSell.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellByQualityBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCloseBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secOKBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck4.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.clear = function() {
            this.btnChangeToSell.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellByQualityBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCloseBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secOKBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCancelBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck4.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.ck1:
                    break;
                case this.ck2:
                    break;
                case this.ck3:
                    break;
                case this.ck4:
                    break;
                case this.secCloseBtn:
                    this.huishouByQualityGroup.visible = !1;
                    break;
                case this.secCancelBtn:
                    this.huishouByQualityGroup.visible = !1;
                    break;
                case this.secOKBtn:
                    CaptainManager.getInstance().quailtyArr = [],
                        CaptainManager.getInstance().reductionCaptainsIds = [],
                        this.ck1.selected && CaptainManager.getInstance().quailtyArr.push(1),
                        this.ck2.selected && CaptainManager.getInstance().quailtyArr.push(2),
                        this.ck3.selected && CaptainManager.getInstance().quailtyArr.push(3),
                        this.ck4.selected && CaptainManager.getInstance().quailtyArr.push(4),
                        this.huishouByQualityGroup.visible = !1,
                        this.setHuiShouPage();
                    break;
                case this.btnSellByQualityBtn:
                    this.huishouByQualityGroup.visible = !0,
                        this.ck1.selected = !1,
                        this.ck2.selected = !1,
                        this.ck3.selected = !1,
                        this.ck4.selected = !1;
                    break;
                case this.btnReturn:
                    this.pos = 0,
                        this.huishouGroup.visible = !1,
                        this.btnReturn.visible = !1,
                        this.btnChangeToSell.visible = !0,
                        MainUI.instance.setBottomVisible(!0),
                        this.tabContainer.visible = !0,
                        0 == this.currPage ? this.setCaptainPage() : 1 == this.currPage && this.setHeChengPage(),
                        this.huishouByQualityGroup.visible = !1;
                    break;
                case this.btnSellBtn:
                    this.setPos(),
                        null != CaptainManager.getInstance().reductionCaptainsIds && CaptainManager.getInstance().reductionCaptainsIds.length > 0 ? RetiredAlert.getInstance().showCapationHuiShou() : Toast.launch("请至少选中1个舰长!");
                    break;
                case this.btnChangeToSell:
                    this.pos = 0,
                        this.huishouGroup.visible = !0,
                        this.btnReturn.visible = !0,
                        this.tabContainer.visible = !1,
                        this.btnChangeToSell.visible = !1,
                        MainUI.instance.setBottomVisible(!1),
                        CaptainManager.getInstance().quailtyArr = [],
                        CaptainManager.getInstance().reductionCaptainsIds = [],
                        this.setHuiShouPage(),
                        CaptainManager.getInstance().resetHuishouNum();
                    break;
                case this.btnClose:
                    WindowManager.getInstance().hide(WindowManager.windowType.Captain)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("captainData"),
                e.push("captainPieceData"),
                e.push("shipData"),
                ConfigData.preLoadDats(e, [CaptaindataParser, CaptainpiecedataParser, ShipdataParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.btnChangeToSell.icon.source = Path.panelUrl + "gaojijianghun.png",
                this.huishouByQualityGroup.visible = !1,
                this.scroller.viewport = this.list,
                this.pos = 0,
                this.btnChangeToSell.label = "解雇",
                this.btnSellByQualityBtn.label = "按品质解雇",
                this.btnSellBtn.label = "解雇";
            for (var t = ["舰长", "合成"], e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 120 * e,
                    a.index = e,
                    a.label = t[e],
                    this.tabContainer.addChild(a),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "up",
                    0 == e && a.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
            }
            this.isCanHeChengRedPoint()
        },
        i.onTabBarItemTap = function(t) {
            this.pos = 0;
            var e = t.currentTarget;
            e.currentState = "down",
                this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"),
                this.lastTab = e,
                0 == e.index ? (this.currPage = 0, this.setCaptainPage()) : (this.currPage = 1, this.setHeChengPage())
        },
        i.setCaptainPage = function() {
            var t = this.getCaptainPageList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = captainsFactoryListItem,
                this.countLabel.text = "数量:" + (t.length - 1),
                this.countGroup.visible = !0,
                this.txtEmpty.visible = !1,
                this.moveScroller(this.pos)
        },
        i.setHeChengPage = function() {
            var t = this.getHeChengPageList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = captainsHeChengListItem,
                this.countLabel.text = "数量:" + (t.length - 1),
                this.countGroup.visible = !0,
                0 == t.length ? this.txtEmpty.visible = !0 : this.txtEmpty.visible = !1,
                this.moveScroller(this.pos)
        },
        i.setHuiShouPage = function() {
            this.dsListParts = this.getHuiShouPageList(),
                this.list.dataProvider = new eui.ArrayCollection(this.dsListParts),
                this.list.itemRenderer = captainsSellListItem,
                this.txtEmpty.visible = !1,
                this.countGroup.visible = !1,
                this.moveScroller(this.pos)
        },
        i.getCaptainPageList = function() {
            for (var t = [], e = CaptainData.captainlist, a = !1, i = 0; i < e.length; i++) {
                var n = e[i],
                    s = {};
                s.id = n.id,
                    s.upgradelevel = n.upgradelevel,
                    s.promotelevel = n.promotelevel,
                    s.islocked = n.lslocked,
                    n.lslocked ? s.lockedImg = "GUI_Shipbuilding_Icon_locked_png" : s.lockedImg = "GUI_Shipbuilding_Icon_open_png";
                var r = CaptaindataParser.GetInstance().getItemById(n.id);
                s.name = r.name_l + "[" + Locales.get("panel_jianzhang_junxian_" + n.promotelevel) + "]",
                    s.militaryRank = "军衔:" + Locales.get("panel_jianzhang_junxian_" + n.promotelevel),
                    s.pic = CaptainManager.getInstance().getCaptainPicById(r.pictureSmall),
                    s.country = CaptainManager.getInstance().getCountryIconById(r.country),
                    s.quality = r.quality,
                    s.color = CaptainManager.getInstance().setColor(r.quality),
                    s.upgradelevelInfo = n.upgradelevel + "级",
                    s.promoteCostGold = r.promoteCostGold,
                    s.pieceId = r.pieceId;
                for (var o = CaptainData.captainPiecelist,
                        l = 0; l < o.length; l++) {
                    var h = o[l];
                    if (h.id == r.pieceId) {
                        n.promotelevel < 7 ? s.promoteCostCount = "碎片:" + h.count + "/" + CaptainManager.getInstance().getPromoteNumByPromoteLv(n.promotelevel - 1, r.promoteCostSoul) : s.promoteCostCount = "碎片:" + h.count + "/MAX";
                        break
                    }
                }
                var c = ShipManager.getInstance().isCaptainEquiped(s.id);
                if (void 0 == c || null == c) s.euqipedShip = "",
                    s.euqipedShipColor = 16711680;
                else
                    for (var d = 0; d < ShipManager.getInstance().shipList.length; d++)
                        if (c == ShipManager.getInstance().shipList[d].id) {
                            s.euqipedShip = ShipManager.getInstance().getShipNameByType(ShipManager.getInstance().shipList[d].shipid);
                            var g = ShipdataParser.GetInstance().getItemById(ShipManager.getInstance().shipList[d].shipid).quality;
                            s.euqipedShipColor = QualitySystem.getColorByQuality(g);
                            break
                        }
                s.isShowRedPoint = !1,
                    t.push(s)
            }
            if (t.sort(function(t, e) {
                    return "" == t.euqipedShip && "" == e.euqipedShip ? e.quality != t.quality ? e.quality - t.quality : Number(e.id) - Number(t.id) : "" != t.euqipedShip && "" != e.euqipedShip ? e.quality != t.quality ? e.quality - t.quality : Number(e.id) - Number(t.id) : "" != t.euqipedShip && "" == e.euqipedShip ? -1 : "" == t.euqipedShip && "" != e.euqipedShip ? 1 : void 0
                }), !GameData.skipShipGuide) {
                var s = {};
                s.id = -1,
                    s.lastOne = !0,
                    t.push(s)
            }
            var u = this.tabContainer.getChildAt(0);
            return u.redPoint.visible = a,
                t
        },
        i.getHeChengPageList = function() {
            for (var t = [], e = CaptainData.captainPiecelist, a = 0; a < e.length; a++) {
                var i = e[a],
                    n = {};
                n.id = i.id,
                    n.count = i.count;
                var s = CaptainpiecedataParser.GetInstance().getItemById(i.id);
                n.name = s.name_l,
                    n.country = CaptainManager.getInstance().getCountryIconById(s.captainCountry),
                    n.quality = s.quality,
                    n.color = CaptainManager.getInstance().setColor(s.quality),
                    n.captainId = s.captainId;
                var r = CaptaindataParser.GetInstance().getItemById(s.captainId);
                n.pic = CaptainManager.getInstance().getCaptainPicById(r.pictureSmall),
                    n.pieceNum = r.pieceNum,
                    n.count = "碎片:" + n.count + "/" + n.pieceNum,
                    n.isCanHeCheng = !1,
                    n.isShow = !0,
                    i.count >= Number(r.pieceNum) ? (n.isEnoughTxt = "可以合成", n.isEnoughTxtColor = "0x1EBB28", n.isEnoughImg = "resource/assets/Panel/tongyong_lvkuang.png"
                        /*tpa=resource/assets/Panel/tongyong_lvkuang.png*/
                        , n.isCanHeCheng = !0) : (n.isEnoughTxt = "数量不足", n.isEnoughTxtColor = "0xA31217", n.isEnoughImg = "resource/assets/Panel/tongyong_hongkuang.png"
                        /*tpa=resource/assets/Panel/tongyong_hongkuang.png*/
                        , n.isCanHeCheng = !1);
                for (var o = CaptainData.captainlist,
                        l = 0; l < o.length; l++) {
                    var h = o[l];
                    if (h.id == s.captainId) {
                        n.isEnoughTxt = "收集完成",
                            n.isEnoughTxtColor = "0x1EBB28",
                            n.isEnoughImg = "resource/assets/Panel/tongyong_lvkuang.png"
                            /*tpa=resource/assets/Panel/tongyong_lvkuang.png*/
                            ,
                            n.isCanHeCheng = !1,
                            n.isShow = !1;
                        break
                    }
                }
                n.isShow && t.push(n)
            }
            t.sort(function(t, e) {
                return e.quality != t.quality ? e.quality - t.quality : Number(e.id) - Number(t.id)
            });
            var c = this.tabContainer.getChildAt(1);
            if (c.redPoint.visible = !1, null != t && t.length > 0)
                for (var d = 0; d < t.length; d++)
                    if (t[d].isCanHeCheng) {
                        null != t && t.length > 0 ? c.redPoint.visible = !0 : c.redPoint.visible = !1;
                        break
                    }
            if (!GameData.skipShipGuide) {
                var n = {};
                n.id = -1,
                    n.lastOne = !0,
                    t.push(n)
            }
            return t
        },
        i.isCanHeChengRedPoint = function() {
            for (var t = [], e = CaptainData.captainPiecelist, a = 0; a < e.length; a++) {
                var i = e[a],
                    n = {};
                n.id = i.id,
                    n.count = i.count;
                var s = CaptainpiecedataParser.GetInstance().getItemById(i.id);
                n.name = s.name_l,
                    n.country = CaptainManager.getInstance().getCountryIconById(s.captainCountry),
                    n.quality = s.quality,
                    n.color = CaptainManager.getInstance().setColor(s.quality),
                    n.captainId = s.captainId;
                var r = CaptaindataParser.GetInstance().getItemById(s.captainId);
                n.pic = CaptainManager.getInstance().getCaptainPicById(r.pictureSmall),
                    n.pieceNum = r.pieceNum,
                    n.count = "碎片:" + n.count + "/" + n.pieceNum,
                    n.isCanHeCheng = !1,
                    i.count >= Number(r.pieceNum) ? (n.isEnoughTxt = "可以合成", n.isEnoughTxtColor = "0x1EBB28", n.isEnoughImg = "resource/assets/Panel/tongyong_lvkuang.png"
                        /*tpa=resource/assets/Panel/tongyong_lvkuang.png*/
                        , n.isCanHeCheng = !0) : (n.isEnoughTxt = "数量不足", n.isEnoughTxtColor = "0xA31217", n.isEnoughImg = "resource/assets/Panel/tongyong_hongkuang.png"
                        /*tpa=resource/assets/Panel/tongyong_hongkuang.png*/
                    );
                for (var o = CaptainData.captainlist,
                        l = 0; l < o.length; l++) {
                    var h = o[l];
                    if (h.id == s.captainId) {
                        n.isEnoughTxt = "收集完成",
                            n.isEnoughTxtColor = "0x1EBB28",
                            n.isEnoughImg = "resource/assets/Panel/tongyong_lvkuang.png"
                            /*tpa=resource/assets/Panel/tongyong_lvkuang.png*/
                            ,
                            n.isCanHeCheng = !1;
                        break
                    }
                }
                t.push(n)
            }
            var c = this.tabContainer.getChildAt(1);
            if (null != t && t.length > 0) {
                for (var d = 0; d < t.length; d++)
                    if (t[d].isCanHeCheng) {
                        null != t && t.length > 0 ? c.redPoint.visible = !0 : c.redPoint.visible = !1;
                        break
                    }
            } else c.redPoint.visible = !1
        },
        i.getHuiShouPageList = function() {
            this.dsListParts = [];
            for (var t = CaptainData.captainlist,
                    e = 0,
                    a = 0; a < t.length; a++) {
                var i = t[a],
                    n = {};
                n.id = i.id,
                    n.upgradelevel = i.upgradelevel,
                    n.promotelevel = i.promotelevel,
                    n.islocked = i.lslocked;
                var s = CaptaindataParser.GetInstance().getItemById(i.id);
                n.name = s.name_l + "[" + Locales.get("panel_jianzhang_junxian_" + i.promotelevel) + "]",
                    n.militaryRank = "军衔:" + Locales.get("panel_jianzhang_junxian_" + i.promotelevel),
                    n.pic = CaptainManager.getInstance().getCaptainPicById(s.pictureSmall),
                    n.country = CaptainManager.getInstance().getCountryIconById(s.country.toString()),
                    n.quality = s.quality,
                    n.color = CaptainManager.getInstance().setColor(s.quality.toString()),
                    n.upgradelevelInfo = "等级:" + i.upgradelevel,
                    n.turnPiece = s.turnPiece;
                var r = Utils.getListByKeyValue("captainid", n.id, ShipManager.getInstance().soldierList);
                if (n.isSelected = !1, 0 == i.lslocked && 0 == r.length) {
                    if (null != CaptainManager.getInstance().quailtyArr)
                        for (var o = 0; o < CaptainManager.getInstance().quailtyArr.length; o++)
                            if (Number(n.quality) == CaptainManager.getInstance().quailtyArr[o]) {
                                n.isSelected = !0,
                                    CaptainManager.getInstance().reductionCaptainsIds.push(n.id),
                                    e += 1;
                                break
                            }
                    this.dsListParts.push(n)
                }
            }
            if (this.dsListParts.sort(function(t, e) {
                    return e.quality != t.quality ? e.quality - t.quality : Number(e.id) - Number(t.id)
                }), !GameData.skipShipGuide) {
                var n = {};
                n.id = -1,
                    n.lastOne = !0,
                    this.dsListParts.push(n)
            }
            return CaptainManager.getInstance().setHuishouTxtNum(e),
                this.dsListParts
        },
        i.setHuiShouNum = function(t) {
            this.sellCountLabel.text = "已选数量:" + t + "/" + (this.dsListParts.length - 1)
        },
        i.setPos = function() {
            this.pos = this.scroller.viewport.scrollV
        },
        i.moveScroller = function(t) {
            this.scroller.viewport.validateNow(),
                this.scroller.viewport.scrollV = t
        },
        e
}(WindowBase);
egret.registerClass(WindowCaptain, "WindowCaptain");
var captainsFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/captainInfo01Skin.exml"
            /*tpa=resource/eui_skins/item/captainInfo01Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowCaptainsManager_ClickShowOperate, this.showPanelEventHandler, this)
        },
        i.showPanelEventHandler = function(t) {
            t.parames != this.data.id && this.panelOperate && (GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowCaptainsManager_ClickShowOperate, this.showPanelEventHandler, this), this.height -= this.panelOperate.height, this.removeChild(this.panelOperate), this.panelOperate = void 0)
        },
        i.remould = function() {
            WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                data: this.data,
                type: OperateType.captain,
                index: 2
            })
        },
        i.upgrade = function() {
            WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                data: this.data,
                type: OperateType.captain,
                index: 1
            })
        },
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data)
                if (this.data.lastOne) this.skinName = "ShipBuildingInformationBar02Skin",
                    this.txtDesc.text = "获取舰长",
                    SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"),
                    this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            GameData.funSwitch ? UserData.getInstance()._level >= 50 ? (WindowManager.getInstance().hideAll(), WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain)) : Toast.launch("招募舰长功能50级开放") : (WindowManager.getInstance().hideAll(), WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain))
                        },
                        this);
                else {
                    this.skinName = "resource/eui_skins/item/captainInfo01Skin.exml"
                        /*tpa=resource/eui_skins/item/captainInfo01Skin.exml*/
                        ,
                        this.btnShowPanel.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.btnShowPanel.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function() {
                                e.panelOperate ? (e.height -= e.panelOperate.height, e.removeChild(e.panelOperate), e.panelOperate = void 0) : (e.panelOperate = new eui.Component, e.panelOperate.skinName = "resource/eui_skins/item/xialacaidananiu02Skin.exml"
                                    /*tpa=resource/eui_skins/item/xialacaidananiu02Skin.exml*/
                                    , e.addChild(e.panelOperate), e.panelOperate.y = e.height, e.panelOperate.x = 0, e.panelOperate.btnRemould.label = "晋升", 9 == e.data.medalType ? (e.panelOperate.btnRemould.enabled = !1, e.panelOperate.btnUpgrade.enabled = !1) : (e.panelOperate.btnRemould.enabled = !0, e.panelOperate.btnUpgrade.enabled = !0), e.panelOperate.btnRemould.addEventListener(egret.TouchEvent.TOUCH_TAP, e.remould, e), e.panelOperate.btnUpgrade.addEventListener(egret.TouchEvent.TOUCH_TAP, e.upgrade, e), e.height = e.height + e.panelOperate.height, GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowSoulsManager_ClickShowOperate, e.showPanelEventHandler, e), GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowSoulsManager_ClickShowOperate, e.data.id)))
                            },
                            this), this.iconLock.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function() {
                                RequestManager.GetInstance().requestLockCaptain(e.data.id, !e.data.islocked)
                            },
                            this), this.headCompent.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function() {
                                WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                                    data: e.data,
                                    type: shipInfoWindowType.captainInfo
                                })
                            },
                            this));
                    var a = this.headCompent.imgIcon;
                    SUI.setTextureAsync(a, this.data.pic),
                        a = this.headCompent.imgBg;
                    var i = QualitySystem.getCaptainSmallBack(Number(this.data.quality));
                    SUI.setTextureAsync(a, i),
                        a = this.headCompent.imgFrame,
                        i = QualitySystem.getCaptainFrame(Number(this.data.quality)),
                        SUI.setTextureAsync(a, i),
                        SUI.setTextureAsync(this.countryImg, this.data.country),
                        "" == this.data.euqipedShip ? this.txtEuqipedIn.visible = !1 : this.txtEuqipedIn.visible = !0,
                        this.data.isShowRedPoint ? this.btnMorePoint.visible = !0 : this.btnMorePoint.visible = !1
                }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(captainsFactoryListItem, "captainsFactoryListItem");
var captainsHeChengListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/captainInfo02Skin.exml"
            /*tpa=resource/eui_skins/item/captainInfo02Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data)
                if (this.data.lastOne) this.skinName = "ShipBuildingInformationBar02Skin",
                    SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"),
                    this.txtDesc.text = "获取舰长",
                    this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            GameData.funSwitch ? UserData.getInstance()._level >= 50 ? (WindowManager.getInstance().hideAll(), WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain)) : Toast.launch("招募舰长功能50级开放") : (WindowManager.getInstance().hideAll(), WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain))
                        },
                        this);
                else {
                    this.skinName = "resource/eui_skins/item/captainInfo02Skin.exml"
                        /*tpa=resource/eui_skins/item/captainInfo02Skin.exml*/
                        ,
                        this.isEnoughImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.isEnoughImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                            function() {
                                CaptainManager.getInstance().sendComposeCaptainMessage(e.data.id, !1)
                            },
                            this);
                    var a = this.headCompent.imgIcon;
                    SUI.setTextureAsync(a, this.data.pic),
                        a = this.headCompent.imgBg;
                    var i = QualitySystem.getCaptainSmallBack(Number(this.data.quality));
                    SUI.setTextureAsync(a, i),
                        a = this.headCompent.imgFrame,
                        i = QualitySystem.getCaptainFrame(Number(this.data.quality)),
                        SUI.setTextureAsync(a, i)
                }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(captainsHeChengListItem, "captainsHeChengListItem");
var captainsSellListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/captainInfo03Skin.exml"
            /*tpa=resource/eui_skins/item/captainInfo03Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data)
                if (this.data.lastOne) this.skinName = "ShipBuildingInformationBar02Skin",
                    SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"),
                    this.txtDesc.text = "获取舰长",
                    this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            GameData.funSwitch ? UserData.getInstance()._level >= 50 ? (WindowManager.getInstance().hideAll(), WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain)) : Toast.launch("招募舰长功能50级开放") : (WindowManager.getInstance().hideAll(), WindowManager.getInstance().show(WindowManager.windowType.ZhaoMuCaptain))
                        },
                        this);
                else {
                    this.skinName = "resource/eui_skins/item/captainInfo03Skin.exml"
                        /*tpa=resource/eui_skins/item/captainInfo03Skin.exml*/
                        ,
                        this.checkBoxBtn.hasEventListener(egret.Event.CHANGE) || this.checkBoxBtn.addEventListener(egret.Event.CHANGE,
                            function() {
                                if (CaptainManager.getInstance().setHuishouNum(e.data.id, e.checkBoxBtn.selected), CaptainManager.getInstance().setListItemSelectedState(e.data.id, e.checkBoxBtn.selected), e.checkBoxBtn.selected) CaptainManager.getInstance().reductionCaptainsIds.push(e.data.id);
                                else {
                                    for (var t = [], a = CaptainManager.getInstance().reductionCaptainsIds.length - 1; a >= 0; --a) e.data.id != CaptainManager.getInstance().reductionCaptainsIds[a] && t.push(CaptainManager.getInstance().reductionCaptainsIds[a]);
                                    CaptainManager.getInstance().reductionCaptainsIds = t
                                }
                            },
                            this);
                    var a = this.headCompent.imgIcon;
                    SUI.setTextureAsync(a, this.data.pic),
                        a = this.headCompent.imgBg;
                    var i = QualitySystem.getCaptainSmallBack(Number(this.data.quality));
                    SUI.setTextureAsync(a, i),
                        a = this.headCompent.imgFrame,
                        i = QualitySystem.getCaptainFrame(Number(this.data.quality)),
                        SUI.setTextureAsync(a, i)
                }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(captainsSellListItem, "captainsSellListItem");
var WindowChat = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/LiaoTianSkin.exml"
            /*tpa=resource/eui_skins/LiaoTianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.chatType = [0, 3, 1, 2, 5],
                this.scroller.viewport = this.list,
                this.myEdit.prompt = "最多输入20个字",
                this.friendEdit.prompt = "玩家名字",
                this.isWantToPersonal = !1,
                this.myEdit.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this),
                this.initBtn(),
                this.initOpPanel(),
                this.__cachedData ? this.arrBtnBar[this.__cachedData].dispatchEvent(new egret.Event(egret.TouchEvent.TOUCH_TAP)) : this.arrBtnBar[0].dispatchEvent(new egret.Event(egret.TouchEvent.TOUCH_TAP))
        },
        i.editLabelHandler = function(t) {
            var e = Utils.filterStr(this.myEdit.text);
            this.myEdit.text = e[0]
        },
        i.initBtn = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnCloseClickHandler, this),
                this.btnSend.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnSendClickHandler, this),
                this.btnWrold.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnCamp.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnGroup.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnPrivate.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnNoSee.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.arrBtnBar = [this.btnWrold, this.btnCamp, this.btnGroup, this.btnPrivate, this.btnNoSee]
        },
        i.initOpPanel = function() {
            this.opPanel = new ChatHeadOperation,
                this.opPanel.btnPersonal = this.btnPrivate,
                this.opPanel.parentP = this
        },
        i.btnCloseClickHandler = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.Chat)
        },
        i.btnSendClickHandler = function(t) {
            if (UserData.getInstance().getPlayerLevel() < 10) return void Toast.launch(Locales.get("ui_main_function_scientific", 10));
            if (0 == this.myEdit.text.length) return void Toast.launch("聊天信息不能为空");
            if (0 == this.curPage) {
                var e = VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel());
                if (e && 1 != e.freeChatTimes && ChatManager.getInstance().CheckCanTalkToWorld()) return void Toast.launch("发言次数达到上限")
            }
            var a = Transport.getPkg(ProtocolMgr.ID_DceChat);
            switch (this.curPage) {
                case 0:
                    a.type = 0;
                    break;
                case 1:
                    a.type = 3;
                    break;
                case 2:
                    a.type = 1,
                        a.uid = GuildManager.getInstance().id;
                    break;
                case 3:
                    a.type = 2,
                        a.uid = this.targetData.uid,
                        a.name = this.friendEdit.text
            }
            a.content = this.myEdit.text,
                Transport.instance.send(a),
                this.myEdit.text = ""
        },
        i.btnBarClickHandler = function(t) {
            if (t.target != this.arrBtnBar[this.curPage]) {
                for (var e in this.arrBtnBar) t.target == this.arrBtnBar[e] ? (this.arrBtnBar[e].currentState = "down", this.curPage = parseInt(e)) : this.arrBtnBar[e].currentState = "up";
                this.updatePaper()
            }
        },
        i.showHeadOpPanel = function(t) {
            this.targetData = t,
                t.parent = this,
                t.y = t.y - 60,
                this.opPanel.show(t),
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.exceptOpPanelClick, this)
        },
        i.exceptOpPanelClick = function(t) {
            t.target != this.opPanel.btn0 && t.target != this.opPanel.btn1 && t.target != this.opPanel.btn2 && (this.opPanel.hide(), this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.exceptOpPanelClick, this))
        },
        i.updatePaper = function() {
            var t, e = [];
            switch (this.imgDotWorld.visible = ChatManager.getInstance().hasNewWorldMsg, this.imgDotCamp.visible = ChatManager.getInstance().hasNewCampMsg, this.imgDotGroup.visible = ChatManager.getInstance().hasNewGroupMsg, this.imgDotPersonal.visible = ChatManager.getInstance().hasNewPersonMsg, this.curPage) {
                case 0:
                    this.ordinaryGroup.visible = !0,
                        this.specialGroup.visible = !1,
                        this.noSeeGroup.visible = !0,
                        this.imgDotWorld.visible = ChatManager.getInstance().hasNewWorldMsg = !1,
                        t = ChatManager.getInstance().getMsgListWorld();
                    break;
                case 1:
                    this.ordinaryGroup.visible = !0,
                        this.specialGroup.visible = !1,
                        this.noSeeGroup.visible = !0,
                        this.imgDotCamp.visible = ChatManager.getInstance().hasNewCampMsg = !1,
                        t = ChatManager.getInstance().getMsgListCamp();
                    break;
                case 2:
                    this.ordinaryGroup.visible = !0,
                        this.specialGroup.visible = !1,
                        this.noSeeGroup.visible = !0,
                        this.imgDotGroup.visible = ChatManager.getInstance().hasNewGroupMsg = !1,
                        t = ChatManager.getInstance().getMsgListGroup();
                    break;
                case 3:
                    this.ordinaryGroup.visible = !1,
                        this.specialGroup.visible = !0,
                        this.noSeeGroup.visible = !0,
                        this.imgDotPersonal.visible = ChatManager.getInstance().hasNewPersonMsg = !1,
                        t = ChatManager.getInstance().getMsgListPersonal(),
                        this.isWantToPersonal && this.targetData ? this.friendEdit.text = this.targetData.name : (this.targetData = {},
                            t[0] && (t[0].name == UserData.getInstance()._userName ? this.targetData.name = this.friendEdit.text = t[0] ? t[0].destname : "" : this.targetData.name = this.friendEdit.text = t[0] ? t[0].name : ""), this.targetData.uid = t[0] ? t[0].uid : "", this.targetData.uid == UserData.getInstance()._uid && (this.targetData.uid = null)),
                        this.isWantToPersonal = !1;
                    break;
                case 4:
                    this.ordinaryGroup.visible = !0,
                        this.specialGroup.visible = !1,
                        this.noSeeGroup.visible = !1,
                        t = ChatManager.getInstance().getNoSeeList()
            }
            for (var a in t) {
                var i = {};
                i.type = null == t[a].type ? this.chatType[this.curPage] : t[a].type,
                    i.uid = t[a].uid,
                    i.name = t[a].name,
                    i.head = t[a].head,
                    i.level = t[a].level,
                    i.viplevel = t[a].viplevel,
                    i.pos = t[a].pos,
                    i.time = t[a].time,
                    i.content = t[a].content,
                    i.destname = t[a].destname,
                    i.militaryranktype = t[a].militaryranktype,
                    i.isNoSee = BlackListManager.GetInstance().isInBlackList(t[a].uid),
                    i.power = t[a].power,
                    i.isNoSee && 4 != i.type || e.push(i)
            }
            this.list.dataProvider = new eui.ArrayCollection(e),
                this.list.itemRenderer = chatContentRenderer
        },
        e
}(WindowBase);
egret.registerClass(WindowChat, "WindowChat");
var ChatHeadOperation = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/liaotianAlertSkin.exml"
            /*tpa=resource/eui_skins/item/liaotianAlertSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            t.prototype.createChildren.call(this),
                this.btn0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.show = function(t) {
            t && (this._data = t, this.x = t.x, this.y = t.y, 1 == this._data.isNoSee ? this.btn2.label = "解除屏蔽" : this.btn2.label = "屏蔽", t.parent.addChild(this))
        },
        i.hide = function() {
            this.parent && this.parent.contains(this) && this.parent.removeChild(this)
        },
        i.btnClickHandler = function(t) {
            var e = this;
            this.hide();
            var a = "",
                i = "";
            switch (t.target) {
                case this.btn0:
                    var n = this._data.uid,
                        s = this._data.name;
                    FriendManager.getInstance().ReqInivitFriend(n, s);
                    break;
                case this.btn1:
                    this.parentP.isWantToPersonal = !0,
                        this.btnPersonal.dispatchEvent(new egret.Event(egret.TouchEvent.TOUCH_TAP));
                    break;
                case this.btn2:
                    1 == this._data.isNoSee ? (a = "解除屏蔽", i = "确认将[" + this._data.name + "]从屏蔽列表中删除?删除后将能收到[" + this._data.name + "]的聊天、私聊以及邮件信息", GameAlert.getInstance().show(a, i,
                        function() {
                            var t = Transport.getPkg(ProtocolMgr.ID_DceBlackListOpt);
                            t.uid = e._data.uid,
                                t.type = 1,
                                Transport.instance.send(t),
                                GameAlert.getInstance().hide()
                        })) : (a = "屏蔽玩家", i = "确认将[" + this._data.name + "]加入屏蔽列表?屏蔽后将无法收到[" + this._data.name + "]的聊天、私聊以及邮件信息", GameAlert.getInstance().show(a, i,
                        function() {
                            var t = Transport.getPkg(ProtocolMgr.ID_DceBlackListOpt);
                            t.uid = e._data.uid,
                                t.type = 0,
                                Transport.instance.send(t),
                                GameAlert.getInstance().hide()
                        }))
            }
        },
        e
}(eui.Component);
egret.registerClass(ChatHeadOperation, "ChatHeadOperation");
var chatContentRenderer = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/liaotian_lanSkin.exml"
            /*tpa=resource/eui_skins/item/liaotian_lanSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            t.prototype.createChildren.call(this),
                this.groupPlayer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.headClickHandler, this)
        },
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this);
            var e = "";
            switch (GlobalFunction.getDateByTimeNum(this.data.time).getMinutes() >= 10 ? this.txtTime.text = GlobalFunction.getDateByTimeNum(this.data.time).getHours() + ":" + GlobalFunction.getDateByTimeNum(this.data.time).getMinutes() : this.txtTime.text = GlobalFunction.getDateByTimeNum(this.data.time).getHours() + ":0" + GlobalFunction.getDateByTimeNum(this.data.time).getMinutes(), this.btnCancel.visible = !1, this.data.type) {
                case 0:
                    this.txtPersonal.text = "",
                        this.txtName.text = this.data.name;
                    break;
                case 1:
                    this.txtPersonal.text = "",
                        e = this.data.pos,
                        this.txtName.text = this.data.name;
                    break;
                case 2:
                    this.txtPersonal.text = "发送给",
                        this.txtName.text = this.data.destname;
                    break;
                case 3:
                    this.txtPersonal.text = "",
                        this.txtName.text = this.data.name;
                    break;
                case 4:
                    this.txtPersonal.text = "",
                        this.txtTime.text = "",
                        this.btnCancel.visible = !0,
                        this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.cancelClick, this),
                        this.txtChatContent.text = "战斗力:" + this.data.power + "      等级：" + this.data.level,
                        this.txtName.text = this.data.name
            }
            this.imgMiliRank.x = this.txtPersonal.x + this.txtPersonal.width,
                Utils.getImgByUrl(MilitaryManager.GetInstance().getPicByRankLvl(this.data.militaryranktype), this.imgMiliRank),
                this.txtMiliName.x = this.imgMiliRank.x + this.imgMiliRank.width + 2,
                this.txtMiliName.text = MilitaryrankParser.GetInstance().getItemByField("id", this.data.militaryranktype) ? MilitaryrankParser.GetInstance().getItemByField("id", this.data.militaryranktype).name_l : "",
                this.txtName.x = this.txtMiliName.x + this.txtMiliName.width + 2,
                e.length > 0 && (this.txtName.text = this.txtName.text + "(" + e + ")"),
                this.data.isRadio ? (this.groupPlayer.visible = !1, this.imgBroadcast.visible = !0, Utils.getImgByUrl("liaotian_laba_png", this.imgBroadcast)) : (this.groupPlayer.visible = !0, this.imgBroadcast.visible = !1, this.data.viplevel > 0 ? this.imgVip.visible = !0 : this.imgVip.visible = !1, this.data.isNoSee ? (this.imgNoSee.visible = !0, this.txtChatContent.text = "") : (this.imgNoSee.visible = !1, this.txtChatContent.text = this.data.content), Utils.getImgByUrl(Path.GetHeadPicUrl(this.data.head, 1), this.imgHead))
        },
        i.cancelClick = function(t) {
            var e = this,
                a = "解除屏蔽",
                i = "确认将[" + this.data.name + "]从屏蔽列表中删除?删除后将能收到[" + this.data.name + "]的聊天、私聊以及邮件信息";
            GameAlert.getInstance().show(a, i,
                function() {
                    var t = Transport.getPkg(ProtocolMgr.ID_DceBlackListOpt);
                    t.uid = e.data.uid,
                        t.type = 1,
                        Transport.instance.send(t),
                        GameAlert.getInstance().hide()
                })
        },
        i.headClickHandler = function(t) {
            if (this.data.uid != GameData.uid && 4 != this.data.type) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Chat),
                    a = this.localToGlobal(this.imgHead.x, this.imgHead.y),
                    i = {};
                i = this.data,
                    i.x = a.x + .5 * this.imgHead.width,
                    i.y = a.y + .5 * this.imgHead.height,
                    e.showHeadOpPanel(i)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(chatContentRenderer, "chatContentRenderer");
var WindowChooseCamp = function(t) {
    function e() {
        t.call(this, !0),
            this.currCampID = 2,
            this.currHeadID = 1,
            this.currSex = 2,
            this.currPage = -1,
            this.sidePositionArr = [(new PosObject).setValue(89, 248), (new PosObject).setValue(248, 478), (new PosObject).setValue(406, 248)],
            this.rolePositionArr = [(new PosObject).setValue(302.5, 170), (new PosObject).setValue(121.5, 268), (new PosObject).setValue(302.5, 411), (new PosObject).setValue(483.5, 268)],
            this.sideItemInitCompleteNum = 0,
            this.roleItemInitCompleteNum = 0,
            this.isWindowInitComplete = !1,
            this.isCampInit = !1,
            this.skinName = "resource/eui_skins/xuanzezhenyingSkin.exml"
            /*tpa=resource/eui_skins/xuanzezhenyingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.nameRandomTool = new NameRandomTool(0, "", this.roleNameLabel),
                this.sideItemInitCompleteNum = 0,
                this.roleItemInitCompleteNum = 0,
                this.isWindowInitComplete = !1,
                this.gongheSide = new SideItem,
                this.gongheSide.x = 89,
                this.gongheSide.y = 248,
                this.chooseSideGroup.addChild(this.gongheSide),
                this.ziyouSide = new SideItem,
                this.ziyouSide.x = 248,
                this.ziyouSide.y = 478,
                this.chooseSideGroup.addChild(this.ziyouSide),
                this.sideDes.text = Locales.get("panel_choosecamp_txt_iron"),
                this.rongyaoSide = new SideItem,
                this.rongyaoSide.x = 406,
                this.rongyaoSide.y = 248,
                this.chooseSideGroup.addChild(this.rongyaoSide),
                this.womanRole1 = new RoleItem,
                this.womanRole1.x = 302.5,
                this.womanRole1.y = 170,
                this.chooseRoleGroup.addChild(this.womanRole1),
                this.womanRole2 = new RoleItem,
                this.womanRole2.x = 121.5,
                this.womanRole2.y = 268,
                this.chooseRoleGroup.addChild(this.womanRole2),
                this.manRole1 = new RoleItem,
                this.manRole1.x = 302.5,
                this.manRole1.y = 411,
                this.manRole1.visible = !1,
                this.chooseRoleGroup.addChild(this.manRole1),
                this.manRole2 = new RoleItem,
                this.manRole2.x = 483.5,
                this.manRole2.y = 268,
                this.chooseRoleGroup.addChild(this.manRole2),
                this.currBigIcon = new eui.Image,
                this.currBigIcon.horizontalCenter = 0,
                this.currBigIcon.y = 310,
                this.currBigIcon.width = 214,
                this.currBigIcon.height = 309,
                this.chooseRoleGroup.addChild(this.currBigIcon),
                this.leftBtn = new eui.Button,
                this.leftBtn.skinName = "anniu_jiantou",
                this.leftBtn.y = 386,
                this.leftBtn.left = 18,
                this.addChild(this.leftBtn),
                this.rightBtn = new eui.Button,
                this.rightBtn.skinName = "anniu_jiantou",
                this.rightBtn.y = 386,
                this.rightBtn.right = 18,
                this.rightBtn.scaleX = -1,
                this.addChild(this.rightBtn),
                this.submitBtn = new eui.Button,
                this.submitBtn.skinName = "anniu_hongSkin",
                this.submitBtn.y = 884,
                this.submitBtn.horizontalCenter = 0,
                this.addChild(this.submitBtn),
                this.leftBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.rightBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.submitBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnEnter.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.shaiziBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnCancle.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSure.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.roleNameLabel.addEventListener(egret.Event.CHANGE, this.onTouchEndHandle, this),
                this.changeHeaddes1.textFlow = (new egret.HtmlTextParser).parser(Locales.get("changeHeaddes1")),
                this.changeHeaddes2.textFlow = (new egret.HtmlTextParser).parser(Locales.get("changeHeaddes2")),
                this.chooseSideDes.textFlow = (new egret.HtmlTextParser).parser(Locales.get("panel_choosecamp_txt_random_5")),
                this.chooseRoleNameDes.text = Locales.get("panel_choosecamp_txt_random_4"),
                this.isWindowInitComplete = !0
        },
        i.setData = function(t) {
            this.showWitchGroup(t)
        },
        i.clear = function() {
            AudioManager.instance.init()
        },
        i.showWitchGroup = function(t) {
            if (void 0 === t && (t = 0), MainUI.instance.changeTopMode(topUIMode["null"]), MainUI.instance.setBottomVisible(!1), this.currPage = t, 0 == t) {
                if (this._particle && this._particle.destroy(), this._particle = new ParticleDisplayObj(this.submitBtn, ParticleType.TrailingLight, ShapeType.Rectangle), this.isCampInit) return;
                this.sendGetWeakCamp(),
                    this.gongheSide.setSideInfo(!1, "justice_03_1", Locales.get("panel_choosecamp_btn_justice")),
                    this.ziyouSide.setSideInfo(!1, "", Locales.get("panel_choosecamp_btn_iron")),
                    this.ziyouSide.setBigSideImage("iron_03_1"),
                    this.rongyaoSide.setSideInfo(!1, "glory_03_1", Locales.get("panel_choosecamp_btn_glory")),
                    this.chooseSideGroup.visible = !0,
                    this.chooseRoleGroup.visible = !1,
                    this.submitBtn.label = Locales.get("panel_choosecamp_btn_red"),
                    this.titleLabel.text = Locales.get("ChooseCampWindowTitle_01"),
                    this.submitBtn.visible = !0
            } else 1 == t ? (this.chooseSideGroup.visible = !1, this.chooseRoleGroup.visible = !0, this.submitBtn.label = Locales.get("panel_chooseperson_btn_red"), this.titleLabel.text = Locales.get("ChooseCampWindowTitle_02"), this.chooseRoleHead.visible = !0, this.btnEnter.visible = !0, this.shaiziBtn.visible = !0, this.submitBtn.visible = !0, this.btnCancle.visible = !1, this.btnSure.visible = !1, this.changeHeadDesGroup.visible = !1) : 2 == t && (SUI.setTextureAsync(this.imgIcon, Path.item_sURL + "reset_head.png"), this.chooseSideGroup.visible = !1, this.chooseRoleGroup.visible = !0, this.titleLabel.text = Locales.get("panel_ShipsDetailpanelB_btn_rehead"), this.chooseRoleHead.visible = !1, this.btnEnter.visible = !1, this.shaiziBtn.visible = !1, this.submitBtn.visible = !1, this.btnCancle.visible = !0, this.btnCancle.label = Locales.get("alert_cancel"), this.btnSure.visible = !0, this.btnSure.label = Locales.get("alert_ok"), this.changeHeadDesGroup.visible = !0, this.currCampID = UserData.getInstance().getCamp(), this.currHeadID = 1, this.currBigIcon.source = "person-" + this.currCampID + "-1", this.womanRole1.setRoleInfo("Picture-" + this.currCampID + "-3"), this.womanRole2.setRoleInfo("Picture-" + this.currCampID + "-4"), this.manRole1.setRoleInfo("Picture-" + this.currCampID + "-1"), this.manRole2.setRoleInfo("Picture-" + this.currCampID + "-2"), this.setChangeHeadCardNum())
        },
        i.onTouchEndHandle = function(t) {
            switch (t.currentTarget) {
                case this.roleNameLabel:
                    var e = Utils.filterStr(this.roleNameLabel.text);
                    this.roleNameLabel.text = e[0]
            }
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.leftBtn:
                    console.log("点击了左箭头按钮" + this.currPage),
                        0 == this.currPage ? this.rollSideGroup(0) : (1 == this.currPage || 2 == this.currPage) && this.rollRoleGroup(0);
                    break;
                case this.rightBtn:
                    console.log("点击了右箭头按钮" + this.currPage),
                        0 == this.currPage ? this.rollSideGroup(1) : (1 == this.currPage || 2 == this.currPage) && this.rollRoleGroup(1);
                    break;
                case this.submitBtn:
                    console.log("点击了提交按钮"),
                        0 == this.currPage ? (this.currBigIcon.source = "person-" + this.currCampID + "-" + this.currHeadID, this.womanRole1.setRoleInfo("Picture-" + this.currCampID + "-3"), this.womanRole2.setRoleInfo("Picture-" + this.currCampID + "-4"), this.manRole1.setRoleInfo("Picture-" + this.currCampID + "-1"), this.manRole2.setRoleInfo("Picture-" + this.currCampID + "-2"), this.showWitchGroup(1)) : 1 == this.currPage && this.sendSetRole(this.currCampID, this.currHeadID, this.roleNameLabel.textDisplay.text);
                    break;
                case this.btnEnter:
                    console.log("点击了返回按钮"),
                        this.isCampInit = !1,
                        this.showWitchGroup(0);
                    break;
                case this.shaiziBtn:
                    console.log("点击了骰子按钮"),
                        this.nameRandomTool = new NameRandomTool(0, "", this.roleNameLabel, this.currSex);
                    break;
                case this.btnCancle:
                    console.log("点击了取消按钮"),
                        MainUI.instance.setBottomVisible(!0),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        WindowManager.getInstance().hide(WindowManager.windowType.ChooseCamp);
                    break;
                case this.btnSure:
                    console.log("点击了确定按钮"),
                        100 * this.currCampID + this.currHeadID == UserData.getInstance().getHead() ? Toast.launch("所选头像与当前头像一致,请重新选择") : this.sendChangeRole(100 * this.currCampID + this.currHeadID)
            }
        },
        i.rollSideGroup = function(t) {
            var e;
            0 == t ? (egret.Tween.get(this.gongheSide).to({
                    x: this.sidePositionArr[1].x,
                    y: this.sidePositionArr[1].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["gongheSideTween", this.sidePositionArr[1].x, this.sidePositionArr[1].y]), egret.Tween.get(this.ziyouSide).to({
                    x: this.sidePositionArr[2].x,
                    y: this.sidePositionArr[2].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["ziyouSideTween", this.sidePositionArr[2].x, this.sidePositionArr[2].y]), egret.Tween.get(this.rongyaoSide).to({
                    x: this.sidePositionArr[0].x,
                    y: this.sidePositionArr[0].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["rongyaoSideTween", this.sidePositionArr[0].x, this.sidePositionArr[0].y]), e = this.sidePositionArr.shift(), this.sidePositionArr.push(e)) : 1 == t && (egret.Tween.get(this.gongheSide).to({
                    x: this.sidePositionArr[2].x,
                    y: this.sidePositionArr[2].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["gongheSideTween", this.sidePositionArr[2].x, this.sidePositionArr[2].y]), egret.Tween.get(this.ziyouSide).to({
                    x: this.sidePositionArr[0].x,
                    y: this.sidePositionArr[0].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["ziyouSideTween", this.sidePositionArr[0].x, this.sidePositionArr[0].y]), egret.Tween.get(this.rongyaoSide).to({
                    x: this.sidePositionArr[1].x,
                    y: this.sidePositionArr[1].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["rongyaoSideTween", this.sidePositionArr[1].x, this.sidePositionArr[1].y]), e = this.sidePositionArr.pop(), this.sidePositionArr.unshift(e))
        },
        i.rollRoleGroup = function(t) {
            302.5 == this.womanRole1.x && 411 == this.womanRole1.y && (this.womanRole1.visible = !0),
                302.5 == this.womanRole2.x && 411 == this.womanRole2.y && (this.womanRole2.visible = !0),
                302.5 == this.manRole1.x && 411 == this.manRole1.y && (this.manRole1.visible = !0),
                302.5 == this.manRole2.x && 411 == this.manRole2.y && (this.manRole2.visible = !0),
                this.currBigIcon.visible = !1;
            var e;
            0 == t ? (egret.Tween.get(this.womanRole1).to({
                    x: this.rolePositionArr[1].x,
                    y: this.rolePositionArr[1].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["womanRole1", this.rolePositionArr[1].x, this.rolePositionArr[1].y]), egret.Tween.get(this.womanRole2).to({
                    x: this.rolePositionArr[2].x,
                    y: this.rolePositionArr[2].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["womanRole2", this.rolePositionArr[2].x, this.rolePositionArr[2].y]), egret.Tween.get(this.manRole1).to({
                    x: this.rolePositionArr[3].x,
                    y: this.rolePositionArr[3].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["manRole1", this.rolePositionArr[3].x, this.rolePositionArr[3].y]), egret.Tween.get(this.manRole2).to({
                    x: this.rolePositionArr[0].x,
                    y: this.rolePositionArr[0].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["manRole2", this.rolePositionArr[0].x, this.rolePositionArr[0].y]), e = this.rolePositionArr.shift(), this.rolePositionArr.push(e)) : 1 == t && (egret.Tween.get(this.womanRole1).to({
                    x: this.rolePositionArr[3].x,
                    y: this.rolePositionArr[3].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["womanRole1", this.rolePositionArr[3].x, this.rolePositionArr[3].y]), egret.Tween.get(this.womanRole2).to({
                    x: this.rolePositionArr[0].x,
                    y: this.rolePositionArr[0].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["womanRole2", this.rolePositionArr[0].x, this.rolePositionArr[0].y]), egret.Tween.get(this.manRole1).to({
                    x: this.rolePositionArr[1].x,
                    y: this.rolePositionArr[1].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["manRole1", this.rolePositionArr[1].x, this.rolePositionArr[1].y]), egret.Tween.get(this.manRole2).to({
                    x: this.rolePositionArr[2].x,
                    y: this.rolePositionArr[2].y
                },
                300, egret.Ease.circIn).call(this.onTweenComplete, this, ["manRole2", this.rolePositionArr[2].x, this.rolePositionArr[2].y]), e = this.rolePositionArr.pop(), this.rolePositionArr.unshift(e))
        },
        i.onTweenComplete = function(t, e, a) {
            if (248 == e && 478 == a) switch (t) {
                case "gongheSideTween":
                    this.currCampID = 1,
                        this.sideDes.text = Locales.get("panel_choosecamp_txt_justice"),
                        this.gongheSide.setSideImage(""),
                        this.gongheSide.setBigSideImage("justice_03_1"),
                        this.ziyouSide.setSideImage("iron_03_1"),
                        this.ziyouSide.setBigSideImage(""),
                        this.rongyaoSide.setSideImage("glory_03_1"),
                        this.rongyaoSide.setBigSideImage("");
                    break;
                case "ziyouSideTween":
                    this.currCampID = 2,
                        this.sideDes.text = Locales.get("panel_choosecamp_txt_iron"),
                        this.gongheSide.setSideImage("justice_03_1"),
                        this.gongheSide.setBigSideImage(""),
                        this.ziyouSide.setSideImage(""),
                        this.ziyouSide.setBigSideImage("iron_03_1"),
                        this.rongyaoSide.setSideImage("glory_03_1"),
                        this.rongyaoSide.setBigSideImage("");
                    break;
                case "rongyaoSideTween":
                    this.currCampID = 3,
                        this.sideDes.text = Locales.get("panel_choosecamp_txt_glory"),
                        this.gongheSide.setSideImage("justice_03_1"),
                        this.gongheSide.setBigSideImage(""),
                        this.ziyouSide.setSideImage("iron_03_1"),
                        this.ziyouSide.setBigSideImage(""),
                        this.rongyaoSide.setSideImage(""),
                        this.rongyaoSide.setBigSideImage("glory_03_1")
            } else if (302.5 == e && 411 == a) switch (t) {
                case "womanRole1":
                    this.currHeadID = 3,
                        this.currSex = 3,
                        this.currBigIcon.source = "person-" + this.currCampID + "-3",
                        this.womanRole1.visible = !1,
                        this.womanRole2.visible = !0,
                        this.manRole1.visible = !0,
                        this.manRole2.visible = !0,
                        this.currBigIcon.visible = !0;
                    break;
                case "womanRole2":
                    this.currHeadID = 4,
                        this.currSex = 3,
                        this.currBigIcon.source = "person-" + this.currCampID + "-4",
                        this.womanRole2.visible = !1,
                        this.womanRole1.visible = !0,
                        this.manRole1.visible = !0,
                        this.manRole2.visible = !0,
                        this.currBigIcon.visible = !0;
                    break;
                case "manRole1":
                    this.currHeadID = 1,
                        this.currSex = 2,
                        this.currBigIcon.source = "person-" + this.currCampID + "-1",
                        this.manRole1.visible = !1,
                        this.womanRole2.visible = !0,
                        this.womanRole1.visible = !0,
                        this.manRole2.visible = !0,
                        this.currBigIcon.visible = !0;
                    break;
                case "manRole2":
                    this.currHeadID = 2,
                        this.currSex = 2,
                        this.currBigIcon.source = "person-" + this.currCampID + "-2",
                        this.manRole2.visible = !1,
                        this.womanRole2.visible = !0,
                        this.womanRole1.visible = !0,
                        this.manRole1.visible = !0,
                        this.currBigIcon.visible = !0
            }
        },
        i.sendSetRole = function(t, e, a, i) {
            void 0 === i && (i = !1);
            var n = Transport.getPkg(ProtocolMgr.ID_DceSetRole);
            n.name = a,
                n.head = 100 * t + e,
                n.camp = t,
                n.byweak = i,
                Transport.instance.send(n)
        },
        i.sendGetWeakCamp = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceGetWeakCamp);
            Transport.instance.send(t)
        },
        i.sendChangeRole = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceChangeRole);
            e.headid = t,
                Transport.instance.send(e)
        },
        i.getChangeRoleHeadResult = function(t) {
            console.log("更换头像结果:" + t.res),
                console.log("更换头像后的头像ID:" + t.headid),
                0 == t.res ? (Toast.launch("更换头像成功"), UserData.getInstance().setHead(t.headid), MainUI.instance.changeTopMode(topUIMode.normal), MainUI.instance.changeTopMode(topUIMode.normal), MainUI.instance.setBottomVisible(!0), WindowManager.getInstance().hide(WindowManager.windowType.ChooseCamp)) : 1 == t.res ? Toast.launch("错误") : 2 == t.res ? Toast.launch("钻石不够") : 3 == t.res && Toast.launch("未知异常")
        },
        i.getWeakCamp = function(t) {
            switch (this.isCampInit = !0, console.log("推荐阵营ID:" + t.camp), t.camp) {
                case 1:
                    this.gongheSide.setSideRec(!0),
                        this.ziyouSide.setSideRec(!1),
                        this.rongyaoSide.setSideRec(!1),
                        this.gongheSide.x = 248,
                        this.gongheSide.y = 478,
                        this.ziyouSide.x = 406,
                        this.ziyouSide.y = 248,
                        this.rongyaoSide.x = 89,
                        this.rongyaoSide.y = 248,
                        this.sideDes.text = Locales.get("panel_choosecamp_txt_justice"),
                        this.sidePositionArr = [(new PosObject).setValue(248, 478), (new PosObject).setValue(406, 248), (new PosObject).setValue(89, 248)],
                        this.currCampID = 1;
                    break;
                case 2:
                    this.gongheSide.setSideRec(!1),
                        this.ziyouSide.setSideRec(!0),
                        this.rongyaoSide.setSideRec(!1),
                        this.gongheSide.x = 89,
                        this.gongheSide.y = 248,
                        this.ziyouSide.x = 248,
                        this.ziyouSide.y = 478,
                        this.rongyaoSide.x = 406,
                        this.rongyaoSide.y = 248,
                        this.sideDes.text = Locales.get("panel_choosecamp_txt_iron"),
                        this.sidePositionArr = [(new PosObject).setValue(89, 248), (new PosObject).setValue(248, 478), (new PosObject).setValue(406, 248)],
                        this.currCampID = 2;
                    break;
                case 3:
                    this.gongheSide.setSideRec(!1),
                        this.ziyouSide.setSideRec(!1),
                        this.rongyaoSide.setSideRec(!0),
                        this.gongheSide.x = 406,
                        this.gongheSide.y = 248,
                        this.ziyouSide.x = 89,
                        this.ziyouSide.y = 248,
                        this.rongyaoSide.x = 248,
                        this.rongyaoSide.y = 478,
                        this.sideDes.text = Locales.get("panel_choosecamp_txt_glory"),
                        this.sidePositionArr = [(new PosObject).setValue(406, 248), (new PosObject).setValue(89, 248), (new PosObject).setValue(248, 478)],
                        this.currCampID = 3
            }
        },
        i.getSetRoleResult = function(t) {
            switch (t.res) {
                case 0:
                    console.log("成功"),
                        UserData.getInstance().setUserName(t.name),
                        UserData.getInstance().setHead(t.head),
                        UserData.getInstance().setCamp(t.camp),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        MainUI.instance.setBottomVisible(!0),
                        WindowManager.getInstance().hide(WindowManager.windowType.ChooseCamp),
                        GuideManager.initStep();
                    break;
                case 1:
                    console.log("已设置"),
                        Toast.launch("名字已设置");
                    break;
                case 2:
                    console.log("名字重复"),
                        Toast.launch("名字重复")
            }
        },
        i.setChangeHeadCardNum = function() {
            for (var t = ItemsManager.getInstance().getListByType(0), e = 0; e < t.length; e++) {
                var a = t[e];
                if (1287 == a.id) {
                    this.txtNum.text = "x" + a.count,
                        a.count > 0 ? this.txtNum.textColor = 65280 : this.txtNum.textColor = 16711680;
                    break
                }
            }
        },
        e
}(WindowBase);
egret.registerClass(WindowChooseCamp, "WindowChooseCamp");
var PosObject = function() {
    function t() {}
    var e = (__define, t),
        a = e.prototype;
    return a.setValue = function(t, e) {
            return this.x = t,
                this.y = e,
                this
        },
        t
}();
egret.registerClass(PosObject, "PosObject");
var WindowChooseItemType;
!
function(t) {
    t[t.ship = 0] = "ship",
        t[t.parts = 1] = "parts",
        t[t.medal = 2] = "medal",
        t[t.captain = 3] = "captain"
}(WindowChooseItemType || (WindowChooseItemType = {}));
var WindowChooseItem = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/zhuye_zhenrong_xuanze.exml"
            /*tpa=resource/eui_skins/zhuye_zhenrong_xuanze.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t.data,
                this._type = t.type,
                this._pos = t.pos,
                this._shipId = t.ship,
                this._type == WindowChooseItemType.parts ? this.txtFilter.text = Locales.get("txtFilterNoEquipPart") : this._type == WindowChooseItemType.medal ? this.txtFilter.text = Locales.get("txtFilterNoEquipMedal") : this.txtFilter.text = Locales.get("txtFilterNoEquipCaptain"),
                this.checkBoxChanged()
        },
        i.init = function() {
            (44 == GuideManager.step || 71 == GuideManager.step) && GuideManager.nextStep(),
                MainUI.instance.changeTopMode(topUIMode["null"]),
                this.checkbox.selected = !0,
                this.checkbox.touchEnabled = !1,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.scroller.viewport = this.list
        },
        i.checkBoxChanged = function() {
            this.checkbox.selected ? this.updateData(this.removeEquipedItem(this._data)) : this.updateData(this._data)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {},
        i.updateData = function(t) {
            this.txtEmpty.visible = !1;
            var e = [];
            this._type == WindowChooseItemType.ship ? (e = this.formatShipList(t), this.list.dataProvider = new eui.ArrayCollection(e), this.list.itemRenderer = chooseItemShip, this.txtEmpty.visible = !(e.length > 0), this.txtEmpty.text = Locales.get("None_ship")) : this._type == WindowChooseItemType.parts ? (e = this.formatPartList(t), this.list.dataProvider = new eui.ArrayCollection(e), this.list.itemRenderer = chooseItemEquip, this.txtEmpty.visible = !(e.length > 0), this.txtEmpty.text = Locales.get("None_parts")) : this._type == WindowChooseItemType.medal ? (e = this.formatMedalList(t), this.list.dataProvider = new eui.ArrayCollection(e), this.list.itemRenderer = chooseItemEquip, this.txtEmpty.visible = !(e.length > 0), this.txtEmpty.text = Locales.get("DecorationChangePanel_comment")) : (e = this.formatCaptainList(t), this.list.dataProvider = new eui.ArrayCollection(e), this.list.itemRenderer = chooseItemCaptain, this.txtEmpty.visible = !(e.length > 0), this.txtEmpty.text = Locales.get("None_captain"))
        },
        i.removeEquipedItem = function(t) {
            for (var e = [], a = 0; a < t.length; a++) this._type == WindowChooseItemType.parts ? ShipManager.getInstance().isPartEquiped(t[a].id) || e.push(t[a]) : this._type == WindowChooseItemType.medal ? ShipManager.getInstance().isMedalEquiped(t[a].id) || e.push(t[a]) : this._type == WindowChooseItemType.captain ? ShipManager.getInstance().isCaptainEquiped(t[a].id) || e.push(t[a]) : this._type == WindowChooseItemType.ship && (ShipManager.getInstance().isInArrange(t[a].id) || e.push(t[a]));
            return e
        },
        i.formatShipList = function(t) {
            for (var e = [], a = 0; a < t.length; a++) {
                var i = t[a],
                    n = ShipManager.getInstance().shipCfg[i.shipid],
                    s = {};
                s.id = i.id,
                    s.upgradeLv = i.shipid % 100,
                    s.pic = ShipManager.getInstance().getShipPicByType(i.shipid),
                    s.typeIcon = ShipManager.getInstance().getShipTypeIcon(n.shipType),
                    s.quality = Locales.get("labelQuality", n.quality),
                    s.qualityNum = n.quality,
                    s.url = QualitySystem.getShipSmallBack(n.quality),
                    s.level = Locales.get("labelShipLevel", i.level.toString(), UserData.getInstance().getPlayerLevel().toString()),
                    s.name = ShipdataParser.GetInstance().getItemById(i.shipid).name_l,
                    s.pos = this._pos,
                    72 == GuideManager.step && 407 == Math.floor(Number(i.shipid) / 100) ? e.unshift(s) : e.push(s)
            }
            return e
        },
        i.formatPartList = function(t) {
            for (var e = [], a = 0; a < t.length; a++) {
                var i = t[a],
                    n = ConfigData.getDataByKey("parts", i.partsid),
                    s = {};
                s.id = i.id,
                    s.upgradeLv = i.remouldlevel,
                    s.pic = Path.partsIconURL + n.icon,
                    s.type = Locales.get("panel_parts_txt_parttype_" + n.type),
                    s.quality = n.quality,
                    s.url = QualitySystem.getItemSmallBack(n.quality),
                    s.level = Locales.get("panel_reward_txt_growup_4", i.upgradelevel),
                    s.name = PartsParser.GetInstance().getItemById(i.partsid).name_l,
                    s.equiped = ShipManager.getInstance().isPartEquiped(i.id),
                    s.upgradeType = BuffData.getBuffNameById(n.upgradeType),
                    s.upgradeValue = PartsManager.getInstance().getUpgradeValue(i.partsid, i.upgradelevel),
                    s.upgradeInfo = s.upgradeType + ":" + s.upgradeValue,
                    s.remouldType = BuffData.getBuffNameById(n.remouldType),
                    s.remouldValue = PartsManager.getInstance().getRemouldValue(i.partsid, i.remouldlevel),
                    s.remouldInfo = s.remouldType + " +" + s.remouldValue + "%",
                    e.push(s)
            }
            return e
        },
        i.formatMedalList = function(t) {
            for (var e = [], a = 0; a < t.length; a++) {
                var i = t[a],
                    n = ConfigData.getDataByKey("medalData", i.soulid);
                if (9 != n.medalType) {
                    var s = {};
                    s.id = i.id,
                        s.medal = !0,
                        s.type = Locales.get("DecEquipPanel_txt_dec_btn"),
                        s.upgradeLv = i.promotelvl,
                        s.pic = Path.soulIconURL + n.icon,
                        s.quality = n.quality,
                        s.level = "Lv." + Utils.getMetalLvByExp(i.point, "exp" + n.exp),
                        s.url = QualitySystem.getItemSmallBack(n.quality),
                        s.name = MedaldataParser.GetInstance().getItemById(i.soulid).name_l,
                        s.equiped = ShipManager.getInstance().isMedalEquiped(i.id),
                        s.upgradeType = BuffData.getBuffNameById(n.buff),
                        s.upgradeValue = n.buffValue,
                        s.upgradeInfo = s.upgradeType + ":" + s.upgradeValue,
                        s.remouldType = BuffData.getBuffNameById(n.remouldType),
                        s.remouldValue = SoulManager.getInstance().getPercentage(i.promotelvl, n.remouldValue),
                        s.remouldInfo = s.remouldType + " +" + s.remouldValue,
                        s.pos = this._pos,
                        e.push(s)
                }
            }
            return e
        },
        i.formatCaptainList = function(t) {
            for (var e = [], a = 0; a < t.length; a++) {
                var i = t[a],
                    n = ConfigData.getDataByKey("captainData", i.id),
                    s = {};
                s.id = i.id,
                    s.shipid = this._shipId,
                    s.upgradelevel = i.upgradelevel,
                    s.promotelevel = i.promotelevel,
                    s.data = n,
                    s.quality = n.quality,
                    s.name = CaptaindataParser.GetInstance().getItemById(i.id).name_l,
                    s.level = i.upgradelevel + Locales.get("ui_globalCampBattle_RewardPanel_ji"),
                    s.pic = CaptainManager.getInstance().getCaptainPicById(n.picture, !0),
                    s.url = QualitySystem.getCaptainSmallBack(n.quality),
                    s.qualityImg = QualitySystem.getCaptainFrame(n.quality),
                    e.push(s)
            }
            return e
        },
        e
}(WindowBase);
egret.registerClass(WindowChooseItem, "WindowChooseItem");
var chooseItemShip = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/zhenrong_xuanze_01junjianSkin.exml"
            /*tpa=resource/eui_skins/item/zhenrong_xuanze_01junjianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            this.btnEquip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectShip, this)
        },
        i.selectShip = function() {
            GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowChooseItem_chooseNewShip, {
                    id: this.data.id,
                    pos: this.data.pos
                })),
                WindowManager.getInstance().hide(WindowManager.windowType.ChoosItem),
                (10 == GuideManager.step || 26 == GuideManager.step || 72 == GuideManager.step) && GuideManager.nextStep()
        },
        i.dataChanged = function() {
            if (this.data) {
                this.txtName.textColor = QualitySystem.getColorByQuality(this.data.qualityNum);
                this.data.upgradeLv;
                SUI.setTextureAsync(this.bg, this.data.url),
                    SUI.setTextureAsync(this.pic, this.data.pic),
                    SUI.setTextureAsync(this.typeIcon, this.data.typeIcon),
                    this.txtUpgrade.text = ""
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(chooseItemShip, "chooseItemShip");
var chooseItemEquip = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/zhenrong_xuanze_02wuqixunzhangSkin.exml"
            /*tpa=resource/eui_skins/item/zhenrong_xuanze_02wuqixunzhangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            this.btnEquip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectEquip, this)
        },
        i.selectEquip = function() {
            this.data.medal ? (129 == GuideManager.step && GuideManager.nextStep(), GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowChooseItem_chooseNewMedal, {
                    id: this.data.id,
                    pos: this.data.pos
                }))) : (45 == GuideManager.step && GuideManager.nextStep(), GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowChooseItem_chooseNewPart, {
                    id: this.data.id
                }))),
                WindowManager.getInstance().hide(WindowManager.windowType.ChoosItem)
        },
        i.dataChanged = function() {
            if (this.data) {
                this.txtName.textColor = QualitySystem.getColorByQuality(this.data.quality);
                this.data.upgradeLv;
                if (SUI.setTextureAsync(this.bg, this.data.url), SUI.setTextureAsync(this.pic, this.data.pic), this.txtUpgrade.text = "", this.txtBuff.text = this.data.upgradeInfo, this.txtUpgradeBuff.text = this.data.remouldInfo, this.data.equiped) {
                    var t = ShipManager.getInstance().getShipById(this.data.equiped);
                    t.shipid % 100;
                    this.equipedMark.visible = !0,
                        this.txtEquipOn.text = Locales.get("panel_accessories_own_txt_equip"),
                        this.txtShipName.text = ShipManager.getInstance().getShipNameByType(t.shipid),
                        this.txtShipName.textColor = QualitySystem.getColorByQuality(ConfigData.getDataByKey("shipData", t.shipid).quality)
                } else this.txtEquipOn.text = "",
                    this.txtShipName.text = "",
                    this.equipedMark.visible = !1
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(chooseItemEquip, "chooseItemEquip");
var chooseItemCaptain = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/zhenrong_xuanze_03jianzhangSkin.exml"
            /*tpa=resource/eui_skins/item/zhenrong_xuanze_03jianzhangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            this.btnEquip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectEquip, this)
        },
        i.selectEquip = function() {
            136 == GuideManager.step && GuideManager.nextStep(),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowChooseItem_chooseNewCaptain, {
                    id: this.data.id,
                    "new": !0
                })),
                WindowManager.getInstance().hide(WindowManager.windowType.ChoosItem)
        },
        i.dataChanged = function() {
            var t = this;
            if (this.data) {
                var e = this.data.upgradelevel,
                    a = this.data.data;
                this.txtName.textColor = QualitySystem.getColorByQuality(this.data.quality),
                    SUI.setTextureAsync(this.bg, this.data.url),
                    SUI.setTextureAsync(this.bgCaptain, this.data.qualityImg),
                    SUI.setTextureAsync(this.pic, this.data.pic,
                        function() {
                            t.pic.width = 108,
                                t.pic.heigth = 110
                        }),
                    SUI.setTextureAsync(this.countryIcon, CaptainManager.getInstance().getCountryIconById(a.country));
                for (var i = e >= a.activeLvLimit1,
                        n = e >= a.activeLvLimit2,
                        s = ConfigData.getDataByKey("shipData", ShipManager.getInstance().getShipById(this.data.shipid).shipid), r = s.country == a.country ? "#00FF00" + Locales.get("panel_jianzhang_change_2") + "#" : "#FF0000" + Locales.get("panel_jianzhang_change_3") + "#", o = "#FF0000" + Locales.get("panel_jianzhang_change_3") + "#", l = Utils.getGoodAtShip(a.goodat)[1], h = 0; h < l.length; h++)
                    if (Number(s.shipType) == l[h]) {
                        o = "#00FF00" + Locales.get("panel_jianzhang_change_2") + "#";
                        break
                    }
                this.pro1Txt.textFlow = Utils.textFlowByStr(r + Locales.get("activePro1", a.activeLvLimit1, Locales.get("panel_jianzhang_shuxing1_guojia_" + a.country), BuffData.getBuffNameById(a.activeType1), Number(a.activeValue1 / 100) + "%"), 13421772, !i),
                    this.pro2Txt.textFlow = Utils.textFlowByStr(o + Locales.get("activePro2", a.activeLvLimit2, Utils.getGoodAtShip(a.goodat)[0], BuffData.getBuffNameById(a.activeType2), Number(a.activeValue2 / 100) + "%"), 13421772, !n)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(chooseItemCaptain, "chooseItemCaptain");
var WindowCommonIntroduction = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/junxian_tongyongwenben.exml"
            /*tpa=resource/eui_skins/junxian_tongyongwenben.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            if (t.title ? this.txtTitle.text = t.title : this.txtTitle.text = "", t.content) {
                var e = t.content;
                "string" == typeof e ? this.txtContent.text = e : e instanceof Array ? this.txtContent.textFlow = e : this.txtContent.text = e.toString()
            } else this.txtContent.text = ""
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowCommonIntroduction, "WindowCommonIntroduction");
var WindowDefenseOil = function(t) {
    function e() {
        t.call(this, !1),
            this.tickIndex = 0,
            this.chaValue = 0,
            this.skinName = "resource/eui_skins/ZB_ShouWeiYouTianSkin.exml"
            /*tpa=resource/eui_skins/ZB_ShouWeiYouTianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.tickIndex = 0,
                this.isFirst = !1,
                SUI.setTextureAsync(this.bgImg, Path.backGroundImageUrl + "ZB_SWYT_Bg.jpg"),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnChangeFormation.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnViewReward.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnRankList.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnBattle.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReset.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSkip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSweep.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                egret.Tween.get(this.btnViewReward, {
                    loop: !0
                }).to({
                        scaleX: .9,
                        scaleY: .9
                    },
                    500).to({
                        scaleX: 1,
                        scaleY: 1
                    },
                    500)
        },
        i.clear = function() {
            WindowManager.getInstance().clearCache(WindowManager.windowType.DefenseOil),
                0 != this.tickIndex && (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0),
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnChangeFormation.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnViewReward.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnRankList.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnBattle.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReset.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSkip.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSweep.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onTouchTapHandle = function(t) {
            var a = this;
            switch (t.currentTarget) {
                case this.btnClose:
                    0 != this.tickIndex && (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0),
                        this.chaValue = 0,
                        this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.btnChangeFormation.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.btnViewReward.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.btnRankList.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.btnBattle.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.btnReset.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.btnSkip.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.btnSweep.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.destroy();
                    break;
                case this.btnChangeFormation:
                    MainUI.instance.bottomUI.lastBtn = null,
                        WindowManager.getInstance().needShowWindow = !0,
                        RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceGetTactic, null, !0);
                    break;
                case this.btnViewReward:
                    DefenseOilAlert.getInstance().showViewRewardPage(e.maxstage);
                    break;
                case this.btnRankList:
                    RankListManager.getInstance().showRankWin(1);
                    break;
                case this.btnBattle:
                    if (this.isInSkip) {
                        Toast.launch("请先取消扫荡");
                        break
                    }
                    if (this.battleTimes <= 0) {
                        var i = 10 * (this.buychangecnt + 1),
                            n = 0;
                        n = VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).buyChance ? VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).buyChance - this.buychangecnt : 0;
                        var s = "<font>消耗</font><font color='#00FF00'>" + i + "</font><font>钻石可增加1次挑战次数\n您今天还可购买</font><font color='#00FF00'>" + n + "</font><font>次</font>";
                        GameAlert.getInstance().showByHtml("", s,
                            function() {
                                a.sendBuyGuard(2),
                                    GameAlert.getInstance().hide()
                            })
                    } else RequestManager.GetInstance().enterBattle(9, "", 0);
                    break;
                case this.btnReset:
                    if (this.isInSkip) {
                        Toast.launch("请先取消扫荡");
                        break
                    }
                    var r = 2 + this.buyresetcount - this.resetcount;
                    if (r > 0) GameAlert.getInstance().show("", "重置将恢复您的挑战次数，并重置回第1波开始挑战，是否确定重置？",
                        function() {
                            a.sendResetGuard(),
                                GameAlert.getInstance().hide()
                        });
                    else {
                        var o = 0;
                        0 == this.buyresetcount ? o = 200 : 1 == this.buyresetcount ? o = 500 : 2 == this.buyresetcount && (o = 1e3);
                        var l = "<font>消耗</font><font color='#00FF00'>" + o + "</font><font>钻石可增加1次重置次数\n您今日已购买:</font><font color='#00FF00'>" + this.buyresetcount + "</font><font>次\n您是</font><font color='#00FF00'>VIP" + UserData.getInstance().getVipLevel() + "的玩家,今日共可购买" + VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).buyRefresh + "次</font>";
                        GameAlert.getInstance().showByHtml("", l,
                            function() {
                                a.sendResetGuard(),
                                    GameAlert.getInstance().hide()
                            })
                    }
                    break;
                case this.btnSkip:
                    var h = this.sweepend - e.curstage,
                        c = "<font>消耗</font><font color='#00FF00'>" + h + "</font><font>钻石可立即完成对第</font><font color='#00FF00'>" + this.sweepend + "</font><font>波扫荡\n是否立即完成扫荡?</font>";
                    GameAlert.getInstance().showByHtml("", c,
                        function() {
                            a.sendBuyGuard(3),
                                GameAlert.getInstance().hide()
                        });
                    break;
                case this.btnSweep:
                    if (this.isInSkip) this.sendGuardStage(0, !1);
                    else {
                        if (0 == e.maxstage) {
                            Toast.launch("只能扫荡已通关的波数");
                            break
                        }
                        if (e.curstage == e.maxstage) {
                            Toast.launch("已达最高波数，请重置后再进行扫荡");
                            break
                        }
                        DefenseOilAlert.getInstance().showSaoDangPage(e.maxstage)
                    }
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("defenceStageData"),
                e.push("npcData"),
                e.push("shipModelData"),
                e.push("vip"),
                ConfigData.preLoadDats(e, [DefencestagedataParser, NpcdataParser, ShipmodeldataParser, VipParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            118 == GuideManager.step && GuideManager.nextStep(),
                WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                SUI.addClickEffect(this.btnChangeFormation),
                SUI.addClickEffect1(this.btnViewReward),
                SUI.addClickEffect(this.btnRankList),
                this.sendEnterGuard()
        },
        i.sendEnterGuard = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceEnterGuard);
            Transport.instance.send(t)
        },
        i.sendResetGuard = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceResetGuard);
            Transport.instance.send(t)
        },
        i.sendBuyGuard = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceBuyGuard);
            e.type = t,
                Transport.instance.send(e)
        },
        i.sendGuardStage = function(t, e) {
            var a = Transport.getPkg(ProtocolMgr.ID_DceGuardStage);
            a.endID = t,
                a.sweep = e,
                Transport.instance.send(a)
        },
        i.handleGuardStage = function(t) {
            t.endID,
                t.sweep ? (this.btnSweep.label = "取消扫荡", this.sendEnterGuard()) : (this.btnSweep.label = "扫 荡", this.chaValue = 0)
        },
        i.handleBuyGuard = function(t) {
            t.type,
                0 == t.res || (1 == t.res ? 1 == t.type ? Toast.launch("购买重置次数满") : 2 == t.type && Toast.launch("购买挑战次数满") : 2 == t.res ? Toast.launch("钻石不足") : 5 == t.res && Toast.launch("cd已结束"))
        },
        i.handleResetGuard = function(t) {
            0 == t.res || (1 == t.res ? Toast.launch("没有重置次数") : 2 == t.res ? Toast.launch("钻石不足") : 3 == t.res ? Toast.launch("重置次数满") : 4 == t.res && Toast.launch("无法重置"))
        },
        i.setCurrWaveInfo = function(t) {
            this.txtEnemyNum.text = "第" + (t + 1) + "波";
            var e = DefencestagedataParser.GetInstance().getItemById(t + 1); - 1 == e.conditionsType ? this.txtWinDesc.text = "通关条件:战斗胜利" : 1 == e.conditionsType ? this.txtWinDesc.text = "通关条件：战斗胜利不超过" + e.coefficient + "回合" : 2 == e.conditionsType ? this.txtWinDesc.text = "通关条件：战斗结束时，己方死亡战舰数量不超过" + e.coefficient + "艘" : 3 == e.conditionsType && (this.txtWinDesc.text = "通关条件：战斗结束时，己方战舰总生命损耗低于" + e.coefficient + "%");
            var a = NpcdataParser.GetInstance().getItemById(e.pos8);
            SUI.setTextureAsync(this.imgShipBg, Path.itemBackURL + "ZB_SWYT_" + a.quality + ".png"),
                SUI.setTextureAsync(this.imgShipIcon, Path.shipURL + "y_" + ShipmodeldataParser.GetInstance().getItemById(a.modelId).url),
                this.imgShipName.text = ShipmodeldataParser.GetInstance().getItemById(a.modelId).classType
        },
        i.handleEnterGuard = function(t) {
            var a = this;
            if (e.curstage = t.curstage, e.maxstage = t.maxstage, this.sweepstart = t.sweepstart, this.sweepend = t.sweepend, this.sweeptime = t.sweeptime, this.resetcount = t.resetcount, this.buyresetcount = t.buyresetcount, this.buychangecnt = t.buychangecnt, this.battleTimes = 2 + t.buychangecnt - t.changecnt - t.costbuychangecnt, this.resetTimes = 2 + t.buyresetcount - t.resetcount, this.txtChallengeTimes.text = "挑战次数:" + this.battleTimes + "/2", this.txtLeftBattleTimes.text = "剩余重置次数:" + this.resetTimes, 0 != t.sweeptime)
                if (this.totalTime = 30 * (t.sweepend - t.sweepstart + 1), this.isFirst) this.isFirst = !1,
                    this.isInSkip = !0,
                    this.btnSweep.label = "取消扫荡",
                    this.txtSweepTime.visible = !0,
                    this.txtSweepTime.text = "倒计时:" + GlobalFunction.getHMSBySecond(this.totalTime),
                    this.tickIndex = GameTick.registerHandler(function() {
                            a.updateTime()
                        },
                        1e3);
                else {
                    this.passTime = UserData.getInstance().getOldServerTime() / 1e3 - this.sweeptime,
                        console.log("扫荡需要的总时间 totalTime : " + this.totalTime),
                        console.log("扫荡已经过去的时间 passTime : " + this.passTime),
                        this.passTime < 0 && (this.passTime = 0);
                    var i = this.totalTime - this.passTime;
                    i > 0 ? (this.isInSkip = !0, this.btnSweep.label = "取消扫荡", this.txtSweepTime.visible = !0, 0 != this.tickIndex && (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0), this.txtSweepTime.text = "倒计时:" + GlobalFunction.getHMSBySecond(i), this.tickIndex = GameTick.registerHandler(function() {
                            a.updateTime()
                        },
                        1e3)) : (this.isInSkip = !1, this.btnSweep.label = "扫 荡", this.txtSweepTime.visible = !1, this.sendGuardStage(0, !1))
                }
            else this.isInSkip = !1,
                this.btnSweep.label = "扫 荡",
                this.txtSweepTime.visible = !1;
            if (this.btnSkip.enabled = this.isInSkip, this.setCurrWaveInfo(e.curstage), this.resetTimes > 0) this.resetCoinIcon.visible = !1,
                this.txtResetPrice.visible = !1,
                this.txtResetPrice.text = "",
                this.txtLeftBattleTimes.visible = !0;
            else {
                this.txtLeftBattleTimes.visible = !1,
                    this.resetCoinIcon.visible = !0;
                var n = 0;
                0 == t.buyresetcount ? n = 200 : 1 == t.buyresetcount ? n = 500 : 2 == t.buyresetcount && (n = 1e3),
                    this.txtResetPrice.visible = !0,
                    this.txtResetPrice.text = n.toString()
            }
            this.isInSkip ? this.txtSkipPrice.text = "" + (t.sweepend - t.curstage) : this.txtSkipPrice.text = "0"
        },
        i.updateTime = function() {
            this.passTime = UserData.getInstance().getOldServerTime() / 1e3 - this.sweeptime + this.chaValue,
                this.passTime < 0 && (this.chaValue = -this.passTime, this.passTime = 0);
            var t = this.totalTime - this.passTime,
                a = t % 30;
            if (0 == a && t < this.totalTime) {
                e.curstage++,
                    this.setCurrWaveInfo(e.curstage);
                var i = Number(this.txtSkipPrice.text) - 1;
                this.txtSkipPrice.text = i.toString()
            }
            0 >= t ? (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0, this.isInSkip = !1, this.btnSweep.label = "扫 荡", this.txtSweepTime.visible = !1) : this.txtSweepTime.text = "倒计时:" + GlobalFunction.getHMSBySecond(t)
        },
        e.resetBattleFun = function() {
            RequestManager.GetInstance().enterBattle(9, "", 0)
        },
        e
}(WindowBase);
egret.registerClass(WindowDefenseOil, "WindowDefenseOil");
var WindowDuanXian = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/DuanXianSkin.exml"
            /*tpa=resource/eui_skins/DuanXianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.btnLogin.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                GameLayer.getInstance().topLayer.addChild(this)
        },
        i.clickHandler = function(t) {
            GameLayer.getInstance().topLayer.removeChild(this),
                Transport.instance.socketReset()
        },
        e
}(eui.Component);
egret.registerClass(WindowDuanXian, "WindowDuanXian");
var WindowEctype = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ZB_RiChangFuBenSkin.exml"
            /*tpa=resource/eui_skins/ZB_RiChangFuBenSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            EctypeTabItem.SelectItem = null,
                e.tabIndex = 1,
                ConfigData.preLoadList(["stageSpecialData"],
                    function() {
                        ConfigData.preLoadDats(["robNPCData", "stageSpecialData"], [RobnpcdataParser, StagespecialdataParser],
                            function() {
                                t.initUI()
                            })
                    }),
                MainUI.instance.changeTopMode(topUIMode.simple)
        },
        i.setData = function(t) {
            t.auto && this.tabList && (t.index ? this.tabList[t.index - 1].clickHandler(null) : this.tabList[e.jiluTabIndex - 1].clickHandler(null))
        },
        i.initUI = function() {
            92 == GuideManager.step && GuideManager.nextStep(),
                this.createTab(),
                this.createList(),
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this)
        },
        i.closeHandler = function(t) {
            this.close()
        },
        i.createTab = function() {
            this.tabList = [];
            for (var t = 0; 2 > t; t++) {
                var e = new EctypeTabItem({
                    id: t,
                    target: this
                });
                e.x = 160 * t,
                    this.vessel.addChild(e),
                    this.tabList[t] = e,
                    0 == t && (EctypeTabItem.SelectItem = e)
            }
        },
        i.changeTab = function(t) {
            e.tabIndex = t,
                this.createList()
        },
        i.createList = function() {
            this.bVessel.removeChildren();
            for (var t = 3 * (e.tabIndex - 1), a = 0; 3 > a; a++) {
                var i = new EctypeItem({
                    id: 2e5 + 3 * (t + a) + 1,
                    stageId: a + 1 + t
                });
                i.y = 170 * a,
                    this.bVessel.addChild(i)
            }
            this.bVessel.height = 170 * a
        },
        e.battleEctype = function() {
            RequestManager.GetInstance().enterBattle(4, EctypeItem.stageID, 0, 0),
                e.jiluTabIndex = e.tabIndex
        },
        e
}(WindowBase);
egret.registerClass(WindowEctype, "WindowEctype");
var EctypeTabItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/ZB_RiChangFuBen_1_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_RiChangFuBen_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            Utils.getImgByUrl(Path.zhengBaURL + (0 == this.iData.id ? "haidao_icon_1" : "yunshuxian_icon_1") + ".jpg", this.icon),
                this.txtName.text = Locales.get("panel_pirate_text_title_" + (this.iData.id + 1));
            for (var t = 3 * this.iData.id,
                    a = 0,
                    i = 0; 3 > i; i++) {
                var n = 2e5 + 3 * (t + i) + 1,
                    s = i + 1 + t;
                a += StageData.getItemCount(n, s)
            }
            this.numImg.visible = a > 0,
                this.haveNum = a,
                e.SelectItem && (this.selectImg.visible = e.SelectItem == this, this.selectImg.visible ? this.numImg.visible = !this.selectImg.visible : this.showNumImg()),
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this)
        },
        i.showNumImg = function() {
            this.numImg.visible = this.haveNum > 0
        },
        i.clickHandler = function(t) {
            e.SelectItem && e.SelectItem.selectImg && (e.SelectItem.selectImg.visible = !1, e.SelectItem.showNumImg()),
                e.SelectItem = this,
                this.selectImg && (this.selectImg.visible = !0, this.numImg.visible = !1),
                this.iData.target.changeTab(this.iData.id + 1)
        },
        e
}(eui.Component);
egret.registerClass(EctypeTabItem, "EctypeTabItem");
var EctypeItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/ZB_RiChangFuBen_2_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_RiChangFuBen_2_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = StageData.getItemCount(this.iData.id, this.iData.stageId),
                e = ConfigData.getDataByKey("stageSpecialData", this.iData.id),
                a = this.iData.stageId - 3 * Math.floor(this.iData.stageId / 4),
                i = 0,
                n = UserData.getInstance().getRes(TypeDefine.RES.Oil);
            t > 0 && UserData.getInstance()._level >= Number(e.reqStage) && (i = 1),
                Utils.getImgByUrl(Path.zhengBaURL + (this.iData.id > 200009 ? "yunshuxian_" : "haidao_") + a + "_" + i + ".jpg", this.imgBack),
                this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == t ? "panel_active_game_defence_desc_4_0" : "panel_active_game_defence_desc_4", t)),
                this.txtName.text = Locales.get("panel_pirate_text_disciple_lv_" + a + (this.iData.id < 200009 ? "_1" : "_2")),
                this.txtDesc.text = e.costOil,
                UserData.getInstance()._level < Number(e.reqStage) ? (this.txtLimit.text = Locales.get("levelLimit", e.reqStage), this.txtFlag.visible = !1) : (this.txtLimit.text = "", this.txtFlag.visible = !0),
                n < Number(e.costOil) && (this.txtDesc.textColor = 16711680),
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clearHandler, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.HEGEMONY_NET, this.refreshHandler, this),
                i > 0 && this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this)
        },
        i.clickHandler = function(t) {
            var a = ConfigData.getDataByKey("stageSpecialData", this.iData.id),
                i = UserData.getInstance().getRes(TypeDefine.RES.Oil);
            i < Number(a.costOil) ? Toast.launch(Locales.get("battleResult_3")) : UserData.getInstance()._level < Number(a.reqStage) ? Toast.launch(Locales.get("panel_guard_biwu_signup_show_text_3") + "Lv" + a.reqStage) : (e.stageID = this.iData.stageId.toString(), WindowEctype.battleEctype(), 94 == GuideManager.step && GuideManager.nextStep())
        },
        i.clearHandler = function(t) {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.HEGEMONY_NET, this.refreshHandler, this)
        },
        i.refreshHandler = function(t) {
            var e = StageData.getItemCount(this.iData.id, this.iData.stageId);
            this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == e ? "panel_active_game_defence_desc_4_0" : "panel_active_game_defence_desc_4", e))
        },
        e
}(eui.Component);
egret.registerClass(EctypeItem, "EctypeItem");
var WindowExchangeBlueprint = function(t) {
    function e() {
        t.call(this, !1),
            this.exchangeCountList = [],
            this.skinName = "resource/eui_skins/commonListPageSkin.exml"
            /*tpa=resource/eui_skins/commonListPageSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            MainUI.instance.changeTopMode(topUIMode.simple),
                this.scroller.viewport = this.list,
                this.btnClose.visible = !0,
                this.resNumPanel.visible = !0,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.renturnBtnClickHandler, this),
                this.isMsgOk = !1,
                this.isTableOk = !1,
                this.sendPaperChargeCountMsg();
            for (var t = ["高级图纸", "普通图纸"], e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 118 * e,
                    a.index = e,
                    a.label = t[e],
                    this.tabContainer.addChildAt(a, 0),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "up",
                    0 == e && a.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
            }
        },
        i.onTabBarItemTap = function(t) {
            var e = t.currentTarget;
            e != this.lastTab && (e.currentState = "down", this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"), this.lastTab = e, this.setPage(e.index))
        },
        i.renturnBtnClickHandler = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.ExchangeBlueprint)
        },
        i.setPage = function(t, e) {
            var a = this;
            void 0 === t && (t = 0),
                void 0 === e && (e = !1),
                0 == t ? (this.resIcon.source = "GUI_Shipbuilding_gaojiwannengtuzhi_png", this.resNum.text = UserData.getInstance().getSeniorpaper().toString()) : (this.resIcon.source = "GUI_Shipbuilding_dijiwannengtuzhi_png", this.resNum.text = UserData.getInstance().getJuniorpaper().toString());
            var i = PaperchargedataParser.GetInstance().getDatas(),
                n = PaperdataParser.GetInstance().getDatas(),
                s = PaperchargecountParser.GetInstance().getDatas();
            if (!i || !n || !s) return void ConfigData.preLoadDats(["paperChargeData", "paperData", "paperChargeCount"], [PaperchargedataParser, PaperdataParser, PaperchargecountParser],
                function() {
                    a.setPage(t)
                });
            if (this.isTableOk = !0, this.isMsgOk && (this.curPage != t || e)) {
                this.curPage = t;
                var r = [],
                    o = [],
                    l = 0 == this.curPage ? 2 : 1,
                    h = void 0;
                h = 2 == l ? UserData.getInstance().getSeniorpaper() : UserData.getInstance().getJuniorpaper();
                for (var c in i)
                    if (i[c].type == l) {
                        var d = {};
                        d.id = i[c].id,
                            d.vip = i[c].vipLevel,
                            d.name = n[i[c].id].name_l;
                        var g = this.exchangeCountList[i[c].id] ? this.exchangeCountList[i[c].id] + 1 : 1,
                            u = PaperchargecountParser.GetInstance().getItemByField("count", g).per / 100;
                        d.costNum = Math.ceil(i[c].count * u),
                            d.enough = h >= d.costNum;
                        var p = n[i[c].id].shipId;
                        d.ship = ShipManager.getInstance().getShipPicByType(p),
                            d.shipData = {
                                shipid: p
                            },
                            d.quality = n[i[c].id].quality,
                            d.ExchangeType = l,
                            d.shipType = ShipManager.getInstance().getShipTypeIcon(n[i[c].id].shipType),
                            1 == d.enough && UserData.getInstance()._vip >= d.vip ? r.push(d) : o.push(d)
                    }
                o.sort(function(t, e) {
                        return t.vip - e.vip
                    }),
                    Array.prototype.push.apply(r, o),
                    this.list.dataProvider = new eui.ArrayCollection(r),
                    this.list.itemRenderer = ExchangeItemRenderer
            }
        },
        i.sendPaperChargeCountMsg = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DcePaperChargeCount);
            Transport.instance.send(t)
        },
        i.setPaperChargeCountData = function(t) {
            this.exchangeCountList = [];
            for (var e = 0; e < t.paperchargecountdata.length; e++) this.exchangeCountList[t.paperchargecountdata[e].id] = t.paperchargecountdata[e].count;
            this.isMsgOk = !0,
                this.isTableOk && this.setPage(this.curPage, !0)
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowExchangeBlueprint, "WindowExchangeBlueprint");
var ExchangeItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/zhuyeduihuanTuzhibuzuSkin.exml"
            /*tpa=resource/eui_skins/item/zhuyeduihuanTuzhibuzuSkin.exml*/
            ,
            this.addEventListener(egret.TouchEvent.TOUCH_END, this.clickHandler, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clickHandler = function(t) {
            var e = this;
            if (t.target != this.shipImg) {
                var a = "";
                a = 1 == this.data.ExchangeType ? "[低级万能图纸]" : "[高级万能图纸]";
                var i = QualitySystem.getColorByQuality(this.data.quality),
                    n = "是否花费<font color='#00ffff'>" + a + "</font>x" + this.data.costNum + "兑换<font color ='" + i + "'>" + this.data.name + "</font>?";
                GameAlert.getInstance().showByHtml("提示", n,
                    function() {
                        var t = Transport.getPkg(ProtocolMgr.ID_DceChargePaper);
                        t.id = e.data.id,
                            t.wanneng = !0,
                            Transport.instance.send(t),
                            GameAlert.getInstance().hide()
                    })
            } else WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: this.data.shipData,
                type: shipInfoWindowType.preview
            })
        },
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data.vip > UserData.getInstance()._vip ? (this.unopenedGrop.visible = !0, this.openedGrop.visible = !1, this.vipLevelTxt.text = this.data.vip) : (this.unopenedGrop.visible = !1, this.openedGrop.visible = !0),
                1 == this.data.enough ? (this.isEnoughImg.source = "tongyong_lvkuang_png", this.isEnoughTxt.text = "可以兑换", this.isEnoughTxt.textColor = 2013992) : (this.isEnoughImg.source = "tongyong_hongkuang_png", this.isEnoughTxt.text = "数量不足", this.isEnoughTxt.textColor = 10686999),
                this.txtName.text = this.data.name,
                this.txtName.textColor = QualitySystem.getColorByQuality(this.data.quality),
                this.costNumTxt.text = this.data.costNum,
                Utils.getImgByUrl(this.data.ship, this.shipImg),
                this.qualityImg.source = QualitySystem.getShipPaperBackGround(this.data.quality),
                2 == this.data.ExchangeType ? this.costItemImg.source = "GUI_Shipbuilding_gaojiwannengtuzhi_png" : this.costItemImg.source = "GUI_Shipbuilding_dijiwannengtuzhi_png",
                this.shipTypeImg.source = this.data.shipType
        },
        e
}(eui.ItemRenderer);
egret.registerClass(ExchangeItemRenderer, "ExchangeItemRenderer");
var WindowExchangeCaptain = function(t) {
    function e() {
        t.call(this, !1),
            this.exchangeCountList = [],
            this.skinName = "resource/eui_skins/commonListPageSkin.exml"
            /*tpa=resource/eui_skins/commonListPageSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            MainUI.instance.changeTopMode(topUIMode.simple),
                this.scroller.viewport = this.list,
                this.btnClose.visible = !0,
                this.resNumPanel.visible = !0,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.renturnBtnClickHandler, this),
                this.isMsgOk = !1,
                this.isTableOk = !1,
                this.sendCaptainChargeCountMsg();
            for (var t = ["高级舰长", "普通舰长"], e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 118 * e,
                    a.index = e,
                    a.label = t[e],
                    this.tabContainer.addChildAt(a, 0),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "up",
                    0 == e && a.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
            }
        },
        i.onTabBarItemTap = function(t) {
            var e = t.currentTarget;
            e != this.lastTab && (e.currentState = "down", this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"), this.lastTab = e, this.setPage(e.index))
        },
        i.renturnBtnClickHandler = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.ExchangeCaptain)
        },
        i.setPage = function(t, e) {
            var a = this;
            void 0 === t && (t = 0),
                void 0 === e && (e = !1),
                0 == t ? (this.resIcon.source = "gaojijianghun_png", this.resNum.text = CaptainManager.getInstance().seniorcaptain.toString()) : (this.resIcon.source = "putongjianghun_png", this.resNum.text = CaptainManager.getInstance().juniorcaptain.toString());
            var i = CaptainchargedataParser.GetInstance().getDatas(),
                n = CaptaindataParser.GetInstance().getDatas(),
                s = CaptainchargecountParser.GetInstance().getDatas();
            if (!i || !n || !s) return void ConfigData.preLoadDats(["captainChargeData", "captainData", "captainChargeCount"], [CaptainchargedataParser, CaptaindataParser, CaptainchargecountParser],
                function() {
                    a.setPage(t)
                });
            if (this.isTableOk = !0, this.isMsgOk && (this.curPage != t || e)) {
                this.curPage = t;
                var r = [],
                    o = [],
                    l = 0 == this.curPage ? 2 : 1,
                    h = void 0;
                h = 2 == l ? CaptainManager.getInstance().seniorcaptain : CaptainManager.getInstance().juniorcaptain;
                for (var c in i)
                    if (i[c].type == l) {
                        var d = {};
                        d.id = i[c].id,
                            d.name = n[i[c].id].name_l;
                        var g = this.exchangeCountList[i[c].id] ? this.exchangeCountList[i[c].id] + 1 : 1,
                            u = CaptainchargecountParser.GetInstance().getItemByField("count", g).per / 100;
                        d.costNum = Math.ceil(i[c].count * u),
                            d.enough = h >= d.costNum,
                            d.head = Path.captainIconURL + n[i[c].id].pictureSmall,
                            d.quality = n[i[c].id].quality,
                            d.ExchangeType = l,
                            d.country = n[i[c].id].country,
                            d.goodAt = this.getGoodAt(n[i[c].id].goodat),
                            1 == d.enough ? r.push(d) : o.push(d)
                    }
                Array.prototype.push.apply(r, o),
                    this.list.dataProvider = new eui.ArrayCollection(r),
                    this.list.itemRenderer = ExchangeCaptainRenderer
            }
        },
        i.sendCaptainChargeCountMsg = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceExchangeCaptainCount);
            Transport.instance.send(t)
        },
        i.setCaptainChargeCountData = function(t) {
            this.exchangeCountList = [];
            for (var e = 0; e < t.exchangecaptaincountdata.length; e++) this.exchangeCountList[t.exchangecaptaincountdata[e].id] = t.exchangecaptaincountdata[e].count;
            this.isMsgOk = !0,
                this.isTableOk && this.setPage(this.curPage, !0)
        },
        i.getGoodAt = function(t) {
            var e = 1,
                a = 2,
                i = 4,
                n = 8,
                s = 16,
                r = 32,
                o = 64,
                l = 128,
                h = "",
                c = [];
            if (t - l >= 0 && (c.push(Locales.get("PartsSystem_ShipType_8")), t -= l), t - o >= 0 && (c.push(Locales.get("PartsSystem_ShipType_7")), t -= o), t - r >= 0 && (c.push(Locales.get("PartsSystem_ShipType_6")), t -= r), t - s >= 0 && (c.push(Locales.get("PartsSystem_ShipType_5")), t -= s), t - n >= 0 && (c.push(Locales.get("PartsSystem_ShipType_4")), t -= n), t - i >= 0 && (c.push(Locales.get("PartsSystem_ShipType_3")), t -= i), t - a >= 0 && (c.push(Locales.get("PartsSystem_ShipType_2")), t -= a), t - e >= 0 && c.push(Locales.get("PartsSystem_ShipType_1")), 1 == c.length) h = c[0];
            else if (c.length > 1)
                for (var d in c) h = 0 == parseInt(d) ? c[d] : h + "、" + c[d];
            return h
        },
        i.updataJiangHun = function() {
            var t = 0 == this.curPage ? 2 : 1;
            2 == t ? this.resNum.text = CaptainManager.getInstance().seniorcaptain.toString() : this.resNum.text = CaptainManager.getInstance().juniorcaptain.toString()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowExchangeCaptain, "WindowExchangeCaptain");
var ExchangeCaptainRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.TouchEvent.TOUCH_END, this.clickHandler, this),
            this.skinName = "resource/eui_skins/item/zhuyeduihuanChuangZhangbuzuSkin.exml"
            /*tpa=resource/eui_skins/item/zhuyeduihuanChuangZhangbuzuSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clickHandler = function(t) {
            var e = this;
            if (t.target != this.headCompent && t.target.parent != this.headCompent) {
                var a = "";
                a = 1 == this.data.ExchangeType ? "[普通将魂]" : "[高级将魂]";
                var i = QualitySystem.getColorByQuality(this.data.quality),
                    n = "是否花费<font color='#00ffff'>" + a + "</font>x" + this.data.costNum + "兑换<font color ='" + i + "'>" + this.data.name + "</font>?";
                GameAlert.getInstance().showByHtml("提示", n,
                    function() {
                        var t = Transport.getPkg(ProtocolMgr.ID_DceExchangeCaptain);
                        t.id = e.data.id,
                            Transport.instance.send(t),
                            GameAlert.getInstance().hide()
                    })
            } else {
                var s = {
                    id: this.data.id
                };
                WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                    data: s,
                    type: shipInfoWindowType.captainPreview
                })
            }
        },
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                1 == this.data.enough ? (this.isEnoughImg.source = "tongyong_lvkuang_png", this.isEnoughTxt.text = "可以兑换", this.isEnoughTxt.textColor = 2013992) : (this.isEnoughImg.source = "tongyong_hongkuang_png", this.isEnoughTxt.text = "数量不足", this.isEnoughTxt.textColor = 10686999),
                this.txtName.text = this.data.name,
                this.txtName.textColor = QualitySystem.getColorByQuality(this.data.quality),
                this.costNumTxt.text = this.data.costNum,
                2 == this.data.ExchangeType ? this.costItemImg.source = "gaojijianghun_png" : this.costItemImg.source = "putongjianghun_png",
                Utils.getImgByUrl(Path.countryURL + "country_" + this.data.country + ".jpg", this.countryImg),
                this.txtInfo.text = "擅长：" + this.data.goodAt;
            var e = this.headCompent.imgIcon;
            Utils.getImgByUrl(this.data.head, e),
                e = this.headCompent.imgBg;
            var a = QualitySystem.getCaptainSmallBack(Number(this.data.quality));
            Utils.getImgByUrl(a, e),
                e = this.headCompent.imgFrame,
                a = QualitySystem.getCaptainFrame(Number(this.data.quality)),
                Utils.getImgByUrl(a, e)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(ExchangeCaptainRenderer, "ExchangeCaptainRenderer");
var WindowFirstRecharge = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/HuoDong_shouchong_Skin.exml"
            /*tpa=resource/eui_skins/HuoDong_shouchong_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.onTouchShip = function(t) {
            var e = t.currentTarget.shipId,
                a = PaperdataParser.GetInstance().getItemByField("shipId", e);
            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: {
                    id: a.id,
                    shipid: e
                },
                type: shipInfoWindowType.handbook
            })
        },
        i.updateBtns = function() {
            for (var t = ActivityManager.instance.curActivityInfo,
                    e = [2, 5], a = 1; 2 >= a; ++a) {
                var i = this["btnRecharge" + a],
                    n = t.itemlist[a - 1],
                    s = t.itemlist[a],
                    r = t.itemlist[a - 2],
                    o = n.params[0],
                    l = 0;
                o == ActivityManager.instance.activityData.cashtype ? l = 1 : o < ActivityManager.instance.activityData.cashtype ? l = !s || s.params[0] > ActivityManager.instance.activityData.cashtype ? 1 : 2 : r && r.params[0] <= ActivityManager.instance.activityData.cashtype && (l = 2);
                var h = CashdataParser.GetInstance().getItemById(e[a - 1]),
                    c = GetPlatType();
                0 == l ? i.labelDisplay.text = "充值" + h.sale + (c == PlatformType.PF_QQ ? "星星" : "元") : 1 == l ? (i.labelDisplay.text = "领取", i.itemInfo = n) : 2 == l && (i.visible = !1)
            }
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnRecharge2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRecharge2, this),
                this.btnRecharge1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRecharge1, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.UserData_Update, this.updateBtns, this),
                SUI.setTextureAsync(this.imgBack, Path.uiUrl + "Activity/firstRecharge.png"),
                SUI.setTextureAsync(this.imgLight, Path.uiUrl + "Activity/activity_light.png"),
                egret.Tween.get(this.imgLight, {
                    loop: !0
                }).to({
                        rotation: this.imgLight.rotation + 360
                    },
                    6e3);
            for (var t = [10400, 13e3], e = [2, 5], a = ActivityManager.instance.curActivityInfo, i = 1; 2 >= i; ++i) {
                var n = this["imgShip" + i],
                    s = this["btnRecharge" + i],
                    r = this["txtShipName" + i],
                    o = ShipdataParser.GetInstance().getItemById(t[i - 1]),
                    l = o.modelId,
                    h = ShipmodeldataParser.GetInstance().getItemById(l),
                    c = Path.shipURL + "y_" + h.url;
                SUI.setTextureAsync(n, c),
                    r.text = o.name_l,
                    n.shipId = t[i - 1],
                    n.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchShip, this);
                var d = a.itemlist[i - 1],
                    g = a.itemlist[i],
                    u = a.itemlist[i - 2],
                    p = d.params[0],
                    m = 0;
                p == ActivityManager.instance.activityData.cashtype ? m = 1 : p < ActivityManager.instance.activityData.cashtype ? m = !g || g.params[0] > ActivityManager.instance.activityData.cashtype ? 1 : 2 : u && u.params[0] <= ActivityManager.instance.activityData.cashtype && (m = 2);
                var _ = CashdataParser.GetInstance().getItemById(e[i - 1]),
                    v = GetPlatType();
                0 == m ? s.labelDisplay.text = "充值" + _.sale + (v == PlatformType.PF_QQ ? "星星" : "元") : 1 == m ? (s.labelDisplay.text = "领取", s.itemInfo = d) : 2 == m && (s.visible = !1);
                var f = this["txtRechargeNum" + i],
                    I = this["txtRewardDiamond" + i],
                    T = this["txtRecharge" + i];
                if (f.text = _.sale.toString(), I.text = (_.cash + _.firstGet).toString(), i >= 2) {
                    var y = CashdataParser.GetInstance().getItemById(e[i - 2]);
                    T.text = y.sale.toString()
                }
                for (var D = function(t) {
                            var e = P["reward" + i + "_" + t],
                                a = d.items[t - 1];
                            if (a) {
                                var n = GiftdataParser.GetInstance().getItemById(a.id),
                                    s = GlobalFunction.getDropDataByTypeAndId(n.type, n.item, n.count);
                                SUI.setItemIcon(e, s),
                                    1 == a.effect ? (e.hasEffect = !0, e.effect ? e.effect.visible = !0 : SUI.loadMovieClip(Path.activityEffectUrl + "activity_goods.json", Path.activityEffectUrl + "activity_goods.png", e,
                                        function(t) {
                                            t.x = 47,
                                                t.y = 47.5,
                                                e.effect = t,
                                                e.hasEffect || (t.visible = !1)
                                        },
                                        P)) : (e.hasEffect = !1, e.effect && (e.effect.visible = !1)),
                                    e.visible = !0
                            } else e.visible = !1
                        },
                        P = this, C = 1; 3 >= C; ++C) D(C)
            }
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnRecharge2 = function(t) {
            t.currentTarget.itemInfo ? (RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                id: ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE,
                type: t.currentTarget.itemInfo.key
            }), this.close()) : ConfigData.preLoadDats(["cashData"], [CashdataParser],
                function() {
                    var t = CashdataParser.GetInstance().getItemById(5);
                    PlatformManager.instance.pay(t.id.toString(), t.name_l, t.sale, 1, void 0)
                },
                this)
        },
        i.OnClickBtnRecharge1 = function(t) {
            t.currentTarget.itemInfo ? (RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                id: ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE,
                type: t.currentTarget.itemInfo.key
            }), this.close()) : ConfigData.preLoadDats(["cashData"], [CashdataParser],
                function() {
                    var t = CashdataParser.GetInstance().getItemById(2);
                    PlatformManager.instance.pay(t.id.toString(), t.name_l, t.sale, 1, void 0)
                },
                this)
        },
        i.clear = function() {
            egret.Tween.removeTweens(this.imgLight),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.UserData_Update, this.updateBtns, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowFirstRecharge, "WindowFirstRecharge");
var WindowFormation = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/zhuye_Zhenrong_zhandouzhenxingSkin.exml"
            /*tpa=resource/eui_skins/zhuye_Zhenrong_zhandouzhenxingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["manual", "manualupdate"],
                function() {
                    t.initUI()
                })
        },
        i.initUI = function() {
            var t = ConfigData.getAllData("manual"),
                e = 0;
            FormationItem.useBtn = null;
            for (var a in t)
                if ("length" != a) {
                    var i = new FormationItem(t[a]);
                    i.y = 150 * e,
                        this.vessel.addChild(i),
                        e++
                }
            this.vessel.height = e * i.height,
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this)
        },
        i.closeHandler = function(t) {
            this.close()
        },
        e
}(WindowBase);
egret.registerClass(WindowFormation, "WindowFormation");
var WindowFormationUpPopup = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/FormationUpPopupSkin.exml"
            /*tpa=resource/eui_skins/FormationUpPopupSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this.iData = t.data,
                this.initUI()
        },
        i.initUI = function(t) {
            var e = ConfigData.getAllData("manualupdate"),
                a = Utils.getListByKeyValue("id", this.iData.id, ShipManager.getInstance().shipFormationList),
                i = 0;
            a.length > 0 && (i = a[0].level),
                this.lvTxt.text = Locales.get("DecListPanel_txt_item_lvl") + i + "/" + e.length,
                this.titleTxt.text = Locales.get("formationName_" + this.iData.id);
            var n = Number(this.iData.value1) + ((0 == i ? 1 : i) - 1) * Number(this.iData.value1rate);
            this.atk1Txt.text = Locales.get("manual_buff_" + this.iData.targetType1 + this.iData.buff1) + ":" + n * a.length,
                this.atkV1Txt.text = "+" + (0 == i ? this.iData.value1 : this.iData.value1rate),
                this.iData.targetType2 ? (n = Number(this.iData.value2) + ((0 == i ? 1 : i) - 1) * Number(this.iData.value2rate), this.atk2Txt.text = Locales.get("manual_buff_" + this.iData.targetType2 + this.iData.buff2) + ":" + n * a.length, this.atkV2Txt.text = "+" + (0 == i ? this.iData.value2 : this.iData.value2rate)) : (this.atk2Txt.text = "", this.atkV2Txt.text = ""),
                this.atkV1Txt.x = this.atk1Txt.x + this.atk1Txt.textWidth + 30,
                this.atkV2Txt.x = this.atk2Txt.x + this.atk2Txt.textWidth + 30,
                Utils.getImgByUrl(Path.formationURL + this.iData.icon, this.icon);
            var n = 0,
                s = ItemsManager.getInstance().getItemById(1261);
            n = s && s.count || 0;
            var r = ConfigData.getDataByKey("manualupdate", i + 1);
            this.t1Txt.text = n + "/" + r.manual;
            var o = UserData.getInstance().getRes(TypeDefine.RES.Gold);
            this.t2Txt.text = Utils.rnum(o) + "/" + Utils.rnum(r.gold),
                n < Number(r.manual) && (this.t1Txt.textColor = 16711680),
                o < Number(r.gold) && (this.t2Txt.textColor = 16711680),
                (o < Number(r.gold) || n < Number(r.manual)) && (this.upBtn.enabled = !1),
                this.closeBtn.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (Utils.getImgByUrl(Path.itemIconURL + "Formation-of-manual.png", this.icon1), Utils.getImgByUrl(Path.itemIconURL + "coin.png", this.icon2), o < Number(r.gold) || n < Number(r.manual) ? this.upBtn.enabled = !1 : this.upBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upHandler, this), this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this), GameEventDispatcher.getInstance().addEventListener(GameEvent.FORMATION_UPDATE, this.initUI, this))
        },
        i.closeHandler = function(t) {
            this.destroy()
        },
        i.upHandler = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceShipFormationLevelUp);
            e.id = Number(this.iData.id),
                Transport.instance.send(e)
        },
        e
}(WindowBase);
egret.registerClass(WindowFormationUpPopup, "WindowFormationUpPopup");
var WindowFormatTeam = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/formatTeamSkin.exml"
            /*tpa=resource/eui_skins/formatTeamSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            this.x = .5 * (GameData.designWidth - this.width),
                this.y = .5 * (GameData.designHeight - this.height),
                this.shipids = [];
            for (var e = 0; 10 > e; e++) this.shipids[e] = "0";
            ConfigData.preLoadList(["manual", "shipData"],
                function() {
                    t.initUI()
                })
        },
        i.initUI = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnShowBuff.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function(t) {
                        WindowManager.getInstance().show(WindowManager.windowType.Formation)
                    },
                    this);
            for (var t = 1; 8 >= t; t++) {
                5 > t ? this["pos" + t].txtPos.text = Locales.get("panel_marine_force") : this["pos" + t].txtPos.text = Locales.get("panel_marine_back");
                var e = ShipManager.getInstance().tacticList[t - 1];
                this.shipids[t - 1] = e,
                    this["pos" + t].index = t,
                    this["pos" + t].addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.beginDrag, this),
                    this["pos" + t].addEventListener(egret.TouchEvent.TOUCH_END, this.endDrag, this),
                    this.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.dragMove, this),
                    this.addEventListener(egret.TouchEvent.TOUCH_END, this.cancelDrag, this)
            }
            this.dragItem = new eui.Component,
                this.dragItem.touchEnabled = !1,
                this.dragItem.touchChildren = !1,
                this.dragItem.skinName = "resource/eui_skins/item/zhenrong_zhulijianSkin.exml"
                /*tpa=resource/eui_skins/item/zhenrong_zhulijianSkin.exml*/
                ,
                GameEventDispatcher.getInstance().addEventListener(GameEvent.FORMATION_CHANGE, this.updateFormation, this),
                this.updateFormation(),
                this.updateArrange()
        },
        i.updateFormation = function(t) {
            var e = ShipManager.getInstance().shipFormationList[ShipManager.getInstance().shipFormationSelect - 1];
            this.txtFormatName.text = Locales.get("formationName_" + e.id),
                this.txtLevel.text = Locales.get("panel_reward_txt_growup_4", e.level);
            var a = ConfigData.getDataByKey("manual", e.id);
            this.attack1.text = Locales.get("manual_buff_" + a.targetType1 + a.buff1) + "+" + (+a.value1 + a.value1rate * (e.level - 1)),
                "" != a.buff2 ? this.attack2.text = Locales.get("manual_buff_" + a.targetType2 + a.buff2) + "+" + (+a.value2 + a.value2rate * (e.level - 1)) : this.attack2.text = ""
        },
        i.beginDrag = function(t) {
            var e = t.currentTarget.index;
            this["pos" + e].bg.visible = !1,
                this["pos" + e].pic.visible = !1,
                this["pos" + e].txtName.text = "",
                this["pos" + e].iconType.visible = !1,
                this["pos" + e].caption.visible = !1;
            var a = this.shipids[e - 1],
                i = ShipManager.getInstance().getShipById(a);
            if (i) {
                var n = ConfigData.getDataByKey("shipData", i.shipid);
                this.dragItem.bg.visible = !0,
                    this.dragItem.pic.visible = !0,
                    this.dragItem.iconType.visible = !0,
                    this.dragItem.caption.visible = ShipManager.getInstance().captionId == i.id,
                    this.dragItem.txtName.text = ShipManager.getInstance().getShipNameByType(i.shipid),
                    this.dragItem.txtName.textColor = QualitySystem.getColorByQuality(n.quality),
                    SUI.setTextureAsync(this.dragItem.bg, QualitySystem.getShipSmallBack(n.quality)),
                    SUI.setTextureAsync(this.dragItem.pic, ShipManager.getInstance().getShipPicByType(i.shipid)),
                    SUI.setTextureAsync(this.dragItem.iconType, ShipManager.getInstance().getShipTypeIcon(n.shipType));
                var s = t.currentTarget.parent.localToGlobal(t.currentTarget.x, t.currentTarget.y),
                    r = this.globalToLocal(s.x, s.y);
                this.dragItem.x = r.x,
                    this.dragItem.y = r.y,
                    this.dragItem.pos = e - 1,
                    this.addChild(this.dragItem)
            }
        },
        i.dragMove = function(t) {
            if (this.dragItem && this.dragItem.parent) {
                var e = this.globalToLocal(t.stageX, t.stageY);
                this.dragItem.x = e.x - .5 * this.dragItem.width,
                    this.dragItem.y = e.y - .5 * this.dragItem.height
            }
        },
        i.endDrag = function(t) {
            if (this.dragItem && this.dragItem.parent) {
                t.stopImmediatePropagation(),
                    this.removeChild(this.dragItem);
                var e = t.currentTarget.index,
                    a = this.shipids[e - 1],
                    i = this.dragItem.pos,
                    n = this.shipids[i];
                this.shipids[i] = a,
                    this.shipids[e - 1] = n,
                    this.updateArrange()
            }
        },
        i.cancelDrag = function(t) {
            this.dragItem && this.dragItem.parent && (this.removeChild(this.dragItem), this.updateArrange())
        },
        i.updateArrange = function() {
            for (var t = 1; 8 >= t; t++) {
                var e = this.shipids[t - 1],
                    a = ShipManager.getInstance().getShipById(e);
                if (a) {
                    var i = ConfigData.getDataByKey("shipData", a.shipid);
                    this["pos" + t].bg.visible = !0,
                        this["pos" + t].pic.visible = !0,
                        this["pos" + t].iconType.visible = !0,
                        this["pos" + t].caption.visible = ShipManager.getInstance().captionId == a.id,
                        this["pos" + t].txtName.text = ShipManager.getInstance().getShipNameByType(a.shipid),
                        this["pos" + t].txtName.textColor = QualitySystem.getColorByQuality(i.quality),
                        SUI.setTextureAsync(this["pos" + t].bg, QualitySystem.getShipSmallBack(i.quality)),
                        SUI.setTextureAsync(this["pos" + t].pic, ShipManager.getInstance().getShipPicByType(a.shipid)),
                        SUI.setTextureAsync(this["pos" + t].iconType, ShipManager.getInstance().getShipTypeIcon(i.shipType)),
                        this.shipids[t - 1] = a.id
                } else this["pos" + t].bg.visible = !1,
                    this["pos" + t].pic.visible = !1,
                    this["pos" + t].txtName.text = "",
                    this["pos" + t].iconType.visible = !1,
                    this["pos" + t].caption.visible = !1,
                    this.shipids[t - 1] = "0"
            }
        },
        i.OnClickBtnClose = function(t) {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.FORMATION_CHANGE, this.updateFormation, this),
                RequestManager.GetInstance().RequestSetTactic(this.shipids),
                this.close()
        },
        e
}(WindowBase);
egret.registerClass(WindowFormatTeam, "WindowFormatTeam");
var WindowFriend = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/HaoYouSkin.exml"
            /*tpa=resource/eui_skins/HaoYouSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.initBtn(),
                this.setRedPoint(),
                this.initOppanel(),
                this.scroller1.viewport = this.list1,
                this.scroller2.viewport = this.list2,
                this.scroller3.viewport = this.list3,
                this.scroller4.viewport = this.list4,
                this.btnMyFriends.dispatchEvent(new egret.Event(egret.TouchEvent.TOUCH_TAP)),
                BlackListManager.GetInstance().addToObserverList(this)
        },
        i.initBtn = function() {
            this.arrBtnBar = [this.btnMyFriends, this.btnAddFriends, this.btnFriendsVerify, this.btnReceiveItem],
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeBtnClick, this),
                this.btnMyFriends.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnAddFriends.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnFriendsVerify.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnReceiveItem.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnResearch.addEventListener(egret.TouchEvent.TOUCH_TAP, this.searchPlayer, this),
                this.btnRefresh.addEventListener(egret.TouchEvent.TOUCH_TAP, this.getMoreFriend, this),
                this.btnSendAll.addEventListener(egret.TouchEvent.TOUCH_TAP, this.sendAllEle, this),
                this.btnReceiveAndSendAll.addEventListener(egret.TouchEvent.TOUCH_TAP, this.getAllEle, this)
        },
        i.setRedPoint = function() {
            this.imgDotMyFriends.visible = FriendManager.getInstance().isFriendRed,
                this.imgDotFriendsVerify.visible = FriendManager.getInstance().isInviteRed,
                this.imgDotReceiveItem.visible = FriendManager.getInstance().isGetEleRed
        },
        i.initOppanel = function() {
            this.opPanel = new FriendHeadOperation,
                this.opPanel.parentPanel = this
        },
        i.btnBarClickHandler = function(t) {
            if (t.target != this.arrBtnBar[this.curPage]) {
                for (var e in this.arrBtnBar) t.target == this.arrBtnBar[e] ? (this.arrBtnBar[e].currentState = "down", this.curPage = parseInt(e)) : this.arrBtnBar[e].currentState = "up";
                this.updatePaper()
            }
        },
        i.updatePaper = function(t) {
            void 0 === t && (t = !1);
            var e, a = [];
            switch (this.curPage) {
                case 0:
                    this.GrpMyFriends.visible = !0,
                        this.GrpAddFriends.visible = !1,
                        this.GrpFriendsVerify.visible = !1,
                        this.GrpReceiveItme.visible = !1,
                        this.txtFriendsNum.visible = !0,
                        this.curList = this.list1,
                        e = FriendManager.getInstance().getFriendList(),
                        this.txtFriendsNum.text = e.length + "/50";
                    break;
                case 1:
                    this.GrpMyFriends.visible = !1,
                        this.GrpAddFriends.visible = !0,
                        this.GrpFriendsVerify.visible = !1,
                        this.GrpReceiveItme.visible = !1,
                        this.txtFriendsNum.visible = !0,
                        this.curList = this.list2,
                        e = t ? [FriendManager.getInstance().getSearchData()] : FriendManager.getInstance().getRecommandList(),
                        this.txtFriendsNum.text = FriendManager.getInstance().getFriendList().length + "/50";
                    break;
                case 2:
                    this.GrpMyFriends.visible = !1,
                        this.GrpAddFriends.visible = !1,
                        this.GrpFriendsVerify.visible = !0,
                        this.GrpReceiveItme.visible = !1,
                        this.txtFriendsNum.visible = !1,
                        this.curList = this.list3,
                        e = FriendManager.getInstance().getInvitedlist();
                    break;
                case 3:
                    this.GrpMyFriends.visible = !1,
                        this.GrpAddFriends.visible = !1,
                        this.GrpFriendsVerify.visible = !1,
                        this.GrpReceiveItme.visible = !0,
                        this.txtFriendsNum.visible = !1,
                        this.curList = this.list4,
                        e = FriendManager.getInstance().getReceiveElecList(),
                        this.txtReceiveDesc.text = "今日剩余领取次数：" + (20 - FriendManager.getInstance().eleGetNum)
            }
            for (var i in e) {
                var n = {};
                n.type = this.curPage,
                    n.uid = e[i].uid,
                    n.name = e[i].name,
                    n.head = e[i].head,
                    n.level = e[i].level,
                    n.power = e[i].power,
                    n.militaryrank = e[i].militaryrank,
                    n.isNoSee = BlackListManager.GetInstance().isInBlackList(n.uid),
                    e[i].isSend && (n.isSend = e[i].isSend),
                    e[i].invitedtime && (n.invitedtime = e[i].invitedtime),
                    e[i].receivetime && (n.receivetime = e[i].receivetime),
                    a.push(n)
            }
            this.curList.dataProvider = new eui.ArrayCollection(a),
                this.curList.itemRenderer = FriendRenderer
        },
        i.blackListUpdate = function() {
            this.updatePaper()
        },
        i.closeBtnClick = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.Friend)
        },
        i.searchPlayer = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSearchPlayer);
            e.name = this.editLabel.text,
                Transport.instance.send(e)
        },
        i.getMoreFriend = function(t) {
            FriendManager.getInstance().sendGetRecommand()
        },
        i.sendAllEle = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSendElectric);
            e.type = 1,
                Transport.instance.send(e)
        },
        i.getAllEle = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceDrawAllElectric);
            Transport.instance.send(e)
        },
        i.showHeadOpPanel = function(t) {
            t.parent = this,
                t.y = t.y - 80,
                this.opPanel.show(t),
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.exceptOpPanelClick, this)
        },
        i.exceptOpPanelClick = function(t) {
            t.target != this.opPanel.btn0 && t.target != this.opPanel.btn1 && t.target != this.opPanel.btn2 && t.target != this.opPanel.btn3 && (this.opPanel.hide(), this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.exceptOpPanelClick, this))
        },
        e
}(WindowBase);
egret.registerClass(WindowFriend, "WindowFriend");
var FriendRenderer = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/HaoYou_1_Skin.exml"
            /*tpa=resource/eui_skins/item/HaoYou_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.ReqInvitFriend = function(t, e) {},
        i.createChildren = function() {
            t.prototype.createChildren.call(this),
                this.grpHead.addEventListener(egret.TouchEvent.TOUCH_TAP, this.headClickHandler, this),
                this.btnInvite.addEventListener(egret.TouchEvent.TOUCH_TAP, this.inviteClick, this),
                this.btnConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.confirmAndRefuse, this),
                this.btnRefuse.addEventListener(egret.TouchEvent.TOUCH_TAP, this.confirmAndRefuse, this),
                this.btnSend.addEventListener(egret.TouchEvent.TOUCH_TAP, this.sendEle, this),
                this.btnSend0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.getEle, this)
        },
        i.dataChanged = function() {
            switch (this.data.type) {
                case 0:
                    this.btnSend.visible = !0,
                        this.data.isSend && 1 == this.data.isSend ? this.btnSend.enabled = !1 : this.btnSend.enabled = !0,
                        this.btnInvite.visible = !1,
                        this.btnConfirm.visible = !1,
                        this.btnRefuse.visible = !1,
                        this.btnSend0.visible = !1,
                        this.imgReceiveItem.visible = !1,
                        this.txtReceiveItemNum.visible = !1;
                    break;
                case 1:
                    this.btnSend.visible = !1,
                        this.btnInvite.visible = !0,
                        this.btnConfirm.visible = !1,
                        this.btnRefuse.visible = !1,
                        this.btnSend0.visible = !1,
                        this.imgReceiveItem.visible = !1,
                        this.txtReceiveItemNum.visible = !1;
                    break;
                case 2:
                    this.btnSend.visible = !1,
                        this.btnInvite.visible = !1,
                        this.btnConfirm.visible = !0,
                        this.btnRefuse.visible = !0,
                        this.btnSend0.visible = !1,
                        this.imgReceiveItem.visible = !1,
                        this.txtReceiveItemNum.visible = !1;
                    break;
                case 3:
                    this.btnSend.visible = !1,
                        this.btnInvite.visible = !1,
                        this.btnConfirm.visible = !1,
                        this.btnRefuse.visible = !1,
                        this.btnSend0.visible = !0,
                        this.imgReceiveItem.visible = !0,
                        this.txtReceiveItemNum.visible = !0
            }
            this.imgNoSee.visible = this.data.isNoSee,
                this.txtPlayerName.text = this.data.name,
                this.txtBattlePoint.text = this.data.power,
                Utils.getImgByUrl(Path.GetHeadPicUrl(this.data.head, 1), this.imgHead),
                this.txtPlayerLevel.text = "Lv." + this.data.level,
                this.data.militaryrank ? Utils.getImgByUrl(MilitaryManager.GetInstance().getPicByRankLvl(this.data.militaryrank), this.imgRank) : (this.txtPlayerName.x = this.imgRank.x, this.imgRank.source = "")
        },
        i.headClickHandler = function(t) {
            if (0 == this.data.type) {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.Friend),
                    a = this.localToGlobal(this.imgHead.x, this.imgHead.y),
                    i = {};
                i = this.data,
                    i.x = a.x + .5 * this.imgHead.width,
                    i.y = a.y + .5 * this.imgHead.height,
                    e.showHeadOpPanel(i)
            }
        },
        i.inviteClick = function(t) {
            var e = this.data.uid,
                a = this.data.name;
            FriendManager.getInstance().ReqInivitFriend(e, a)
        },
        i.confirmAndRefuse = function(t) {
            if (t.target == this.btnConfirm) {
                var e = Transport.getPkg(ProtocolMgr.ID_DceAddFriend);
                e.uid = this.data.uid,
                    Transport.instance.send(e)
            } else {
                var e = Transport.getPkg(ProtocolMgr.ID_DceRefuseAddFriend);
                e.uid = this.data.uid,
                    e.name = this.data.name,
                    Transport.instance.send(e)
            }
        },
        i.sendEle = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSendElectric);
            e.uid = this.data.uid,
                e.name = this.data.name,
                e.type = 0,
                Transport.instance.send(e)
        },
        i.getEle = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceDrawElectric);
            e.uid = this.data.uid,
                Transport.instance.send(e)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(FriendRenderer, "FriendRenderer");
var FriendHeadOperation = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/friendAlertSkin.exml"
            /*tpa=resource/eui_skins/item/friendAlertSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            t.prototype.createChildren.call(this),
                this.btn0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.btn3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this)
        },
        i.show = function(t) {
            t && (this._data = t, this._data.isNoSee ? this.btn1.label = "解除屏蔽" : this.btn1.label = "屏蔽", this.x = t.x, this.y = t.y, t.parent.addChild(this))
        },
        i.hide = function() {
            this.parent && this.parent.contains(this) && this.parent.removeChild(this)
        },
        i.btnClickHandler = function(t) {
            var e = this;
            this.hide();
            var a = "",
                i = "";
            switch (t.target) {
                case this.btn0:
                    a = "删除好友",
                        i = "确认解除与[" + this._data.name + "]的好友关系?",
                        GameAlert.getInstance().show(a, i,
                            function() {
                                var t = Transport.getPkg(ProtocolMgr.ID_DceDeleteFriend);
                                t.uid = e._data.uid,
                                    t.name = e._data.name,
                                    Transport.instance.send(t),
                                    GameAlert.getInstance().hide()
                            });
                    break;
                case this.btn1:
                    this._data.isNoSee ? (a = "解除屏蔽", i = "确认将[" + this._data.name + "]从屏蔽列表删除?解除屏蔽后将能够收到[" + this._data.name + "]的聊天、私聊以及邮件信息", GameAlert.getInstance().show(a, i,
                        function() {
                            var t = Transport.getPkg(ProtocolMgr.ID_DceBlackListOpt);
                            t.uid = e._data.uid,
                                t.type = 1,
                                Transport.instance.send(t),
                                GameAlert.getInstance().hide()
                        })) : (a = "屏蔽玩家", i = "确认将[" + this._data.name + "]加入屏蔽列表?屏蔽后将无法收到[" + this._data.name + "]的聊天、私聊以及邮件信息", GameAlert.getInstance().show(a, i,
                        function() {
                            var t = Transport.getPkg(ProtocolMgr.ID_DceBlackListOpt);
                            t.uid = e._data.uid,
                                t.type = 0,
                                Transport.instance.send(t),
                                GameAlert.getInstance().hide()
                        }));
                    break;
                case this.btn2:
                    if (BlackListManager.GetInstance().isInBlackList(this._data.uid)) Toast.launch("对方在您的黑名单中");
                    else {
                        var n = {};
                        n.uid = this._data.uid,
                            n.name = this._data.name,
                            WindowManager.getInstance().show(WindowManager.windowType.Speak, n)
                    }
                    break;
                case this.btn3:
                    var s = Transport.getPkg(ProtocolMgr.ID_DceScoutSoldier);
                    s.uid = this._data.uid,
                        Transport.instance.send(s)
            }
        },
        e
}(eui.Component);
egret.registerClass(FriendHeadOperation, "FriendHeadOperation");
var WindowGaoJiTanSuo = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ChouJiang_TSXZ_GaoJiSkin.exml"
            /*tpa=resource/eui_skins/ChouJiang_TSXZ_GaoJiSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = 0,
                e = ItemsManager.getInstance().getItemById(1173);
            e && (t = e.count),
                this.txtItemDesc.text = Locales.get("DecSeniorPanel_txt_title") + t,
                this.btnSearch1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.btnSearch2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.btnSearch3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this);
            var a = UserData.getInstance().getRes(TypeDefine.RES.Diamond);
            50 > a && 1 > t && (this.btnSearch1.enabled = !1, this.txtCostItem1.textColor = 16711680, this.txtCostDiamond1.textColor = 16711680),
                500 > a && 10 > t && (this.btnSearch2.enabled = !1, this.txtCostItem2.textColor = 16711680, this.txtCostDiamond2.textColor = 16711680),
                2250 > a && 45 > t && (this.btnSearch3.enabled = !1, this.txtCostItem3.textColor = 16711680, this.txtCostDiamond3.textColor = 16711680),
                UserData.getInstance()._vip < 12 ? this.btnSearch3.enabled = !1 : this.v12Txt.text = ""
        },
        i.clickHandler = function(t) {
            var e = t.currentTarget,
                a = 0;
            e == this.btnSearch1 ? a = 3 : e == this.btnSearch2 ? (a = 4, WindowGaojiTanSuoReward.preGold = UserData.getInstance().getRes(TypeDefine.RES.Gold)) : e == this.btnSearch3 && (a = 6, WindowGaojiTanSuoReward.preGold = UserData.getInstance().getRes(TypeDefine.RES.Gold)),
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceSoul, {
                    type: a
                }, !1),
                this.closeHandler()
        },
        i.closeHandler = function(t) {
            void 0 === t && (t = null),
                this.close()
        },
        e
}(WindowBase);
egret.registerClass(WindowGaoJiTanSuo, "WindowGaoJiTanSuo");
var WindowGaojiTanSuoReward = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ChouJiang_TSXZ_HuoDeSkin.exml"
            /*tpa=resource/eui_skins/ChouJiang_TSXZ_HuoDeSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this.searchType = t.type;
            var a = t.pkg,
                i = UserData.getInstance().getRes(TypeDefine.RES.Gold);
            if (this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this), this.btnSearchAgain.addEventListener(egret.TouchEvent.TOUCH_TAP, this.againHandler, this), this.SearchMore.visible = 6 == this.searchType || 5 == this.searchType, this.SearchTen.visible = 2 == this.searchType || 4 == this.searchType, this.costGroup.visible = !(2 == this.searchType), 2 == this.searchType || 4 == this.searchType) {
                this.SearchMore.visible = !1,
                    this.SearchTen.visible = !0;
                for (var n = 1; 11 > n; n++) {
                    var s = this["Reward" + n];
                    if (a.soullist[n - 1]) {
                        var r = a.soullist[n - 1],
                            o = ConfigData.getDataByKey("medalData", r);
                        Utils.getImgByUrl(QualitySystem.getItemSmallBack(o.quality), s.imgBg),
                            Utils.getImgByUrl(Path.soulIconURL + "Medal_" + o.id + "_i.png", s.imgIcon),
                            s.txtName.text = MedaldataParser.GetInstance().getItemById(r).name_l,
                            s.txtName.textColor = QualitySystem.getColorByQuality(o.quality)
                    } else s.visible = !1
                }
                for (n = 1; 11 > n; n++) {
                    var l = this["ExtraReward" + n];
                    l.visible = !1
                }
                if (a.soullist2) {
                    var h = a.soullist2.length;
                    for (this.txtSpecialDesc.text = Locales.get("DecResultPanel_txt_item_txt_0") + h + Locales.get("DecResultPanel_txt_item_txt_1") + h + Locales.get("DecResultPanel_txt_item_txt_2"), n = 0; h > n; n++) {
                        var c = this["ExtraReward" + (n + 1)];
                        if (a.soullist2[n]) {
                            var r = a.soullist2[n],
                                o = ConfigData.getDataByKey("medalData", r);
                            Utils.getImgByUrl(QualitySystem.getItemSmallBack(o.quality), c.imgBg),
                                Utils.getImgByUrl(Path.soulIconURL + "Medal_" + o.id + "_i.png", c.imgIcon),
                                c.txtName.text = MedaldataParser.GetInstance().getItemById(r).name_l,
                                c.txtName.textColor = QualitySystem.getColorByQuality(o.quality),
                                c.visible = !0
                        }
                    }
                    0 == h && (this.addGroup.visible = !1)
                }
                this.btnSearchAgain.label = Locales.get("DecResultPanel_txt_btn_again"),
                    this.txtCostCoin.text = Utils.rnum(e.preGold - i)
            } else if (6 == this.searchType || 5 == this.searchType) {
                this.txtTotleCost0.text = Utils.rnum(e.preGold - i);
                for (var h = a.soullist.length,
                        n = 0; h > n; n++) {
                    var d = new rewardItem(a.soullist[n]);
                    this.RewardGroup.addChild(d),
                        d.x = n % 2 * 250 + 20,
                        d.y = 50 * Math.floor(n / 2) + 20
                }
                for (this.RewardGroup.height = 50 * Math.floor(n / 2) + 50, this.CountGroup.y = this.RewardGroup.height + 20, this.vessel.height = this.RewardGroup.height + this.CountGroup.y + this.CountGroup.height, n = 0; n < a.soullist2.length; n++) this["txtCountQuality" + (n + 1)].text = Locales.get("DecResultPanel_txt_fifty_result_" + (n + 1), a.soullist2[n]);
                this.btnSearchAgain.label = Locales.get("DecResultPanel_txt_btn_again_fifty"),
                    a.point ? this.txtRewardExp.text = Locales.get("Deco_fifty_result_exp_desc", a.point) : this.txtRewardExp.text = ""
            }
            e.preGold = i
        },
        i.closeHandler = function(t) {
            void 0 === t && (t = null),
                this.close()
        },
        i.againHandler = function(t) {
            void 0 === t && (t = null),
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceSoul, {
                    type: this.searchType
                }, !1),
                this.close()
        },
        e
}(WindowBase);
egret.registerClass(WindowGaojiTanSuoReward, "WindowGaojiTanSuoReward");
var rewardItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/components/itemMedalSkin.exml"
            /*tpa=resource/eui_skins/components/itemMedalSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this.iData,
                e = ConfigData.getDataByKey("medalData", t);
            Utils.getImgByUrl(QualitySystem.getItemSmallBack(e.quality), this.imgBg),
                Utils.getImgByUrl(Path.soulIconURL + "Medal_" + e.id + "_i.png", this.imgIcon),
                this.txtName.text = MedaldataParser.GetInstance().getItemById(t).name_l,
                this.txtName.textColor = QualitySystem.getColorByQuality(e.quality)
        },
        e
}(eui.Component);
egret.registerClass(rewardItem, "rewardItem");
var WindowGuild = function(t) {
    function e() {
        t.call(this, !0),
            this.isChat = !1,
            this.skinName = "resource/eui_skins/JunTuanSkin.exml"
            /*tpa=resource/eui_skins/JunTuanSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildTechnology.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildMember.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildManage.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe4.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe5.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe6.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn4.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnHelp.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.clear = function() {
            MainUI.instance.changeTopMode(topUIMode.normal),
                MainUI.instance.changeTopMode(topUIMode.normal),
                GuildManager.getInstance().isOpenWin = !1,
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildStore.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildTechnology.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildMember.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnGuildManage.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe4.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe5.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReadMe6.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn4.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnHelp.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    MainUI.instance.setBottomVisible(!0),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        WindowManager.getInstance().hide(WindowManager.windowType.Guild);
                    break;
                case this.btnGuildStore:
                    this.BOTTOM.visible = !1,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_GUILDSTORE,
                        this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage);
                    break;
                case this.btnGuildTechnology:
                    this.BOTTOM.visible = !1,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_GUILDTECHNOLOGY,
                        GuildManager.getInstance().sendGuildScienceList();
                    break;
                case this.btnGuildMember:
                    this.BOTTOM.visible = !1,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_GUILDMEMBER,
                        this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage);
                    break;
                case this.btnGuildManage:
                    this.BOTTOM.visible = !1,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_GUILDMANAGE,
                        this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage),
                        this.txtGuildID.text = "军团ID：" + GuildManager.getInstance().id,
                        this.txtGuildExp.text = "军团升级：" + GuildParser.GetInstance().getItemById(GuildManager.getInstance().level).exp;
                    break;
                case this.btnReadMe1:
                    GameAlert.getInstance().show("升级军团", "升级军团消耗" + GuildParser.GetInstance().getItemById(GuildManager.getInstance().level).exp + "军团建设,您是否要升级军团?",
                        function() {
                            GuildManager.getInstance().sendGuildUpgrade()
                        });
                    break;
                case this.btnReadMe2:
                    GuildAlert.getInstance().showChangeLabel2();
                    break;
                case this.btnReadMe3:
                    GuildCreateAlert.getInstance().showSelectBadgePage();
                    break;
                case this.btnReadMe4:
                    0 == GuildManager.getInstance().pos ? GuildAlert.getInstance().showGuildApprovalSet() : Toast.launch("只有军团长可以设置");
                    break;
                case this.btnReadMe5:
                    var e = "<font>1、角色等级达到18级可加入军团。\n2、玩家加入军团后可以查看军团内成员的信息,与军团内成员聊天。\n3、加入军团后,捐献军费可以增加军团建设和个人贡献,军团建设用于升级军团等级,个人贡献用于购买军团商城中的道具;个人贡献不会因为军团的改变而清空。\n4、军团长简历军团后可以设置两名副军团长，军团成员的数量上限会随着军团等级的提升而提升。\n5、军团长和副军团长拥有审核成员、修改宣言、修改公告、升级军团等特权。\n6、军团长拥有修改军团徽章、解散军团等特权。\n7、军团长7天未登录游戏,军团长一职将会自动转让给其他成员。</font>";
                    QiJvTouAlert.getInstance().showTxtDescPage("军团说明", e);
                    break;
                case this.btnHelp:
                    var e = "<font>1、角色等级达到18级可加入军团。\n2、玩家加入军团后可以查看军团内成员的信息,与军团内成员聊天。\n3、加入军团后,捐献军费可以增加军团建设和个人贡献,军团建设用于升级军团等级,个人贡献用于购买军团商城中的道具;个人贡献不会因为军团的改变而清空。\n4、军团长简历军团后可以设置两名副军团长，军团成员的数量上限会随着军团等级的提升而提升。\n5、军团长和副军团长拥有审核成员、修改宣言、修改公告、升级军团等特权。\n6、军团长拥有修改军团徽章、解散军团等特权。\n7、军团长7天未登录游戏,军团长一职将会自动转让给其他成员。</font>";
                    QiJvTouAlert.getInstance().showTxtDescPage("军团说明", e);
                    break;
                case this.btnReadMe6:
                    0 == GuildManager.getInstance().pos ? GameAlert.getInstance().show("解散军团", "确定要解散军团吗?",
                        function() {
                            GuildManager.getInstance().sendGuildDismiss(),
                                GameAlert.getInstance().hide()
                        }) : GameAlert.getInstance().show("退出军团", "您是否要退出军团?",
                        function() {
                            GuildManager.getInstance().sendGuildQuit(),
                                GameAlert.getInstance().hide()
                        });
                    break;
                case this.btnReturn1:
                    this.BOTTOM.visible = !0,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_BASE,
                        this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage);
                    break;
                case this.btnReturn2:
                    this.BOTTOM.visible = !0,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_BASE,
                        this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage);
                    break;
                case this.btnReturn3:
                    this.BOTTOM.visible = !0,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_BASE,
                        this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage);
                    break;
                case this.btnReturn4:
                    this.BOTTOM.visible = !0,
                        GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_BASE,
                        this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage)
            }
        },
        i.goBackBasePage = function() {
            this.BOTTOM.visible = !0,
                GuildManager.getInstance().windowGuildCurrPage = guildManagePage.PAGE_BASE,
                GuildManager.getInstance().sendGuildData()
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("item"),
                e.push("guild"),
                e.push("shopData"),
                e.push("guildscience"),
                e.push("guildscienceData"),
                e.push("guildContribute"),
                ConfigData.preLoadDats(e, [ItemParser, GuildParser, ShopdataParser, GuildscienceParser, GuildsciencedataParser, GuildcontributeParser],
                    function() {
                        t()
                    })
        },
        i.showGuildManagePageByType = function(t) {
            switch (void 0 === t && (t = guildManagePage.PAGE_BASE), this.BASE.visible = !1, this.GUILDSTORE.visible = !1, this.GUILDTECHNOLOGY.visible = !1, this.GUILDMEMBER.visible = !1, this.GUILDMANAGE.visible = !1, t) {
                case guildManagePage.PAGE_BASE:
                    this.BASE.visible = !0,
                        this.setGuildBaseInfo();
                    break;
                case guildManagePage.PAGE_GUILDSTORE:
                    this.GUILDSTORE.visible = !0,
                        this.setGuildStoreInfo(),
                        ShopManager.getInstance().sendShopData(e.GUILD_INDEX);
                    break;
                case guildManagePage.PAGE_GUILDTECHNOLOGY:
                    this.GUILDTECHNOLOGY.visible = !0,
                        this.setGuildTechnologyInfo();
                    break;
                case guildManagePage.PAGE_GUILDMEMBER:
                    this.GUILDMEMBER.visible = !0,
                        this.setGuildMemberInfo();
                    break;
                case guildManagePage.PAGE_GUILDMANAGE:
                    this.GUILDMANAGE.visible = !0,
                        this.setGuildManageInfo()
            }
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode["null"]),
                MainUI.instance.setBottomVisible(!1),
                SUI.addClickEffect(this.btnGuildStore),
                SUI.addClickEffect(this.btnGuildTechnology),
                SUI.addClickEffect(this.btnGuildMember),
                SUI.addClickEffect(this.btnGuildManage),
                SUI.addClickEffect(this.btnReadMe1),
                SUI.addClickEffect(this.btnReadMe2),
                SUI.addClickEffect(this.btnReadMe3),
                SUI.addClickEffect(this.btnReadMe4),
                SUI.addClickEffect(this.btnReadMe5),
                SUI.addClickEffect(this.btnReadMe6),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong.png"),
                SUI.setTextureAsync(this.imgGuildIconBg, Path.uiUrl + "Bg_GuildIcon.jpg"),
                this.scrollerNotify.viewport = this.listNotify,
                this.scrollerActivity.viewport = this.listActivity,
                this.scrollerStore.viewport = this.listStore,
                this.scrollerTechnology.viewport = this.listTechnology,
                this.scrollerMember.viewport = this.listMember,
                0 == GuildManager.getInstance().pos ? this.txtDiss.text = "解散军团" : this.txtDiss.text = "退出军团",
                this.showGuildManagePageByType(GuildManager.getInstance().windowGuildCurrPage)
        },
        i.setGuildBaseInfo = function() {
            this.txtGuildName.text = GuildManager.getInstance().name,
                this.txtGuildLevel.text = GuildManager.getInstance().level + "级",
                this.txtGuildMember.text = GuildManager.getInstance().membercount + "/" + GuildParser.GetInstance().getItemById(GuildManager.getInstance().level).count,
                this.txtGuildLeader.text = "军团长:",
                SUI.setTextureAsync(this.imgBadge, Path.guildUrl + "badge_B_" + GuildManager.getInstance().medal + ".png"),
                this.txtGuildDeclaration.text = "宣言:" + GuildManager.getInstance().declaration,
                this.txtGuildRes1.text = "军团建设:" + GuildManager.getInstance().activepoint,
                this.setNotifyData(),
                this.setActivityData(ChatManager.getInstance().hasNewGroupMsg),
                GuildManager.getInstance().sendGuildMemberList(),
                GuildManager.getInstance().sendGuildApplyList()
        },
        i.setGuildStoreInfo = function() {
            this.txtSelf.text = "贡献:" + GuildManager.getInstance().guildpoint
        },
        i.setGuildManageInfo = function() {
            SUI.setTextureAsync(this.guildBadge, Path.guildUrl + "badge_B_" + GuildManager.getInstance().medal + ".png")
        },
        i.setGuildTechnologyInfo = function() {
            this.txtSelf0.text = "军团建设:" + GuildManager.getInstance().activepoint,
                this.setTechnologyData()
        },
        i.setGuildMemberInfo = function() {
            this.txtMember.text = GuildManager.getInstance().membercount + "/" + GuildParser.GetInstance().getItemById(GuildManager.getInstance().level).count,
                this.setMemberData()
        },
        i.setNotifyData = function() {
            var t = this.getGuildNotifyPageList();
            this.listNotify.dataProvider = new eui.ArrayCollection(t),
                this.listNotify.itemRenderer = guildNotifyFactoryListItem
        },
        i.getGuildNotifyPageList = function() {
            var t = [],
                e = {
                    type: "notify",
                    txt: GuildManager.getInstance().notify
                };
            if (t.push(e), GuildManager.getInstance().loglist)
                for (var a = 0; a < GuildManager.getInstance().loglist.length; a++) {
                    var i = GuildManager.getInstance().loglist[a];
                    switch (i.type) {
                        case 0:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + "</font><font color='#ffff00'> " + i.name + " </font><font>提供了</font><font color='#00ff00'>" + i.param[0] + "</font><font>军团建设</font>"
                            });
                            break;
                        case 1:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " " + this.getStrByPos(i.param[0]) + "</font><font color='#ffff00'> " + i.name + " </font><font>批准了</font><font color='#ffff00'> " + i.param[1] + " </font><font>加入军团</font>"
                            });
                            break;
                        case 2:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " " + this.getStrByPos(i.param[0]) + "</font><font color='#ffff00'> " + i.name + " </font><font>拒绝了</font><font color='#ffff00'> " + i.param[1] + " </font><font>加入军团</font>"
                            });
                            break;
                        case 3:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + "</font><font color='#ffff00'> " + i.name + " </font><font>离开了军团</font>"
                            });
                            break;
                        case 4:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " " + this.getStrByPos(i.param[0]) + "</font><font color='#ffff00'> " + i.name + " </font><font>将</font><font color='#ffff00'> " + i.param[1] + " </font><font>移除军团</font>"
                            });
                            break;
                        case 5:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " 军团长</font><font color='#ffff00'> " + i.name + " </font><font>任命</font><font color='#ffff00'> " + i.param[0] + " </font><font>为副军团长</font>"
                            });
                            break;
                        case 6:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " 军团长</font><font color='#ffff00'> " + i.name + " </font><font>解除</font><font color='#ffff00'> " + i.param[0] + " </font><font>副军团长职务</font>"
                            });
                            break;
                        case 7:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + "</font><font color='#ffff00'> " + i.name + " </font><font>将军团长转让给</font><font color='#ffff00'> " + i.param[0] + " </font>"
                            });
                            break;
                        case 8:
                            var n = i.param[1];
                            null == n && (n = i.param[0]),
                                t.push({
                                    type: "log",
                                    txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " " + this.getStrByPos(i.param[0]) + "</font><font color='#ffff00'> " + i.name + " </font><font>升级了军团，军团升级至</font><font color='#00ff00'> " + n + " </font><font>级</font>"
                                });
                            break;
                        case 9:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + "</font><font color='#ffff00'> " + i.name + " </font><font>加入军团</font>"
                            });
                            break;
                        case 10:
                            t.push({
                                type: "log",
                                txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " 军团长自动转让给</font><font color='#ffff00'> " + i.name + " </font>"
                            });
                            break;
                        case 11:
                            var s = Number(i.param[0]),
                                r = i.param[2],
                                o = void 0;
                            o = 1 == s ? "军团长" : "副军团长",
                                t.push({
                                    type: "log",
                                    txt: "<font>" + Utils.getDateByNum(1e3 * i.time, timeType.MDHM) + " " + o + "</font><font color='#ffff00'> " + i.name + " </font><font>将军团更名为</font><font color='#00ff00'> " + r + " </font>"
                                })
                    }
                }
            return t
        },
        i.setActivityData = function(t) {
            void 0 === t && (t = !1),
                this.isChat = t;
            var e = this.getGuildActivityPageList(this.isChat);
            this.listActivity.dataProvider = new eui.ArrayCollection(e),
                this.listActivity.itemRenderer = guildAcitvityFactoryListItem
        },
        i.getGuildActivityPageList = function(t) {
            void 0 === t && (t = !1);
            var e = !1;
            e = GuildManager.getInstance().donatetimes >= 1 ? !1 : !0;
            var a = !1;
            a = null != GuildManager.getInstance().applylist && GuildManager.getInstance().applylist.length > 0 ? !0 : !1;
            var i = [{
                    id: 1,
                    name: "捐献军费",
                    img: 1,
                    isRed: e
                },
                {
                    id: 2,
                    name: "军团审核",
                    img: 2,
                    isRed: a
                },
                {
                    id: 3,
                    name: "军团聊天",
                    img: 3,
                    isRed: t
                },
                {
                    id: 4,
                    name: "军团排名",
                    img: 4,
                    isRed: !1
                },
                {
                    id: 5,
                    name: "修改公告",
                    img: 5,
                    isRed: !1
                },
                {
                    id: 6,
                    name: "修改宣言",
                    img: 5,
                    isRed: !1
                }
            ];
            return i
        },
        i.setStoreData = function(t) {
            var e = this.getGuildStorePageList(t);
            this.listStore.dataProvider = new eui.ArrayCollection(e),
                this.listStore.itemRenderer = guildStoreFactoryListItem
        },
        i.getGuildStorePageList = function(t) {
            for (var e = [], a = ShopdataParser.GetInstance().getDataArr(), i = 0; i < a.length; i++) {
                var n = {};
                if (3 == a[i].type) {
                    n.id = a[i].id,
                        n.enable = a[i].enable,
                        n.itemType = a[i].itemType,
                        n.itemId = a[i].itemId,
                        n.name = a[i].name,
                        n.type = a[i].type,
                        n.saleValue = a[i].saleValue,
                        n.costType = a[i].costType,
                        n.order = a[i].order,
                        n.reqLevel = a[i].reqLevel,
                        n.reqVIPLevel = a[i].reqVIPLevel,
                        n.countLimit = a[i].countLimit,
                        n.countLimitweek = a[i].countLimitweek,
                        n.discount = a[i].discount;
                    var s = ItemParser.GetInstance().getItemById(n.itemId);
                    n.icon = Path.itemIconURL + s.icon,
                        n.quality = s.quality,
                        n.desc = s.desc_l;
                    var r = ItemsManager.getInstance().getItemById(Number(n.itemId));
                    if (r ? n.num = r.count : n.num = 0, n.hasBuyCount = 0, t.shopdata.todaybuylist)
                        for (var o = 0; o < t.shopdata.todaybuylist.length; o++)
                            if (t.shopdata.todaybuylist[o].id == Number(n.id)) {
                                n.hasBuyCount = t.shopdata.todaybuylist[o].count;
                                break
                            }
                    1 == n.enable && e.push(n)
                }
            }
            return e
        },
        i.setTechnologyData = function() {
            var t = this.getGuildTechnologyPageList();
            this.listTechnology.dataProvider = new eui.ArrayCollection(t),
                this.listTechnology.itemRenderer = guildTechnologyFactoryListItem
        },
        i.getGuildTechnologyPageList = function() {
            for (var t = [], e = GuildscienceParser.GetInstance().getDataArr(), a = GuildsciencedataParser.GetInstance().getDataArr(), i = 0; i < e.length; i++) {
                var n = {};
                n.id = e[i].id,
                    n.name = e[i].name_l,
                    n.desc1 = e[i].desc1_l,
                    n.desc2 = e[i].desc2_l,
                    n.icon = e[i].icon,
                    n.ratio = e[i].ratio,
                    n.level = 0;
                for (var s = 0; s < GuildManager.getInstance().scienceLevels.length; s++)
                    if (n.id == s + 1) {
                        n.level = GuildManager.getInstance().scienceLevels[s];
                        break
                    }
                n.maxLevel = Math.floor(GuildManager.getInstance().level / n.ratio + 1);
                for (var r = 0; r < a.length; r++)
                    if (n.level == a[r].level) {
                        r + 1 >= a.length ? n.cost = 0 : 1 == n.id ? (n.cost = a[r + 1].guildscience1Cost, n.effect = a[r].guildscience1Effect / 100 + "%") : 2 == n.id ? (n.cost = a[r + 1].guildscience2Cost, n.effect = a[r].guildscience2Effect / 100 + "%") : 3 == n.id ? (n.cost = a[r + 1].guildscience3Cost, n.effect = a[r].guildscience3Effect / 100 + "%") : 4 == n.id ? (n.cost = a[r + 1].guildscience4Cost, n.effect = a[r].guildscience4Effect / 100 + "%") : 5 == n.id ? (n.cost = a[r + 1].guildscience5Cost, n.effect = a[r].guildscience5Effect / 100 + "%") : 6 == n.id ? (n.cost = a[r + 1].guildscience6Cost, n.effect = a[r].guildscience6Effect / 100 + "%") : 7 == n.id ? (n.cost = a[r + 1].guildscience7Cost, n.effect = a[r].guildscience7Effect / 100 + "%") : 8 == n.id && (n.cost = a[r + 1].guildscience8Cost, n.effect = a[r].guildscience8Effect + "");
                        break
                    }
                n.isMaxLevel = !1,
                    0 == n.cost && (n.isMaxLevel = !0),
                    t.push(n)
            }
            return t
        },
        i.setMemberData = function() {
            var t = this.getGuildMemberPageList();
            this.listMember.dataProvider = new eui.ArrayCollection(t),
                this.listMember.itemRenderer = guildMemberFactoryListItem
        },
        i.getGuildMemberPageList = function() {
            var t = [],
                e = GuildManager.getInstance().guildMemberData;
            if (e)
                for (var a = 0; a < e.length; a++) {
                    var i = {};
                    i.uid = e[a].uid,
                        i.name = e[a].name,
                        i.face = e[a].face,
                        i.power = e[a].power,
                        i.level = e[a].level,
                        i.levelTxt = "Lv " + e[a].level,
                        i.pos = e[a].pos,
                        i.posName = this.getStrByPos(e[a].pos),
                        i.online = e[a].online,
                        i.totalcontribute = e[a].totalcontribute,
                        i.contribute = e[a].contribute,
                        i.donatetype = e[a].donatetype,
                        i.nodonatedaycount = e[a].nodonatedaycount,
                        i.militaryranktype = e[a].militaryranktype,
                        i.goldislandstate = e[a].goldislandstate,
                        i.battlestat = e[a].battlestat,
                        i.jointime = e[a].jointime,
                        i.isInBlackList = !1;
                    for (var n = BlackListManager.GetInstance().getBlackList(), s = 0; s < n.length; s++)
                        if (i.uid == n[s].uid) {
                            i.isInBlackList = !0;
                            break
                        }
                    t.push(i)
                }
            return t
        },
        i.getStrByPos = function(t) {
            return 0 == t ? "军团长" : 1 == t ? "副军团长" : 2 == t ? "成员" : void 0
        },
        e.GUILD_INDEX = 5,
        e
}(WindowBase);
egret.registerClass(WindowGuild, "WindowGuild");
var guildAcitvityFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_1_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        if (1 == e.data.id) GuildDonateAlert.getInstance().show();
                        else if (2 == e.data.id) GuildVerifyAlert.getInstance().show();
                        else if (3 == e.data.id) {
                            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.Guild);
                            t.setActivityData(!1),
                                ChatManager.getInstance().showChatWin(2)
                        } else 4 == e.data.id ? RankListManager.getInstance().showRankWin(16) : 5 == e.data.id ? GuildAlert.getInstance().showChangeLabel("修改公告", "", e.data, 1, 58) : 6 == e.data.id && GuildAlert.getInstance().showChangeLabel("修改宣言", "", e.data, 2, 40)
                    },
                    this), this.imgIcon.source = "icon_jt_" + this.data.img + "_png", this.txtName.text = this.data.name, this.spotGuild.visible = this.data.isRed))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(guildAcitvityFactoryListItem, "guildAcitvityFactoryListItem");
var guildNotifyFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_5_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_5_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data && ("notify" == this.data.type ? (this.skinName = "resource/eui_skins/item/JunTuan_6_Skin.exml", this.txtName.text = this.data.txt) : (this.skinName = "resource/eui_skins/item/JunTuan_5_Skin.exml"
                    /*tpa=resource/eui_skins/item/JunTuan_5_Skin.exml*/
                    , this.txtName.textFlow = (new egret.HtmlTextParser).parser(this.data.txt)))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(guildNotifyFactoryListItem, "guildNotifyFactoryListItem");
var guildStoreFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_2_StoreBar_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_2_StoreBar_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data) {
                this.btnBuy.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnBuy.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            GuildManager.getInstance().guildpoint >= Number(e.data.saleValue) ? ShopSpyAlert.getInstance().showBuyItemPage(e.data, !1) : Toast.launch("贡献点不足,无法购买")
                        },
                        this),
                    this.txtName.textColor = QualitySystem.getColorByQuality(this.data.quality),
                    this.data.num > 0 ? this.txtNum.textColor = 65280 : this.txtNum.textColor = 10461087;
                var a = this.itemCompent.imgMedal;
                SUI.setTextureAsync(a, this.data.icon);
                var i = QualitySystem.getItemSmallBack(this.data.quality);
                a = this.itemCompent.imgBg,
                    SUI.setTextureAsync(a, i),
                    this.btnBuy.label = this.data.saleValue + "贡献",
                    "-1" == this.data.countLimit ? this.txtBuyLimit.text = "" : "-2" == this.data.countLimit ? this.txtBuyLimit.text = "每个玩家累计仅能购买1个" : this.txtBuyLimit.text = "今日可购买" + (Number(this.data.countLimit) - this.data.hasBuyCount) + "个",
                    GuildManager.getInstance().level >= Number(this.data.reqVIPLevel) ? UserData.getInstance().getPlayerLevel() >= Number(this.data.reqLevel) ? (this.canBuy.visible = !0, this.canNotBuy.visible = !1) : (this.txtBuyCondition.text = "需要等级" + this.data.reqLevel + "级", this.canBuy.visible = !1, this.canNotBuy.visible = !0) : (this.txtBuyCondition.text = "军团" + this.data.reqVIPLevel + "级开启", this.canBuy.visible = !1, this.canNotBuy.visible = !0)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(guildStoreFactoryListItem, "guildStoreFactoryListItem");
var guildTechnologyFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_3_TechBar_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_3_TechBar_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.upgradeBtn.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.upgradeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GuildManager.getInstance().sendUpgradeGuildScience(e.data.id - 1)
                    },
                    this), GuildManager.getInstance().pos > 1 || GuildManager.getInstance().pos < 0 ? this.upgradeBtn.enabled = !1 : this.data.isMaxLevel ? this.upgradeBtn.enabled = !1 : this.upgradeBtn.enabled = !0, SUI.setTextureAsync(this.icon, Path.guildTechUrl + this.data.icon), this.txtBuff.textFlow = (new egret.HtmlTextParser).parser("<font>" + this.data.desc1 + " " + this.data.desc2 + "</font><font color='#ffff00'>+" + this.data.effect + "</font>"), this.txtLv.text = this.data.level + "/" + this.data.maxLevel)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(guildTechnologyFactoryListItem, "guildTechnologyFactoryListItem");
var guildMemberFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_4_Member_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_4_Member_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data && !this.hasEventListener(egret.TouchEvent.TOUCH_TAP)) {
                if (this.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            GuildMemberAlert.getInstance().show(e.data)
                        },
                        this), this.data.online ? (this.txtOnlineDesc.text = "在线", this.txtOnlineDesc.textColor = 65280) : (this.txtOnlineDesc.text = "离线", this.txtOnlineDesc.textColor = 16711680), 0 == this.data.donatetype)
                    if (0 == this.data.nodonatedaycount) this.txtDonateDesc.textFlow = (new egret.HtmlTextParser).parser("<font>今日未捐献</font>");
                    else {
                        var a = this.data.nodonatedaycount + 1;
                        this.data.nodonatedaycount > 6 && (a = 7),
                            4 >= a ? this.txtDonateDesc.textFlow = (new egret.HtmlTextParser).parser("<font>" + a + "天未捐献</font>") : this.txtDonateDesc.textFlow = (new egret.HtmlTextParser).parser("<font color='#ff0000'>" + a + "天未捐献</font>")
                    }
                else 1 == this.data.donatetype ? this.txtDonateDesc.textFlow = (new egret.HtmlTextParser).parser("<font>今日已捐献:</font><font color='#00ff00'>" + GuildcontributeParser.GetInstance().getItemById(1).costValue + "</font><font>金币</font>") : 2 == this.data.donatetype ? this.txtDonateDesc.textFlow = (new egret.HtmlTextParser).parser("<font>今日已捐献:</font><font color='#00ff00'>" + GuildcontributeParser.GetInstance().getItemById(2).costValue + "</font><font>钻石</font>") : 3 == this.data.donatetype && (this.txtDonateDesc.textFlow = (new egret.HtmlTextParser).parser("<font>今日已捐献:</font><font color='#00ff00'>" + GuildcontributeParser.GetInstance().getItemById(3).costValue + "</font><font>钻石</font>"));
                SUI.setTextureAsync(this.imgRank, MilitaryManager.GetInstance().getPicByRankLvl(this.data.militaryranktype)),
                    SUI.setTextureAsync(this.imgHead, Path.GetHeadPicUrl(this.data.face, 1))
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(guildMemberFactoryListItem, "guildMemberFactoryListItem");
var WindowGuildJoin = function(t) {
    function e() {
        t.call(this, !1),
            this.guildListData = [],
            this.tickIndex = 0,
            this.skinName = "resource/eui_skins/JunTuan_JoinSkin.exml"
            /*tpa=resource/eui_skins/JunTuan_JoinSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.tickIndex = 0,
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                GuildManager.getInstance().lastTime > 0 ? (this.joinTimeCountBg.visible = !0, this.txtJoinTimeCount.visible = !0, this.tickIndex = GameTick.registerHandler(function() {
                        t.updateTime()
                    },
                    1e3)) : (this.joinTimeCountBg.visible = !1, this.txtJoinTimeCount.visible = !1),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnCreateGuild.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.txtReturnList.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSearchGuild.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.editGuildID.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this)
        },
        i.updateTime = function() {
            GuildManager.getInstance().lastTime <= 0 ? (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0, this.joinTimeCountBg.visible = !1, this.txtJoinTimeCount.visible = !1) : (GuildManager.getInstance().lastTime -= 1, this.txtJoinTimeCount.text = "申请倒计时:" + GlobalFunction.getHMSBySecond(GuildManager.getInstance().lastTime))
        },
        i.clear = function() {
            GuildManager.getInstance().isOpenWinJoin = !1,
                0 != this.tickIndex && (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0),
                this.joinTimeCountBg.visible = !1,
                this.txtJoinTimeCount.visible = !1,
                this.guildListData = [],
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnCreateGuild.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.txtReturnList.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSearchGuild.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.editGuildID.removeEventListener(egret.Event.CHANGE, this.editLabelHandler, this)
        },
        i.editLabelHandler = function(t) {
            var e = Utils.filterStr(this.editGuildID.text);
            this.editGuildID.text = e[0]
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    MainUI.instance.setBottomVisible(!0),
                        WindowManager.getInstance().hide(WindowManager.windowType.GuildJoin);
                    break;
                case this.btnCreateGuild:
                    GuildCreateAlert.getInstance().showCreateGuildPage();
                    break;
                case this.txtReturnList:
                    GuildManager.getInstance().isSearchGuild = !1,
                        GuildManager.getInstance().searchGuildID = "",
                        GuildManager.getInstance().sendGuildList(0, 1);
                    break;
                case this.btnSearchGuild:
                    if (null == this.editGuildID.text || "" == this.editGuildID.text || !Number(this.editGuildID.text)) {
                        Toast.launch("输入内容不符合要求，请重新输入");
                        break
                    }
                    GuildManager.getInstance().isSearchGuild = !0,
                        GuildManager.getInstance().searchGuildID = this.editGuildID.text,
                        GuildManager.getInstance().sendSearchGuild(this.editGuildID.text)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("guild"),
                ConfigData.preLoadDats(e, [GuildParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            !GuideManager.juntuanGuideBool && UserData.getInstance()._level >= 18 && GuideManager.nextStep(101),
                WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                MainUI.instance.setBottomVisible(!1),
                this.txtReturnList.visible = !1,
                this.guildScroller.viewport = this.guildList,
                this.setJoinGuildPage()
        },
        i.setJoinGuildPage = function() {
            this.guildListData = this.getJoinGuildPageList(),
                this.guildList.dataProvider = new eui.ArrayCollection(this.guildListData),
                this.guildList.itemRenderer = juntuanJoinFactoryListItem
        },
        i.getJoinGuildPageList = function() {
            var t = [],
                e = GuildManager.getInstance().guildlist;
            if (e)
                for (var a = 0; a < e.length; a++) t.push(e[a]);
            return t
        },
        e
}(WindowBase);
egret.registerClass(WindowGuildJoin, "WindowGuildJoin");
var juntuanJoinFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/JunTuan_Join_Bar_1_Skin.exml"
            /*tpa=resource/eui_skins/item/JunTuan_Join_Bar_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data) {
                var a = 0;
                if (GuildManager.getInstance().applyGuildlist)
                    for (var i = 0; i < GuildManager.getInstance().applyGuildlist.length; i++)
                        if (this.data.id == GuildManager.getInstance().applyGuildlist[i].id) {
                            a = 1;
                            break
                        }
                0 == a ? this.btnJoin.label = "申请" : 1 == a && (this.btnJoin.label = "取消申请"),
                    this.btnJoin.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnJoin.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            0 == a ? (console.log("加入军团"), GuildManager.getInstance().lastTime > 0 ? Toast.launch("暂时不能申请加入军团") : GuildManager.getInstance().sendGuildApply(e.data.id)) : 1 == a && (console.log("取消加入军团"), GuildManager.getInstance().sendGuildCancelApply(e.data.id))
                        },
                        this),
                    this.data.camp == UserData.getInstance().getCamp() ? this.btnJoin.visible = !0 : this.btnJoin.visible = !1,
                    this.txtGuildLevel.text = this.data.level + "",
                    this.txtGuildName.text = this.data.name,
                    this.txtDeclaration.text = this.data.annoucement,
                    this.txtGuildMember.text = this.data.membercount + "/" + GuildParser.GetInstance().getItemById(this.data.level).count,
                    SUI.setTextureAsync(this.imgGuildBadge, Path.guildUrl + "badge_B_" + this.data.medal + ".png"),
                    this.data.membercount >= GuildParser.GetInstance().getItemById(this.data.level).count ? this.btnJoin.enabled = !1 : this.btnJoin.enabled = !0
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(juntuanJoinFactoryListItem, "juntuanJoinFactoryListItem");
var WindowHandbookProperty = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/tujian_jihuoshuxing.exml"
            /*tpa=resource/eui_skins/tujian_jihuoshuxing.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.txtTitle.text = "",
                this.txtDesc.text = "",
                this.btnClose.touchEnabled = !0,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this)
        },
        i.setData = function(t) {
            if (t.type == WindowWarshipHandbookTabType.TAB_WARSHIP ? (this.txtTitle.text = Locales.get("zz_handbook_activate1"), this.txtDesc.text = Locales.get("panel_atlas_main_panel_buff_txt_show_14")) : t.type == WindowWarshipHandbookTabType.TAB_MEDAL ? (this.txtTitle.text = Locales.get("zz_handbook_activate2"), this.txtDesc.text = Locales.get("panel_atlas_main_panel_buff_txt_show_142")) : t.type == WindowWarshipHandbookTabType.TAB_CAPTAIN && (this.txtTitle.text = Locales.get("zz_handbook_activate3"), this.txtDesc.text = Locales.get("panel_atlas_main_panel_buff_txt_show_143")), t.type === WindowWarshipHandbookTabType.TAB_WARSHIP || t.type === WindowWarshipHandbookTabType.TAB_CAPTAIN) {
                for (var e = ["22", "2", "4", "6", "8", "10", "17", "19", "11", "1", "3", "5", "7", "9"], a = [100, 100, 100, 100, 100, 100, 10, 10, 1, 1, 1, 1, 1, 1], i = [!0, !0, !0, !0, !0, !0, !0, !0, !1, !1, !1, !1, !1, !1], n = 0; n < e.length; ++n) {
                    var s = n + 1,
                        r = e[n],
                        o = a[n],
                        l = i[n],
                        h = this["txtPre" + s],
                        c = this["txtValue" + s];
                    h.text = Locales.get("DecListPanel_txt_item_prop_" + e[n]);
                    var d = t.data[r] ? t.data[r] : 0;
                    d /= o,
                        l ? c.text = "+" + d + "%" : c.text = "+" + d
                }
                this.panelLong.visible = !0,
                    this.panelShort.parent.removeChild(this.panelShort)
            } else {
                for (var e = ["1", "3", "5", "7", "9"], a = [1, 1, 1, 1, 1], i = [!1, !1, !1, !1, !1], n = 0; n < e.length; ++n) {
                    var s = n + 1,
                        r = e[n],
                        o = a[n],
                        l = i[n],
                        h = this["txtMedalPre" + s],
                        c = this["txtMedalValue" + s];
                    h.text = Locales.get("DecListPanel_txt_item_prop_" + e[n]);
                    var d = t.data[r] ? t.data[r] : 0;
                    d /= o,
                        l ? c.text = "+" + d + "%" : c.text = "+" + d
                }
                this.panelShort.visible = !0,
                    this.panelLong.parent.removeChild(this.panelLong)
            }
        },
        i.OnClickBtnClose = function() {
            this.close()
        },
        i.clear = function() {
            this.btnClose && this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowHandbookProperty, "WindowHandbookProperty");
var HegemonyType;
!
function(t) {
    t[t.dayectype = 0] = "dayectype",
        t[t.lvectype = 1] = "lvectype",
        t[t.precious = 2] = "precious",
        t[t.arena = 3] = "arena",
        t[t.boss = 4] = "boss",
        t[t.camp = 5] = "camp",
        t[t.length = 6] = "length"
}(HegemonyType || (HegemonyType = {}));
var WindowHegemony = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ZhengBaSkin.exml"
            /*tpa=resource/eui_skins/ZhengBaSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["HegemonyUnlock", "bigSeven"],
                    function() {
                        ConfigData.preLoadDats(["campBattleBaseData", "stageSpecialData", "HegemonyUnlock"], [CampbattlebasedataParser, StagespecialdataParser, HegemonyunlockParser],
                            function() {
                                t.initUI()
                            })
                    }),
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceEnterArena, null, !1)
        },
        i.initUI = function() {
            HomeUI.instance && HomeUI.instance.visibleScene(!1),
                MainUI.instance.changeTopMode(topUIMode.simple),
                RequestManager.GetInstance().enterCampaign(3, 0);
            for (var t = ConfigData.getAllData("HegemonyUnlock"), e = [], a = 0; a < HegemonyType.length; a++) e.push(a);
            for (e.sort(function(e, a) {
                    var i = Number(t[(e + 1).toString()].needlvl),
                        n = Number(t[(a + 1).toString()].needlvl);
                    return i > n ? 1 : -1
                }), a = 0; a < e.length; a++) {
                var i = !0,
                    n = Number(t[(e[a] + 1).toString()].needlvl);
                i = UserData.getInstance()._level >= n;
                var s = new HegemonyItem({
                    id: e[a],
                    enabled: i,
                    limit: n
                });
                s.y = 170 * a,
                    this.vessel.addChild(s)
            }
            this.vessel.height = 170 * a,
                (112 == GuideManager.step || 117 == GuideManager.step) && (117 == GuideManager.step ? (GuideManager.nextStep(), this.scroller.viewport.scrollV = 800) : this.scroller.viewport.scrollV = 500)
        },
        i.clear = function() {
            HomeUI.instance && HomeUI.instance.visibleScene(!0)
        },
        e
}(WindowBase);
egret.registerClass(WindowHegemony, "WindowHegemony");
var HegemonyItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/zhengba_commonSkin.exml"
            /*tpa=resource/eui_skins/item/zhengba_commonSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onDataUpdate = function() {
            if (this.iData.id == HegemonyType.arena) {
                var t = ArenaManager.instance.getLeftTimes();
                this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == t ? "panel_active_game_desc_4_0" : "panel_active_game_desc_4_1", t))
            } else if (this.iData.id == HegemonyType.precious) {
                var t = UserData.getInstance().getRes(TypeDefine.RES.XunBaoLing);
                this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == t ? "panel_active_game_desc_3_0" : "panel_active_game_desc_3_1", t))
            }
        },
        i.init = function() {
            this.txtFlag0.text = this.txtFlag.text = "",
                this.txtLimit.text = "";
            var t = 0;
            if (this.iData.id == HegemonyType.dayectype) Utils.getImgByUrl(Path.zhengBaURL + "zhengba_" + (this.iData.id + 1) + "_" + (this.iData.enabled ? "1" : "0") + ".png", this.imgBack),
                this.txtDesc.text = this.txtName.text = Locales.get("dayPvp"),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.HEGEMONY_NET, this.refreshHandler, this),
                this.refreshHandler(void 0);
            else if (this.iData.id == HegemonyType.lvectype) Utils.getImgByUrl(Path.zhengBaURL + "zhengba_" + (this.iData.id + 1) + "_" + (this.iData.enabled ? "1" : "0") + ".png", this.imgBack),
                this.txtName.text = Locales.get("panel_active_game_defence_title"),
                this.txtDesc.text = Locales.get("panel_active_game_defence_desc_1") + Locales.get("panel_active_game_defence_desc_1_2"),
                e.lvectype = this,
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceEnterGuard, {}, !1);
            else if (this.iData.id == HegemonyType.precious) Utils.getImgByUrl(Path.zhengBaURL + "zhengba_" + (this.iData.id + 1) + "_" + (this.iData.enabled ? "1" : "0") + ".png", this.imgBack),
                this.txtName.text = Locales.get("panel_plunder_txt_title"),
                this.txtDesc.text = Locales.get("panel_active_game_newadd_desc_1") + Locales.get("panel_active_game_newadd_desc_1_2"),
                t = UserData.getInstance().getRes(TypeDefine.RES.XunBaoLing),
                this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == t ? "panel_active_game_desc_3_0" : "panel_active_game_desc_3_1", t)),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.UserData_Update, this.onDataUpdate, this);
            else if (this.iData.id == HegemonyType.arena) Utils.getImgByUrl(Path.zhengBaURL + "zhengba_" + (this.iData.id + 1) + "_" + (this.iData.enabled ? "1" : "0") + ".png", this.imgBack),
                this.txtName.text = Locales.get("panel_active_game_arena_title"),
                this.txtDesc.text = Locales.get("panel_active_game_arena_desc_1") + Locales.get("panel_active_game_arena_desc_1_2"),
                t = ArenaManager.instance.getLeftTimes(),
                this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == t ? "panel_active_game_desc_4_0" : "panel_active_game_desc_4_1", t)),
                EventManager.instance.addEventListener(EventTypes.ARENA_DATA, this.onDataUpdate, this);
            else if (this.iData.id == HegemonyType.boss) {
                if (this.iData.enabled) {
                    var a = ConfigData.getDataByKey("bigSeven", 1);
                    this.iData.enabled = UserData.getInstance().getServerstartday() >= Number(a.delayDay)
                } else this.txtFlag0.visible = !1;
                var a = ConfigData.getDataByKey("bigSeven", 1),
                    i = a.openDay.split("|"),
                    n = a.openTime.split("|");
                Utils.getImgByUrl(Path.zhengBaURL + "zhengba_" + (this.iData.id + 1) + "_" + (this.iData.enabled ? "1" : "0") + ".png", this.imgBack),
                    this.txtName.text = Locales.get("panel_challengeship_desc_title"),
                    this.txtDesc.text = Locales.get("panel_challengs_ui_1") + Locales.get("panel_challengs_ui_2");
                for (var s = Locales.get("panel_challengs_ui_3"), r = 1; r < i.length; r++) s += Locales.get("panel_challengs_ui_comment_" + i[r]) + Locales.get("panel_challengs_ui_comment_8");
                s = s.substr(0, s.length - 1),
                    this.checkActiveOpen() ? this.txtFlag0.text = "已开启" : this.txtFlag0.text = Locales.get("panel_challengs_ui_4", s + " " + Utils.getDoubleNumText(n[1]) + ":" + Utils.getDoubleNumText(n[2]))
            } else if (this.iData.id == HegemonyType.camp) {
                if (this.iData.enabled) {
                    var o = CampbattlebasedataParser.GetInstance().getDataArr()[0];
                    this.iData.enabled = UserData.getInstance().getServerstartday() >= o.beginDay
                } else this.txtFlag0.visible = !1;
                Utils.getImgByUrl(Path.zhengBaURL + "zhengba_" + (this.iData.id + 1) + "_" + (this.iData.enabled ? "1" : "0") + ".png", this.imgBack),
                    this.txtName.text = Locales.get("panel_active_game_campBattle_title"),
                    this.txtDesc.text = Locales.get("panel_active_game_campBattle_desc_1") + Locales.get("panel_active_game_campBattle_desc_1_2") + Locales.get("panel_active_game_campBattle_desc_1_3") + Locales.get("panel_active_game_campBattle_desc_1_4");
                var o = CampbattlebasedataParser.GetInstance().getDataArr()[0];
                CampBattleManager.instance.isOpened() ? this.txtFlag0.text = "已开启" : this.txtFlag0.text = Locales.get("panel_active_game_campBattle_desc_2_3", Utils.getDoubleNumText(o.startTime[0]) + ":" + Utils.getDoubleNumText(o.startTime[1]))
            }
            this.iData.enabled ? this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this) : (this.txtLimit.text = Locales.get("panel_active_game_campBattle_desc_2_2", this.iData.limit), this.txtFlag.visible = !1, "" != this.txtFlag0.text && this.txtFlag0.visible && (this.txtLimit.text = "")),
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clearHandler, this)
        },
        i.checkActiveOpen = function() {
            var t = ConfigData.getDataByKey("bigSeven", 1);
            if (UserData.getInstance().getServerstartday() >= Number(t.delayDay))
                for (var e = t.openDay.split("|"), a = t.openTime.split("|"), i = Utils.getDateByNum(UserData.getInstance().getServerTime(), timeType.DAY), n = 1; n < e.length; n++)
                    if (i >= e[n] && i < Number(e[n]) + Number(t.continueDays)) {
                        var s = Utils.getDateByNum(UserData.getInstance().getServerTime(), timeType.TIMENUMBER);
                        if (s >= 60 * Number(a[1]) + Number(a[2])) return !0
                    }
            return !1
        },
        i.updateCount = function(t) {
            this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == t ? "panel_active_game_desc_2_0" : "panel_active_game_desc_2_1", t))
        },
        i.clearHandler = function(t) {
            e.lvectype == this && (e.lvectype = null),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.HEGEMONY_NET, this.refreshHandler, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.UserData_Update, this.onDataUpdate, this)
        },
        i.clickHandler = function(t) {
            this.iData.id == HegemonyType.dayectype ? WindowManager.getInstance().show(WindowManager.windowType.ZhenbaEctype) : this.iData.id == HegemonyType.precious ? WindowManager.getInstance().show(WindowManager.windowType.ZhenbaPrecious) : this.iData.id == HegemonyType.boss ? WindowManager.getInstance().show(WindowManager.windowType.QiJvTou) : this.iData.id == HegemonyType.lvectype ? WindowManager.getInstance().show(WindowManager.windowType.DefenseOil) : this.iData.id == HegemonyType.arena ? WindowManager.getInstance().show(WindowManager.windowType.PVP) : this.iData.id == HegemonyType.camp && RequestManager.GetInstance().enterCampBattle()
        },
        i.refreshHandler = function(t) {
            var e = StageData.getTotalCount();
            this.txtFlag.textFlow = Utils.textFlowByStr(Locales.get(0 == e ? "panel_active_game_defence_desc_4_0" : "panel_active_game_defence_desc_4", e))
        },
        e
}(eui.Component);
egret.registerClass(HegemonyItem, "HegemonyItem");
var WindowItemUse = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ShiYongDaoJuSkin.exml"
            /*tpa=resource/eui_skins/ShiYongDaoJuSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                this.txtTitle.text = t.title ? t.title : "";
            var e = ItemsManager.getInstance().getItemById(t.itemId),
                a = 0;
            e && (a = e.count);
            var i = GlobalFunction.getDropDataByTypeAndId(TypeDefine.Const.DROP_TYPE_ITEM, t.itemId, a);
            if (SUI.setItemIcon(this.item, i, a), this.txtName.text = i.name, SUI.setQualityColor(this.txtName, i.quality), this.txtDesc.text = i.desc, this.txtNum.text = Locales.get("zz_count", a), 0 >= a ? (this.btnCancel.enabled = !1, this.txtNum.textColor = 16711680) : (this.btnCancel.enabled = !0, this.txtNum.textColor = 16777215), this.btnConfirm.enabled = !0, null == this._data.shopId || null == ShopdataParser.GetInstance().getItemById(this._data.shopId)) {
                this.txtRes.text = "";
                var n = a > 10 ? 10 : a;
                0 == a && (n = 10, this.btnConfirm.enabled = !1),
                    this.btnConfirm.labelDisplay.text = Locales.get("panel_bag_btn_use_ten_other", n)
            } else {
                var s = ShopdataParser.GetInstance().getItemById(this._data.shopId);
                this.btnCancel.labelDisplay.text = Locales.get("panel_bag_btn_use"),
                    this.btnConfirm.labelDisplay.text = Locales.get("panel_AlertLueduolingBuy_btn_blue"),
                    this.txtRes.text = s.saleValue + "钻石"
            }
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnCancel.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnCancel, this),
                this.btnConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnConfirm, this),
                this.btnCancel.labelDisplay.text = Locales.get("BuyStageCountPanel_oil_btn_1"),
                this.btnConfirm.labelDisplay.text = Locales.get("BuyStageCountPanel_oil_btn_2"),
                EventManager.instance.addEventListener(EventTypes.ITEM_DATA_UPDATE, this.update, this)
        },
        i.update = function() {
            this.setData(this._data)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnCancel = function(t) {
            ItemsManager.getInstance().bagitemUseById(this._data.itemId)
        },
        i.OnClickBtnConfirm = function(t) {
            if (null == this._data.shopId || null == ShopdataParser.GetInstance().getItemById(this._data.shopId)) ItemsManager.getInstance().bagitemUseById(this._data.itemId, 1);
            else {
                RequestManager.GetInstance().ShopItemBuyById(this._data.shopId, 1);
                var e = ShopdataParser.GetInstance().getItemById(this._data.shopId);
                Plantform.getInstanceOf().buy(e.saleValue, 1, this._data.shopId)
            }
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ITEM_DATA_UPDATE, this.update, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowItemUse, "WindowItemUse");
var WindowKeJi = function(t) {
    function e() {
        t.call(this, !1),
            this.science_IRON_ADD = 30,
            this.science_AMMO_ADD = 10,
            this.science_AIR_ADD = 10,
            this.science_MACHINE_ADD = 4,
            this.science_ELEC_ADD = 4,
            this.skinName = "resource/eui_skins/KeJiSkin.exml"
            /*tpa=resource/eui_skins/KeJiSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.getMaterialBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.allUpgradeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SCIENCE_ITEM_COUNT_UPDATE, this.refreshItemsCountTxt, this)
        },
        i.clear = function() {
            this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.getMaterialBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.allUpgradeBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SCIENCE_ITEM_COUNT_UPDATE, this.refreshItemsCountTxt, this)
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    MainUI.instance.setBottomVisible(!0),
                        WindowManager.getInstance().hide(WindowManager.windowType.KeJi);
                    break;
                case this.getMaterialBtn:
                    console.log("获取材料"),
                        TiaoZhuanAlert.getInstance().show("", "进行战役获得", "商城购买宝箱",
                            function() {
                                WindowManager.getInstance().hideAll(),
                                    MainWorldManager.instance.openPVEWindow(),
                                    MainUI.instance.setBottomVisible(!0)
                            },
                            function() {
                                WindowManager.getInstance().hideAll(),
                                    GameData.skipShipGuide ? (WindowShop.PAPER_INDEX = 2, WindowShop.STORE_INDEX = 0, WindowShop.VIP_INDEX = 1, WindowShop.CAPTAIN_INDEX = 3, WindowShop.MEDAL_INDEX = 4, WindowShop.CURR_PAGE = WindowShop.STORE_INDEX) : (WindowManager.getInstance().hideAll(), WindowShop.CURR_PAGE = WindowShop.STORE_INDEX, WindowManager.getInstance().show(WindowManager.windowType.Shop)),
                                    MainUI.instance.setBottomVisible(!0)
                            });
                    break;
                case this.allUpgradeBtn:
                    console.log("一键升级");
                    var e = !1,
                        a = this.getKeJiPageList();
                    for (var i in a) UserData.getInstance().getRes(TypeDefine.RES.Gold) >= a[i].costGold && (e = !0);
                    if (e) {
                        var n = Transport.getPkg(ProtocolMgr.ID_DceAutoUpgradeScience);
                        Transport.instance.send(n)
                    } else Toast.launch("金币不足"),
                        UserData.getInstance()._level >= 9 && (WindowManager.getInstance().show(WindowManager.windowType.BuJi), UserData.getInstance().sendDetailMessage(), MainUI.instance.setBottomVisible(!0), UserData.getInstance().isKeJiJump = !0)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("science"),
                e.push("scienceData"),
                ConfigData.preLoadDats(e, [ScienceParser, SciencedataParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            GuideManager.techGuideBool || GuideManager.nextStep(82),
                WindowManager.getInstance().hideWaiting(),
                this.science_IRON_ADD = 30,
                this.science_AMMO_ADD = 10,
                this.science_AIR_ADD = 10,
                this.science_MACHINE_ADD = 4,
                this.science_ELEC_ADD = 4,
                this.refreshItemsCountTxt(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                MainUI.instance.setBottomVisible(!1),
                this.scvCenter.viewport = this.lstCenter,
                this.setCenterPage()
        },
        i.setCenterPage = function() {
            var t = this.getKeJiPageList();
            this.lstCenter.dataProvider = new eui.ArrayCollection(t),
                this.lstCenter.itemRenderer = keJiFactoryListItem
        },
        i.getKeJiPageList = function() {
            for (var t = [], e = ScienceParser.GetInstance().getDataArr(), a = 0; a < e.length; a++) {
                var i = {};
                i.id = e[a].id,
                    i.icon = Path.technologyURL + e[a].icon;
                for (var n = 0; n < ScienceData.levelsList.length; n++)
                    if (n + 1 == Number(i.id)) {
                        i.lv = ScienceData.levelsList[n],
                            i.name = e[a].name_l + ScienceData.levelsList[n] + "级";
                        break
                    }
                var s = SciencedataParser.GetInstance().getItemById(i.lv + 1);
                "1" == i.id ? (i.buffInfo = "火炮攻击 +" + ScienceData.levelsList[n] * this.science_AMMO_ADD, i.costGold = s.ammoCostGold, i.costItem = s.ammoCostItem, i.costCount = "X" + s.ammoCostCount, i.needCount = s.ammoCostCount) : "2" == i.id ? (i.buffInfo = "爆破攻击 +" + ScienceData.levelsList[n] * this.science_AIR_ADD, i.costGold = s.airCostGold, i.costItem = s.airCostItem, i.costCount = "X" + s.airCostCount, i.needCount = s.airCostCount) : "3" == i.id ? (i.buffInfo = "火炮防御 +" + ScienceData.levelsList[n] * this.science_MACHINE_ADD, i.costGold = s.machineCostGold, i.costItem = s.machineCostItem, i.costCount = "X" + s.machineCostCount, i.needCount = s.machineCostCount) : "4" == i.id ? (i.buffInfo = "爆破防御 +" + ScienceData.levelsList[n] * this.science_ELEC_ADD, i.costGold = s.elecCostGold, i.costItem = s.elecCostItem, i.costCount = "X" + s.elecCostCount, i.needCount = s.elecCostCount) : "5" == i.id && (i.buffInfo = "生命 +" + ScienceData.levelsList[n] * this.science_IRON_ADD, i.costGold = s.ironCostGold, i.costItem = s.ironCostItem, i.costCount = "X" + s.ironCostCount, i.needCount = s.ironCostCount),
                    "" == i.costItem || "" == i.costCount ? i.group2State = !1 : i.group2State = !0,
                    t.push(i)
            }
            return t
        },
        i.refreshItemsCountTxt = function() {
            var t = ItemsManager.getInstance().getItemById(1005);
            null != t ? (this.itemsCountTxt.text = t.count, this.itemsCountTxt.textColor = 11135736) : (this.itemsCountTxt.text = "0", this.itemsCountTxt.textColor = 16001803)
        },
        e
}(WindowBase);
egret.registerClass(WindowKeJi, "WindowKeJi");
var keJiFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/KeJiBarSkin.exml"
            /*tpa=resource/eui_skins/item/KeJiBarSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data) {
                this.upgradeBtn.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.upgradeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            if (console.log("升级"), UserData.getInstance().getRes(TypeDefine.RES.Gold) >= e.data.costGold) {
                                var t = Transport.getPkg(ProtocolMgr.ID_DceUpgradeScience);
                                t.id = Number(e.data.id),
                                    Transport.instance.send(t),
                                    83 == GuideManager.step && GuideManager.nextStep()
                            } else Toast.launch("金币不足"),
                                UserData.getInstance()._level >= 9 && (WindowManager.getInstance().show(WindowManager.windowType.BuJi), UserData.getInstance().sendDetailMessage(), MainUI.instance.setBottomVisible(!0), UserData.getInstance().isKeJiJump = !0)
                        },
                        this),
                    SUI.setTextureAsync(this.icon, this.data.icon);
                var a = ItemsManager.getInstance().getItemById(1005);
                null != a && a.count >= Number(this.data.needCount) ? this.costCountLabel.textColor = 11135736 : this.costCountLabel.textColor = 16001803,
                    UserData.getInstance().getRes(TypeDefine.RES.Gold) >= Number(this.data.costGold) ? this.costGoldLabel.textColor = 11135736 : this.costGoldLabel.textColor = 16001803
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(keJiFactoryListItem, "keJiFactoryListItem");
var WindowListActivity = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/HuoDong_list_Skin.exml"
            /*tpa=resource/eui_skins/HuoDong_list_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                SUI.setTextureAsync(this.imgShow, Path.GetActivityIcon(this._data.icon)),
                ActivityManager.instance.setImageByType(this.imgTitle, t.type),
                this.sortList();
            var e = Utils.getDateByNum(1e3 * this._data.start_time.time, timeType.FORMATDATE),
                a = Utils.getDateByNum(1e3 * this._data.end_time.time, timeType.FORMATDATE);
            this._data.end_time.time - this._data.start_time.time > 5184e3 ? this.txtTime.text = Locales.get("zz_forever") : this.txtTime.text = Locales.get("zz_activitytime1", e, a),
                this.txtDesc.textFlow = Utils.textFlowByStr(Locales.get("zz_activityIntro" + this._data.type)),
                (this._data.type == ActivityType.ACTIVITY_TYPE_RECHARGE_REWARD || this._data.type == ActivityType.ACTIVITY_TYPE_DAILY_ACC_RECHARGE) && (GameEventDispatcher.getInstance().addEventListener(GameEvent.UserData_Update, this.updateData, this), this.txtTotalNum.visible = !0, this.updateData())
        },
        i.sortList = function() {
            for (var t = ActivityManager.instance.curActivityType,
                    e = 0,
                    a = (ActivityManager.instance.activityData.cashtype, []), i = 0; i < this._data.itemlist.length; ++i) {
                var n = this._data.itemlist[i];
                if (t == ActivityType.ACTIVITY_TYPE_RECHARGE_REWARD) {
                    var s = 0;
                    if (ActivityManager.instance.activityData.rechargecount_func && (s = ActivityManager.instance.activityData.rechargecount_func), n.params[0] <= s) {
                        for (var r = !1,
                                o = 0,
                                l = ActivityManager.instance.activityData.rechargelist_func; o < l.length; o++) {
                            var h = l[o];
                            if (h == n.key) {
                                r = !0;
                                break
                            }
                        }
                        e = r ? -1 : 1
                    } else e = 0
                } else if (t == ActivityType.ACTIVITY_TYPE_COST_REWARD) {
                    var c = 0;
                    if (ActivityManager.instance.activityData.costcount && (c = ActivityManager.instance.activityData.costcount), n.params[0] <= c) {
                        for (var r = !1,
                                d = 0,
                                g = ActivityManager.instance.activityData.costlist; d < g.length; d++) {
                            var h = g[d];
                            if (h == n.key) {
                                r = !0;
                                break
                            }
                        }
                        e = r ? -1 : 1
                    } else e = 0
                } else if (t == ActivityType.ACTIVITY_TYPE_SINGLE_RECHARGE) {
                    var u = 0;
                    if (ActivityManager.instance.activityData.singlecharge && (u = ActivityManager.instance.activityData.singlecharge), n.params[0] <= u) {
                        for (var r = !1,
                                p = 0,
                                m = ActivityManager.instance.activityData.single_gift_list; p < m.length; p++) {
                            var h = m[p];
                            if (h == n.key) {
                                r = !0;
                                break
                            }
                        }
                        e = r ? -1 : 1
                    } else e = 0
                } else if (t == ActivityType.ACTIVITY_TYPE_LEVEL) {
                    var _ = UserData.getInstance()._level;
                    if (n.params[0] <= _) {
                        for (var r = !1,
                                v = 0,
                                f = ActivityManager.instance.activityData.level_gifts; v < f.length; v++) {
                            var h = f[v];
                            if (h == n.key) {
                                r = !0;
                                break
                            }
                        }
                        e = r ? -1 : 1
                    } else e = 0
                } else if (t == ActivityType.ACTIVITY_TYPE_DAILY_SINGLE_RECHARGE) {
                    var u = 0;
                    if (ActivityManager.instance.activityData.daily_singlerecharge_count && (u = ActivityManager.instance.activityData.daily_singlerecharge_count), n.params[0] <= u) {
                        for (var r = !1,
                                I = 0,
                                T = ActivityManager.instance.activityData.daily_singlerecharge_taked; I < T.length; I++) {
                            var h = T[I];
                            if (h == n.key) {
                                r = !0;
                                break
                            }
                        }
                        e = r ? -1 : 1
                    } else e = 0
                } else if (t == ActivityType.ACTIVITY_TYPE_DAILY_ACC_RECHARGE) {
                    var s = 0;
                    if (ActivityManager.instance.activityData.daily_accrecharge_count && (s = ActivityManager.instance.activityData.daily_accrecharge_count), n.params[0] <= s) {
                        for (var r = !1,
                                y = 0,
                                D = ActivityManager.instance.activityData.daily_accrecharge_taked; y < D.length; y++) {
                            var h = D[y];
                            if (h == n.key) {
                                r = !0;
                                break
                            }
                        }
                        e = r ? -1 : 1
                    } else e = 0
                }
                a.push({
                    item: n,
                    status: e,
                    index: i
                })
            }
            a.sort(function(t, e) {
                return t.status == e.status ? t.index - e.index : e.status - t.status
            });
            for (var P = [], C = 0, E = a; C < E.length; C++) {
                var S = E[C];
                P.push(S.item)
            }
            var b = this.lstCenter.scrollV;
            this.lstCenter.dataProvider = new eui.ArrayCollection(P),
                this.lstCenter.validateNow(),
                this.lstCenter.scrollV = b
        },
        i.updateData = function() {
            var t = 0;
            if (this._data.type == ActivityType.ACTIVITY_TYPE_RECHARGE_REWARD) {
                var e = ActivityManager.instance.activityData.rechargecount_func;
                e || (e = 0),
                    t = e
            } else if (this._data.type == ActivityType.ACTIVITY_TYPE_DAILY_ACC_RECHARGE) {
                var e = ActivityManager.instance.activityData.daily_accrecharge_count;
                e || (e = 0),
                    t = e
            }
            this.txtTotalNum.text = Locales.get("zz_rechargeNum", t)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.lstCenter.itemRenderer = RechargeRewardItemRenderer,
                this.scvCenter.viewport = this.lstCenter,
                SUI.setTextureAsync(this.imgBg, Path.backGroundImageUrl + "Bg_huodong.jpg"),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgSkip, Path.uiUrl + "Activity/Activity_fengetiao.png"),
                this.txtTotalNum.visible = !1,
                this.DayOil.visible = !1,
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.sortList, this)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.UserData_Update, this.updateData, this),
                EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.sortList, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowListActivity, "WindowListActivity");
var WindowLoading = function(t) {
    function e() {
        t.call(this),
            this._weight = 0,
            this._totalWeight = 0,
            this._weightMap = {},
            this.uidIsInServerList = !1,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/LoginSkin.exml"
            /*tpa=resource/eui_skins/LoginSkin.exml*/
            ,
            Main.instance.addChild(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function(t) {
            this.loadingImg.visible = !1,
                this.Server.visible = !1,
                this.Loading.visible = !0,
                this.Login.visible = !1,
                this.Login_test.visible = !1,
                SUI.addClickEffect(this.btnChange),
                SUI.addClickEffect(this.btnBackToLogin),
                this.selfScroller.viewport = this.selfList,
                this.serverScroller.viewport = this.list,
                this.btnChange.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onBtnClick, this),
                this.btnBackToLogin.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onBtnClick, this),
                this.btnStart.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onBtnClick, this),
                this.btnStart0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.startGame, this),
                this.msgCloseBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnCliskMsg, this),
                this.msgScroller.viewport = this.msgGroup,
                ResLoader.instance.preLoadResList(["resource/assets/broadcast/msg.json"
                        /*tpa=resource/assets/broadcast/msg.json*/
                    ],
                    function(t) {
                        this.msgContainer.visible = !1,
                            t && (this.msg = t[0], this.msg && this.msg.content && "" != this.msg.content && (this.msgTitleTf.text = this.msg.title || "公告", this.msgCloseBtn.label = this.msg.closeBtnTf || "收到", this.msgContent.textFlow = (new egret.HtmlTextParser).parser(this.msg.content), this.msgContainer.visible = !0))
                    },
                    this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.GOBACK_SERVER_PAGE, this.onGobackServerPage, this),
                Main.instance.loadResource(),
                this.isLocalStorageSupported() ? this.editLbabel.text = window.localStorage.gameLongId : this.editLbabel.text = "",
                SUI.addClickEffect(this.btnRandomID),
                this.btnRandomID.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnRandomIDClick, this)
        },
        i.OnCliskMsg = function(t) {
            this.msg && this.msg.canClose && (this.msgContainer.visible = !1)
        },
        i.startGame = function(t) {
            if (0 != this.editLbabel.text.length) {
                this.isLocalStorageSupported() && (window.localStorage.gameLongId = this.editLbabel.text);
                var e = this.editLbabel.text;
                this.loginCallback && (this.loginThisObj ? this.loginCallback.apply(this.loginThisObj, [e]) : this.loginCallback(e))
            }
        },
        i.onThemeLoadComplete = function() {
            this.themeLoaded = !0,
                this.parent && this.clear()
        },
        i.clear = function() {
            this.themeLoaded && (egret.clearInterval(this.tickId), Main.instance.removeChild(this), Main.instance.loadingPanel = null)
        },
        i.showLogin = function(t, e, a) {
            if (void 0 === a && (a = !0), this.loginCallback = t, this.loginThisObj = e, a && this.isLocalStorageSupported() && null != window.localStorage.gameLongId && "" != window.localStorage.gameLongId) {
                var i = window.localStorage.gameLongId;
                t && (e ? t.apply(e, [i]) : t(i))
            } else this.Login_test.visible = !0;
            this.Loading.visible = !1,
                Main.instance.setChildIndex(this, Main.instance.numChildren)
        },
        i.showLoading = function() {
            this.Login_test.visible = !1,
                this.Login.visible = !1,
                this.Loading.visible = !0,
                Main.instance.setChildIndex(this, Main.instance.numChildren)
        },
        i.setLoadLabel = function(t) {
            this.loadTxt.text = t
        },
        i.setProgress = function(t, e) {
            if (this.bar) {
                var a = Math.floor(t / e * 100);
                this.bar.value = a,
                    this.barTxt.text = a + "%"
            }
        },
        i.clearPercentMap = function() {
            this._weightMap = {},
                this._weight = 0,
                this._totalWeight = 0
        },
        i.registerPercentMap = function(t, e) {
            var a = e.toString();
            null == this._weightMap[a] && (this._weightMap[a] = t, this._totalWeight += t)
        },
        i.triggerPercent = function(t) {
            var e = t.toString(),
                a = this._weightMap[e];
            if (a) {
                this._weight += a;
                var i = Math.floor(this._weight / this._totalWeight * 100);
                this.setProgress(i, 100),
                    this._weightMap[e] = null
            }
        },
        i.btnRandomIDClick = function(t) {
            var e = new Date,
                a = Math.floor(1e4 * Math.random()).toString();
            this.editLbabel.text = "游客" + e.getTime().toString() + a
        },
        i.isLocalStorageSupported = function() {
            var t = "test",
                e = window.sessionStorage;
            try {
                return e.setItem(t, "testValue"),
                    e.removeItem(t), !0
            } catch (a) {
                return !1
            }
        },
        i.showServerListUI = function() {
            this.Login_test.visible = !1,
                this.Loading.visible = !1,
                this.Server.visible = !0,
                this.Login.visible = !1,
                this.btnBackToLogin.visible = PlatformManager.instance.needShowLogin()
        },
        i.requestServerList = function() {
            WindowManager.getInstance().showWaiting(),
                this.btnStart.enabled = !1;
            var t = "openid=" + (GetPlatType() == PlatformType.PF_QQ ? GameData.openid + "_" + QZAppExternal.getPlatform() : GameData.openid) + "&pf=" + GameData.pf;
            console.log("url = " + PlatformManager.instance.getWebUrl() + "/server"),
                console.log("params = " + t);
            var e = new egret.HttpRequest;
            e.responseType = egret.HttpResponseType.TEXT,
                e.open(PlatformManager.instance.getWebUrl() + "/server", egret.HttpMethod.POST),
                e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded"),
                e.send(t),
                e.addEventListener(egret.Event.COMPLETE, this.onPostComplete, this),
                e.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onPostIOError, this)
        },
        i.onPostComplete = function(t) {
            this.btnStart.enabled = !0,
                WindowManager.getInstance().hideWaiting();
            var e = t.currentTarget;
            Log.log("post data : ", e.response);
            var a = JSON.parse(e.response);
            if (0 == a.ret) {
                var i = a.servers;
                if (null != i && i.length > 0) {
                    var n = a.servers[0];
                    if (null == n) return void Toast.launch("服务器列表错误，请与工作人员联系");
                    var s = n.servers;
                    if (null != s && s.length > 0) {
                        if (s.sort(function(t, e) {
                                return e.isRecommend - t.isRecommend
                            }), PlatformManager.instance.myself.serverId) {
                            for (var r = 0,
                                    o = s; r < o.length; r++) {
                                var l = o[r];
                                if (l.id == PlatformManager.instance.myself.serverId) {
                                    this.uidIsInServerList = !0,
                                        GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.GOBACK_SERVER_PAGE, l));
                                    break
                                }
                            }
                            this.uidIsInServerList || GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.GOBACK_SERVER_PAGE, s[0]))
                        } else GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.GOBACK_SERVER_PAGE, s[0]));
                        this.setServerScrollerData(s);
                        var h = a.logined;
                        if (GameData.loginedServers = h, null != h && h.length > 0) {
                            for (var c = [], d = 0; d < s.length; d++)
                                for (var g = 0; g < h.length; g++) s[d].id == h[g].serverid && c.push(s[d]);
                            null != c && c.length > 0 && this.setSelfScrollerData(c)
                        } else Plantform.getInstanceOf().register("unknow")
                    }
                }
            }
        },
        i.onPostIOError = function(t) {
            this.btnStart.enabled = !1,
                WindowManager.getInstance().showWaiting(),
                this.requestServerList()
        },
        i.onBtnClick = function(t) {
            var e = this;
            switch (t.currentTarget) {
                case this.btnStart:
                    if (PlatformManager.instance.myself.userid = null, GameData.loginedServers)
                        for (var a = 0,
                                i = GameData.loginedServers; a < i.length; a++) {
                            var n = i[a];
                            if (n.serverid == this.tmpServerId) {
                                PlatformManager.instance.myself.userid = n.uid;
                                break
                            }
                        }
                    this.btnStart.enabled = !1,
                        PlatformManager.instance.login(this.tmpServerId,
                            function() {
                                e.btnStart.enabled = !0,
                                    GameData.uid = PlatformManager.instance.myself.userid,
                                    GameData.secret = PlatformManager.instance.myself.serverKey,
                                    Plantform.getInstanceOf().login();
                                var t = new ProtocolMgr,
                                    a = new Transport(t.GetPkgMap());
                                new CommunicateManager,
                                a.connect(),
                                    e.Server.visible = !1,
                                    e.themeLoaded = !0,
                                    e.loadingImg.visible = !0,
                                    e.tickId = egret.setInterval(function() {
                                            e.loadingImg.rotation += 20
                                        },
                                        e, 100)
                            });
                    break;
                case this.btnChange:
                    this.Server.visible = !1,
                        this.ServerList.visible = !0;
                    break;
                case this.btnBackToLogin:
                    this.Login_test.visible = !0,
                        this.Server.visible = !1,
                        this.uidIsInServerList = !1;
                    break;
                case this.btnStart1:
            }
        },
        i.setSelfScrollerData = function(t) {
            var e = this.getSelfServerList(t);
            this.selfList.dataProvider = new eui.ArrayCollection(e),
                this.selfList.itemRenderer = serverListItem
        },
        i.getSelfServerList = function(t) {
            for (var e = [], a = 0; a < t.length; a++) {
                var i = t[a];
                e.push(i)
            }
            return e
        },
        i.setServerScrollerData = function(t) {
            var e = this.getServerList(t);
            this.list.dataProvider = new eui.ArrayCollection(e),
                this.list.itemRenderer = serverListItem
        },
        i.getServerList = function(t) {
            for (var e = [], a = 0; a < t.length; a++) {
                var i = t[a];
                e.push(i)
            }
            return e
        },
        i.onGobackServerPage = function(t) {
            this.Server.visible = !0,
                this.ServerList.visible = !1;
            var e = t.parames;
            this.txtServer.text = e.name,
                this.tmpServerId = e.id,
                1 == e.isOpen ? 1 == e.isNew ? (this.txtServerFlag.text = "新服", this.txtServerFlag.textColor = 65280) : 0 == e.isNew && (0 == e.busy ? (this.txtServerFlag.text = "畅通", this.txtServerFlag.textColor = 65280) : 1 == e.busy ? (this.txtServerFlag.text = "拥挤", this.txtServerFlag.textColor = 16776960) : 2 == e.busy && (this.txtServerFlag.text = "繁忙", this.txtServerFlag.textColor = 16711680)) : 0 == e.isOpen && (this.txtServerFlag.text = "维护中", this.txtServerFlag.textColor = 13421772)
        },
        i.onClickBtnQQ = function() {
            EventManager.instance.dispatchEvent(EventTypes.LOGIN_QQ, "qq", !1)
        },
        i.onClickBtnWX = function() {
            EventManager.instance.dispatchEvent(EventTypes.LOGIN_QQ, "wx", !1)
        },
        i.onClickBtnOneKeyQQ = function() {
            EventManager.instance.dispatchEvent(EventTypes.LOGIN_QQ, "qq", !0)
        },
        i.onClickBtnOneKeyWX = function() {
            EventManager.instance.dispatchEvent(EventTypes.LOGIN_QQ, "wx", !0)
        },
        i.showQQLogin = function(t) {
            var e = this;
            this.Login_test.visible = !1,
                this.Loading.visible = !1,
                this.Login.visible = !0,
                Main.instance.setChildIndex(this, Main.instance.numChildren),
                this.gpQQChat.visible = this.gpQQChated.visible = !1,
                this.gpWXChat.visible = this.gpWXChated.visible = !1,
                this.btnQQ.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnQQ, this),
                this.btnQQed.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnOneKeyQQ, this),
                this.btnWX.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnWX, this),
                this.btnWXed.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnOneKeyWX, this),
                this.btnQQ.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnQQ, this),
                this.btnQQed.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnOneKeyQQ, this),
                this.btnWX.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnWX, this),
                this.btnWXed.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnOneKeyWX, this);
            for (var a = 0,
                    i = t.loginTypes; a < i.length; a++) {
                var n = i[a];
                "qq" == n.loginType ? n.accInfo && n.accInfo.avatarUrl ? (this.gpQQChated.visible = !0, this.gpQQChat.visible = !1, RES.getResByUrl(n.accInfo.avatarUrl,
                    function(t) {
                        e.imgQQHead.texture = t
                    },
                    this, RES.ResourceItem.TYPE_IMAGE)) : (this.gpQQChated.visible = !1, this.gpQQChat.visible = !0) : "wx" == n.loginType && (n.accInfo && n.accInfo.avatarUrl ? (this.gpWXChated.visible = !0, this.gpWXChat.visible = !1, RES.getResByUrl(n.accInfo.avatarUrl,
                    function(t) {
                        e.imgWXHead.texture = t
                    },
                    this, RES.ResourceItem.TYPE_IMAGE)) : (this.gpWXChated.visible = !1, this.gpWXChat.visible = !0))
            }
        },
        e
}(eui.Component);
egret.registerClass(WindowLoading, "WindowLoading");
var serverListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/serverSkin.exml"
            /*tpa=resource/eui_skins/item/serverSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var t = this;
            this.data && (this.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.txtServerName.touchEnabled = !1, this.txtServerFlag.touchEnabled = !1, 1 == this.data.isOpen ? 1 == this.data.isNew ? (this.txtServerFlag.text = "新服", this.txtServerFlag.textColor = 65280) : 0 == this.data.isNew && (0 == this.data.busy ? (this.txtServerFlag.text = "畅通", this.txtServerFlag.textColor = 65280) : 1 == this.data.busy ? (this.txtServerFlag.text = "拥挤", this.txtServerFlag.textColor = 16776960) : 2 == this.data.busy && (this.txtServerFlag.text = "繁忙", this.txtServerFlag.textColor = 16711680)) : 0 == this.data.isOpen && (this.txtServerFlag.text = "维护中", this.txtServerFlag.textColor = 13421772), this.txtServerName.text = this.data.name, this.addEventListener(egret.TouchEvent.TOUCH_TAP,
                function() {
                    GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.GOBACK_SERVER_PAGE, t.data))
                },
                this)))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(serverListItem, "serverListItem");
var WindowLog = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZB_QiJuTou_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/ZB_QiJuTou_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this.txtContent.text = t
        },
        i.init = function() {
            this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.gpScroller.removeChild(this.rankList),
                this.txtContent = new eui.Label,
                this.txtContent.width = this.rankScroller.width - 6,
                this.txtContent.x = 3,
                this.txtContent.y = 3,
                this.gpScroller.addChild(this.txtContent)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowLog, "WindowLog");
var WindowLuckyWheel = function(t) {
    function e() {
        t.call(this, !0),
            this._turning = !1,
            this.skinName = "resource/eui_skins/HuoDong_zhuanpan_Skin.exml"
            /*tpa=resource/eui_skins/HuoDong_zhuanpan_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                SUI.setTextureAsync(this.imgShow, Path.GetActivityIcon(this._data.icon)),
                ActivityManager.instance.setImageByType(this.imgTitle, t.type);
            var e = Utils.getDateByNum(1e3 * this._data.start_time.time, timeType.FORMATDATE),
                a = Utils.getDateByNum(1e3 * this._data.end_time.time, timeType.FORMATDATE);
            this._data.end_time.time - this._data.start_time.time > 5184e3 ? this.txtTime.text = Locales.get("zz_forever") : this.txtTime.text = Locales.get("zz_activitytime1", e, a),
                this.txtDesc.textFlow = Utils.textFlowByStr(Locales.get("zz_activityIntro" + this._data.type)),
                this.updateScores();
            for (var i = function(t) {
                        var e = n["reward" + (t + 1)],
                            a = n._data.itemlist[t],
                            i = a.items[0],
                            s = GiftdataParser.GetInstance().getItemById(i.id),
                            r = GlobalFunction.getDropDataByTypeAndId(s.type, s.item, s.count);
                        SUI.setItemIcon(e, r),
                            e.txtName.visible = !1,
                            1 == i.effect ? (e.hasEffect = !0, e.effect ? e.effect.visible = !0 : SUI.loadMovieClip(Path.activityEffectUrl + "activity_goods.json", Path.activityEffectUrl + "activity_goods.png", e,
                                function(t) {
                                    t.x = e.imgBg.x + .5 * e.imgBg.width,
                                        t.y = e.imgBg.y + .5 * e.imgBg.height,
                                        e.effect = t,
                                        e.hasEffect || (t.visible = !1)
                                },
                                n)) : (e.hasEffect = !1, e.effect && (e.effect.visible = !1))
                    },
                    n = this, s = 0; s < this._data.itemlist.length; ++s) i(s)
        },
        i.updateScores = function() {
            this.txtSelfPoints.text = "我的积分：" + ActivityManager.instance.activityData.wheel_point
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnLottery.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnLottery, this),
                SUI.addClickEffect(this.btnLottery),
                SUI.setTextureAsync(this.imgBg, Path.backGroundImageUrl + "Bg_huodong.jpg"),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgSkip, Path.uiUrl + "Activity/Activity_fengetiao.png"),
                SUI.setTextureAsync(this.btnLottery, Path.uiUrl + "Activity/zhuanpan_dianji_up.png"),
                SUI.setTextureAsync(this.imgPoint, Path.uiUrl + "Activity/zhuanpan_jiantou.png"),
                SUI.setTextureAsync(this.imgBack, Path.uiUrl + "Activity/zhuanpan_wanzheng.jpg"),
                SUI.setTextureAsync(this.imgChose, Path.uiUrl + "Activity/zhuanpan_xuanzhong.png"),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onActivityDataUpdate, this),
                this.imgChose.visible = !1;
            var t = ActivityluckywheelParser.GetInstance().getDataArr()[0];
            this.txtDesc2.text = Locales.get("zz_luckyWheelDesc", t.score, t.costNum)
        },
        i.onActivityDataUpdate = function() {
            this.updateScores()
        },
        i.OnClickBtnClose = function(t) {
            this._turning || this.close()
        },
        i.OnClickBtnLottery = function(t) {
            if (!this._turning) {
                var e = ActivityluckywheelParser.GetInstance().getDataArr()[0];
                if (ActivityManager.instance.activityData.wheel_point < e.costNum) return void Toast.launch(Locales.get("zz_luckyWheelWarnning"));
                this._turning = !0,
                    RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                        id: ActivityType.ACTIVITY_TYPE_WHEEL,
                        type: 0
                    })
            }
        },
        i.turnToGift = function(t) {
            for (var e = this,
                    a = 0,
                    i = 0; i < this._data.itemlist.length; ++i) {
                var n = (this["reward" + (i + 1)], this._data.itemlist[i]),
                    s = n.items[0];
                if (s.id == t) {
                    a = i;
                    break
                }
            }
            Log.logZDY("itemId1", t, a),
                egret.Tween.removeTweens(this.imgPoint);
            var r = 45 * a,
                o = this.imgPoint.rotation,
                l = 360 - o,
                h = o + 1440,
                c = h + 720 + l + r;
            egret.Tween.get(this.imgPoint).to({
                    rotation: h
                },
                1e3).to({
                    rotation: c
                },
                2e3, egret.Ease.quadOut).call(function() {
                e.imgChose.rotation = c,
                    e.imgChose.visible = !0,
                    e._turning = !1,
                    Log.logZDY("itemId2", t, a);
                var i = GiftdataParser.GetInstance().getItemById(t),
                    n = GlobalFunction.getDropDataByTypeAndId(i.type, i.item, i.count),
                    s = QualitySystem.getColorByQuality(n.quality).toString(16);
                if (s.length < 6)
                    for (; s.length < 6;) s = "0" + s;
                n.count && n.count > 1 ? Toast.launch("恭喜您获得#" + s + n.name + "#x" + n.count, void 0, !0) : Toast.launch("恭喜您获得#" + s + n.name + "#", void 0, !0)
            })
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onActivityDataUpdate, this)
        },
        e.useScore = 100,
        e
}(WindowBase);
egret.registerClass(WindowLuckyWheel, "WindowLuckyWheel");
var WindowMail = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/YouJianSkin.exml"
            /*tpa=resource/eui_skins/YouJianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.scroller.viewport = this.list,
                this.initBtn(),
                this.btnSystem.dispatchEvent(new egret.Event(egret.TouchEvent.TOUCH_TAP))
        },
        i.initBtn = function() {
            this.arrBtnBar = [this.btnSystem, this.btnBattle, this.btnMessage, this.btnReward],
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeBtnClick, this),
                this.btnSystem.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnBattle.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnMessage.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this),
                this.btnReward.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnBarClickHandler, this)
        },
        i.closeBtnClick = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceMailList);
            e.type = 100,
                Transport.instance.send(e),
                WindowManager.getInstance().hide(WindowManager.windowType.Mail)
        },
        i.btnBarClickHandler = function(t) {
            if (t.target != this.arrBtnBar[this.curPage]) {
                for (var e in this.arrBtnBar) t.target == this.arrBtnBar[e] ? (this.arrBtnBar[e].currentState = "down", this.curPage = parseInt(e)) : this.arrBtnBar[e].currentState = "up";
                this.updatePaper()
            }
        },
        i.updatePaper = function() {
            var t, e = [];
            switch (this.curPage) {
                case 0:
                    t = MailManager.getInstance().systemMailList;
                    break;
                case 1:
                    t = MailManager.getInstance().battleMailList;
                    break;
                case 2:
                    t = MailManager.getInstance().messageMailList;
                    break;
                case 3:
                    t = MailManager.getInstance().rewardMailList
            }
            for (var a in t) {
                var i = {};
                i.title = t[a].title,
                    i.content = t[a].content,
                    i.time = t[a].time,
                    i.type = t[a].typeTwo,
                    i.isread = t[a].isread,
                    i.mailid = t[a].mailid,
                    i.color = t[a].color,
                    i.pkgParam = t[a].pkgParam,
                    i.uid = t[a].uid,
                    i.uname = t[a].uname,
                    i.id = t[a].id,
                    i.proplist = t[a].proplist,
                    e.unshift(i)
            }
            this.list.dataProvider = new eui.ArrayCollection(e),
                this.list.itemRenderer = MailRenderer
        },
        e
}(WindowBase);
egret.registerClass(WindowMail, "WindowMail");
var MailRenderer = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/YouJianBarSkin.exml"
            /*tpa=resource/eui_skins/item/YouJianBarSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            t.prototype.createChildren.call(this),
                this.btnOp.addEventListener(egret.TouchEvent.TOUCH_TAP, this.opbtnClick, this),
                this.scroller.viewport = this.grpContent
        },
        i.dataChanged = function() {
            switch (t.prototype.dataChanged.call(this), this.data.type) {
                default:
                    case 1:
                    this.btnOp.visible = !1;
                break;
                case 3:
                        this.btnOp.label = "战斗回放",
                    this.btnOp.visible = !0;
                    break;
                case 4:
                        this.btnOp.label = "回复",
                    this.btnOp.visible = !0;
                    break;
                case 2:
                        this.btnOp.label = "领取",
                    this.btnOp.visible = !0,
                    this.data.proplist.length > 0 ? this.btnOp.enabled = !0 : this.btnOp.enabled = !1
            }
            if (this._pkgData = {},
                2 == this.data.type ? this.imgNew.visible = this.data.proplist.length > 0 : this.imgNew.visible = !this.data.isread, this.txtTitle.text = this.data.title, 49 == this.data.mailid) this.txtContent.text = this.data.content,
                this._pkgData.uid = this.data.uid,
                this._pkgData.uname = this.data.uname;
            else {
                var e = this.data.content,
                    a = /#/g,
                    i = e.match(a);
                if (i && i.length > 1) {
                    for (var n = Math.floor(.5 * i.length), s = 0; n > s; s++) {
                        var r = 10 > s ? "#0" + (s + 1) + "#" : "#" + (s + 1) + "#",
                            o = this.data.color[s] ? this.data.color[s] : "0b97e8",
                            l = this.data.pkgParam[s] ? this.data.pkgParam[s] : "";
                        if (16 == this.data.mailid && 0 == s) {
                            var h = GlobalFunction.getDateByTimeNum(this.data.pkgParam[s]);
                            l = h.getFullYear().toString() + "年" + (h.getMonth() + 1) + "月" + h.getDate().toString() + "日" + h.getHours() + ":" + h.getMinutes()
                        }
                        if (25 == this.data.mailid && 1 == s) {
                            var c = PartspiecesParser.GetInstance().getItemById(this.data.pkgParam[s]);
                            c && (l = c.name_l)
                        }
                        var d = "<font color='#" + o + "'>" + l + "</font>";
                        e = e.replace(r, d)
                    }
                    this.txtContent.textFlow = (new egret.HtmlTextParser).parser(e)
                } else this.txtContent.text = e
            }
            this.txtTime.text = GlobalFunction.getDateByTimeNum(this.data.time).getFullYear().toString() + "年" + (GlobalFunction.getDateByTimeNum(this.data.time).getMonth() + 1) + "月" + GlobalFunction.getDateByTimeNum(this.data.time).getDate().toString() + "日"
        },
        i.opbtnClick = function(t) {
            switch (this.data.type) {
                case 3:
                    13 == this.data.mailid || 14 == this.data.mailid ? MailManager.getInstance().sendBattleReview(this.data.pkgParam[1]) : (15 == this.data.mailid || 25 == this.data.mailid) && MailManager.getInstance().sendBattleReview(this.data.pkgParam[2]);
                    break;
                case 4:
                    var e = {};
                    e.uid = this.data.uid,
                        e.name = this.data.uname,
                        WindowManager.getInstance().show(WindowManager.windowType.Speak, e);
                    break;
                case 2:
                    var a = Transport.getPkg(ProtocolMgr.ID_DceGetMailProp);
                    a.id = this.data.id,
                        Transport.instance.send(a)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(MailRenderer, "MailRenderer");
var WindowMedal = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/JunGongSkin.exml"
            /*tpa=resource/eui_skins/JunGongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            GuideManager.jungongGuideBool || GuideManager.nextStep(121),
                this.oldData = null,
                this.newData = null,
                this.initConfig();
            var t = Transport.getPkg(ProtocolMgr.ID_DceMedalData);
            Transport.instance.send(t),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                MainUI.instance.setBottomVisible(!1),
                this.initImg(),
                this.initBtn(),
                this.initLabel(),
                this.initComplete()
        },
        i.initImg = function() {
            this.imgArr = [new eui.Image, new eui.Image, new eui.Image, new eui.Image],
                this.pointArr = [{
                        x: -74,
                        y: 350,
                        width: 52,
                        height: 124
                    },
                    {
                        x: 96,
                        y: 350,
                        width: 52,
                        height: 124
                    },
                    {
                        x: 284,
                        y: 350,
                        width: 78,
                        height: 186
                    },
                    {
                        x: 473,
                        y: 350,
                        width: 52,
                        height: 124
                    },
                    {
                        x: 656,
                        y: 350,
                        width: 52,
                        height: 124
                    }
                ];
            for (var t = 0; t < this.imgArr.length; t++) this.imgArr[t].x = this.pointArr[t + 1].x,
                this.imgArr[t].y = this.pointArr[t + 1].y,
                this.group.addChild(this.imgArr[t])
        },
        i.initBtn = function() {
            WindowManager.getInstance().showWaiting(),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeClick, this),
                this.btnUpgrade.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upGradeClick, this),
                this.btnUpgradeAll.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upGradeAllClick, this)
        },
        i.processMsg = function(t) {
            this.oldData || (this.oldData = {},
                    this.oldData.juniorstar = t.juniorstar, this.oldData.seniorstar = t.seniorstar, this.oldData.medal = t.medal),
                this.newData = {},
                this.newData.juniorstar = t.juniorstar,
                this.newData.seniorstar = t.seniorstar,
                this.newData.medal = t.medal,
                this.initComplete()
        },
        i.initLabel = function() {
            this.txtCurrentProperty.text = "",
                this.txtCostRes.text = "",
                this.txtCostCoin.text = "",
                this.txtRes1.text = "",
                this.txtRes2.text = ""
        },
        i.initConfig = function() {
            var t = this;
            this.itemArr || ConfigData.preLoadDats(["decoration"], [DecorationParser],
                function() {
                    t.itemArr = DecorationParser.GetInstance().getDataArr(),
                        t.initComplete()
                })
        },
        i.initComplete = function() {
            if (this.itemArr && this.newData) {
                this.newData.huogong = 0,
                    this.newData.baogong = 0,
                    this.newData.huofang = 0,
                    this.newData.baofang = 0,
                    this.newData.shengming = 0,
                    this.newData.mingzhong = 0,
                    this.newData.shanbi = 0,
                    this.newData.baoji = 0;
                for (var t = 0; t < this.newData.medal; t++) switch (this.itemArr[t].decorationType) {
                    case 1:
                        this.newData.huogong = this.newData.huogong + this.itemArr[t].buffValue;
                        break;
                    case 2:
                        this.newData.baogong = this.newData.baogong + this.itemArr[t].buffValue;
                        break;
                    case 3:
                        this.newData.huofang = this.newData.huofang + this.itemArr[t].buffValue;
                        break;
                    case 4:
                        this.newData.baofang = this.newData.baofang + this.itemArr[t].buffValue;
                        break;
                    case 5:
                        this.newData.shengming = this.newData.shengming + this.itemArr[t].buffValue;
                        break;
                    case 6:
                        this.newData.mingzhong = this.newData.mingzhong + this.itemArr[t].buffValue;
                        break;
                    case 7:
                        this.newData.shanbi = this.newData.shanbi + this.itemArr[t].buffValue;
                        break;
                    case 8:
                        this.newData.baoji = this.newData.baoji + this.itemArr[t].buffValue
                }
                this.oldData.medal == this.newData.medal ? (this.newData.next = this.itemArr[this.newData.medal], this.newData.current = this.itemArr[this.newData.medal - 1] ? this.itemArr[this.newData.medal - 1] : null, this.newData.next2 = this.itemArr[this.newData.medal + 1] ? this.itemArr[this.newData.medal + 1] : null, this.newData.next3 = this.itemArr[this.newData.medal + 2] ? this.itemArr[this.newData.medal + 2] : null, this.refurbish(!1)) : (this.newData.next = this.itemArr[this.newData.medal - 1], this.newData.current = this.itemArr[this.newData.medal - 2] ? this.itemArr[this.newData.medal - 2] : null, this.newData.next2 = this.itemArr[this.newData.medal] ? this.itemArr[this.newData.medal] : null, this.newData.next3 = this.itemArr[this.newData.medal + 1] ? this.itemArr[this.newData.medal + 1] : null, this.refurbish(!0))
            }
        },
        i.refurbish = function(t) {
            if (void 0 === t && (t = !1), WindowManager.getInstance().hideWaiting(), t) this.showMedal();
            else {
                switch (this.txtProperty1.text = this.newData.shengming, this.newData.shengming > 0 ? this.txtProperty1.textColor = 65280 : this.txtProperty1.textColor = 16777215, this.txtProperty2.text = this.newData.baoji / 10 + "%", this.newData.baoji > 0 ? this.txtProperty2.textColor = 65280 : this.txtProperty2.textColor = 16777215, this.txtProperty3.text = this.newData.mingzhong / 10 + "%", this.newData.mingzhong > 0 ? this.txtProperty3.textColor = 65280 : this.txtProperty3.textColor = 16777215, this.txtProperty4.text = this.newData.shanbi / 10 + "%", this.newData.shanbi > 0 ? this.txtProperty4.textColor = 65280 : this.txtProperty4.textColor = 16777215, this.txtProperty5.text = this.newData.huogong, this.newData.huogong > 0 ? this.txtProperty5.textColor = 65280 : this.txtProperty5.textColor = 16777215, this.txtProperty6.text = this.newData.baogong, this.newData.baogong > 0 ? this.txtProperty6.textColor = 65280 : this.txtProperty6.textColor = 16777215, this.txtProperty7.text = this.newData.huofang, this.newData.huofang > 0 ? this.txtProperty7.textColor = 65280 : this.txtProperty7.textColor = 16777215, this.txtProperty8.text = this.newData.baofang, this.newData.baofang > 0 ? this.txtProperty8.textColor = 65280 : this.txtProperty8.textColor = 16777215, this.newData.next.decorationType) {
                    case 1:
                        this.txtCurrentProperty.text = "火炮攻击: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue;
                        break;
                    case 2:
                        this.txtCurrentProperty.text = "爆破攻击: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue;
                        break;
                    case 3:
                        this.txtCurrentProperty.text = "火炮防御: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue;
                        break;
                    case 4:
                        this.txtCurrentProperty.text = "爆破防御: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue;
                        break;
                    case 5:
                        this.txtCurrentProperty.text = "生命: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue;
                        break;
                    case 6:
                        this.txtCurrentProperty.text = "命中: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue / 10 + "%";
                        break;
                    case 7:
                        this.txtCurrentProperty.text = "闪避: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue / 10 + "%";
                        break;
                    case 8:
                        this.txtCurrentProperty.text = "暴击: + ",
                            this.txtCurrentProperty0.text = this.newData.next.buffValue / 10 + "%"
                }
                this.txtCostRes.text = this.newData.next.costStars,
                    this.txtCostCoin.text = this.newData.next.costGold,
                    UserData.getInstance().getRes(TypeDefine.RES.Gold) < this.newData.next.costGold ? this.txtCostCoin.textColor = 16711680 : this.txtCostCoin.textColor = 16777215,
                    this.txtRes1.text = this.newData.juniorstar,
                    this.txtRes2.text = this.newData.seniorstar,
                    1 == this.newData.next.costType ? (this.imgCostResIcon.source = RES.getRes("iconyinxing_png"), this.newData.juniorstar < this.newData.next.costStars ? this.txtCostRes.textColor = 16711680 : this.txtCostRes.textColor = 16777215) : (this.imgCostResIcon.source = RES.getRes("iconjinxing_png"), this.newData.seniorstar < this.newData.next.costStars ? this.txtCostRes.textColor = 16711680 : this.txtCostRes.textColor = 16777215),
                    this.newData.current && (Utils.getImgByUrl("resource/assets/Icon/deciration/" + this.newData.current.icon, this.imgArr[0]), this.imgArr[0].width = 52, this.imgArr[0].height = 124),
                    this.newData.next && (Utils.getImgByUrl("resource/assets/Icon/deciration/" + this.newData.next.icon, this.imgArr[1]), this.imgArr[1].width = 78, this.imgArr[1].height = 186),
                    this.newData.next2 && (Utils.getImgByUrl("resource/assets/Icon/deciration/" + this.newData.next2.icon, this.imgArr[2]), this.imgArr[2].width = 52, this.imgArr[2].height = 124)
            }
        },
        i.showMedal = function() {
            this.newData.next3 && (Utils.getImgByUrl("resource/assets/Icon/deciration/" + this.newData.next3.icon, this.imgArr[3]), this.imgArr[3].width = 52, this.imgArr[3].height = 124),
                this.TweenNum = 0;
            for (var t = [], e = 0; e < this.imgArr.length; e++)
                if (this.pointArr[e]) {
                    this.TweenNum++;
                    var a = egret.Tween.get(this.imgArr[e]);
                    t.push(a)
                }
            for (var i = 0; i < t.length; i++) t[i].to({
                    x: this.pointArr[i].x,
                    y: this.pointArr[i].y,
                    width: this.pointArr[i].width,
                    height: this.pointArr[i].height
                },
                500).call(this.tweenComplete, this)
        },
        i.tweenComplete = function() {
            if (this.TweenNum--, 0 == this.TweenNum) {
                switch (this.group.removeChild(this.imgArr[0]), this.imgArr.shift(), this.imgArr.push(new eui.Image), this.imgArr[this.imgArr.length - 1].x = this.pointArr[this.imgArr.length].x, this.imgArr[this.imgArr.length - 1].y = this.pointArr[this.imgArr.length].y, this.group.addChild(this.imgArr[this.imgArr.length - 1]), this.txtProperty1.text = this.newData.shengming, this.newData.shengming > 0 ? this.txtProperty1.textColor = 65280 : this.txtProperty1.textColor = 16777215, this.txtProperty2.text = this.newData.baoji / 10 + "%", this.newData.baoji > 0 ? this.txtProperty2.textColor = 65280 : this.txtProperty2.textColor = 16777215, this.txtProperty3.text = this.newData.mingzhong / 10 + "%", this.newData.mingzhong > 0 ? this.txtProperty3.textColor = 65280 : this.txtProperty3.textColor = 16777215, this.txtProperty4.text = this.newData.shanbi / 10 + "%", this.newData.shanbi > 0 ? this.txtProperty4.textColor = 65280 : this.txtProperty4.textColor = 16777215, this.txtProperty5.text = this.newData.huogong, this.newData.huogong > 0 ? this.txtProperty5.textColor = 65280 : this.txtProperty5.textColor = 16777215, this.txtProperty6.text = this.newData.baogong, this.newData.baogong > 0 ? this.txtProperty6.textColor = 65280 : this.txtProperty6.textColor = 16777215, this.txtProperty7.text = this.newData.huofang, this.newData.huofang > 0 ? this.txtProperty7.textColor = 65280 : this.txtProperty7.textColor = 16777215, this.txtProperty8.text = this.newData.baofang, this.newData.baofang > 0 ? this.txtProperty8.textColor = 65280 : this.txtProperty8.textColor = 16777215, this.newData.next2.decorationType) {
                    case 1:
                        this.txtCurrentProperty.text = "火炮攻击: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue;
                        break;
                    case 2:
                        this.txtCurrentProperty.text = "爆破攻击: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue;
                        break;
                    case 3:
                        this.txtCurrentProperty.text = "火炮防御: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue;
                        break;
                    case 4:
                        this.txtCurrentProperty.text = "爆破防御: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue;
                        break;
                    case 5:
                        this.txtCurrentProperty.text = "生命: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue;
                        break;
                    case 6:
                        this.txtCurrentProperty.text = "命中: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue / 10 + "%";
                        break;
                    case 7:
                        this.txtCurrentProperty.text = "闪避: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue / 10 + "%";
                        break;
                    case 8:
                        this.txtCurrentProperty.text = "暴击: + ",
                            this.txtCurrentProperty0.text = this.newData.next2.buffValue / 10 + "%"
                }
                this.txtCostRes.text = this.newData.next2.costStars,
                    this.txtCostCoin.text = this.newData.next2.costGold,
                    UserData.getInstance().getRes(TypeDefine.RES.Gold) < this.newData.next2.costGold ? this.txtCostCoin.textColor = 16711680 : this.txtCostCoin.textColor = 16777215,
                    this.txtRes1.text = this.newData.juniorstar,
                    this.txtRes2.text = this.newData.seniorstar,
                    1 == this.newData.next2.costType ? (this.imgCostResIcon.source = RES.getRes("iconyinxing_png"), this.newData.juniorstar < this.newData.next2.costStars ? this.txtCostRes.textColor = 16711680 : this.txtCostRes.textColor = 16777215) : (this.imgCostResIcon.source = RES.getRes("iconjinxing_png"), this.newData.seniorstar < this.newData.next2.costStars ? this.txtCostRes.textColor = 16711680 : this.txtCostRes.textColor = 16777215),
                    this.oldData.medal = this.newData.medal,
                    this.newData = null
            }
        },
        i.allUpdate = function() {
            this.newData && this.newData.current && (Utils.getImgByUrl("resource/assets/Icon/deciration/" + this.newData.current.icon, this.imgArr[0]), this.imgArr[0].width = 52, this.imgArr[0].height = 124),
                this.newData && this.newData.next && (Utils.getImgByUrl("resource/assets/Icon/deciration/" + this.newData.next.icon, this.imgArr[1]), this.imgArr[1].width = 78, this.imgArr[1].height = 186),
                this.newData && this.newData.next2 && (Utils.getImgByUrl("resource/assets/Icon/deciration/" + this.newData.next2.icon, this.imgArr[2]), this.imgArr[2].width = 52, this.imgArr[2].height = 124)
        },
        i.closeClick = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.Medal)
        },
        i.upGradeClick = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGetMedal);
            e.all = 0,
                Transport.instance.send(e),
                122 == GuideManager.step && GuideManager.nextStep()
        },
        i.upGradeAllClick = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceGetMedal);
            e.all = 1,
                Transport.instance.send(e)
        },
        i.clear = function() {
            this.oldData = null,
                this.newData = null,
                MainUI.instance.setBottomVisible(!0)
        },
        e
}(WindowBase);
egret.registerClass(WindowMedal, "WindowMedal");
var WindowMilitary = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/Junxian.exml"
            /*tpa=resource/eui_skins/Junxian.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this.updatePanel()
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnReward.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnReward, this),
                EventManager.instance.addEventListener(EventTypes.EVENT_MILITARY_RANK_UPGRADE, this.updatePanel, this),
                EventManager.instance.addEventListener(EventTypes.EVENT_MILITARY_RANK_REWARD, this.updatePanel, this),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.initCtrls(),
                this.initScvExScroller();
            var t = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype());
            t && (this.SelectRankItem(t.index, !0), this.selectRank(t.index)),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.updatePanel, this)
        },
        i.initCtrls = function() {
            var t = this;
            SUI.addClickEffect(this.btnLeft),
                SUI.addClickEffect(this.btnRight),
                this.btnLeft.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        t.curRankIndex > 1 && (t.SelectRankItem(t.curRankIndex - 1), t.selectRank(t.curRankIndex - 1))
                    },
                    void 0),
                this.btnRight.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        t.curRankIndex < t.rankItemDataArr.length && (t.SelectRankItem(t.curRankIndex + 1), t.selectRank(t.curRankIndex + 1))
                    },
                    void 0),
                this.txtDesc.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        for (var t = Locales.get("zz_military"), e = [], a = 2; 7 >= a; ++a) e.push(Locales.get("panel_Military_desc_" + a)),
                            e.push("\n");
                        var i = e.join("");
                        WindowManager.getInstance().show(WindowManager.windowType.CommonIntroduction, {
                            title: t,
                            content: i
                        })
                    },
                    void 0),
                this.txtMilitaryDesc.text = Locales.get("panel_jianzhang_detail_comment_10"),
                this.txtHonorDesc.text = Locales.get("panel_Military_txt_comment_1"),
                this.txtTitle.text = Locales.get("zz_military_right"),
                this.txtDesc.text = Locales.get("panel_czfl_desc_title"),
                this.txtReach.text = Locales.get("panel_reward_txt_growup_5"),
                this.txtNotReach.text = Locales.get("zz_military_not_reach"),
                this.txtDesc2.text = Locales.get("zz_military_allright")
        },
        i.selectRank = function(t, e) {
            void 0 === e && (e = !1),
                (this.curRankIndex != t || e) && (this.curRankIndex = t, this.updatePanel(), this.btnLeft.visible = this.btnRight.visible = !0, this.curRankIndex == this.rankItemDataArr.length ? this.btnRight.visible = !1 : 1 == this.curRankIndex && (this.btnLeft.visible = !1))
        },
        i.updatePanel = function() {
            var t = MilitaryrankParser.GetInstance().getItemById(this.curRankIndex);
            t.id,
                MilitaryrankParser.GetInstance().getItemByField("id", t.nextrank);
            if (this.txtMilitary.text = t.name_l, this.txtHonor.text = UserData.getInstance().getMilitaryrankhon().toString(), SUI.setTextureAsync(this.imgIcon, Path.GetRankIconUrl(t.index)), t.privilege.length > 0) {
                var e = t.privilege[t.privilege.length - 1],
                    a = MilitaryrightsParser.GetInstance().getItemById(e);
                this.txtDesc1.textFlow = Utils.textFlowByStr(a.rightname_l)
            } else this.txtDesc1.text = "";
            if (this.txtDesc3.text = Locales.get("zz_military_day_reward", t.diamond), UserData.getInstance().getMilitaryranktype() >= t.id) {
                this.imgRes.visible = !0,
                    this.txtRewardNum.visible = !0,
                    this.txtRewardNum.text = t.diamond.toString(),
                    this.txtRewardDesc1.text = Locales.get("zz_military_day_reward2");
                for (var i = !1,
                        n = 0,
                        s = this.rankItemDataArr; n < s.length; n++) {
                    var r = s[n],
                        o = r.userData;
                    if (o.index > t.index && t.diamond != o.diamond) {
                        i = !0,
                            this.txtRewardDesc2.visible = !0;
                        var l = o.name_l,
                            h = Locales.get("panel_Military_txt_comment_22", l, o.diamond.toString());
                        this.txtRewardDesc2.textFlow = Utils.textFlowByStr(h);
                        break
                    }
                }
                i || (this.txtRewardDesc2.visible = !1),
                    this.gpReach.visible = !0,
                    this.gpNotReach.visible = !1,
                    0 == MilitaryManager.GetInstance().pkgData.hasreward ? (this.btnReward.labelDisplay.text = Locales.get("zz_getreward"), t.diamond > 0 ? (this.btnReward.enabled = !0, this.imgRewardTip.visible = !0) : (this.btnReward.enabled = !1, this.imgRewardTip.visible = !1)) : (this.btnReward.enabled = !1, this.btnReward.labelDisplay.text = Locales.get("zz_hasgetreward"), this.imgRewardTip.visible = !1),
                    this.btnReward.myUserData = "reward"
            } else this.txtRewardDesc1.text = Locales.get("zz_needHonor", t.honour),
                this.txtRewardDesc2.text = Locales.get("zz_needGold", t.gold),
                UserData.getInstance().getMilitaryrankhon() >= t.honour && UserData.getInstance().getRes(TypeDefine.RES.Gold) >= t.gold ? (this.imgRewardTip.visible = !0, this.btnReward.enabled = !0) : (this.imgRewardTip.visible = !1, this.btnReward.enabled = !1),
                this.btnReward.labelDisplay.text = Locales.get("zz_upgrade"),
                this.imgRes.visible = !1,
                this.txtRewardNum.visible = !1,
                this.gpReach.visible = !1,
                this.gpNotReach.visible = !0,
                this.btnReward.myUserData = "upgrade"
        },
        i.initScvExScroller = function() {
            this.scvExScroller = new ScrollerEx,
                this.scvExScroller.x = this.scvIcons.x,
                this.scvExScroller.y = this.scvIcons.y,
                this.scvExScroller.width = this.scvIcons.width,
                this.scvExScroller.height = this.scvIcons.height,
                this.scvExScroller.viewport = this.lstIcons,
                this.scvIcons.parent.addChild(this.scvExScroller),
                this.scvIcons.parent.removeChild(this.scvIcons);
            var t = MilitaryrankParser.GetInstance().length;
            this.rankItemDataArr = [];
            for (var e, a = 1; t >= a; ++a) {
                var i = -1;
                e && (i = e.id),
                    e = MilitaryrankParser.GetInstance().getItemById(a);
                var n = {};
                n.lastRankId = i,
                    n.userData = e,
                    n.selected = !1,
                    this.rankItemDataArr.push(n)
            }
            var s = new eui.ArrayCollection(this.rankItemDataArr);
            this.lstIcons.dataProvider = s,
                this.lstIcons.itemRenderer = MilitaryItemRenderer,
                this.lstIcons.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.OnClickRankItem, this)
        },
        i.OnClickRankItem = function(t) {
            var e = this.lstIcons.selectedIndex + 1;
            this.SelectRankItem(e),
                this.selectRank(e)
        },
        i.SelectRankItem = function(t, e) {
            void 0 === e && (e = !1);
            for (var a = 0; a < this.lstIcons.numElements; ++a) {
                var i = this.lstIcons.getElementAt(a);
                i && (a + 1 == t ? i.imgFrame.visible = !0 : i.imgFrame.visible = !1)
            }
            for (var n = 0,
                    s = this.rankItemDataArr; n < s.length; n++) {
                var r = s[n];
                r.userData.index == t ? r.selected = !0 : r.selected = !1
            }
            var o = t - 1,
                l = 110,
                h = this.scvExScroller.getScrolled(),
                c = o * l + 15 * o;
            if (e) {
                var d = this.lstIcons.numElements * (l + 15) - 15;
                d - c < this.scvExScroller.width && (c = d - this.scvExScroller.width),
                    this.scvExScroller.scrollToEx(c, 300)
            } else {
                var g = c - h;
                0 > g ? this.scvExScroller.scrollToEx(h + g, 300) : g + l > this.scvExScroller.width && this.scvExScroller.scrollToEx(h + (g + l - this.scvExScroller.width), 300)
            }
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnReward = function(t) {
            "upgrade" == this.btnReward.myUserData ? RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceMilitaryRankUpgrad) : "reward" == this.btnReward.myUserData && RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceMilitaryRankGetDailyReward)
        },
        i.clear = function() {
            EventManager.instance.removeEventListenerByBindObject(this)
        },
        e
}(WindowBase);
egret.registerClass(WindowMilitary, "WindowMilitary");
var WindowMission = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/RenWuSkin.exml"
            /*tpa=resource/eui_skins/RenWuSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            e.instance = this,
                this.particleTargetList = [],
                ConfigData.preLoadList(["everydayTaskReward", "everydayTaskScoreGift", "giftData"],
                    function() {
                        t.initUI()
                    }),
                MainUI.instance.changeTopMode(topUIMode.simple),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.TASK_UPDATE, this.updateMission, this)
        },
        i.updateMission = function() {
            for (var t = ConfigData.getAllData("everydayTaskReward"), e = ConfigData.getAllData("everydayTaskScoreGift"), a = 0, i = 0; i < this.particleTargetList.length; i++) this.particleTargetList[i].destroy();
            for (i = 1; 5 > i; i++) {
                var n = Number(e[i].scorelevel);
                this["txtPoints" + i] = n.toString();
                var s = this["btnBox" + i];
                if (s.getBool = !1, MissionData.totalscore < n ? a = MissionData.totalscore / n * i : (s.getBool = !0, a = i), s.name = i - 1, s.id = e[i].giftid, MissionData.hasgetscoregiftlist && MissionData.hasgetscoregiftlist[i - 1]) {
                    s.enabled = !1,
                        s.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.rewardHandler, this);
                    var r = this["bg" + i];
                    r.source = RES.getRes(Path.resHeadUrl + "missionBox0_png")
                } else a == i && this.particleTargetList.push(new ParticleDisplayObj(s, ParticleType.Recharge, ShapeType.None)),
                    s.addEventListener(egret.TouchEvent.TOUCH_TAP, this.rewardHandler, this)
            }
            this.txtCurrentPoints.text = MissionData.totalscore.toString(),
                2 > a ? this.bar.value = 38 * a / 2 : this.bar.value = 35 * (a - 1),
                this.vessel.removeChildren();
            var o = [],
                l = [];
            for (var h in t)
                if ("length" != h && UserData.getInstance()._level >= Number(t[h].levellimit)) {
                    var c = MissionData.missionList[Number(t[h].id) - 1];
                    c.hasgetreward ? o.push(t[h]) : c.finishedtimes >= c.maxtimes ? l.push(t[h]) : o.unshift(t[h])
                }
            for (var i = 0; i < l.length; i++) o.unshift(l[i]);
            for (i = 0; i < o.length; i++) {
                var d = new MissionItem(o[i]);
                this.vessel.addChild(d),
                    d.y = 130 * i
            }
        },
        i.rewardHandler = function(t) {
            var e = t.currentTarget;
            WindowManager.getInstance().show(WindowManager.windowType.taskReward, {
                id: e.id,
                index: e.name,
                getBool: e.getBool
            })
        },
        i.initUI = function() {
            var t = this;
            MainUI.instance.bottomUI.lastBtn = null,
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                    function() {
                        e.instance = null,
                            GameEventDispatcher.getInstance().removeEventListener(GameEvent.TASK_UPDATE, t.updateMission, t)
                    },
                    this),
                this.btnAchievement.addEventListener(egret.TouchEvent.TOUCH_TAP, this.achievementHandler, this),
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this),
                this.btnMission.selected = !0,
                this.updateMission()
        },
        i.closeHandler = function(t) {
            e.instance = null,
                this.close()
        },
        i.achievementHandler = function(t) {
            Toast.launch(Locales.get("panel_shop_txt_windword_8"))
        },
        e
}(WindowBase);
egret.registerClass(WindowMission, "WindowMission");
var MissionItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/RenWu_1_Skin.exml"
            /*tpa=resource/eui_skins/item/RenWu_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.txtName.text = this.iData.task_l,
                Utils.getImgByUrl(Path.missionUrl + this.iData.pictures, this.imgIcon),
                Utils.getImgByUrl(Path.item_sURL + this.iData.pictures_small, this.giftImg),
                this.txtRewardPoints.text = this.iData.socre;
            var t = ConfigData.getAllData("giftData");
            for (var e in t)
                if (Number(t[e].id) == Number(this.iData.giftid)) {
                    t = t[e];
                    break
                }
            this.txtItemNum.text = "x" + t.count;
            var a = MissionData.missionList[Number(this.iData.id) - 1],
                i = a ? a.finishedtimes : 0,
                n = a ? a.maxtimes : this.iData.count;
            this.txtCompleteRate.text = Locales.get("panel_paper_txt_show_comment_jindu") + i + "/" + n,
                this.goBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.rewardBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.rewardHandler, this),
                a ? (a.finishedtimes >= a.maxtimes ? (this.rewardBtn.visible = !0, this.goBtn.visible = !1) : this.rewardBtn.visible = !1, a.hasgetreward ? (this.Taken.visible = !0, this.rewardBtn.visible = this.goBtn.visible = !1, this.txtCompleteRate.text = "") : this.Taken.visible = !1) : (this.Taken.visible = !1, this.rewardBtn.visible = !1)
        },
        i.rewardHandler = function(t) {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceGetTaskReward, {
                    index: Number(this.iData.id),
                    type: 0
                }),
                Plantform.getInstanceOf().mission(this.iData.id)
        },
        i.clickHandler = function(t) {
            WindowManager.getInstance().hideAll(),
                1 == this.iData.id ? MainWorldManager.instance.openPVESpecialWindow() : 2 == this.iData.id ? MainUI.instance.bottomUI.showPveByForce() : 3 == this.iData.id ? WindowManager.getInstance().show(WindowManager.windowType.ZhenbaPrecious) : 4 == this.iData.id ? UserData.getInstance().getPlayerLevel() < 15 ? Toast.launch(Locales.get("ui_main_function_scientific", 15)) : WindowManager.getInstance().show(WindowManager.windowType.PVP) : 5 == this.iData.id ? (RequestManager.GetInstance().enterCampaign(3, 0), WindowManager.getInstance().show(WindowManager.windowType.ZhenbaEctype)) : 6 == this.iData.id ? (RequestManager.GetInstance().enterCampaign(3, 0), WindowManager.getInstance().show(WindowManager.windowType.ZhenbaEctype, {
                    auto: !0,
                    index: 2
                })) : 7 == this.iData.id ? WindowManager.getInstance().show(WindowManager.windowType.DefenseOil) : 8 == this.iData.id ? GuildManager.getInstance().showGuildDonate() : 9 == this.iData.id ? WindowManager.getInstance().show(WindowManager.windowType.OilRefining) : 10 == this.iData.id ? WindowManager.getInstance().show(WindowManager.windowType.ShipManager) : 11 == this.iData.id ? RequestManager.GetInstance().enterCampBattle() : 12 == this.iData.id || 13 == this.iData.id || (14 == this.iData.id ? WindowManager.getInstance().show(WindowManager.windowType.QiJvTou) : 15 == this.iData.id || 16 == this.iData.id || (17 == this.iData.id ? WindowManager.getInstance().show(WindowManager.windowType.tansuo) : 18 == this.iData.id && FriendManager.getInstance().ShowFriendPanel()))
        },
        e
}(eui.Component);
egret.registerClass(MissionItem, "MissionItem");
var WindowMuBiaoAct = function(t) {
    function e() {
        t.call(this, !1),
            this.currLingJiang = 1,
            this.day1DataList = [],
            this.day2DataList = [],
            this.day3DataList = [],
            this.rewardBtn1State = !0,
            this.rewardBtn2State = !0,
            this.rewardBtn3State = !0,
            this.timeGap = 864e5,
            this.skinName = "resource/eui_skins/HuoDong_tab_Skin.exml"
            /*tpa=resource/eui_skins/HuoDong_tab_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.day1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.day2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.day3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnTakeReward.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.clear = function() {
            this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.day1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.day2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.day3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnTakeReward.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    this.rewardBtn1State = !0,
                        this.rewardBtn2State = !0,
                        this.rewardBtn3State = !0,
                        MainUI.instance.setBottomVisible(!0),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        WindowManager.getInstance().hide(WindowManager.windowType.mubiaoAct);
                    break;
                case this.day1:
                    this.currLingJiang = 1,
                        this.setDay1Page();
                    break;
                case this.day2:
                    this.currLingJiang = 2,
                        this.setDay2Page();
                    break;
                case this.day3:
                    this.currLingJiang = 3,
                        this.setDay3Page();
                    break;
                case this.btnTakeReward:
                    this.sendLingJiang(this.currLingJiang)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("giftData"),
                ConfigData.preLoadDats(e, [GiftdataParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode["null"]),
                MainUI.instance.setBottomVisible(!1),
                SUI.setTextureAsync(this.imgSkip, Path.uiUrl + "Activity/Activity_fengetiao.png"),
                SUI.setTextureAsync(this.imgBg, Path.backGroundImageUrl + "Bg_huodong.jpg"),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgTitle, Path.uiUrl + "Activity/Title_SanRiMuBiao.png"),
                SUI.setTextureAsync(this.imgShow, Path.uiUrl + "Tutorial/tutorialNPC.png"),
                this.reward1.imgPieceFlag.visible = !1,
                this.reward2.imgPieceFlag.visible = !1,
                this.reward3.imgPieceFlag.visible = !1,
                this.scroller.viewport = this.list;
            for (var t = ActivityManager.instance.activityData.rank_giftlist,
                    e = 0; e < t.length; e++) 1 == t[e] ? this.rewardBtn1State = !1 : 2 == t[e] ? this.rewardBtn2State = !1 : 3 == t[e] && (this.rewardBtn3State = !1);
            this.sendMuBiaoActData()
        },
        i.setDay1Page = function() {
            this.day1.currentState = "down",
                this.day2.currentState = "up",
                this.day3.currentState = "up";
            var t = this.getDay1List();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = playerRankListItem,
                this.txtTime.text = "时间: " + Utils.getDateByNum(this.day1StartTime, timeType.FORMATDATE) + " - " + Utils.getDateByNum(this.day1EndTime, timeType.FORMATDATE),
                this.txtDesc.textFlow = (new egret.HtmlTextParser).parser("<font>说明: 第1日进入等级排行,可获得巅峰奖励,奖励将发放到领奖中心,</font>\n<font color='#00ff00'>排名奖励以开服首日结束时为准。</font>"),
                this.txtRewardCondition.text = "等级达到" + this.day1UnautoData.condition + "可领取奖励",
                UserData.getInstance()._level >= this.day1UnautoData.condition ? (this.txtRewardCondition.textColor = 65280, this.rewardBtn1State ? this.btnTakeReward.label = "领取奖励" : this.btnTakeReward.label = "已领取") : (this.txtRewardCondition.textColor = 16711680, this.btnTakeReward.label = "领取奖励"),
                this.setRewardItemData(this.day1UnautoData.items),
                this.isClose.visible = this.isActEnd(this.day1StartTime, this.day1EndTime)
        },
        i.getDay1List = function() {
            return this.day1DataList.sort(function(t, e) {
                    return t.rank - e.rank
                }),
                this.day1DataList
        },
        i.setDay2Page = function() {
            this.day1.currentState = "up",
                this.day2.currentState = "down",
                this.day3.currentState = "up";
            var t = this.getDay2List();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = playerRankListItem,
                this.txtTime.text = "时间: " + Utils.getDateByNum(this.day2StartTime, timeType.FORMATDATE) + " - " + Utils.getDateByNum(this.day2EndTime, timeType.FORMATDATE),
                this.txtDesc.textFlow = (new egret.HtmlTextParser).parser("<font>说明: 第2日进入战斗力排行,可获得巅峰奖励,奖励将发放到领奖中心,</font>\n<font color='#00ff00'>排名奖励以开服第二天结束时为准。</font>"),
                this.txtRewardCondition.text = "战斗力达到" + this.day2UnautoData.condition + "可领取奖励",
                UserData.getInstance().getPower() >= this.day2UnautoData.condition ? (this.txtRewardCondition.textColor = 65280, this.rewardBtn2State ? this.btnTakeReward.label = "领取奖励" : this.btnTakeReward.label = "已领取") : (this.txtRewardCondition.textColor = 16711680, this.btnTakeReward.label = "领取奖励"),
                this.setRewardItemData(this.day2UnautoData.items),
                this.isClose.visible = this.isActEnd(this.day2StartTime, this.day2EndTime)
        },
        i.getDay2List = function() {
            return this.day2DataList.sort(function(t, e) {
                    return t.rank - e.rank
                }),
                this.day2DataList
        },
        i.setDay3Page = function() {
            this.day1.currentState = "up",
                this.day2.currentState = "up",
                this.day3.currentState = "down";
            var t = this.getDay3List();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = guildRankListItem,
                this.txtTime.text = "时间: " + Utils.getDateByNum(this.day3StartTime, timeType.FORMATDATE) + " - " + Utils.getDateByNum(this.day3EndTime, timeType.FORMATDATE),
                this.txtDesc.textFlow = (new egret.HtmlTextParser).parser("<font>说明: 第3日进入军团排行,可获得巅峰奖励,奖励将发放到领奖中心,</font>\n<font color='#00ff00'>排名奖励以开服第三天结束时为准。</font>"),
                this.txtRewardCondition.text = "加入军团可领取奖励",
                null == GuildManager.getInstance().id || "" == GuildManager.getInstance().id ? (this.txtRewardCondition.textColor = 16711680, this.btnTakeReward.label = "领取奖励") : (this.txtRewardCondition.textColor = 65280, this.rewardBtn3State ? this.btnTakeReward.label = "领取奖励" : this.btnTakeReward.label = "已领取"),
                this.setRewardItemData(this.day3UnautoData.items),
                this.isClose.visible = this.isActEnd(this.day3StartTime, this.day3EndTime)
        },
        i.getDay3List = function() {
            return this.day3DataList.sort(function(t, e) {
                    return t.rank - e.rank
                }),
                this.day3DataList
        },
        i.sendMuBiaoActData = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceActivityWebData);
            t.type = 19,
                Transport.instance.send(t)
        },
        i.sendLingJiang = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceActivity);
            e.id = 19,
                e.type = t,
                Transport.instance.send(e)
        },
        i.setData = function(t) {
            this._data = t.actlist[0],
                console.log(" === id === " + this._data.id),
                console.log(" === desc === " + this._data.desc),
                console.log(" === state === " + this._data.state),
                console.log(" === type === " + this._data.type),
                console.log(" === start_time === " + 1e3 * this._data.start_time.time),
                console.log(" === end_time === " + 1e3 * this._data.end_time.time),
                console.log(" === show_start === " + 1e3 * this._data.show_start.time),
                console.log(" === show_endL === " + 1e3 * this._data.show_endL.time),
                this.day1StartTime = 1e3 * this._data.start_time.time,
                this.day1EndTime = this.day1StartTime + this.timeGap,
                this.day2StartTime = this.day1EndTime,
                this.day2EndTime = this.day2StartTime + this.timeGap,
                this.day3StartTime = this.day2EndTime,
                this.day3EndTime = this.day3StartTime + this.timeGap,
                console.log(" === day1StartTime === " + this.day1StartTime),
                console.log(" === day1EndTime === " + this.day1EndTime),
                console.log(" === day2StartTime === " + this.day2StartTime),
                console.log(" === day2EndTime === " + this.day2EndTime),
                console.log(" === day3StartTime === " + this.day3StartTime),
                console.log(" === day3EndTime === " + this.day3EndTime);
            for (var e = 0; e < this._data.itemlist.length; e++) {
                for (var a = this._data.itemlist[e], i = a.params, n = void 0, s = void 0, r = void 0, o = void 0, l = 0; l < i.length; l++) 0 == l ? n = i[l] : 1 == l ? s = i[l] : 2 == l ? r = i[l] : 3 == l && (o = i[3]);
                if (1 == n)
                    if (r > 0) this.day1UnautoData = {
                        childType: n,
                        condition: r,
                        items: a.items
                    };
                    else {
                        var h = {
                            rank: s,
                            playerdata: a.playerdata,
                            items: a.items
                        };
                        this.day1DataList.push(h)
                    }
                else if (2 == n)
                    if (r > 0) this.day2UnautoData = {
                        childType: n,
                        condition: r,
                        items: a.items
                    };
                    else {
                        var h = {
                            rank: s,
                            playerdata: a.playerdata,
                            items: a.items
                        };
                        this.day2DataList.push(h)
                    }
                else if (3 == n)
                    if (r > 0) this.day3UnautoData = {
                        childType: n,
                        condition: r,
                        items: a.items
                    };
                    else {
                        var c = !1;
                        if (this.day3DataList)
                            for (var d = 0; d < this.day3DataList.length; d++)
                                if (s == this.day3DataList[d].rank) {
                                    1 == o ? this.day3DataList[d].leaderItems = a.items : 0 == o && (this.day3DataList[d].items = a.items),
                                        c = !0;
                                    break
                                }
                        if (!c)
                            if (1 == o) {
                                var h = {
                                    guild_chief_name: a.guild_chief_name,
                                    rank: s,
                                    guilddata: a.guilddata,
                                    leaderItems: a.items,
                                    items: null
                                };
                                this.day3DataList.push(h)
                            } else if (0 == o) {
                            var h = {
                                guild_chief_name: a.guild_chief_name,
                                rank: s,
                                guilddata: a.guilddata,
                                leaderItems: null,
                                items: a.items
                            };
                            this.day3DataList.push(h)
                        }
                    }
            }
            this.setDay1Page()
        },
        i.setRewardItemData = function(t) {
            3 == t.length ? (this.reward1.visible = !0, this.reward2.visible = !0, this.reward3.visible = !0) : 2 == t.length ? (this.reward1.visible = !0, this.reward2.visible = !0, this.reward3.visible = !1) : 1 == t.length ? (this.reward1.visible = !0, this.reward2.visible = !1, this.reward3.visible = !1) : 0 == t.length && (this.reward1.visible = !1, this.reward2.visible = !1, this.reward3.visible = !1);
            for (var e = 0; e < t.length; e++) {
                var a = GiftdataParser.GetInstance().getItemById(t[e].id),
                    i = GlobalFunction.getDropDataByTypeAndId(a.type, a.item, a.count);
                0 == e ? (SUI.setTextureAsync(this.reward1.imgBg, QualitySystem.getItemSmallBack(i.quality)), SUI.setTextureAsync(this.reward1.imgIcon, i.icon), this.reward1.imgPieceFlag.visible = !1, this.reward1.txtName.text = i.name, void 0 == i.count ? this.reward1.txtNum.text = "" : this.reward1.txtNum.text = i.count + "", this.reward1.txtName.textColor = QualitySystem.getColorByQuality(i.quality), this.reward1.txtNum.textColor = QualitySystem.getColorByQuality(i.quality)) : 1 == e ? (SUI.setTextureAsync(this.reward2.imgBg, QualitySystem.getItemSmallBack(i.quality)), SUI.setTextureAsync(this.reward2.imgIcon, i.icon), this.reward2.imgPieceFlag.visible = !1, this.reward2.txtName.text = i.name, void 0 == i.count ? this.reward2.txtNum.text = "" : this.reward2.txtNum.text = i.count + "", this.reward2.txtName.textColor = QualitySystem.getColorByQuality(i.quality), this.reward2.txtNum.textColor = QualitySystem.getColorByQuality(i.quality)) : 2 == e && (SUI.setTextureAsync(this.reward3.imgBg, QualitySystem.getItemSmallBack(i.quality)), SUI.setTextureAsync(this.reward3.imgIcon, i.icon), this.reward3.imgPieceFlag.visible = !1, this.reward3.txtName.text = i.name, void 0 == i.count ? this.reward3.txtNum.text = "" : this.reward3.txtNum.text = i.count + "", this.reward3.txtName.textColor = QualitySystem.getColorByQuality(i.quality), this.reward3.txtNum.textColor = QualitySystem.getColorByQuality(i.quality))
            }
        },
        i.isActEnd = function(t, e) {
            var a = new Date;
            return a.valueOf() >= t && a.valueOf() <= e ? !1 : a.valueOf() < t ? !1 : a.valueOf() > e ? !0 : void 0
        },
        i.isTakeReward = function(t, e) {
            var a = new Date;
            return a.valueOf() >= t && a.valueOf() <= e ? !0 : !1
        },
        i.setRewardBtnState = function() {
            1 == this.currLingJiang ? this.rewardBtn1State = !1 : 2 == this.currLingJiang ? this.rewardBtn2State = !1 : 3 == this.currLingJiang && (this.rewardBtn3State = !1),
                this.btnTakeReward.label = "已领取"
        },
        e
}(WindowBase);
egret.registerClass(WindowMuBiaoAct, "WindowMuBiaoAct");
var playerRankListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/HuoDong_Bar_paihang_Skin.exml"
            /*tpa=resource/eui_skins/item/HuoDong_Bar_paihang_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data && (SUI.setTextureAsync(this.imgBg, Path.uiUrl + "Activity/Bar_huodong_2.jpg"), this.txtRanking.text = "第" + this.data.rank + "名", this.data.rank < 4 ? (this.txtRanking.visible = !1, this.imgRanking.visible = !0, SUI.setTextureAsync(this.imgRanking, Path.uiUrl + "RankingList/RankingList_" + this.data.rank + ".png")) : (this.txtRanking.visible = !0, this.imgRanking.visible = !1), this.setRewardItemData(this.data.items), this.data.playerdata ? (null == this.data.playerdata.level || void 0 == this.data.playerdata.level ? this.txtLevel.text = "" : this.txtLevel.text = this.data.playerdata.level + "级", null == this.data.playerdata.name || void 0 == this.data.playerdata.name ? this.txtName.text = "" : this.txtName.text = this.data.playerdata.name, null == this.data.playerdata.power || void 0 == this.data.playerdata.power ? this.txtBattlePoint.text = "" : this.txtBattlePoint.text = "战斗力:" + this.data.playerdata.power, null == this.data.playerdata.camp || void 0 == this.data.playerdata.camp ? (this.imgHead.visible = !1, this.imgCampBg.visible = !1) : (this.imgHead.visible = !0, this.imgCampBg.visible = !0, SUI.setTextureAsync(this.imgHead, Path.headPicURL + "Picture-" + this.data.playerdata.camp + "-" + this.data.playerdata.head % 100 + ".png"), this.imgCampBg.source = "RankingList_headBG_" + this.data.playerdata.camp + "_png")) : (this.txtLevel.text = "", this.txtName.text = "", this.txtBattlePoint.text = "", this.imgRanking.visible = !1, this.imgHead.visible = !1, this.imgCampBg.visible = !1))
        },
        i.setRewardItemData = function(t) {
            if (null == t) return this.reward1.visible = !1,
                this.reward2.visible = !1,
                void(this.reward3.visible = !1);
            3 == t.length ? (this.reward1.visible = !0, this.reward2.visible = !0, this.reward3.visible = !0) : 2 == t.length ? (this.reward1.visible = !0, this.reward2.visible = !0, this.reward3.visible = !1) : 1 == t.length ? (this.reward1.visible = !0, this.reward2.visible = !1, this.reward3.visible = !1) : 0 == t.length && (this.reward1.visible = !1, this.reward2.visible = !1, this.reward3.visible = !1);
            for (var e = 0; e < t.length; e++) {
                var a = GiftdataParser.GetInstance().getItemById(t[e].id),
                    i = GlobalFunction.getDropDataByTypeAndId(a.type, a.item, a.count);
                0 == e ? (SUI.setTextureAsync(this.reward1.imgBg, QualitySystem.getItemSmallBack(i.quality)), SUI.setTextureAsync(this.reward1.imgIcon, i.icon), this.reward1.imgPieceFlag.visible = !1, this.reward1.txtName.text = i.name, void 0 == i.count ? this.reward1.txtNum.text = "" : this.reward1.txtNum.text = i.count + "", this.reward1.txtName.textColor = QualitySystem.getColorByQuality(i.quality), this.reward1.txtNum.textColor = QualitySystem.getColorByQuality(i.quality)) : 1 == e ? (SUI.setTextureAsync(this.reward2.imgBg, QualitySystem.getItemSmallBack(i.quality)), SUI.setTextureAsync(this.reward2.imgIcon, i.icon), this.reward2.imgPieceFlag.visible = !1, this.reward2.txtName.text = i.name, void 0 == i.count ? this.reward2.txtNum.text = "" : this.reward2.txtNum.text = i.count + "", this.reward2.txtName.textColor = QualitySystem.getColorByQuality(i.quality), this.reward2.txtNum.textColor = QualitySystem.getColorByQuality(i.quality)) : 2 == e && (SUI.setTextureAsync(this.reward3.imgBg, QualitySystem.getItemSmallBack(i.quality)), SUI.setTextureAsync(this.reward3.imgIcon, i.icon), this.reward3.imgPieceFlag.visible = !1, this.reward3.txtName.text = i.name, void 0 == i.count ? this.reward3.txtNum.text = "" : this.reward3.txtNum.text = i.count + "", this.reward3.txtName.textColor = QualitySystem.getColorByQuality(i.quality), this.reward3.txtNum.textColor = QualitySystem.getColorByQuality(i.quality))
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(playerRankListItem, "playerRankListItem");
var guildRankListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/HuoDong_Bar_paihang1_Skin.exml"
            /*tpa=resource/eui_skins/item/HuoDong_Bar_paihang1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            t.prototype.dataChanged.call(this),
                this.data && (SUI.setTextureAsync(this.imgBg, Path.uiUrl + "Activity/Bar_huodong_2.jpg"), this.txtRanking.text = "第" + this.data.rank + "名", this.data.rank < 4 ? (this.txtRanking.visible = !1, this.imgRanking.visible = !0, SUI.setTextureAsync(this.imgRanking, Path.uiUrl + "RankingList/RankingList_" + this.data.rank + ".png")) : (this.txtRanking.visible = !0, this.imgRanking.visible = !1), this.setRewardItemData(this.data.items, this.reward1), this.setRewardItemData(this.data.leaderItems, this.reward3), this.data.guilddata ? (null == this.data.guilddata.level || void 0 == this.data.guilddata.level ? this.txtGuildLevel.text = "" : this.txtGuildLevel.text = this.data.guilddata.level + "级", null == this.data.guilddata.name || void 0 == this.data.guilddata.name ? this.txtGuildName.text = "" : this.txtGuildName.text = this.data.guilddata.name, null == this.data.guild_chief_name || void 0 == this.data.guild_chief_name ? this.txtCommander.text = "" : this.txtCommander.text = "司令:" + this.data.guild_chief_name, null == this.data.guilddata.medal || void 0 == this.data.guilddata.medal ? this.imgGuildIcon.visible = !1 : (this.imgGuildIcon.visible = !0, SUI.setTextureAsync(this.imgGuildIcon, Path.guildUrl + "badge_B_" + this.data.guilddata.medal + ".png")), null == this.data.guilddata.camp || void 0 == this.data.guilddata.camp ? this.imgCampBg.visible = !1 : (this.imgCampBg.visible = !0, this.imgCampBg.source = "RankingList_headBG_" + this.data.guilddata.camp + "_png")) : (this.txtGuildLevel.text = "", this.txtGuildName.text = "", this.txtCommander.text = "", this.imgRanking.visible = !1, this.imgCampBg.visible = !1, this.imgGuildIcon.visible = !1))
        },
        i.setRewardItemData = function(t, e) {
            if (null == t) return void(e.visible = !1);
            1 == t.length ? e.visible = !0 : 0 == t.length && (e.visible = !1);
            for (var a = 0; a < t.length; a++) {
                var i = GiftdataParser.GetInstance().getItemById(t[a].id),
                    n = GlobalFunction.getDropDataByTypeAndId(i.type, i.item, i.count);
                0 == a && (SUI.setTextureAsync(e.imgBg, QualitySystem.getItemSmallBack(n.quality)), SUI.setTextureAsync(e.imgIcon, n.icon), e.imgPieceFlag.visible = !1, e.txtName.text = n.name, void 0 == n.count ? e.txtNum.text = "" : e.txtNum.text = n.count + "", e.txtName.textColor = QualitySystem.getColorByQuality(n.quality), e.txtNum.textColor = QualitySystem.getColorByQuality(n.quality))
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(guildRankListItem, "guildRankListItem");
var WindowNameChange = function(t) {
    function e() {
        t.call(this, !0),
            this.isLoadOK = !1,
            this.operateType = -1,
            this.skinName = "resource/eui_skins/juesegengmingSkin.exml"
            /*tpa=resource/eui_skins/juesegengmingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.isLoadOK || (this.isLoadOK = !0, this._data && this.setData(this._data))
        },
        i.setData = function(t) {
            if (this.operateType = t.type, this._data = t, this.isLoadOK) {
                this.isLoadOK = !0;
                var e;
                0 == t.type ? (this.titleTxt.text = "角色更名", this.editLable.text = "", this.editLable.prompt = "请输入新的角色名", this.infoTxt.textFlow = (new egret.HtmlTextParser).parser("<font size=22 >使用<font color='#ff0000'>一张角色更名卡</font><font color='#ffffff'>或</font><font color='#ff0000'>100钻石</font><font>可更改角色名，优先使用</font><font color='#ff0000'>角色更名卡</font>。</font>"), this.cardImg.source = "juesexinxi_gengmingkajuese_png", e = ItemsManager.getInstance().getItemById(1145), this.itemCount = e ? e.count : 0, this.cardNumTxt.text = this.itemCount + "") : 1 == t.type ? (this.shipID = t.shipId, this.titleTxt.text = "战舰更名", this.editLable.text = t.shipName, this.oldNameStr = t.shipName, this.editLable.prompt = "给个默认的名字", this.infoTxt.textFlow = (new egret.HtmlTextParser).parser("<font size=22 >使用<font color='#ff0000'>一张战舰更名卡</font><font color='#ffffff'>或</font><font color='#ff0000'>100钻石</font><font>可更改战舰名，优先使用</font><font color='#ff0000'>战舰更名卡</font>。</font>"), this.cardImg.source = "juesexinxi_gengmingkazhnjian_png", e = ItemsManager.getInstance().getItemById(1011), this.itemCount = e ? e.count : 0, this.cardNumTxt.text = this.itemCount + "") : this.isLoadOK = !1,
                    this.editLable.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this),
                    this.cancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeBtnClickHandler, this),
                    this.okBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.okBtnClickHandler, this),
                    this.randomBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.randomBtnClickHandler, this),
                    this.okBtn.enabled = !1
            }
        },
        i.closeBtnClickHandler = function(t) {
            this.destroy()
        },
        i.okBtnClickHandler = function(t) {
            if (this.editLable.text.length > 8) return void Toast.launch("名字过长");
            if (this.editLable.text.indexOf("*") >= 0) return void Toast.launch("含有非法字符");
            if (0 == this.operateType) {
                var e = Transport.getPkg(ProtocolMgr.ID_DceRenameRole);
                e.name = this.editLable.text,
                    Transport.instance.send(e)
            } else if (1 == this.operateType) {
                var e = Transport.getPkg(ProtocolMgr.ID_DceRenameShip);
                e.shipid = this.shipID,
                    e.name = this.editLable.text,
                    Transport.instance.send(e)
            }
        },
        i.randomBtnClickHandler = function(t) {
            var e, a = this;
            0 == this.operateType ? e = new NameRandomTool(0, this.editLable.text, this.editLable) : 1 == this.operateType && (e = new NameRandomTool(1, this.editLable.text, this.editLable, -1, this._data)),
                egret.setTimeout(function() {
                        a.okBtn.enabled = a.editLable.text != a.oldNameStr && (a.itemCount > 0 || UserData.getInstance().getRes(TypeDefine.RES.Diamond) >= 100)
                    },
                    this, 100)
        },
        i.editLabelHandler = function(t) {
            var e = Utils.filterStr(this.editLable.text);
            this.editLable.text = e[0],
                this.okBtn.enabled = this.editLable.text != this.oldNameStr && (this.itemCount > 0 || UserData.getInstance().getRes(TypeDefine.RES.Diamond) >= 100)
        },
        i.clear = function() {
            this.isLoadOK = !1,
                this.operateType = -1
        },
        e
}(WindowBase);
egret.registerClass(WindowNameChange, "WindowNameChange");
var WindowOilRefining = function(t) {
    function e() {
        t.call(this, !0),
            this.curBuyNum = 1,
            this.curCostMoney = -1,
            this.curGetOil = 25,
            this.skinName = "resource/eui_skins/goumaiyuanyou.exml"
            /*tpa=resource/eui_skins/goumaiyuanyou.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            this.titleTxt.text = "购买原油",
                this.infoTxt0.text = "",
                this.infoTxt1.text = "VIP等级越高，可购买次数越多，每日0点重置该次数。",
                this.infoTxt2.text = "剩余次数：",
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.cancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                this.buyBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClickHandler, this),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.updateUserInfo, this),
                BuyOilData.getInstance().getData(function() {
                    t.update()
                })
        },
        i.update = function() {
            var t = BuyOilData.getInstance().dataList;
            if (t) {
                this.curBuyNum = UserData.getInstance().getBuyOilCount() + 1;
                for (var e in t) t[e].count == this.curBuyNum && (this.curCostMoney = t[e].costCash);
                this.infoTxt0.textFlow = (new egret.HtmlTextParser).parser("消耗<font color='#00ff00'>" + this.curCostMoney + "</font>钻石购买<font color='#00ff00'>25</font>点原油");
                var a = VipParser.GetInstance().getItemById(UserData.getInstance()._vip).dayBuyOilCnt - this.curBuyNum + 1;
                a > 0 ? this.infoTxt2.textFlow = (new egret.HtmlTextParser).parser("剩余购买次数：<font color='#00ff00'>" + a + "</font>") : this.infoTxt2.textFlow = (new egret.HtmlTextParser).parser("<font color='#ff0000'>剩余购买次数：0</font>"),
                    HomeUI.instance.setOliRedPointState()
            }
        },
        i.updateUserInfo = function() {
            this.update()
        },
        i.btnClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.closeBtn:
                    WindowManager.getInstance().hide(WindowManager.windowType.OilRefining);
                    break;
                case this.cancelBtn:
                    WindowManager.getInstance().hide(WindowManager.windowType.OilRefining);
                    break;
                case this.buyBtn:
                    if (UserData.getInstance().getRes(TypeDefine.RES.Diamond) < this.curCostMoney) return Toast.launch(Locales.get("ui_campBattle_buyError3")),
                        void WindowManager.getInstance().show(WindowManager.windowType.Recharge);
                    var e = Transport.getPkg(ProtocolMgr.ID_DceBuyOil);
                    Transport.instance.send(e)
            }
        },
        i.clear = function() {
            UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.updateUserInfo, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowOilRefining, "WindowOilRefining");
var OperateType;
!
function(t) {
    t[t.captain = 0] = "captain",
        t[t.ship = 1] = "ship"
}(OperateType || (OperateType = {}));
var OperateItemType;
!
function(t) {
    t[t.captainUpdate = 0] = "captainUpdate",
        t[t.captainRemoudle = 1] = "captainRemoudle",
        t[t.shipUpdate = 2] = "shipUpdate",
        t[t.shipRemoudle = 3] = "shipRemoudle"
}(OperateItemType || (OperateItemType = {}));
var WindowOperatePanel = function(t) {
    function e() {
        t.call(this, !1),
            this.chooseTrainCNum = 1,
            this.saveBool = !1,
            this.skillList = ["normalSkill", "activeSkill", "leaderSkill"],
            this.skinName = "resource/eui_skins/zhanjianyangcheng.exml"
            /*tpa=resource/eui_skins/zhanjianyangcheng.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            var e = this;
            this.cData = t.data,
                this.wType = t.type,
                this.tabIndex = t.index,
                ConfigData.preLoadList(["vip", "shipData", "shipModelData", "captainData", "captainUpgradeData", "shipUpgrade", "item", "trainData", "skillData"],
                    function() {
                        e.initUI()
                    }),
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function(t) {
                        e.destroy()
                    },
                    this)
        },
        i.updateShipPanel = function() {
            var t = this,
                e = ConfigData.getDataByKey("shipData", this.cData.shipid);
            Utils.getImgByUrl(ShipManager.getInstance().getShipPicByType(this.cData.shipid), this.icon),
                Utils.getImgByUrl(ShipManager.getInstance().getShipTypeIcon(e.shipType), this.typeImg),
                this.typeImg.visible = !0,
                Utils.getImgByUrl(Path.countryURL + "country_" + e.country + ".jpg", this.countryImg),
                this.typeTxt.text = e.name_l,
                this.typeTxt.textColor = QualitySystem.getColorByQuality(e.quality),
                Utils.getImgByUrl(QualitySystem.getShipBack(e.quality), this.bgIcon,
                    function() {
                        t.bgIcon.width = 639,
                            t.bgIcon.height = 285
                    })
        },
        i.initUI = function() {
            var t = this;
            this.iconList = [],
                this.itemObj = {},
                this.tickId = GameTick.registerHandler(function() {
                        t.tick()
                    },
                    1e3),
                MainUI.instance.changeTopMode(topUIMode.simple);
            var e;
            this.wType == OperateType.captain ? (this.tabList = [
                    ["captainUpdate", "panel_building_upgrade"],
                    ["captainRemoudle", "zz_upgrade"]
                ], e = ConfigData.getDataByKey("captainData", this.cData.id), Utils.getImgByUrl(Path.captainIconURL + e.picture, this.icon), Utils.getImgByUrl(Path.countryURL + "country_" + e.country + ".jpg", this.countryImg), this.icon.width = 234 * .7, this.icon.height = 325 * .7, this.typeTxt.text = e.name_l, this.typeTxt.textColor = QualitySystem.getColorByQuality(e.quality), this.setStatusByKey("captainid", this.cData.id, "panel_jianzhang_detail_comment_11", "panel_jianzhang_detail_comment_20"), GameEventDispatcher.getInstance().addEventListener(GameEvent.CAPTAIN_UPDATE, this.upgradeCaptain, this), this.mainIcon.visible = !1) : this.wType == OperateType.ship && (this.mainIcon.visible = this.cData.shipid == ShipManager.getInstance().captionId, this.tabList = [
                    ["shipUpdate", "panel_building_upgrade"],
                    ["shipRemoudle", "panel_shipyard_shiptransform_btn_transform"],
                    ["shipSkill", "panel_examine_txt_skill"],
                    ["shipTrain", "panel_dock_btn_my_ships_train"]
                ], this.setStatusByKey("shipid", this.cData.id, "panel_marine_bench3", "free"), e = ConfigData.getDataByKey("shipData", this.cData.shipid), this.updateShipPanel(), GameEventDispatcher.getInstance().addEventListener(GameEvent.SHIP_UPDATE, this.upgradeShip, this)),
                Utils.getImgByUrl(QualitySystem.getShipBack(e.quality), this.bgIcon,
                    function() {
                        t.bgIcon.width = 639,
                            t.bgIcon.height = 285
                    }),
                this.icon.x = (GameData.designWidth - this.icon.width) / 2,
                this.addTabStatus(),
                this[this.tabList[this.tabIndex - 1][0]](),
                this.askBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.ask2BtnHandler, this),
                this.ask2Btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.ask2BtnHandler, this),
                this.get2Btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.get2BtnHandler, this),
                this.getBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.get2BtnHandler, this)
        },
        i.addTabStatus = function() {
            for (var t = 1; 5 > t; t++) {
                this["tp" + t].visible = !1;
                var e = this["t" + t];
                if (e.name = (t - 1).toString(), this.tabList[t - 1] ? e.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (e.label = Locales.get(this.tabList[t - 1][1]), e.addEventListener(egret.TouchEvent.TOUCH_TAP, this.tabHandler, this)) : e.visible = !1, t == this.tabIndex && e && this.setBtnStatus(e), this.wType == OperateType.captain) 1 == t ? this["tp" + t].visible = RedPointManager.getCaptainUpdate(this.cData) > 0 : 2 == t && (this["tp" + t].visible = RedPointManager.getCaptainRemodule(this.cData) > 0);
                else if (this.wType == OperateType.ship) {
                    ConfigData.getDataByKey("shipData", this.cData.shipid);
                    if (1 == t) {
                        ConfigData.getDataByKey("shipUpgrade", this.cData.level);
                        this["tp" + t].visible = RedPointManager.getShipUpdate(this.cData) > 0
                    } else 2 == t ? this["tp" + t].visible = RedPointManager.getShipRemodule(this.cData) > 0 : 3 == t ? this["tp" + t].visible = RedPointManager.getShipSkill(this.cData) > 0 : 4 == t && (this["tp" + t].visible = RedPointManager.getShipTrain(this.cData) > 0)
                }
            }
        },
        i.ask2BtnHandler = function(t) {
            t.currentTarget == this.askBtn ? QiJvTouAlert.getInstance().showTxtDescPage(Locales.get("panel_guildDesc_enter"), Locales.get("panel_jianzhang_shuoming_1")) : QiJvTouAlert.getInstance().showTxtDescPage(Locales.get("panel_guildDesc_enter"), Locales.get("panel_skill_txt_bottom_comment"))
        },
        i.get2BtnHandler = function(t) {
            t.currentTarget == this.get2Btn ? TiaoZhuanAlert.getInstance().show("", Locales.get("panel_get_goods_panel_txt_comment_5"), Locales.get("panel_get_goods_panel_txt_comment_2"),
                function() {
                    MainUI.instance.bottomUI.showPvpByForce()
                },
                function() {
                    MainUI.instance.bottomUI.showShopForce()
                }) : TiaoZhuanAlert.getInstance().show("", Locales.get("panel_get_goods_panel_txt_comment_3"), Locales.get("panel_get_goods_panel_txt_comment_2"),
                function() {
                    ArenaManager.instance.openExchangeWindow()
                },
                function() {
                    MainUI.instance.bottomUI.showShopForce()
                })
        },
        i.upgradeShip = function(t) {
            var e = this;
            if (this.updateBool = !0, this.cData = ShipManager.getInstance().getShipById(this.cData.id), this[this.tabList[this.tabIndex - 1][0]](), this.updateShipPanel(), this.addTabStatus(), 1 == this.tabIndex || 2 == this.tabIndex) {
                var a = Path.effectUrl + "effect_shiplevelup/effect_shiplevelup.json",
                    i = Path.effectUrl + "effect_shiplevelup/texture.json",
                    n = Path.effectUrl + "effect_shiplevelup/texture.png";
                Utils.createDragonBone(a, i, n, "effect_shiplevelup", "normal",
                    function(t, a) {
                        t && (e.addChild(t.display), t.display.x = 330, t.display.y = 280, t.display.scaleX = 2, t.display.scaleY = 2, t.animation.gotoAndPlay("normal"), t.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                            function() {
                                Utils.removeDragonBone(t)
                            },
                            void 0))
                    },
                    this)
            } else 3 == this.tabIndex && this.skillChooseItem && this.skillChooseHandler(this.skillChooseItem);
            this.updateBool = !1
        },
        i.upgradeCaptain = function(t) {
            this.cData = Utils.getListByKeyValue("id", this.cData.id, CaptainData.captainlist)[0],
                this[this.tabList[this.tabIndex - 1][0]](),
                this.addTabStatus()
        },
        i.tabHandler = function(t) {
            var e = t.currentTarget;
            Number(e.name) + 1 == 4 && UserData.getInstance()._level < 15 ? (e.selected = !1, Toast.launch(Locales.get("ui_main_function_scientific", 15))) : Number(e.name) + 1 == 3 && UserData.getInstance()._level < 6 ? (e.selected = !1, Toast.launch(Locales.get("ui_main_function_scientific", 6))) : (this.setBtnStatus(e), this.tabIndex = Number(e.name) + 1, this[this.tabList[this.tabIndex - 1][0]]())
        },
        i.setBtnStatus = function(t) {
            for (var e = 1; 5 > e; e++) this["t" + e] != t && (this["t" + e].selected = !1);
            t.selected = !0
        },
        i.clearVessel = function() {
            for (var t = 0; t < this.iconList.length; t++) this.iconList[t].destroy();
            this.trainPanel.visible = this.techPanel.visible = this.shipRemoudlePanel.visible = this.captainUpPanel.visible = this.bgPanel.visible = this.captainUp1Panel.visible = !1
        },
        i.setStatusByKey = function(t, e, a, i) {
            var n = Utils.getListByKeyValue(t, e, ShipManager.getInstance().soldierList);
            if (n.length > 0)
                if (this.wType == OperateType.captain) {
                    var s = Utils.getListByKeyValue("id", n[0].shipid, ShipManager.getInstance().shipList),
                        r = ConfigData.getDataByKey("shipData", s[0].shipid);
                    this.equipTxt.text = Locales.get(a) + Locales.get(r.name_l)
                } else this.equipTxt.text = Locales.get(a);
            else this.equipTxt.text = Locales.get(i)
        },
        i.captainUpdate = function() {
            this.clearVessel(),
                this.captainUpPanel.visible = this.bgPanel.visible = !0,
                this.infoItem ? (this.infoItem.setTypeData(OperateItemType.captainUpdate, this.cData), this.captainUpPanel.addChildAt(this.infoItem, 0)) : (this.infoItem = new UpdatePropertyItem(OperateItemType.captainUpdate, this.cData), this.captainUpPanel.addChildAt(this.infoItem, 0));
            var t = this.cData.upgradelevel || 1,
                e = ConfigData.getDataByKey("captainData", this.cData.id),
                a = ConfigData.getDataByKey("captainUpgradeData", t + 1),
                i = a["upgradeCost" + e.quality];
            this.costTxt.text = Utils.rnum(i),
                this.upBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upgradeCaptainHandler, this),
                this.autoBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upgradeCaptainHandler, this)
        },
        i.captainRemoudle = function() {
            this.clearVessel(),
                this.captainUp1Panel.visible = this.bgPanel.visible = !0,
                this.infoItem ? (this.infoItem.setTypeData(OperateItemType.captainRemoudle, this.cData), this.captainUp1Panel.addChildAt(this.infoItem, 0)) : (this.infoItem = new UpdatePropertyItem(OperateItemType.captainRemoudle, this.cData), this.captainUp1Panel.addChildAt(this.infoItem, 0));
            var t = ConfigData.getDataByKey("captainData", this.cData.id),
                e = this.cData.promotelevel || 1,
                a = t.promoteCostGold.split("|")[e];
            this.cost1Txt.text = Utils.rnum(a);
            var i = Number(t.promoteCostSoul.split("|")[e]),
                n = CaptainData.getCaptainPieceData(t.pieceId),
                s = n ? n.count : 0;
            this.expProgressBar.value = Math.floor(s / i * 100),
                this.barTxt.text = s + "/" + i,
                i > s && (this.up1Btn.enabled = !1),
                this.up1Btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.reCaptainHandler, this)
        },
        i.upgradeCaptainHandler = function(t) {
            var e = this.cData.upgradelevel || 1,
                a = ConfigData.getDataByKey("captainData", this.cData.id),
                i = ConfigData.getDataByKey("captainUpgradeData", e + 1),
                n = i["upgradeCost" + a.quality];
            if (Number(n) > UserData.getInstance().getRes(TypeDefine.RES.Gold)) Toast.launch(Locales.get("panel_Shiptransform_txt_windword_5")),
                WindowManager.getInstance().show(WindowManager.windowType.BuJi);
            else {
                var s = Transport.getPkg(ProtocolMgr.ID_DceUpgradeCaptain);
                s.all = t.currentTarget == this.autoBtn ? !0 : !1,
                    s.id = this.cData.id,
                    Transport.instance.send(s)
            }
            140 == GuideManager.step && GuideManager.nextStep()
        },
        i.reCaptainHandler = function(t) {
            var e = ConfigData.getDataByKey("captainData", this.cData.id),
                a = this.cData.promotelevel || 1,
                i = e.promoteCostGold.split("|")[a];
            if (Number(i) > UserData.getInstance().getRes(TypeDefine.RES.Gold)) Toast.launch(Locales.get("panel_Shiptransform_txt_windword_5")),
                WindowManager.getInstance().show(WindowManager.windowType.BuJi);
            else {
                var n = Transport.getPkg(ProtocolMgr.ID_DcePromoteCaptain);
                n.id = this.cData.id,
                    Transport.instance.send(n)
            }
        },
        i.upgradeShipHandler = function(t) {
            var e = t.currentTarget == this.autoBtn0;
            if (this.cData.level >= UserData.getInstance()._level || 200 == this.cData.level) Toast.launch(Locales.get("panel_shipupgrade_bottom_txt_windword_3"));
            else {
                var a = ConfigData.getDataByKey("shipData", this.cData.shipid),
                    i = ConfigData.getDataByKey("shipUpgrade", this.cData.level),
                    n = Number(i["quality" + a.quality]),
                    s = UserData.getInstance().getRes(TypeDefine.RES.Gold);
                n > s ? (Toast.launch(Locales.get("panel_Shiptransform_txt_windword_5")), WindowManager.getInstance().show(WindowManager.windowType.BuJi)) : RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceUpgradeShip, {
                    id: this.cData.id,
                    all: e
                }, !1)
            }
            37 == GuideManager.step && GuideManager.nextStep()
        },
        i.remoudleShipHandler = function(t) {
            var e = ConfigData.getDataByKey("shipData", this.cData.shipid);
            if (5 == e.quality && UserData.getInstance()._level < 50) Toast.launch(Locales.get("panel_Shiptransform_txt_windword_10"));
            else {
                var a = UserData.getInstance().getRes(TypeDefine.RES.Gold),
                    i = Number(e.remouldCost);
                if (i > a) Toast.launch(Locales.get("panel_Shiptransform_txt_windword_5")),
                    WindowManager.getInstance().show(WindowManager.windowType.BuJi);
                else {
                    var n = Transport.getPkg(ProtocolMgr.ID_DceRemouldShip);
                    n.id = this.cData.id,
                        Transport.instance.send(n),
                        WindowManager.getInstance().showWaiting()
                }
                77 == GuideManager.step && GuideManager.clearMask()
            }
        },
        i.compareTwoNumber = function(t, e, a) {
            return void 0 === a && (a = 16777215),
                t > e ? [16711680, !1] : [a, !0]
        },
        i.shipUpdate = function() {
            this.clearVessel(),
                this.shipRemoudlePanel.visible = this.bgPanel.visible = !0,
                this.reBtn1.visible = !1,
                this.autoBtn0.visible = !0,
                this.upBtn0.visible = !0,
                this.infoItem ? this.infoItem.setTypeData(OperateItemType.shipUpdate, this.cData) : (this.infoItem = new UpdatePropertyItem(OperateItemType.shipUpdate, this.cData), this.shipRemoudlePanel.addChildAt(this.infoItem, 0));
            var t = ConfigData.getDataByKey("shipData", this.cData.shipid),
                e = ConfigData.getDataByKey("shipUpgrade", this.cData.level),
                a = Number(e["quality" + t.quality]),
                i = UserData.getInstance().getRes(TypeDefine.RES.Gold),
                n = QualitySystem.getColorByQuality(t.quality),
                s = this.compareTwoNumber(a, i, n);
            n = s[0];
            var r = s[1];
            s = this.compareTwoNumber(this.cData.level + 1, UserData.getInstance()._level, n),
                r = r && s[1],
                this.createIcon(Path.itemIconURL + "coin.png", Locales.get("panel_activity_red_bag_txt_11", Utils.rnum(a)), n, 1, this.shipRemoudlePanel),
                this.upBtn0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upgradeShipHandler, this),
                this.autoBtn0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upgradeShipHandler, this)
        },
        i.createRemoudleItem = function(t, e, a, i, n, s) {
            var r = QualitySystem.getColorByQuality(a.quality),
                o = this.compareTwoNumber(e, t, r);
            return -1 != s && (r = o[0], this.createIcon(i, n, r, s, this.shipRemoudlePanel, a.quality)),
                o[1]
        },
        i.shipRemoudle = function() {
            this.clearVessel(),
                this.reBtn1.visible = !0,
                this.autoBtn0.visible = !1,
                this.upBtn0.visible = !1,
                this.shipRemoudlePanel.visible = this.bgPanel.visible = !0,
                this.infoItem ? this.infoItem.setTypeData(OperateItemType.shipRemoudle, this.cData) : (this.infoItem = new UpdatePropertyItem(OperateItemType.shipRemoudle, this.cData), this.shipRemoudlePanel.addChildAt(this.infoItem, 0));
            var t = ConfigData.getDataByKey("shipData", this.cData.shipid),
                e = (this.cData.level || 1, this.cData.shipid % 100),
                a = !1;
            6 == t.quality ? a = !0 : t.quality < 5 && (a = e > 4);
            var i = !1;
            if (!a) {
                var n, s = UserData.getInstance().getRes(TypeDefine.RES.Gold),
                    r = Number(t.remouldCost),
                    o = 1,
                    l = QualitySystem.getColorByQuality(t.quality),
                    h = this.compareTwoNumber(r, s, l);
                if (l = h[0], i = h[1], t.remouldCost && (this.createIcon(Path.itemIconURL + "coin.png", Locales.get("panel_activity_red_bag_txt_11", Utils.rnum(r)), l, o, this.shipRemoudlePanel), o++), t.remouldCount) {
                    var c = Utils.getListByKeyValue("id", t.drawingId, ShipManager.getInstance().papers);
                    s = 0,
                        r = Number(t.remouldCount),
                        c.length > 0 && c[0].count && (s = c[0].count),
                        n = this.createRemoudleItem(s, r, t, ShipManager.getInstance().getShipPaperIcon(t.shipType), Locales.get("warShipName_" + t.id.substr(0, 3)) + Locales.get("panel_Shiptransform_txt_paper_2") + s + "/" + Utils.rnum(r), o),
                        o++,
                        i = i && n
                }
                if (t.remouldSeniorPaper) {
                    var c = Utils.getListByKeyValue("id", 27, ShipManager.getInstance().papers);
                    r = Number(t.remouldSeniorPaper),
                        s = UserData.getInstance().getSeniorpaper(),
                        n = this.createRemoudleItem(s, r, t, Path.itemIconURL + "gaojiwanneng.png", Locales.get("panel_retired_txt_paper_2") + s + "/" + Utils.rnum(r), o),
                        o++,
                        i = i && n
                }
                if (t.remouldMaterial) {
                    var d = ItemsManager.getInstance().getItemById(1246),
                        g = ConfigData.getDataByKey("item", "1246");
                    s = 0,
                        d && d.count && (s = d.count),
                        r = Number(t.remouldMaterial),
                        n = this.createRemoudleItem(s, r, t, Path.itemIconURL + g.icon, g.name_l + s + "/" + Utils.rnum(r), o),
                        o++,
                        i = i && n
                }
                if (i) {
                    var u = Number(t.id.substr(-2));
                    5 != t.quality && 5 == u ? i = !1 : 5 == t.quality && 11 == u && (i = !1)
                }
            }
            this.reBtn1.enabled = !a,
                this.reBtn1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.remoudleShipHandler, this),
                75 == GuideManager.step && GuideManager.nextStep()
        },
        i.createIcon = function(t, e, a, i, n, s, r) {
            void 0 === s && (s = 0 / 0),
                void 0 === r && (r = "1");
            var o = new IconItem(t, e, a, s);
            n.addChild(o);
            var l = this["icon" + r + "_" + i];
            return o.x = l.x + l.width / 2,
                o.y = l.y + l.height / 2,
                this.iconList.push(o),
                o
        },
        i.shipTrain = function() {
            !GuideManager.trainGuideBool && UserData.getInstance()._level >= 15 && GuideManager.nextStep(85),
                this.clearVessel();
            var t = ConfigData.getDataByKey("trainData", this.chooseTrainCNum),
                e = this.cData.traindata || {};
            this.trainPanel.visible = this.bgPanel.visible = !0,
                this.hp2Txt.text = this.cData.maxhp - (e.hp || 0),
                this.fire2Txt.text = this.cData.attack - (e.attack || 0),
                this.def2Txt.text = this.cData.firedefence - (e.firedef || 0),
                this.bd2Txt.text = this.cData.explosiondefence - (e.expldef || 0),
                this.hpATxt.text = "+" + (e.hp || 0),
                this.fireATxt.text = "+" + (e.attack || 0),
                this.defATxt.text = "+" + (e.firedef || 0),
                this.bdATxt.text = "+" + (e.expldef || 0),
                this["c" + this.chooseTrainCNum + "Btn"].selected = !0;
            var a = this.cData.level;
            this.m1Txt.text = t.hpLmt * a,
                this.m2Txt.text = t.atkLmt * a,
                this.m3Txt.text = t.fireDefLmt * a,
                this.m4Txt.text = t.explosionDefLmt * a;
            var i = ItemsManager.getInstance().getItemById(1013),
                n = i ? i.count : 0,
                s = UserData.getInstance().getRes(TypeDefine.RES.Gold),
                r = UserData.getInstance().getRes(TypeDefine.RES.Diamond);
            t = ConfigData.getDataByKey("trainData", 1),
                this.cost1_1Txt.text = t.costItemCount,
                this.cost1_1Txt.textColor = Number(t.costItemCount) <= n ? 16777215 : 16711680,
                t = ConfigData.getDataByKey("trainData", 2),
                this.cost2_1Txt.text = t.costCredit,
                this.cost2_2Txt.text = t.costItemCount,
                this.cost2_1Txt.textColor = Number(t.costCredit) < s ? 16777215 : 16711680,
                this.cost2_2Txt.textColor = Number(t.costItemCount) <= n ? 16777215 : 16711680,
                t = ConfigData.getDataByKey("trainData", 3),
                this.cost3_1Txt.text = t.costCredit,
                this.cost3_2Txt.text = t.costItemCount,
                this.cost3_1Txt.textColor = Number(t.costCredit) < r ? 16777215 : 16711680,
                this.cost3_2Txt.textColor = Number(t.costItemCount) <= n ? 16777215 : 16711680;
            for (var o = ["lasthp", "lastattack", "lastfiredef", "lastexpldef"], l = 0; l < o.length; l++) e[o[l]] ? (this["cGroup" + l].visible = !0, this["txt" + l].text = e[o[l]], this["u" + l].visible = e[o[l]] > 0, this["d" + l].visible = e[o[l]] < 0, this["txt" + l].textColor = e[o[l]] > 0 ? 65280 : 16711680) : this["cGroup" + l].visible = !1;
            if (this.haveTxt.text = n || 0, !this.initBool) {
                for (this.initBool = !0, l = 1; 4 > l; l++) this["c" + l + "Btn"].addEventListener(egret.TouchEvent.TOUCH_TAP, this.cBoxHandler, this);
                this.up3Btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.trainHandler, this),
                    this.c4Btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.tenHandler, this),
                    this.saveBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.saveHandler, this)
            }
            this.saveBtn.enabled = e.lasthp || e.lastattack || e.lastfiredef || e.lastexpldef,
                this.updateUpgradeBtn()
        },
        i.tenHandler = function(t) {},
        i.trainHandler = function(t) {
            var e = ConfigData.getDataByKey("trainData", this.chooseTrainCNum),
                a = UserData.getInstance().getRes(TypeDefine.RES.Gold),
                i = UserData.getInstance().getRes(TypeDefine.RES.Diamond);
            if (2 == this.chooseTrainCNum) {
                if (Number(e.costCredit) > a) return Toast.launch(Locales.get("panel_Shiptransform_txt_windword_5")),
                    void WindowManager.getInstance().show(WindowManager.windowType.BuJi)
            } else if (3 == this.chooseTrainCNum && Number(e.costCredit) > i) return Toast.launch(Locales.get("panel_train_txt_windword_2")),
                void WindowManager.getInstance().show(WindowManager.windowType.Recharge);
            var n = Transport.getPkg(ProtocolMgr.ID_DceTrain);
            n.shipid = this.cData.id,
                n.type = this.c4Btn.selected ? this.chooseTrainCNum + 3 : this.chooseTrainCNum,
                Transport.instance.send(n),
                87 == GuideManager.step && GuideManager.nextStep()
        },
        i.setTrainBtnEanbled = function() {
            this.saveBtn.enabled = !0
        },
        i.saveHandler = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSaveTrain);
            e.shipid = this.cData.id,
                e.save = !0,
                Transport.instance.send(e),
                ShipManager.getInstance().trainSaveBool = !0,
                this.saveBtn.enabled = !1,
                89 == GuideManager.step && GuideManager.nextStep()
        },
        i.updateUpgradeBtn = function() {
            var t = ConfigData.getDataByKey("trainData", this.chooseTrainCNum),
                e = this.cData.traindata || {},
                a = this.cData.level;
            e.hp >= t.hpLmt * a && e.attack >= t.atkLmt * a && e.firedef >= t.fireDefLmt * a && e.expldef >= t.explosionDefLmt * a && (this.up3Btn.enabled = !1)
        },
        i.cBoxHandler = function(t) {
            for (var e = 1; 4 > e; e++) t.currentTarget != this["c" + e + "Btn"] ? this["c" + e + "Btn"].selected = !1 : (this.chooseTrainCNum = e, this.updateUpgradeBtn());
            t.currentTarget.selected = !0
        },
        i.skillShipHandler = function(t) {
            var e, a = this.skillChooseItem.name;
            "normalSkill" == a ? e = this.cData.skillid : "activeSkill" == a ? e = this.cData.activeskillid : "leaderSkill" == a && (e = this.cData.circleskillid);
            var i = Transport.getPkg(ProtocolMgr.ID_DceUpgradeSkill);
            i.shipid = String(this.cData.id),
                i.skillid = e,
                i.byauto = t.currentTarget == this.auto4Btn,
                Transport.instance.send(i),
                54 == GuideManager.step && GuideManager.nextStep()
        },
        i.shipSkill = function() {
            var t = this;
            GuideManager.skillGuideBool || GuideManager.nextStep(52),
                this.clearVessel(),
                this.techPanel.visible = !0,
                this.main2Icon.visible = !1;
            var e = ConfigData.getDataByKey("shipData", this.cData.shipid);
            this.nameTxt.text = e.name_l;
            for (var a = 0; a < this.skillList.length; a++) {
                var i = ConfigData.getDataByKey("skillData", e[this.skillList[a]]),
                    n = this.createIcon(Path.skillIconURL + i.icon, i.name_l, QualitySystem.getColorByQuality(i.quality), a + 1, this.techPanel, i.quality, "t");
                n.parent.swapChildren(this[this.skillList[a].substr(0, 1) + "_icon"], n),
                    n.name = this.skillList[a],
                    n.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function(e) {
                            t.oldSkillNum = null,
                                t.skillChooseHandler(e.currentTarget)
                        },
                        this),
                    0 != a || this.updateBool || (this.oldSkillNum = null, this.skillChooseHandler(n)),
                    this.skillChooseItem && this.skillChooseItem.x == n.x && (n.visibleIconLabel(!1), this.skillChooseItem = n)
            }
            this.up4Btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.skillShipHandler, this),
                this.auto4Btn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.skillShipHandler, this)
        },
        i.skillChooseHandler = function(t) {
            var e, a = this;
            ConfigData.getDataByKey("shipData", this.cData.shipid);
            "normalSkill" == t.name ? e = this.cData.skillid : "activeSkill" == t.name ? e = this.cData.activeskillid : "leaderSkill" == t.name && (e = this.cData.circleskillid);
            var i = ConfigData.getDataByKey("skillData", e);
            this.chooseImg.x = t.x - this.chooseImg.width / 2,
                this.chooseImg.y = t.y - this.chooseImg.height / 2,
                this.skillChooseItem && this.skillChooseItem.visibleIconLabel(!0),
                this.skillChooseItem = t,
                t.visibleIconLabel(!1),
                this.arrowBtn.x = t.x - this.arrowBtn.width / 2,
                this.techTxt.text = i.name_l,
                this.nowLvTxt.text = Locales.get("panel_skill_txt_now_skill") + i.level,
                this.nowTechTxt.textFlow = Utils.textFlowByStr(i.desc_l);
            var n;
            if (Number(i.upLevel) > 0) {
                var s = ConfigData.getDataByKey("skillData", i.upLevel);
                this.nextLvTxt.text = Locales.get("panel_skill_txt_next_skill") + s.level,
                    this.nextTechTxt.textFlow = Utils.textFlowByStr(s.desc_l)
            } else this.nextLvTxt.text = Locales.get("panel_parts_upgrade_txt_lvlmax_2"),
                this.nextTechTxt.text = Locales.get("panel_parts_upgrade_txt_lvlmax_2"),
                n = !0;
            var r = ItemsManager.getInstance().getItemById(i.upgradeCostItem);
            this.have2Txt.text = r && r.count || "0",
                this.cost2Txt.text = i.upgradeCostCount;
            var o = 0;
            if (this.cData.skilldata && ("normalSkill" == t.name ? o = this.cData.skilldata.skillprof || 0 : "activeSkill" == t.name ? o = this.cData.skilldata.activeskillprof || 0 : "leaderSkill" == t.name && (o = this.cData.skilldata.circleskillprof || 0)), null != this.oldSkillNum && o > this.oldSkillNum) Toast.launch(Locales.get("panel_skill_txt_windword_5") + (o - this.oldSkillNum));
            else if (this.oldSkillLv != Number(i.level) && this.updateBool) {
                var l = Path.effectUrl + "effect_skilllevelup/effect_skilllevelup.json",
                    h = Path.effectUrl + "effect_skilllevelup/texture.json",
                    c = Path.effectUrl + "effect_skilllevelup/texture.png";
                Utils.createDragonBone(l, h, c, "jineng", "normal",
                    function(e, i) {
                        e && (a.addChild(e.display), e.display.x = t.x, e.display.y = t.y + 130, e.display.scaleX = 2, e.display.scaleY = 2, e.animation.gotoAndPlay("normal"), e.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                            function() {
                                Utils.removeDragonBone(e)
                            },
                            void 0))
                    },
                    this)
            }
            this.oldSkillLv = Number(i.level),
                this.oldSkillNum = o,
                n ? (this.barTxt2.text = "MAX", this.bar2.value = 100) : (this.barTxt2.text = o + "/" + i.profMax, this.bar2.value = Math.floor(o / i.profMax * 100)),
                Number(this.have2Txt.text) < Number(i.upgradeCostCount) ? (this.auto4Btn.enabled = this.up4Btn.enabled = !1, this.have2Txt.textColor = 16711680) : (this.auto4Btn.enabled = this.up4Btn.enabled = !0, this.have2Txt.textColor = 16777215)
        },
        i.tick = function() {
            var t = new Date(UserData.getInstance().getServerTime()),
                e = 23 - t.getHours(),
                a = 59 - t.getMinutes(),
                i = 59 - t.getSeconds();
            this.timeTxt.text = Locales.get("panel_skill_txt_times_1", Utils.getDoubleNumText(e), Utils.getDoubleNumText(a), Utils.getDoubleNumText(i))
        },
        i.clear = function() {
            this.tickId && (GameEventDispatcher.getInstance().removeEventListener(GameEvent.SHIP_UPDATE, this.upgradeShip, this), GameEventDispatcher.getInstance().removeEventListener(GameEvent.CAPTAIN_UPDATE, this.upgradeCaptain, this), GameTick.removeHandler(this.tickId))
        },
        e
}(WindowBase);
egret.registerClass(WindowOperatePanel, "WindowOperatePanel");
var partMetalType;
!
function(t) {
    t[t.parts = 0] = "parts",
        t[t.metals = 1] = "metals"
}(partMetalType || (partMetalType = {}));
var WindowPartsMetals = function(t) {
    function e() {
        t.call(this, !1),
            this._selectedNum = 0,
            this._addExp = 0,
            this.skinName = "resource/eui_skins/XunZhangYangChengSkin.exml"
            /*tpa=resource/eui_skins/XunZhangYangChengSkin.exml*/
    }
    __extends(e, t);
    var a = __define,
        i = e,
        n = i.prototype;
    return n.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.PARTS_UPDATE, this.upgradePart, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.SOULS_UPDATE, this.upgradeSoul, this)
        },
        a(n, "addExp",
            function() {
                return this._addExp
            },
            function(t) {
                this._addExp = t,
                    this.getExpTxt.text = t.toString()
            }),
        a(n, "selectedNum",
            function() {
                return this._selectedNum
            },
            function(t) {
                this._selectedNum = t,
                    this._selectedNum > 5 && (this._selectedNum = 5, Toast.launch(Locales.get("medal_maxChoose")))
            }),
        n.setData = function(t) {
            var e = this;
            this.cData = t.data,
                this.wType = t.type,
                this.tabIndex = t.index,
                ConfigData.preLoadList(["parts", "medalData", "medalexpData", "partsUpgradeData"],
                    function() {
                        ConfigData.preLoadDats(["medalexpData"], [MedalexpdataParser],
                            function() {
                                e.initUI()
                            },
                            e)
                    }),
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function(t) {
                        e.close()
                    },
                    this)
        },
        n.clearVessel = function() {
            this.metalUgroup.visible = this.rmGroup.visible = this.pRemouldGroup.visible = this.pUpdateGroup.visible = this.parts.visible = !1,
                this.arrow2.visible = this.arrow1.visible = !0
        },
        n.initUI = function() {
            var t = this;
            48 == GuideManager.step && GuideManager.nextStep(),
                MainUI.instance.changeTopMode(topUIMode.simple),
                this.scroller.viewport = this.vessel;
            var e;
            if (this.wType == partMetalType.parts) {
                this.tabList = [
                        ["partUpdate", "panel_building_upgrade"],
                        ["partRemoudle", "panel_shipyard_shiptransform_btn_transform"]
                    ],
                    e = ConfigData.getDataByKey("parts", this.cData.partsid),
                    Utils.getImgByUrl(Path.partsIconURL + e.icon, this.icon),
                    this.icon.width = 210,
                    this.icon.height = 210;
                var a = Utils.getListByKeyValue("partslist", this.cData.id, ShipManager.getInstance().soldierList);
                if (a.length > 0) {
                    var i = Utils.getListByKeyValue("id", a[0].shipid, ShipManager.getInstance().shipList);
                    i.length > 0 && (this.eqTxt.text = Locales.get("DecListPanel_txt_item_desc") + i[0].name)
                } else this.eqTxt.text = "";
                this.typeTxt.text = e.name_l,
                    this.typeTxt.textColor = QualitySystem.getColorByQuality(e.quality),
                    this.pTypeTxt.text = Locales.get("panel_plunder_txt_ckb_" + e.type),
                    this.pEquitTxt.text = Utils.getGoodAtShip(e.equipfor)[0]
            } else this.wType == partMetalType.metals && (this.tabList = [
                ["metalUpdate", "panel_building_upgrade"],
                ["metalRemoudle", "panel_shipyard_shiptransform_btn_transform"]
            ], e = ConfigData.getDataByKey("medalData", this.cData.soulid), Utils.getImgByUrl(Path.soulIconURL + e.icon, this.icon), this.icon.width = 210, this.icon.height = 210, this.cData.equipedshipid ? this.eqTxt.text = Locales.get("DecListPanel_txt_item_desc") + ShipManager.getInstance().getShipById(this.cData.equipedshipid).name : this.eqTxt.text = "", this.typeTxt.text = MedaldataParser.GetInstance().getItemById(this.cData.soulid).name_l, this.typeTxt.textColor = QualitySystem.getColorByQuality(MedaldataParser.GetInstance().getItemById(this.cData.soulid).quality));
            Utils.getImgByUrl(QualitySystem.getShipBack(e.quality), this.bgIcon,
                    function() {
                        t.bgIcon.width = 639,
                            t.bgIcon.height = 285
                    }),
                this.updagteTabBtn(),
                this[this.tabList[this.tabIndex - 1][0]](),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.PARTS_UPDATE, this.upgradePart, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SOULS_UPDATE, this.upgradeSoul, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SOULS_REMOUDLE, this.remoduleSoul, this)
        },
        n.updagteTabBtn = function() {
            for (var t = 1; 3 > t; t++) {
                var e = this["t" + t];
                e.name = t.toString(),
                    this.tabList[t - 1] ? (e.label = Locales.get(this.tabList[t - 1][1]), e.hasEventListener(egret.TouchEvent.TOUCH_TAP) || e.addEventListener(egret.TouchEvent.TOUCH_TAP, this.tabHandler, this)) : e.visible = !1,
                    t == this.tabIndex && e && this.setBtnStatus(e),
                    this.wType == partMetalType.parts ? 1 == t ? this["tp" + t].visible = RedPointManager.getPartUpdateBool(this.cData) > 0 : this["tp" + t].visible = RedPointManager.getPartRemoduleBool(this.cData) > 0 : this.wType == partMetalType.metals && (1 == t ? this["tp" + t].visible = RedPointManager.getMedalUpdateBool(this.cData) > 0 : this["tp" + t].visible = RedPointManager.getMedalRemoduleBool(this.cData) > 0)
            }
        },
        n.updateMotion = function() {
            var t = this,
                e = Path.effectUrl + "effect_shiplevelup/effect_shiplevelup.json",
                a = Path.effectUrl + "effect_shiplevelup/texture.json",
                i = Path.effectUrl + "effect_shiplevelup/texture.png";
            Utils.createDragonBone(e, a, i, "effect_shiplevelup", "normal",
                    function(e, a) {
                        e && (t.addChild(e.display), e.display.x = 330, e.display.y = 280, e.display.scaleX = 2, e.display.scaleY = 2, e.animation.gotoAndPlay("normal"), e.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                            function() {
                                Utils.removeDragonBone(e)
                            },
                            void 0))
                    },
                    this),
                this.updagteTabBtn()
        },
        n.remoduleSoul = function(t) {
            Main.trace(Log.objectToString(this.cData), "------------->"),
                this.cData && this.cData.id && (this.cData = ShipManager.getInstance().getSoulById(this.cData.id), this.cData && (this[this.tabList[this.tabIndex - 1][0]](), this.updateMotion()))
        },
        n.metalUpdate = function() {
            this.clearVessel(),
                this.metalUgroup.visible = !0;
            var t;
            if (this.cData) {
                var e = ConfigData.getDataByKey("medalData", this.cData.soulid);
                if (t = this.cData.point ? Utils.getMetalLvByExp(this.cData.point, "exp" + e.exp) : 1, null != this.jiluLv) {
                    var a;
                    t - this.jiluLv;
                    a = Locales.get("panel_parts_upgrade_txt_windword_6"),
                        Toast.launch(a),
                        this.jiluLv = null
                }
                ConfigData.getDataByKey("medalexpData", t),
                    ConfigData.getDataByKey("medalexpData", t + 1),
                    ConfigData.getDataByKey("medalexpData", 1);
                this.umLvTxt.text = t.toString();
                var i = this.cData.point - Utils.getMetalExpByLv(t, "exp" + e.exp),
                    n = Utils.getMetalExpByLv(t + 1, "exp" + e.exp) - Utils.getMetalExpByLv(t, "exp" + e.exp);
                this.expTxt.text = i + "/" + n,
                    this.expBar.value = Math.floor(i / n * 100),
                    this.needExp = n - i,
                    this.fireTypeTxt.text = BuffData.getBuffNameById(e.buff) + ":",
                    this.fireTxt.text = BuffData.getBuffValue(e, t);
                for (var s = 1; 6 > s; s++) this["mi" + s].addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectedHandler, this);
                this.uLvBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.updateMedalHandler, this),
                    this.uAutoBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.updateAutoMedalHandler, this),
                    this.updateMetal()
            }
        },
        n.updateAutoMedalHandler = function(t) {
            this.clearMetal();
            for (var e = ShipManager.getInstance().soulList, a = 0, i = 0; i < e.length; i++) {
                var n = ConfigData.getDataByKey("medalData", e[i].soulid);
                if (!ShipManager.getInstance().isMedalEquiped(e[i].id) && e[i].soulid != this.cData.soulid && (this.selectedList[e[i].id] = {
                            id: e[i].soulid,
                            pic: Path.soulIconURL + n.icon,
                            quality: n.quality
                        },
                        9 == Number(n.medalType) ? this.addExp += Number(n.exp) : this.addExp += e[i].point, a++, 5 == a)) break
            }
            0 == a ? Toast.launch("材料不足!") : this.selectedDoneHandler(null)
        },
        n.updateMedalHandler = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSoulEat),
                a = [];
            e.id = this.cData.id.toString();
            for (var i in this.selectedList) a.push(i.toString());
            0 == a.length ? Toast.launch("请添加材料!") : (e.soullist = a, Transport.instance.send(e), this.jiluLv = Number(this.umLvTxt.text))
        },
        n.removeSelectedHandler = function(t) {
            MainUI.instance.changeTopMode(topUIMode.simple),
                MainUI.instance.setBottomVisible(!0),
                this.selsectGroup.visible = !1,
                this.panelGroup.visible = this.metalUgroup.visible = !0,
                this.closeBtn1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.removeSelectedHandler, this),
                this.confirmBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.selectedDoneHandler, this)
        },
        n.selectedDoneHandler = function(t) {
            var e = 1;
            for (var a in this.selectedList) {
                var i = ConfigData.getDataByKey("medalData", this.selectedList[a].id),
                    n = new IconItem(this.selectedList[a].pic, i.name_l, QualitySystem.getColorByQuality(this.selectedList[a].quality), this.selectedList[a].quality);
                n.touchEnabled = n.touchChildren = !1;
                var s = this["mi" + e];
                n.x = s.x + s.width / 2,
                    n.y = s.y + s.height / 2,
                    this.metalUgroup.addChild(n),
                    this["mt" + e].text = "",
                    e += 1,
                    this.selectedList[a].icon = n
            }
            this.updateMetal(),
                this.removeSelectedHandler(null)
        },
        n.clearMetal = function() {
            if (this.selectedList)
                for (var t in this.selectedList) this.selectedList[t].icon && this.metalUgroup.removeChild(this.selectedList[t].icon);
            for (var e = 1; 6 > e; e++) this["mt" + e].text = "选择材料",
                this["mi" + e].source = RES.getRes(Path.resHeadUrl + "zhanjianyangcheng_wu_png");
            this.addExp = 0,
                this.selectedNum = 0,
                this.selectedList = {},
                this.updateMetal()
        },
        n.selectedHandler = function(t) {
            this.clearMetal(),
                MainUI.instance.changeTopMode(topUIMode["null"]),
                MainUI.instance.setBottomVisible(!1),
                this.panelGroup.visible = this.metalUgroup.visible = !1,
                this.selsectGroup.visible = !0,
                this.closeBtn1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.removeSelectedHandler, this),
                this.confirmBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectedDoneHandler, this);
            for (var e = ShipManager.getInstance().soulList, a = [], i = 0; i < e.length; i++) {
                var n = ConfigData.getDataByKey("medalData", e[i].soulid),
                    s = 0;
                if (s = 9 == Number(n.medalType) ? n.exp : e[i].point, !ShipManager.getInstance().isMedalEquiped(e[i].id)) {
                    var r = 0;
                    r = 9 == Number(n.medalType) ? 1 : Utils.getMetalLvByExp(e[i].point, "exp" + n.exp),
                        a.push({
                            typeName: "Lv" + r,
                            target: this,
                            id: e[i].id,
                            soulId: n.id,
                            exp: s,
                            source: n,
                            pic: Path.soulIconURL + n.icon,
                            quality: n.quality,
                            selected: !1,
                            upgradelevelInfo: MedaldataParser.GetInstance().getItemById(e[i].soulid).name_l,
                            qualityInfo: Locales.get("DecListPanel_txt_item_prop_43") + s
                        })
                }
            }
            this.vessel.dataProvider = new eui.ArrayCollection(a),
                this.vessel.itemRenderer = metalListItem;
            var o, n = ConfigData.getDataByKey("medalData", this.cData.soulid);
            o = this.cData.point ? Utils.getMetalLvByExp(this.cData.point, "exp" + n.exp) : 1,
                this.needExpTxt.text = this.needExp.toString()
        },
        n.updateMetal = function() {
            var t, e, a = this.cData.point + this.addExp,
                i = ConfigData.getDataByKey("medalData", this.cData.soulid);
            this.cData.point ? (e = Utils.getMetalLvByExp(a, "exp" + i.exp), t = Utils.getMetalLvByExp(this.cData.point, "exp" + i.exp)) : e = t = 1,
                e > t ? (this.lvAddTxt.text = "+" + (e - t), this.fireAddTxt.text = "+" + BuffData.getBuffValue(i, e - t)) : (this.lvAddTxt.text = "", this.fireAddTxt.text = ""),
                this.addExp > 0 ? this.expAddTxt.text = "+" + this.addExp : this.expAddTxt.text = ""
        },
        n.metalRemoudle = function() {
            var t = this;
            if (this.clearVessel(), this.rmGroup.visible = !0, null != this.jiluLv) {
                var e, a = this.cData.promotelvl - this.jiluLv;
                a > 1 ? (e = Locales.get("panel_parts_upgrade_txt_windword_5"), Toast.launch(e + a)) : (e = Locales.get("panel_parts_transform_txt_windword_1"), Toast.launch(e)),
                    this.jiluLv = null
            }
            var i = ConfigData.getDataByKey("medalData", this.cData.soulid);
            this.rmLvTxt.text = this.cData.promotelvl,
                this.rmLvAddTxt.text = (this.cData.promotelvl + 1).toString(),
                this.rmTypeTxt.text = BuffData.getBuffNameById(i.remouldType),
                this.rmAtkTxt.text = i.remouldValue.split("|")[this.cData.promotelvl] / 100 + "%",
                this.rmAtkAddTxt.text = i.remouldValue.split("|")[this.cData.promotelvl + 1] / 100 + "%",
                Utils.getImgByUrl(Path.itemIconURL + "gongxunzhi_d.png", this.rmHaveImg,
                    function() {
                        t.rmHaveImg.width = 32,
                            t.rmHaveImg.height = 28
                    }),
                Utils.getImgByUrl(Path.itemIconURL + "gongxunzhi_d.png", this.rmNeedImg,
                    function() {
                        t.rmNeedImg.width = 32,
                            t.rmNeedImg.height = 28
                    });
            var n = Number(i.remouldCostPoint.split("|")[this.cData.promotelvl + 1]);
            this.rmHaveTxt.text = Utils.rnum(UserData.getInstance().getExploit()),
                this.rmNeedTxt.text = Utils.rnum(n),
                n > UserData.getInstance().getExploit() ? (this.rmHaveTxt.textColor = 16711680, this.rmRBtn.enabled = !1) : (this.rmHaveTxt.textColor = 16777215, this.rmRBtn.enabled = !0),
                this.rmRBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.remoudleMetalHandler, this),
                this.rmGetBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.getHonorHandler, this)
        },
        n.getHonorHandler = function(t) {
            this.close(),
                WindowManager.getInstance().show(WindowManager.windowType.Soul),
                egret.setTimeout(function() {
                        WindowManager.getInstance().getWindow(WindowManager.windowType.Soul).gotoSell()
                    },
                    this, 500)
        },
        n.remoudleMetalHandler = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceMedalPromote);
            e.strid = this.cData.id.toString(),
                Transport.instance.send(e),
                this.jiluLv = Number(this.rmLvTxt.text)
        },
        n.partUpdate = function() {
            if (this.clearVessel(), this.pUpdateGroup.visible = this.parts.visible = !0, this.pLvHTxt.text = "等级：", null != this.jiluLv) {
                var t, e = this.cData.upgradelevel - this.jiluLv;
                e > 1 ? (this.autoBool ? (t = Locales.get("panel_parts_upgrade_txt_windword_1"), t = t.substr(0, t.length - 1)) : t = Locales.get("panel_parts_upgrade_txt_windword_5"), Toast.launch(t + e)) : (t = Locales.get("panel_parts_upgrade_txt_windword_1"), Toast.launch(t)),
                    this.jiluLv = null
            }
            var a = ConfigData.getDataByKey("parts", this.cData.partsid);
            this.pLvTxt.text = this.cData.upgradelevel,
                this.pLvAddTxt.text = this.cData.upgradelevel + 1,
                this.pAtkHTxt.text = BuffData.getBuffNameById(a.upgradeType) + "：",
                this.pAtkTxt.text = Math.floor(Number(a.basicValue) + Number(a.upgradeValue) * (this.cData.upgradelevel - 1)),
                this.pAtkAddTxt.text = Math.floor(Number(a.basicValue) + Number(a.upgradeValue) * this.cData.upgradelevel),
                this.pGoldTxt.text = Utils.rnum(PartsManager.getInstance().getCostValue(this.cData.partsid, this.cData.upgradelevel)),
                this.upPBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upgradePartsHandler, this),
                this.upPAutoBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.upgradePartsHandler, this),
                this.cData.upgradelevel >= 3 * UserData.getInstance()._level && (this.pLvAddTxt.text = this.pAtkAddTxt.text = Locales.get("panel_parts_upgrade_txt_lvlmax"), this.upPBtn.enabled = this.upPAutoBtn.enabled = !1)
        },
        n.upgradePartsHandler = function(t) {
            50 == GuideManager.step && GuideManager.nextStep(),
                Number(PartsManager.getInstance().getCostValue(this.cData.partsid, this.cData.upgradelevel)) > UserData.getInstance().getRes(TypeDefine.RES.Gold) ? (Toast.launch(Locales.get("panel_Shiptransform_txt_windword_5")), WindowManager.getInstance().show(WindowManager.windowType.BuJi)) : (this.autoBool = t.currentTarget == this.upPAutoBtn, RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceUpgradeParts, {
                    id: this.cData.id.toString(),
                    all: t.currentTarget == this.upPAutoBtn
                }, !1), this.jiluLv = Number(this.pLvTxt.text))
        },
        n.remoudlePartsHandler = function(t) {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceRemouldParts, {
                    id: this.cData.id.toString(),
                    all: !1
                }, !1),
                this.jiluLv = Number(this.pLvTxt.text),
                58 == GuideManager.step && GuideManager.nextStep()
        },
        n.getTechPointHandler = function(t) {
            var e = this;
            TiaoZhuanAlert.getInstance().show("", Locales.get("panel_get_goods_panel_txt_comment_4"), Locales.get("panel_get_goods_panel_txt_comment_8"),
                function() {
                    e.close(),
                        MainUI.instance.bottomUI.showPvpByForce()
                },
                function() {
                    e.close(),
                        WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian) || WindowManager.getInstance().show(WindowManager.windowType.PeiJian),
                        WindowManager.getInstance().getWindow(WindowManager.windowType.PeiJian).gotoSell()
                })
        },
        n.partRemoudle = function() {
            var t = this;
            if (!GuideManager.partGuideBool && UserData.getInstance()._level >= 5 && 59 != GuideManager.step && GuideManager.nextStep(57), this.clearVessel(), this.pRemouldGroup.visible = this.parts.visible = !0, this.pLvHTxt.text = "改造等级：", null != this.jiluLv) {
                var e, a = this.cData.remouldlevel - this.jiluLv;
                a > 1 ? (e = Locales.get("panel_parts_upgrade_txt_windword_5"), Toast.launch(e + a)) : (e = Locales.get("panel_parts_upgrade_txt_windword_1"), Toast.launch(e)),
                    this.jiluLv = null
            }
            Utils.getImgByUrl(Path.itemIconURL + "kejidian.png", this.pHmImg,
                    function() {
                        t.pHmImg.width = 32,
                            t.pHmImg.height = 28
                    }),
                Utils.getImgByUrl(Path.itemIconURL + "kejidian.png", this.pNmImg,
                    function() {
                        t.pNmImg.width = 32,
                            t.pNmImg.height = 28
                    }),
                this.pHmTxt.text = Utils.rnum(UserData.getInstance().getTechpoints());
            var i = ConfigData.getDataByKey("parts", this.cData.partsid);
            this.pLvTxt.text = this.cData.remouldlevel,
                this.pAtkHTxt.text = BuffData.getBuffNameById(i.remouldType) + "：",
                this.pAtkTxt.text = PartsManager.getInstance().getRemouldValue(this.cData.partsid, this.cData.remouldlevel) + "%";
            var n = PartsManager.getInstance().getRemouldValue(this.cData.partsid, this.cData.remouldlevel + 1);
            if (0 > n) this.pAtkAddTxt.text = "",
                this.pLvAddTxt.text = "",
                this.pNmTxt.text = "",
                this.pRemouldBtn.enabled = !1,
                this.pNmDesc.text = "",
                this.pNmImg.visible = !1,
                this.arrow2.visible = this.arrow1.visible = !1;
            else {
                this.pLvAddTxt.text = (Number(this.cData.remouldlevel) + 1).toString(),
                    this.pAtkAddTxt.text = n + "%";
                var s = PartsManager.getInstance().getRemouldValue(this.cData.partsid, this.cData.remouldlevel + 1, "remouldCostPoint");
                this.pNmTxt.text = Utils.rnum(s),
                    Number(s) > UserData.getInstance().getTechpoints() ? (this.pHmTxt.textColor = 16711680, this.pRemouldBtn.enabled = !1) : (this.pHmTxt.textColor = 16777215, this.pRemouldBtn.enabled = !0)
            }
            this.pRemouldBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.remoudlePartsHandler, this),
                this.pGetMBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.getTechPointHandler, this)
        },
        n.upgradeSoul = function() {
            this.clearMetal(),
                this.cData = Utils.getListByKeyValue("id", this.cData.id, ShipManager.getInstance().soulList)[0],
                this[this.tabList[this.tabIndex - 1][0]](),
                this.updateMotion()
        },
        n.upgradePart = function() {
            this.cData = ShipManager.getInstance().getPartById(this.cData.id),
                this[this.tabList[this.tabIndex - 1][0]](),
                this.updateMotion()
        },
        n.setBtnStatus = function(t) {
            for (var e = 1; 3 > e; e++) this["t" + e] != t && (this["t" + e].selected = !1);
            t.selected = !0
        },
        n.tabHandler = function(t) {
            var e = t.currentTarget;
            this.setBtnStatus(e),
                this.tabIndex = Number(e.name),
                this[this.tabList[this.tabIndex - 1][0]]()
        },
        e
}(WindowBase);
egret.registerClass(WindowPartsMetals, "WindowPartsMetals");
var metalListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (Utils.getImgByUrl(this.data.pic, this.iconPic), Utils.getImgByUrl(QualitySystem.getItemSmallBack(this.data.source.quality), this.iconBg), this.nameTxt.textColor = QualitySystem.getColorByQuality(this.data.source.quality), this.myParent = this.data.target, this.starIcon.visible = !1, this.checkBoxBtn.selected = this.data.selected, this.checkBoxBtn.hasEventListener(egret.Event.CHANGE) || this.checkBoxBtn.addEventListener(egret.Event.CHANGE,
                    function() {
                        e.data.selected = e.checkBoxBtn.selected,
                            5 == e.myParent.selectedNum && e.data.selected ? e.data.selected = e.checkBoxBtn.selected = !1 : e.data.selected ? (e.myParent.selectedList[e.data.id] = {
                                    id: e.data.soulId,
                                    pic: e.data.pic,
                                    quality: e.data.quality
                                },
                                e.myParent.selectedNum += 1, e.myParent.addExp += Number(e.data.exp)) : (delete e.myParent.selectedList[e.data.id], e.myParent.selectedNum -= 1, e.myParent.addExp -= Number(e.data.exp))
                    },
                    this))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(metalListItem, "metalListItem");
var WindowPeiJian = function(t) {
    function e() {
        t.call(this, !1),
            this.currPage = 0,
            this.isInit = !1,
            this.dsListParts = [],
            this.pos = 0,
            this.skinName = "resource/eui_skins/zhuye_PeijianSkin.exml"
            /*tpa=resource/eui_skins/zhuye_PeijianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            GameEventDispatcher.getInstance().addEventListener(GameEvent.REFRESH_PARTS_DATA, this.onRefreshPartsData, this),
                WindowManager.getInstance().showWaiting();
            var t = Transport.getPkg(ProtocolMgr.ID_DcePartsList);
            Transport.instance.send(t),
                this.btnChangeToSell.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellByQualityBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCloseBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secOKBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck4.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.clear = function() {
            this.isInit = !1,
                this.opensell || WindowManager.getInstance().getWindow(WindowManager.windowType.ShipArrange) ? MainUI.instance.changeTopMode(topUIMode["null"]) : (MainUI.instance.changeTopMode(topUIMode.normal), MainUI.instance.changeTopMode(topUIMode.normal)),
                MainUI.instance.setBottomVisible(!0),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.REFRESH_PARTS_DATA, this.onRefreshPartsData, this),
                this.btnChangeToSell.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellByQualityBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCloseBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secOKBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCancelBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck4.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onRefreshPartsData = function() {
            var t = this;
            this.isInit ? 1 == this.huishouGroup.visible ? this.setHuiShouPage() : 0 == this.currPage ? this.setPeiJianPage() : 1 == this.currPage && this.setHuanYuanPage() : 0 == this.huishouGroup.visible && this.preloadConfigs(function() {
                t.initUI(),
                    t.isInit = !0
            })
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.ck1:
                    break;
                case this.ck2:
                    break;
                case this.ck3:
                    break;
                case this.ck4:
                    break;
                case this.secCloseBtn:
                    this.huishouByQualityGroup.visible = !1;
                    break;
                case this.secCancelBtn:
                    this.huishouByQualityGroup.visible = !1;
                    break;
                case this.secOKBtn:
                    PartsManager.getInstance().quailtyArr = [],
                        PartsManager.getInstance().reductionPartsIds = [],
                        this.ck1.selected && PartsManager.getInstance().quailtyArr.push(1),
                        this.ck2.selected && PartsManager.getInstance().quailtyArr.push(2),
                        this.ck3.selected && PartsManager.getInstance().quailtyArr.push(3),
                        this.ck4.selected && PartsManager.getInstance().quailtyArr.push(4),
                        this.huishouByQualityGroup.visible = !1,
                        this.setHuiShouPage();
                    break;
                case this.btnSellByQualityBtn:
                    this.huishouByQualityGroup.visible = !0,
                        this.ck1.selected = !1,
                        this.ck2.selected = !1,
                        this.ck3.selected = !1,
                        this.ck4.selected = !1;
                    break;
                case this.btnSellBtn:
                    this.setPos(),
                        null != PartsManager.getInstance().reductionPartsIds && PartsManager.getInstance().reductionPartsIds.length > 0 ? RetiredAlert.getInstance().showPartsHuiShou() : Toast.launch("请至少选中1个配件!");
                    break;
                case this.btnReturn:
                    this.pos = 0,
                        this.huishouGroup.visible = !1,
                        this.btnReturn.visible = !1,
                        this.btnChangeToSell.visible = !0,
                        MainUI.instance.setBottomVisible(!0),
                        this.tabContainer.visible = !0,
                        0 == this.currPage ? this.setPeiJianPage() : 1 == this.currPage && this.setHuanYuanPage(),
                        this.huishouByQualityGroup.visible = !1;
                    break;
                case this.btnChangeToSell:
                    this.pos = 0,
                        this.huishouGroup.visible = !0,
                        this.btnReturn.visible = !0,
                        this.tabContainer.visible = !1,
                        this.btnChangeToSell.visible = !1,
                        MainUI.instance.setBottomVisible(!1),
                        PartsManager.getInstance().quailtyArr = [],
                        PartsManager.getInstance().reductionPartsIds = [],
                        this.setHuiShouPage(),
                        PartsManager.getInstance().resetHuishouNum();
                    break;
                case this.btnClose:
                    WindowManager.getInstance().hide(WindowManager.windowType.PeiJian)
            }
        },
        i.gotoSell = function() {
            this.btnChangeToSell ? this.btnChangeToSell.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP)) : this.opensell = !0
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("parts"),
                e.push("shipData"),
                e.push("partsUpgradeData"),
                e.push("partspieces"),
                ConfigData.preLoadDats(e, [PartsParser, ShipdataParser, PartsupgradedataParser, PartspiecesParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.btnChangeToSell.icon.source = Path.panelUrl + "juesexinxi_kejidian.png",
                this.huishouByQualityGroup.visible = !1,
                this.scroller.viewport = this.list,
                this.pos = 0;
            for (var t = ["配件", "还原"], e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 120 * e,
                    a.index = e,
                    a.label = t[e],
                    this.tabContainer.addChild(a),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "up",
                    0 == e && a.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
            }
            this.getHuanYuanPageList(),
                this.opensell && this.btnChangeToSell.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        },
        i.onTabBarItemTap = function(t) {
            this.pos = 0;
            var e = t.currentTarget;
            e.currentState = "down",
                this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"),
                this.lastTab = e,
                0 == e.index ? (this.currPage = 0, this.setPeiJianPage()) : (this.currPage = 1, this.setHuanYuanPage())
        },
        i.setPeiJianPage = function() {
            var t = this.getPeiJianPageList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = partsFactoryListItem,
                this.countLabel.text = "数量:" + (t.length - 1),
                this.countGroup.visible = !0,
                this.txtEmpty.visible = !1,
                this.moveScroller(this.pos)
        },
        i.setHuanYuanPage = function() {
            var t = this.getHuanYuanPageList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = partsReduceFactoryListItem,
                this.countLabel.text = "数量:" + (t.length - 1),
                this.countGroup.visible = !0,
                0 == t.length ? this.txtEmpty.visible = !0 : this.txtEmpty.visible = !1,
                this.moveScroller(this.pos)
        },
        i.setHuiShouPage = function() {
            this.dsListParts = this.getHuiShouPageList(),
                this.list.dataProvider = new eui.ArrayCollection(this.dsListParts),
                this.list.itemRenderer = partsSellListItem,
                this.txtEmpty.visible = !1,
                this.countGroup.visible = !1,
                this.moveScroller(this.pos)
        },
        i.setHuiShouNum = function(t) {
            this.sellCountLabel.text = "已选数量:" + t + "/" + (this.dsListParts.length - 1)
        },
        i.getHuiShouPageList = function() {
            this.dsListParts = [];
            for (var t = ShipManager.getInstance().partsList, e = 0, a = 0; a < t.length; a++) {
                var i = t[a];
                if (0 == i.islocked) {
                    var n = {};
                    n.data = i,
                        n.id = i.id,
                        n.partsid = i.partsid,
                        n.point = i.point,
                        n.remouldlevel = i.remouldlevel,
                        n.upgradelevel = i.upgradelevel,
                        n.upgradelevelInfo = "等级:" + i.upgradelevel + "/" + 3 * UserData.getInstance().getPlayerLevel(),
                        n.upgradegold = i.upgradegold,
                        n.islocked = i.islocked;
                    var s = PartsParser.GetInstance().getItemById(i.partsid);
                    n.type = s.type,
                        n.typeName = this.setTypeName(s.type),
                        n.pic = PartsManager.getInstance().getPartsPicById(s.icon),
                        n.name = s.name_l,
                        0 == n.remouldlevel ? n.nameInfo = n.name : n.nameInfo = n.name + " +" + n.remouldlevel,
                        n.quality = s.quality,
                        n.color = this.setColor(n.quality),
                        n.qualityInfo = "品质:" + s.quality,
                        n.basicValue = s.basicValue,
                        n.upgradeType = BuffData.getBuffNameById(s.upgradeType),
                        n.upgradeValue = Math.floor(Number(s.basicValue) + (Number(i.upgradelevel) - 1) * Number(s.upgradeValue)),
                        n.upgradeInfo = n.upgradeType + ":" + n.upgradeValue,
                        n.remouldType = BuffData.getBuffNameById(s.remouldType),
                        n.remouldValue = this.getPercentage(i.remouldlevel, s.remouldValue),
                        n.remouldInfo = n.remouldType + " +" + n.remouldValue,
                        n.isSelected = !1;
                    var r = Utils.getListByKeyValue("partslist", n.id, ShipManager.getInstance().soldierList);
                    if (r.length > 0);
                    else {
                        if (null != PartsManager.getInstance().quailtyArr)
                            for (var o = 0; o < PartsManager.getInstance().quailtyArr.length; o++)
                                if (Number(n.quality) == PartsManager.getInstance().quailtyArr[o]) {
                                    n.isSelected = !0,
                                        PartsManager.getInstance().reductionPartsIds.push(n.id),
                                        e += 1;
                                    break
                                }
                        this.dsListParts.push(n)
                    }
                }
            }
            if (this.dsListParts.sort(function(t, e) {
                    return e.quality != t.quality ? e.quality - t.quality : Number(e.partsid) - Number(t.partsid)
                }), !GameData.skipShipGuide) {
                var n = {};
                n.id = -1,
                    n.lastOne = !0,
                    this.dsListParts.push(n)
            }
            return PartsManager.getInstance().setHuishouTxtNum(e),
                this.dsListParts
        },
        i.getPeiJianPageList = function() {
            for (var t = [], e = ShipManager.getInstance().partsList, a = !1, i = 0; i < e.length; i++) {
                var n = e[i],
                    s = {};
                s.id = n.id,
                    s.data = n,
                    s.partsid = n.partsid,
                    s.point = n.point,
                    s.remouldlevel = n.remouldlevel,
                    s.upgradelevel = n.upgradelevel,
                    s.upgradelevelInfo = n.upgradelevel + "级",
                    s.upgradegold = n.upgradegold,
                    s.islocked = n.islocked;
                var r = PartsParser.GetInstance().getItemById(n.partsid);
                s.type = r.type,
                    s.typeName = this.setTypeName(r.type),
                    s.pic = PartsManager.getInstance().getPartsPicById(r.icon),
                    s.name = r.name_l,
                    0 == s.remouldlevel ? s.nameInfo = s.name : s.nameInfo = s.name + " +" + s.remouldlevel,
                    s.quality = r.quality,
                    s.color = this.setColor(s.quality),
                    s.qualityInfo = "品质:" + r.quality,
                    s.basicValue = r.basicValue,
                    s.upgradeType = BuffData.getBuffNameById(r.upgradeType),
                    s.upgradeValue = Math.floor(Number(r.basicValue) + (Number(n.upgradelevel) - 1) * Number(r.upgradeValue)),
                    s.upgradeInfo = s.upgradeType + ":" + s.upgradeValue,
                    s.remouldType = BuffData.getBuffNameById(r.remouldType),
                    s.remouldValue = this.getPercentage(n.remouldlevel, r.remouldValue),
                    s.remouldInfo = s.remouldType + " +" + s.remouldValue;
                var o = ShipManager.getInstance().isPartEquiped(s.id);
                if (void 0 == o || null == o) s.euqipedShip = "",
                    s.euqipedShipColor = 16711680;
                else
                    for (var l = 0; l < ShipManager.getInstance().shipList.length; l++)
                        if (o == ShipManager.getInstance().shipList[l].id) {
                            s.euqipedShip = ShipManager.getInstance().getShipNameByType(ShipManager.getInstance().shipList[l].shipid);
                            var h = ShipdataParser.GetInstance().getItemById(ShipManager.getInstance().shipList[l].shipid).quality;
                            s.euqipedShipColor = QualitySystem.getColorByQuality(h);
                            break
                        }
                s.isShowRedPoint = !1,
                    t.push(s)
            }
            if (t.sort(function(t, e) {
                    return "" == t.euqipedShip && "" == e.euqipedShip ? e.quality != t.quality ? e.quality - t.quality : Number(e.partsid) - Number(t.partsid) : "" != t.euqipedShip && "" != e.euqipedShip ? e.quality != t.quality ? e.quality - t.quality : Number(e.partsid) - Number(t.partsid) : "" != t.euqipedShip && "" == e.euqipedShip ? -1 : "" == t.euqipedShip && "" != e.euqipedShip ? 1 : void 0
                }), !GameData.skipShipGuide) {
                var s = {};
                s.id = -1,
                    s.lastOne = !0,
                    t.push(s)
            }
            if (this.tabContainer.numChildren > 0) {
                var c = this.tabContainer.getChildAt(0);
                c.redPoint.visible = a
            }
            return t
        },
        i.getHuanYuanPageList = function() {
            for (var t = [], e = ShipManager.getInstance().partsList, a = 0; a < e.length; a++) {
                var i = e[a];
                if (0 == i.islocked && (i.remouldlevel > 0 || i.upgradelevel > 1)) {
                    var n = {};
                    n.data = i,
                        n.id = i.id,
                        n.partsid = i.partsid,
                        n.point = i.point,
                        n.remouldlevel = i.remouldlevel,
                        n.upgradelevel = i.upgradelevel,
                        n.upgradelevelInfo = i.upgradelevel + "级",
                        n.upgradegold = i.upgradegold,
                        n.islocked = i.islocked;
                    var s = PartsParser.GetInstance().getItemById(i.partsid);
                    n.type = s.type,
                        n.typeName = this.setTypeName(s.type),
                        n.pic = PartsManager.getInstance().getPartsPicById(s.icon),
                        n.name = s.name_l,
                        0 == n.remouldlevel ? n.nameInfo = n.name : n.nameInfo = n.name + " +" + n.remouldlevel,
                        n.quality = s.quality,
                        n.color = this.setColor(n.quality),
                        n.qualityInfo = "品质:" + s.quality,
                        n.basicValue = s.basicValue,
                        n.upgradeType = BuffData.getBuffNameById(s.upgradeType),
                        n.upgradeValue = Math.floor(Number(s.basicValue) + (Number(i.upgradelevel) - 1) * Number(s.upgradeValue)),
                        n.upgradeInfo = n.upgradeType + ":" + n.upgradeValue,
                        n.remouldType = BuffData.getBuffNameById(s.remouldType),
                        n.remouldValue = this.getPercentage(i.remouldlevel, s.remouldValue),
                        n.remouldInfo = n.remouldType + " +" + n.remouldValue,
                        n.needCash = 50;
                    var r = Utils.getListByKeyValue("partslist", n.id, ShipManager.getInstance().soldierList);
                    r.length > 0 || t.push(n)
                }
            }
            if (t.sort(function(t, e) {
                    return e.quality != t.quality ? e.quality - t.quality : Number(e.partsid) - Number(t.partsid)
                }), !GameData.skipShipGuide) {
                var n = {};
                n.id = -1,
                    n.lastOne = !0,
                    t.push(n)
            }
            var o = this.tabContainer.getChildAt(1);
            return null != t && t.length > 1 ? o.redPoint.visible = !0 : o.redPoint.visible = !1,
                t
        },
        i.getPercentage = function(t, e) {
            return 0 == t ? "0%" : (t >= e.length && (t = e.length - 1), Number(e[t]) / 100 + "%")
        },
        i.setColor = function(t) {
            return "1" == t ? "0xF6F8E6" : "2" == t ? "0x5CED2F" : "3" == t ? "0x35B0FE" : "4" == t ? "0x8E55FF" : "5" == t ? "0xFF8033" : "6" == t ? "0XF42B0B" : void 0
        },
        i.setTypeName = function(t) {
            return "1" == t ? "武器" : "2" == t ? "雷达" : "3" == t ? "装甲" : "4" == t ? "轮机" : void 0
        },
        i.refreshPartsByUpgrade = function(t) {
            0 == t.res && this.refreshPartsPage()
        },
        i.refreshPartsPage = function() {
            this.setPos(),
                this.setPeiJianPage(),
                this.getHuanYuanPageList()
        },
        i.refreshPartsByReduction = function(t) {
            0 == t.sucess ? this.refreshReducePage() : Toast.launch("还原配件失败")
        },
        i.refreshReducePage = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.Parts_List_Refresh, this.refreshReducePage, this),
                this.setHuanYuanPage()
        },
        i.refreshPartsByDecompose = function(t) {
            0 == t.res ? GameEventDispatcher.getInstance().addEventListener(GameEvent.Parts_List_Refresh, this.refreshHuishouPage, this) : 1 == t.res ? Toast.launch("非法id") : 2 == t.res && Toast.launch("金币不足")
        },
        i.refreshHuishouPage = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.Parts_List_Refresh, this.refreshHuishouPage, this),
                this.setHuiShouPage()
        },
        i.setPos = function() {
            this.pos = this.scroller.viewport.scrollV
        },
        i.moveScroller = function(t) {
            this.scroller.viewport.validateNow(),
                this.scroller.viewport.scrollV = t
        },
        e
}(WindowBase);
egret.registerClass(WindowPeiJian, "WindowPeiJian");
var partsFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowPartsManager_ClickShowOperate, this.showPanelEventHandler, this)
        },
        i.showPanelEventHandler = function(t) {
            t.parames != this.data.id && this.panelOperate && (GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowPartsManager_ClickShowOperate, this.showPanelEventHandler, this), this.height -= this.panelOperate.height, this.removeChild(this.panelOperate), this.panelOperate = void 0)
        },
        i.remould = function() {
            UserData.getInstance()._level >= 6 ? WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                data: this.data.data,
                type: partMetalType.parts,
                index: 2
            }) : Toast.launch("该功能6级开放")
        },
        i.upgrade = function() {
            UserData.getInstance()._level >= 5 ? WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                data: this.data.data,
                type: partMetalType.parts,
                index: 1
            }) : Toast.launch("该功能5级开放")
        },
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastOne ? (this.skinName = "ShipBuildingInformationBar02Skin", this.txtDesc.text = "获取配件", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        UserData.getInstance()._level >= 19 ? TiaoZhuanAlert.getInstance().show("", "挑战BOSS及精英关卡", "商城购买宝箱",
                            function() {
                                MainUI.instance.bottomUI.showPveByForce()
                            },
                            function() {
                                WindowManager.getInstance().hideAll(),
                                    GameData.skipShipGuide ? (WindowShop.PAPER_INDEX = 2, WindowShop.STORE_INDEX = 0, WindowShop.VIP_INDEX = 1, WindowShop.CAPTAIN_INDEX = 3, WindowShop.MEDAL_INDEX = 4, WindowShop.CURR_PAGE = WindowShop.STORE_INDEX) : WindowShop.CURR_PAGE = WindowShop.STORE_INDEX,
                                    MainUI.instance.bottomUI.showShopForce(WindowShop.CURR_PAGE)
                            }) : Toast.launch("19级开启此功能")
                    },
                    this)) : (this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml"
                    /*tpa=resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml*/
                    , this.data.islocked ? this.iconLock.source = "GUI_Shipbuilding_Icon_locked_png" : this.iconLock.source = "GUI_Shipbuilding_Icon_open_png", this.data.isShowRedPoint ? this.btnMorePoint.visible = !0 : this.btnMorePoint.visible = !1, SUI.setTextureAsync(this.iconPic, this.data.pic), SUI.setTextureAsync(this.iconBg, Path.itemBackURL + "itemBack_item_sml_" + this.data.quality + ".png"), this.btnShowPanel.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.btnShowPanel.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            e.panelOperate ? (e.height -= e.panelOperate.height, e.removeChild(e.panelOperate), e.panelOperate = void 0) : (e.panelOperate = new eui.Component, e.panelOperate.skinName = "resource/eui_skins/item/xialacaidananiu02Skin.exml"
                                /*tpa=resource/eui_skins/item/xialacaidananiu02Skin.exml*/
                                , e.addChild(e.panelOperate), e.panelOperate.y = e.height, e.panelOperate.x = 0, e.panelOperate.btnRemould.addEventListener(egret.TouchEvent.TOUCH_TAP, e.remould, e), e.panelOperate.btnUpgrade.addEventListener(egret.TouchEvent.TOUCH_TAP, e.upgrade, e), e.height = e.height + e.panelOperate.height, GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowPartsManager_ClickShowOperate, e.showPanelEventHandler, e), GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowPartsManager_ClickShowOperate, e.data.id)))
                        },
                        this), this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                                data: e.data.data,
                                type: shipInfoWindowType.partsInfo
                            })
                        },
                        this), this.iconLock.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            RequestManager.GetInstance().RequestLockParts(e.data.id, !e.data.islocked)
                        },
                        this)), "" == this.data.euqipedShip ? this.txtEuqipedIn.visible = !1 : this.txtEuqipedIn.visible = !0))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(partsFactoryListItem, "partsFactoryListItem");
var partsReduceFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastOne ? (this.skinName = "ShipBuildingInformationBar02Skin", this.txtDesc.text = "获取配件", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        UserData.getInstance()._level >= 19 ? TiaoZhuanAlert.getInstance().show("", "挑战BOSS及精英关卡", "商城购买宝箱",
                            function() {
                                MainUI.instance.bottomUI.showPveByForce()
                            },
                            function() {
                                WindowManager.getInstance().hideAll(),
                                    GameData.skipShipGuide ? (WindowShop.PAPER_INDEX = 2, WindowShop.STORE_INDEX = 0, WindowShop.VIP_INDEX = 1, WindowShop.CAPTAIN_INDEX = 3, WindowShop.MEDAL_INDEX = 4, WindowShop.CURR_PAGE = WindowShop.STORE_INDEX) : WindowShop.CURR_PAGE = WindowShop.STORE_INDEX,
                                    MainUI.instance.bottomUI.showShopForce(WindowShop.CURR_PAGE)
                            }) : Toast.launch("19级开启此功能")
                    },
                    this)) : (this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml"
                    /*tpa=resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml*/
                    , SUI.setTextureAsync(this.iconPic, this.data.pic), SUI.setTextureAsync(this.iconBg, Path.itemBackURL + "itemBack_item_sml_" + this.data.quality + ".png"), this.reduceBtn.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.reduceBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            egret.log("发送还原配件消息"),
                                PartsManager.getInstance().sendReductionPartsInfo(e.data.id)
                        },
                        this), this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                                data: e.data.data,
                                type: shipInfoWindowType.partsInfo
                            })
                        },
                        this))))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(partsReduceFactoryListItem, "partsReduceFactoryListItem");
var partsSellListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastOne ? (this.skinName = "ShipBuildingInformationBar02Skin", this.txtDesc.text = "获取配件", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        UserData.getInstance()._level >= 19 ? TiaoZhuanAlert.getInstance().show("", "挑战BOSS及精英关卡", "商城购买宝箱",
                            function() {
                                MainUI.instance.bottomUI.showPveByForce()
                            },
                            function() {
                                WindowManager.getInstance().hideAll(),
                                    GameData.skipShipGuide ? (WindowShop.PAPER_INDEX = 2, WindowShop.STORE_INDEX = 0, WindowShop.VIP_INDEX = 1, WindowShop.CAPTAIN_INDEX = 3, WindowShop.MEDAL_INDEX = 4, WindowShop.CURR_PAGE = WindowShop.STORE_INDEX) : WindowShop.CURR_PAGE = WindowShop.STORE_INDEX,
                                    MainUI.instance.bottomUI.showShopForce(WindowShop.CURR_PAGE)
                            }) : Toast.launch("19级开启此功能")
                    },
                    this)) : (this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml"
                    /*tpa=resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml*/
                    , SUI.setTextureAsync(this.iconPic, this.data.pic), SUI.setTextureAsync(this.iconBg, Path.itemBackURL + "itemBack_item_sml_" + this.data.quality + ".png"), this.checkBoxBtn.hasEventListener(egret.Event.CHANGE) || this.checkBoxBtn.addEventListener(egret.Event.CHANGE,
                        function() {
                            if (PartsManager.getInstance().setHuishouNum(e.data.id, e.checkBoxBtn.selected), PartsManager.getInstance().setListItemSelectedState(e.data.id, e.checkBoxBtn.selected), e.checkBoxBtn.selected) PartsManager.getInstance().reductionPartsIds.push(e.data.id);
                            else {
                                for (var t = [], a = PartsManager.getInstance().reductionPartsIds.length - 1; a >= 0; --a) console.log(PartsManager.getInstance().reductionPartsIds[a]),
                                    e.data.id != PartsManager.getInstance().reductionPartsIds[a] && t.push(PartsManager.getInstance().reductionPartsIds[a]);
                                PartsManager.getInstance().reductionPartsIds = t
                            }
                        },
                        this)))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(partsSellListItem, "partsSellListItem");
var WindowPrecious = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ZB_DuoBaoQiBingSkin.exml"
            /*tpa=resource/eui_skins/ZB_DuoBaoQiBingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["parts", "partspieces", "medalData", "medalpiece"],
                function() {
                    ConfigData.preLoadDats(["robNPCData"], [RobnpcdataParser],
                        function() {
                            GameEventDispatcher.getInstance().addEventListener(GameEvent.PART_PIECES, t.updatePrecious, t),
                                GameEventDispatcher.getInstance().addEventListener(GameEvent.MEDAL_PIECES, t.updatePrecious, t),
                                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceSoulPieceList),
                                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DcePartPieceList),
                                t.initUI()
                        })
                })
        },
        i.setData = function(t) {
            t.auto && (t.index ? (this.tabIndex = t.index, this["t" + t.index].dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))) : this["t" + e.jiluTabIndex].dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP)))
        },
        i.initUI = function() {
            102 != GuideManager.step || GuideManager.merge2GuideBool || GuideManager.nextStep(),
                MainUI.instance.changeTopMode(topUIMode.simple);
            for (var t = 1; 6 > t; t++) this["t" + t].index = t,
                this["t" + t].addEventListener(egret.TouchEvent.TOUCH_TAP, this.tabHandler, this);
            this.t1.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP)),
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this),
                this.autoBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.compoundHandler, this),
                this.btnSkipToShop.addEventListener(egret.TouchEvent.TOUCH_TAP, this.shopHandler, this),
                this.btnSkipToPVE.addEventListener(egret.TouchEvent.TOUCH_TAP, this.pveHandler, this),
                this.compoundBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.compoundHandler, this),
                this.icon.addEventListener(egret.TouchEvent.TOUCH_TAP, this.infoHandler, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.MERGE_COMPLETE, this.updateShow, this)
        },
        i.infoHandler = function(t) {
            var a;
            e.selectedItem.medal ? (a = ConfigData.getDataByKey("medalpiece", e.selectedItem.iData.id), WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: {
                    soulid: a.medal_id
                },
                type: shipInfoWindowType.soulPreview
            })) : (a = ConfigData.getDataByKey("partspieces", e.selectedItem.iData.id), WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: {
                    partsid: a.part_id
                },
                type: shipInfoWindowType.partsPreview
            }))
        },
        i.shopHandler = function(t) {
            this.closeHandler(null),
                MainUI.instance.bottomUI.lastBtn = null,
                WindowManager.getInstance().show(WindowManager.windowType.Shop)
        },
        i.pveHandler = function(t) {
            this.closeHandler(null),
                MainUI.instance.bottomUI.lastBtn = null,
                MainWorldManager.instance.openPVEWindow()
        },
        i.compoundHandler = function(t) {
            var a;
            e.selectedItem.medal ? (a = ConfigData.getDataByKey("medalpiece", e.selectedItem.iData.id), RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceComposeSouls, {
                    soulid: Number(a.medal_id),
                    type: t.currentTarget == this.autoBtn ? 0 : 1
                })) : (a = ConfigData.getDataByKey("partspieces", e.selectedItem.iData.id), RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceComposeParts, {
                    id: Number(a.part_id),
                    all: t.currentTarget == this.autoBtn ? 0 : 1
                })),
                110 == GuideManager.step && GuideManager.nextStep()
        },
        i.tabHandler = function(t) {
            for (var a = t.currentTarget,
                    i = 1; 6 > i; i++) this["t" + i] == a ? this["t" + i].selected = !0 : this["t" + i].selected = !1;
            this.tabIndex = a.index,
                e.selectedItem = null,
                this.render()
        },
        i.render = function() {
            this.vessel.removeChildren();
            var t;
            if (t = this.tabIndex < 5 ? PiecesManager.getInstance().getPartPiecesByTab(this.tabIndex) : PiecesManager.getInstance().getMedalPieces(), t.length > 0) {
                for (var e = 0; e < t.length; e++) {
                    var a = new PreciousItem(t[e], this);
                    this.vessel.addChild(a),
                        a.x = 110 * e,
                        0 == e && a.setSelected(!0)
                }
                this.vessel.width = 110 * e,
                    this.HaveNoPieces.visible = !1,
                    this.HavePieces.visible = !0
            } else this.HaveNoPieces.visible = !0,
                this.HavePieces.visible = !1;
            this.vessel.scrollH = 0
        },
        i.updatePrecious = function() {
            this.render()
        },
        i.updateShow = function() {
            var t = this,
                a = Path.effectUrl + "daojuhecheng/daojuhecheng.json",
                i = Path.effectUrl + "daojuhecheng/texture.json",
                n = Path.effectUrl + "daojuhecheng/texture.png";
            Utils.createDragonBone(a, i, n, "daojuhecheng", "normal",
                function(a, i) {
                    a && (t.addChild(a.display), a.display.x = 320, a.display.y = 550, a.display.scaleX = 2, a.display.scaleY = 2, a.animation.gotoAndPlay("normal"), a.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                        function() {
                            Utils.removeDragonBone(a),
                                e.selectedItem && e.selectedItem.setSelected(!0)
                        },
                        void 0))
                },
                this)
        },
        i.showPieces = function(t) {
            if (this.showPiecesId != t.id) {
                this.showPiecesId = t.id;
                var a, i, n, s;
                e.selectedItem.medal ? (i = ConfigData.getDataByKey("medalpiece", t.id), a = PiecesManager.getInstance().getMedalPiecesCount(i.medal_id), n = PiecesManager.getInstance().getMedalPiecesById(i.medal_id), i = ConfigData.getDataByKey("medalData", i.medal_id), s = Path.soulIconURL + i.icon, Utils.getImgByUrl(Path.soulIconURL + i.icon, this.icon), this.nameTxt.text = MedaldataParser.GetInstance().getItemById(i.id).name_l) : (i = ConfigData.getDataByKey("partspieces", t.id), a = PiecesManager.getInstance().getPartPiecesCount(i.part_id), n = PiecesManager.getInstance().getPartPiecesById(i.part_id), i = ConfigData.getDataByKey("parts", i.part_id), s = Path.partsIconURL + i.icon, Utils.getImgByUrl(Path.partsIconURL + i.icon, this.icon), this.nameTxt.text = i.name_l);
                var r = t.id.toString(),
                    o = 10 * Number(r.substr(0, r.length - 1));
                if (this.nameTxt.textColor = QualitySystem.getColorByQuality(i.quality), this.pieces4.visible = !1, this.pieces5.visible = !1, this.pieces6.visible = !1, a > 0) {
                    var l = 0;
                    this["pieces" + a].visible = !0;
                    for (var h = 1; a + 1 > h; h++) {
                        var c = this["pieces" + a + "_" + h];
                        Utils.getImgByUrl(s, c.imgIcon),
                            Utils.getImgByUrl(QualitySystem.getItemSmallBack(i.quality), c.imgBg),
                            n[h] ? (c.txtNum.text = n[h].count, c.imgZeroFlag.visible = !1, l++, c.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.getRobberyList, this)) : (103 == GuideManager.step && (GuideManager.positionParam = {
                                x: c.x - 10,
                                y: c.y + 192 + 116,
                                w: c.width,
                                h: c.height,
                                index: h
                            }), c.imgZeroFlag.visible = !0, c.txtNum.text = 0, c.id = o + h, c.type = e.selectedItem.medal ? 2 : 1, c.addEventListener(egret.TouchEvent.TOUCH_TAP, this.getRobberyList, this)),
                            Utils.getImgByUrl(Path.itemBackURL + "slice_" + h + ".png", c.imgModule)
                    }
                }
                l >= a && !GuideManager.mergeGuideBool && SceneManager.instance.curSceneType != SceneType.BATTLE && (WindowBattleSweepDrop.instance && WindowBattleSweepDrop.instance.close(), e.guideBool = !0, GuideManager.nextStep(109)),
                    this.autoBtn.enabled = this.compoundBtn.enabled = l >= a,
                    e.selectedItem && (e.selectedItem.imgNotice.visible = l >= a)
            }
        },
        i.getRobberyList = function(t) {
            104 == GuideManager.step && GuideManager.nextStep(),
                e.jiluTabIndex = this.tabIndex,
                e.selectedIndex = e.selectedItem.iData.id,
                WindowManager.getInstance().show(WindowManager.windowType.PreciouseBattle, {
                    id: t.currentTarget.id,
                    type: t.currentTarget.type
                })
        },
        i.closeHandler = function(t) {
            e.guideBool = !1,
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.PART_PIECES, this.updatePrecious, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.MEDAL_PIECES, this.updatePrecious, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.MERGE_COMPLETE, this.updateShow, this),
                WindowManager.getInstance().hide(WindowManager.windowType.ZhenbaPrecious)
        },
        e
}(WindowBase);
egret.registerClass(WindowPrecious, "WindowPrecious");
var PreciousItem = function(t) {
    function e(e, a) {
        t.call(this, !1, !0),
            this.iData = e,
            this.myParent = a,
            this.skinName = "resource/eui_skins/components/ZB_DBQB_TargetSkin.exml"
            /*tpa=resource/eui_skins/components/ZB_DBQB_TargetSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t, e = this;
            this.medal = this.iData.id > 1e6,
                this.medal ? (t = ConfigData.getDataByKey("medalData", Math.floor(this.iData.id / 100).toString()), Utils.getImgByUrl(Path.soulIconURL + t.icon, this.imgIcon,
                    function() {
                        e.imgIcon.width = e.imgIcon.height = 79,
                            e.imgIcon.x = (e.width - e.imgIcon.width) / 2,
                            e.imgIcon.y = (e.height - e.imgIcon.height) / 2
                    }), Utils.getImgByUrl(QualitySystem.getItemSmallBack(t.quality), this.imgBg)) : (t = ConfigData.getDataByKey("parts", Number(this.iData.id.toString().substr(2, 2)).toString()), Utils.getImgByUrl(Path.partsIconURL + t.icon, this.imgIcon,
                    function() {
                        e.imgIcon.width = e.imgIcon.height = 79,
                            e.imgIcon.x = (e.width - e.imgIcon.width) / 2,
                            e.imgIcon.y = (e.height - e.imgIcon.height) / 2
                    }), Utils.getImgByUrl(QualitySystem.getItemSmallBack(t.quality), this.imgBg)),
                this.imgNotice.visible = !1,
                this.setSelected(this.selectedBool),
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectedHandler, this),
                WindowPrecious.selectedIndex == this.iData.id && egret.setTimeout(function() {
                        e.setSelected(!0)
                    },
                    this, 100)
        },
        i.setSelected = function(t) {
            this.selectedBool = t,
                this.imgSelect && (t && (WindowPrecious.selectedItem && WindowPrecious.selectedItem.setSelected(!1), WindowPrecious.selectedItem = this, this.myParent.showPieces(this.iData)), this.imgSelect.visible = t)
        },
        i.selectedHandler = function(t) {
            this.setSelected(!0)
        },
        e
}(WindowBase);
egret.registerClass(PreciousItem, "PreciousItem");
var preciousBattleType;
!
function(t) {
    t[t.none = 0] = "none",
        t[t.part = 1] = "part",
        t[t.medal = 2] = "medal"
}(preciousBattleType || (preciousBattleType = {}));
var WindowPreciousBattle = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZB_DuoBaoQiBing_DiRenSkin.exml"
            /*tpa=resource/eui_skins/ZB_DuoBaoQiBing_DiRenSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            var a = this;
            e._instance = this,
                this.pData = t,
                ConfigData.preLoadList(["shipData", "npcData", "shipModelData", "robNPCData"],
                    function() {
                        GameEventDispatcher.getInstance().addEventListener(GameEvent.ROBBERYLIST_UPDATE, a.initList, a),
                            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceRobberyList, {
                                partpieceid: t.id,
                                type: t.type
                            })
                    }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this),
                this.btnRefreshenemy.addEventListener(egret.TouchEvent.TOUCH_TAP, this.reFreshListHandler, this),
                WindowBattleSweepDrop.jiluXunBao = UserData.getInstance().getRes(TypeDefine.RES.XunBaoLing)
        },
        i.reFreshListHandler = function(t) {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceRobberyList, {
                partpieceid: this.pData.id,
                type: this.pData.type
            })
        },
        i.closeHandler = function(t) {
            this.destroy()
        },
        i.clear = function() {},
        i.initList = function() {
            this.vessel.removeChildren();
            for (var t = PiecesManager.getInstance().getRankerList(), e = 0; e < t.length; e++) {
                var a = new PreciousBattleItem(t[e].data, t[e].type, this);
                this.vessel.addChild(a),
                    a.y = 170 * e
            }
            this.vessel.height = 170 * e
        },
        e.preciousBattle = function(t) {
            if (void 0 === t && (t = 0), e._instance) {
                if (1 == t && UserData.getInstance()._level < 40) return void Toast.launch(Locales.get("panel_limit_captain_txt_6", 40));
                if (UserData.getInstance().getRes(TypeDefine.RES.XunBaoLing) > 0) {
                    var a = Transport.getPkg(ProtocolMgr.ID_DceBattleStart);
                    a.type = 8,
                        a.targetID = e.selectedItem.iData.uid,
                        a.rank = 0,
                        a.sweep = t,
                        a.partpieceid = Number(e._instance.pData.id),
                        a.selfrank = 0,
                        a.robberytype = e.selectedItem.myTarget.pData.type,
                        1 == t ? Transport.instance.send(a) : BattleManager.instance.showCloud(function() {
                            Transport.instance.send(a)
                        })
                } else {
                    var i = {};
                    i.title = Locales.get("使用寻宝证可以增加寻宝令"),
                        i.itemId = 1131,
                        i.shopId = 39,
                        WindowManager.getInstance().show(WindowManager.windowType.ItemUse, i)
                }
            }
        },
        e
}(WindowBase);
egret.registerClass(WindowPreciousBattle, "WindowPreciousBattle");
var PreciousBattleItem = function(t) {
    function e(e, a, i) {
        t.call(this),
            this.iData = e,
            this.type = a,
            this.myTarget = i,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/item/ZB_DuoBaoQiBing_1_Skin.exml"
            /*tpa=resource/eui_skins/item/ZB_DuoBaoQiBing_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t;
            if (Number(this.iData.uid) < 1e5) {
                var e = ConfigData.getDataByKey("robNPCData", this.iData.uid);
                this.txtName.text = e.name_l
            } else this.txtName.text = this.iData.name;
            this.myTarget.pData.type == preciousBattleType.part ? (t = ConfigData.getDataByKey("partspieces", String(this.myTarget.pData.id)), t = ConfigData.getDataByKey("parts", t.part_id)) : this.myTarget.pData.type == preciousBattleType.medal && (t = ConfigData.getDataByKey("medalpiece", this.myTarget.pData.id), t = ConfigData.getDataByKey("medalData", t.medal_id)),
                this.btnRobTen.addEventListener(egret.TouchEvent.TOUCH_TAP, this.robTenHandler, this),
                this.btnRobOne.addEventListener(egret.TouchEvent.TOUCH_TAP, this.robOneHandler, this),
                this.txtLevel.text = Locales.get("panel_reward_txt_growup_4", this.iData.level),
                Utils.getImgByUrl(Path.GetCampPicUrl(this.iData.camp, 3), this.imgCamp),
                2 == this.type ? (this.txtProbility.text = Locales.get("panel_plunderfight_rate_1"), this.btnRobTen.enabled = !1) : Number(t.quality) < 4 ? this.txtProbility.text = Locales.get("panel_plunderfight_rate_2") : Number(t.quality) < 5 ? this.txtProbility.text = Locales.get("panel_plunderfight_rate_3") : this.txtProbility.text = Locales.get("panel_plunderfight_rate_4");
            for (var a = 0; 3 > a; a++) {
                var i = this["ship" + (a + 1)];
                if (this.iData.modelid[a]) {
                    var t;
                    if (1 == this.type) {
                        t = ConfigData.getDataByKey("npcData", this.iData.modelid[a]);
                        var n = ConfigData.getDataByKey("shipModelData", t.modelId);
                        Utils.getImgByUrl(ShipManager.getInstance().getShipTypeIcon(t.shipType), i.imgType),
                            Utils.getImgByUrl(Path.shipURL + "y_" + n.url, i.imgIcon)
                    } else t = ConfigData.getDataByKey("shipData", this.iData.modelid[a]),
                        Utils.getImgByUrl(ShipManager.getInstance().getShipTypeIcon(t.shipType), i.imgType),
                        Utils.getImgByUrl(ShipManager.getInstance().getShipPicByType(this.iData.modelid[a]), i.imgIcon);
                    this["txtShipName" + (a + 1)].text = Locales.get(t.name_l),
                        Utils.getImgByUrl(QualitySystem.getShipSmallBack(t.quality), i.imgBg)
                } else i.imgType.source = "",
                    this["txtShipName" + (a + 1)].text = ""
            }
        },
        i.robTenHandler = function(t) {
            WindowPreciousBattle.selectedItem = this,
                this.armyName = this.iData.name,
                this.armyPower = this.iData.power,
                this.armyCapm = this.iData.camp,
                WindowPreciousBattle.preciousBattle(1)
        },
        i.robOneHandler = function(t) {
            if (WindowPreciousBattle.selectedItem = this, 1 == this.type) {
                var e = ConfigData.getDataByKey("robNPCData", this.iData.uid);
                this.armyName = e.name_l,
                    this.armyPower = Number(e.power),
                    this.armyCapm = Number(e.camp)
            } else this.armyName = this.iData.name,
                this.armyPower = this.iData.power,
                this.armyCapm = this.iData.camp;
            WindowPreciousBattle.preciousBattle(),
                106 == GuideManager.step && GuideManager.clearMask()
        },
        e
}(eui.Component);
egret.registerClass(PreciousBattleItem, "PreciousBattleItem");
var WindowPVE = function(t) {
    function e() {
        t.call(this, !1),
            this._initedNormalCampaignPanel = !1,
            this._initedSpecialCampaignPanel = !1,
            this.skinName = "resource/eui_skins/ZhanYiSkin.exml"
            /*tpa=resource/eui_skins/ZhanYiSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            t.type == BattleType.BATTLE_TYPE_MAIN_SPECIAL ? this.switchType(MainWorldManager.BATTLE_TYPE_SPECIAL) : this.switchType(MainWorldManager.BATTLE_TYPE_NORMAL)
        },
        i.init = function() {
            this.btnSwitchDifficut.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnSwitchDifficut, this),
                this.btnChooseLevel.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnChooseLevel, this),
                this.btnRanking.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRanking, this),
                this.btnArrange.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnArrange, this),
                this.btnShowDrops.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnShowDrops, this),
                this.btnConquer.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnConquer, this),
                this.btnBipeOut.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnBipeOut, this),
                this.btnExploit.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnExploit, this),
                SUI.addClickEffect(this.btnExploit),
                this.setIsShowDropInfo(MainWorldManager.instance.isShowDropInfo),
                this.InitScvMap(),
                this.scvLevels.viewport = this.lstLevels,
                MainUI.instance.changeTopMode(topUIMode.simple),
                EventManager.instance.addEventListener(EventTypes.EVENT_CHOOSE_CAMPAIGN, this.OnChooseCampaign, this),
                EventManager.instance.addEventListener(EventTypes.EVENT_CHOOSE_AREA, this.OnChooseArea, this),
                EventManager.instance.addEventListener(EventTypes.MAINWORLD_OPEN_CAMPAIGN, this.OnOpenCampaign, this),
                EventManager.instance.addEventListener(EventTypes.MAINWORLD_SHOW_CAMPAIGN, this.OnShowCampaign, this),
                EventManager.instance.addEventListener(EventTypes.RED_BALL_UPDATE, this.OnRedBallUpdate, this),
                this.lstLevels.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.OnSelectLevelItem, this),
                39 == GuideManager.step && GuideManager.nextStep(),
                UserData.getInstance()._level < 6 && (this.btnExploit.visible = !1, this.imgExploitSpot.visible = !1, this.txtExploit.visible = !1),
                this.OnRedBallUpdate()
        },
        i.OnRedBallUpdate = function() {
            this.btnExploit.visible && (this.imgExploitSpot.visible = UserData.getInstance().activeTips.medal)
        },
        i.OnClickBtnExploit = function() {
            WindowManager.getInstance().show(WindowManager.windowType.Medal)
        },
        i.InitScvMap = function() {
            this._scvMapEx = new ScrollerEx,
                this._scvMapEx.width = this.scvMap.width,
                this._scvMapEx.height = this.scvMap.height,
                this._scvMapEx.x = this.scvMap.x,
                this._scvMapEx.y = this.scvMap.y,
                this._scvMapEx.viewport = this.lstMap,
                this._scvMapEx.throwSpeed = 0,
                this.scvMap.parent.addChildAt(this._scvMapEx, this.scvMap.parent.getChildIndex(this.scvMap)),
                this.scvMap.parent.removeChild(this.scvMap),
                this._scvMapEx.addEventListener(eui.UIEvent.CHANGE_START, this.OnScrollMapStart, this),
                this._scvMapEx.addEventListener(eui.UIEvent.CHANGE_END, this.OnScrollMapEnd, this)
        },
        i.setIsShowDropInfo = function(t) {
            MainWorldManager.instance.isShowDropInfo = t,
                MainWorldManager.instance.isShowDropInfo ? this.btnShowDrops.labelDisplay.text = "查看战役" : this.btnShowDrops.labelDisplay.text = "查看掉落"
        },
        i.switchType = function(t) {
            var a = this;
            MainWorldManager.instance.switchBattleType(t);
            for (var i = [], n = AreadataParser.GetInstance().getDataArr(), s = MainWorldManager.instance.getCurrentArea(), r = 0, o = 0; o < n.length; ++o) {
                var l = n[o];
                l.id <= s && i.push({
                        type: t,
                        userData: l
                    }),
                    l.id == s && (r = o)
            }
            t == MainWorldManager.BATTLE_TYPE_NORMAL ? (this.gpElite.visible = !1, this.scvLevels.visible = !0, this.btnSwitchDifficut.labelDisplay.text = "精英战役", this.btnShowDrops.visible = !0, MainWorldManager.instance.chooseCampaignId < 0 && (MainWorldManager.instance.chooseCampaignId = MainWorldManager.instance.getCurrentCampaign()), RequestManager.GetInstance().enterCampaign(MainWorldManager.instance.getCurrentBattleType(), MainWorldManager.instance.chooseCampaignId)) : (this.scvLevels.visible = !1, this.gpElite.visible = !0, this.btnSwitchDifficut.labelDisplay.text = "普通战役", this.btnShowDrops.visible = !1, MainWorldManager.instance.chooseCampaignId < 0 && (MainWorldManager.instance.chooseCampaignId = MainWorldManager.instance.getCurrentSpecialCampaign()), e.lastScrolled = this.lstLevels.scrollV, this.ShowCampaign(MainWorldManager.instance.chooseCampaignId, MainWorldManager.instance.getSpecialList())),
                this.lstMap.dataProvider = new eui.ArrayCollection(i),
                this.lstMap.itemRenderer = PVEMAPAreaRenderer;
            var h = !1;
            if (t == MainWorldManager.BATTLE_TYPE_NORMAL) {
                var c = StageDataLib.instance.getAreaIdById(MainWorldManager.instance.laststagaID),
                    d = c.areaId;
                if (s > d) {
                    var g = AreadataParser.GetInstance().getItemById(s);
                    if (g) {
                        var u = UserData.getInstance()._uid + "areaTalk" + s;
                        "" == UserDefault.instance.getStringForKey(u) && GuideManager.guideComplete && (WindowManager.getInstance().show(WindowManager.windowType.pveTalking, {
                            cfg: g,
                            callback: function() {
                                a.OnChooseArea(s, r)
                            },
                            thisObj: this
                        }), h = !0, UserDefault.instance.setStringForKey(u, "t"))
                    }
                }
            }
            h || (MainWorldManager.instance.scrolled < 0 ? this.OnChooseArea(s, r) : this.OnChooseArea(s, MainWorldManager.instance.scrolled))
        },
        i.ShowCampaign = function(t, a) {
            if (!(0 > t))
                if (MainWorldManager.instance.getCurrentBattleType() == MainWorldManager.BATTLE_TYPE_NORMAL) {
                    for (var i = [], n = a.length - 1; n >= 0; --n) i.push({
                        index: n + 1,
                        campaignId: t,
                        userData: a[n]
                    });
                    this.lstLevels.dataProvider = new eui.ArrayCollection(i),
                        this.lstLevels.itemRenderer = PVENormalBattleItemRenderer,
                        e.lastScrolled && (this.lstLevels.validateNow(), this.lstLevels.scrollV = e.lastScrolled, e.lastScrolled = null)
                } else {
                    this.txtEliteRewards.text = Locales.get("zz_reward"),
                        this.txtEliteDrops.text = Locales.get("zz_drop"),
                        this.btnConquer.labelDisplay.text = Locales.get("panel_sweep_txt_title"),
                        this.btnBipeOut.labelDisplay.text = Locales.get("panel_stageselect_normal_sweepBtn");
                    var s = StageSpecialDataLib.instance.getDataByCampaignId(t);
                    this.txtEliteTitle.text = s.desc_l,
                        this.txtEliteOil.text = s.costOil.toString();
                    var r = MainStageOptData.getSpecialCount(StageSpecialDataLib.instance.getCampaignIdBySpecialId(s.id));
                    this.txtEliteLeftTimes.text = Locales.get("panel_stageselect_special_dayAtkCount"),
                        this.txtEliteLeftTimesValue.text = "{0}/{1}".format(s.dayAtkCount - r, s.dayAtkCount),
                        this.txtEliteExp.text = s.exp.toString(),
                        this.txtEliteGold.text = s.gold.toString();
                    for (var n = 0; 6 > n; ++n) {
                        var o = n + 1,
                            l = this["item" + o];
                        if (s.itemType.length > n) {
                            var h = (s.itemType[n], s.itemId[n], GlobalFunction.getDropDataByTypeAndId(s.itemType[n], s.itemId[n]));
                            SUI.setItemIcon(l, h)
                        } else l.visible = !1
                    }
                    var c = !1,
                        d = Math.floor(s.id % 100).toString(),
                        g = MainWorldManager.instance.getSpecialList()[d];
                    this._curSpeicalCampaignData = g,
                        g && g.serverData ? (MainWorldManager.oldStar = g.serverData.star, c = !0) : MainWorldManager.oldStar = 0,
                        c ? UserData.getInstance().getPlayerLevel() < 20 ? this.btnBipeOut.enabled = !1 : this.btnBipeOut.enabled = !0 : this.btnBipeOut.enabled = !1
                }
        },
        i.OnClickBtnSwitchDifficut = function(t) {
            var e = MainWorldManager.instance.getCurrentBattleType();
            e == MainWorldManager.BATTLE_TYPE_NORMAL ? MainWorldManager.instance.sendEnterSpecial() : MainWorldManager.instance.sendEnterNormal(),
                97 == GuideManager.step && GuideManager.nextStep()
        },
        i.OnClickBtnChooseLevel = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.PVEChooseLevel)
        },
        i.OnClickBtnRanking = function(t) {
            MainWorldManager.instance.getCurrentBattleType() == MainWorldManager.BATTLE_TYPE_NORMAL ? RankListManager.getInstance().showRankWin(2) : RankListManager.getInstance().showRankWin(3)
        },
        i.OnClickBtnArrange = function(t) {
            WindowManager.getInstance().needShowWindow = !0,
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceGetTactic, null, !0)
        },
        i.OnClickBtnShowDrops = function(t) {
            this.setIsShowDropInfo(!MainWorldManager.instance.isShowDropInfo),
                EventManager.instance.dispatchEvent(EventTypes.EVENT_REFRESH_PVE_LEVEL_ITEM)
        },
        i.OnClickBtnConquer = function(t) {
            99 == GuideManager.step && GuideManager.nextStep();
            var e = MainWorldManager.instance.SpecialFightCheck(this._curSpeicalCampaignData.baseData);
            if (e == MainWorldManager.OilLimit) {
                var a = ItemsManager.getInstance().getItemById(1076);
                if (a && a.count > 0) {
                    var i = {};
                    i.title = Locales.get("panel_AlertLueduolingBuy_txt_comment_6"),
                        i.itemId = 1076,
                        WindowManager.getInstance().show(WindowManager.windowType.ItemUse, i)
                } else WindowManager.getInstance().show(WindowManager.windowType.OilRefining)
            } else e == MainWorldManager.CountLimit ? Toast.launch(Locales.get("panel_MainWorldStageSelectNormalPanel_txt_WindWord"), 16711680) : (BattleManager.instance.setFirstBaseData(this._curSpeicalCampaignData.baseData.exp, this._curSpeicalCampaignData.baseData.gold), BattleManager.instance.sendMainSpecialBattleStart(this._curSpeicalCampaignData.baseData.id), EventManager.instance.dispatchEvent(EventTypes.MAINWORLD_BAKE, {
                type: 2,
                specialBaseData: this._curSpeicalCampaignData.baseData
            }))
        },
        i.OnClickBtnBipeOut = function(t) {
            if (1 == VipParser.GetInstance().getItemById(UserData.getInstance().getVipLevel()).eliteRaids) {
                var e = MainWorldManager.instance.SpecialFightCheck(this._curSpeicalCampaignData.baseData);
                if (e == MainWorldManager.OilLimit) {
                    var a = ItemsManager.getInstance().getItemById(1076);
                    if (a && a.count > 0) {
                        var i = {};
                        i.title = Locales.get("panel_AlertLueduolingBuy_txt_comment_6"),
                            i.itemId = 1076,
                            WindowManager.getInstance().show(WindowManager.windowType.ItemUse, i)
                    } else WindowManager.getInstance().show(WindowManager.windowType.OilRefining)
                } else if (e == MainWorldManager.CountLimit) Toast.launch(Locales.get("panel_MainWorldStageSelectNormalPanel_txt_WindWord"), 16711680);
                else {
                    var n = this._curSpeicalCampaignData.baseData.name_l,
                        s = this._curSpeicalCampaignData.serverData ? this._curSpeicalCampaignData.serverData.todayCount : 0,
                        r = this._curSpeicalCampaignData.baseData.dayAtkCount - s,
                        i = (this._curSpeicalCampaignData.baseData, {});
                    i.title = n,
                        i.leftTimes = r,
                        i.stageInfo = this._curSpeicalCampaignData,
                        i.campaignData = this._curSpeicalCampaignData.baseData,
                        i.exp = this._curSpeicalCampaignData.baseData.exp,
                        i.gold = this._curSpeicalCampaignData.baseData.gold,
                        i.type = BattleType.BATTLE_TYPE_MAIN_SPECIAL,
                        WindowManager.getInstance().show(WindowManager.windowType.PVEConfirm, i)
                }
            } else Toast.launch(Locales.get("panel_stageselect_special_wind_vip"), 16711680)
        },
        i.OnChooseCampaign = function(t) {
            MainWorldManager.instance.getCurrentBattleType() == MainWorldManager.BATTLE_TYPE_NORMAL ? RequestManager.GetInstance().enterCampaign(MainWorldManager.instance.getCurrentBattleType(), t) : this.ShowCampaign(t, MainWorldManager.instance.getSpecialList())
        },
        i.OnChooseArea = function(t, e) {
            this._scvMapEx.scrollToItemIndex(e, !1, 640, 0, this.lstMap.dataProvider.length, 300,
                function() {
                    MainWorldManager.instance.scrolled = e
                },
                this)
        },
        i.OnOpenCampaign = function(t, e) {
            this.ShowCampaign(t, e)
        },
        i.OnShowCampaign = function(t) {
            this.switchType(MainWorldManager.BATTLE_TYPE_SPECIAL)
        },
        i.OnSelectLevelItem = function(t) {
            var e = this.lstLevels.selectedItem,
                a = this.lstLevels.selectedIndex,
                i = this.lstLevels.dataProvider.getItemAt(a),
                n = i.userData.baseData;
            if (i.userData.isLock) return void Toast.launch("未开启，完成之前关卡解锁");
            var s = n.name_l,
                r = i.userData.serverData ? i.userData.serverData.todayCount : 0,
                o = n.dayAtkCount - r,
                l = CampaigndataParser.GetInstance().getItemById(i.campaignId);
            if (!i.userData.serverData || i.userData.serverData.star < 3)
                if (UnlockManager.instance.Stage_Talk_Check(i.userData) && GuideManager.guideComplete) {
                    UnlockManager.instance.LocalAddStageTalk_Current(i.userData);
                    var h = function() {
                        BattleManager.instance.BuyCheck(i.userData, i.userData.baseData) && MainWorldManager.instance.sendNormalBattle(i.userData, l, e.exp, e.gold)
                    };
                    WindowManager.getInstance().show(WindowManager.windowType.pveTalking, {
                        cfg: i.userData.baseData,
                        callback: h
                    })
                } else BattleManager.instance.BuyCheck(i.userData, i.userData.baseData) && MainWorldManager.instance.sendNormalBattle(i.userData, l, e.exp, e.gold);
            else if (BattleManager.instance.BuyCheck(i.userData, i.userData.baseData)) {
                var c = {};
                c.title = s,
                    c.leftTimes = o,
                    c.stageInfo = i.userData,
                    c.campaignData = l,
                    c.exp = e.exp,
                    c.gold = e.gold,
                    c.type = BattleType.BATTLE_TYPE_MAIN_PVE,
                    WindowManager.getInstance().show(WindowManager.windowType.PVEConfirm, c)
            }
        },
        i.OnScrollMapStart = function() {
            this._startScrolled = this._scvMapEx.getScrolled()
        },
        i.OnScrollMapEnd = function() {
            if (void 0 != this._startScrolled) {
                var t = this._scvMapEx.getScrolled() - this._startScrolled;
                this._startScrolled = void 0;
                var e = this.lstMap.dataProvider.length;
                Math.abs(t) > 20 ? t > 0 ? MainWorldManager.instance.scrolled < e - 1 && this.OnChooseArea(0, MainWorldManager.instance.scrolled + 1) : MainWorldManager.instance.scrolled > 0 && this.OnChooseArea(0, MainWorldManager.instance.scrolled - 1) : Math.abs(t) > 1 && this._scvMapEx.scrollToItemIndex(MainWorldManager.instance.scrolled, !1, 640, 0, this.lstMap.dataProvider.length)
            }
        },
        i.clear = function() {
            EventManager.instance.removeEventListenerByBindObject(this),
                MainWorldManager.instance.getCurrentBattleType() == MainWorldManager.BATTLE_TYPE_NORMAL && (e.lastScrolled = this.lstLevels.scrollV);
            var t = Path.effectUrl + "arrowshine/arrowshine.json",
                a = Path.effectUrl + "arrowshine/texture.json",
                i = Path.effectUrl + "arrowshine/texture.png";
            ResLoader.instance.unloadResList([t, a, i])
        },
        e
}(WindowBase);
egret.registerClass(WindowPVE, "WindowPVE");
var WindowPVEChooseLevel = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZhanYi_XuanZeZhangJieSkin.exml"
            /*tpa=resource/eui_skins/ZhanYi_XuanZeZhangJieSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.scvCenter.viewport = this.lstCenter,
                this.lstCenter.addEventListener(eui.ItemTapEvent.ITEM_TAP, this.OnSelectItem, this);
            for (var t = AreadataParser.GetInstance().getDataArr(), e = [], a = MainWorldManager.instance.getCurrentArea(), i = 0, n = t; i < n.length; i++) {
                var s = n[i];
                s.id <= a && e.push({
                    userData: s
                })
            }
            this.lstCenter.itemRenderer = PVEChooseAreaItemRenderer,
                this.lstCenter.dataProvider = new eui.ArrayCollection(e)
        },
        i.OnSelectItem = function(t) {
            var e = AreadataParser.GetInstance().getDataArr(),
                a = e[this.lstCenter.selectedIndex];
            EventManager.instance.dispatchEvent(EventTypes.EVENT_CHOOSE_AREA, a.id, this.lstCenter.selectedIndex),
                this.close()
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowPVEChooseLevel, "WindowPVEChooseLevel");
var WindowPVEConfirm = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ZhanYi_GuanQia.exml"
            /*tpa=resource/eui_skins/ZhanYi_GuanQia.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            var e = this;
            this.txtLevel.text = t.title;
            var a = UserData.getInstance().getLeftSweepTimes(),
                i = a > t.leftTimes ? t.leftTimes : a;
            this.leftSweepCount = i,
                1e8 == a ? (this.txtValue.text = "", this.txtDesc.text = Locales.get("panel_sweep_txt_saodangcount")) : this.txtValue.text = a.toString(),
                this._stageInfo = t.stageInfo,
                this._campaignData = t.campaignData,
                this._rewardExp = t.exp,
                this._rewardGold = t.gold,
                this._battleType = t.type,
                t.leftTimes <= 0 && (this.txtValue.textColor = 16711680);
            var n = 5;
            t.type == BattleType.BATTLE_TYPE_MAIN_SPECIAL && (this.btnBattle.visible = !1, this.btnWipeOut.x = this.btnBattle.x, n = 3);
            var s = BattleManager.instance.getSweepCount(this._stageInfo, 1, n),
                r = s[0].toString(),
                o = Number(s[1]);
            if (this.btnWipeOutFive.labelDisplay.text = r, this.RealSweepCount = o, s = BattleManager.instance.getSweepCount(this._stageInfo, 0, n), r = s[0].toString(), o = Number(s[1]), this.btnWipeOut.labelDisplay.text = r, this.RealSweepCount = o, 0 == this.RealSweepCount) {
                this.btnWipeOut.visible = !1,
                    this.btnWipeOutFive.visible = !1,
                    this.btnBattle.x = this.btnWipeOut.x;
                var l = t.stageInfo.baseData.dayAtkCount - t.stageInfo.serverData.todayCount;
                0 >= l && (this.btnBattle.labelDisplay.text = Locales.get("alert_ok"), this.btnBattle.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnBattle, this), this.btnBattle.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        e.close()
                    },
                    this))
            }
        },
        i.init = function() {
            (13 == GuideManager.step || 29 == GuideManager.step) && GuideManager.nextStep(),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnWipeOut.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnWipeOut, this),
                this.btnWipeOutFive.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnWipeOutFive, this),
                this.btnBattle.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnBattle, this),
                this.txtDesc.text = Locales.get("panel_sweep_txt_saodang"),
                this.btnBattle.labelDisplay.text = Locales.get("panel_sweep_btn_zhengfu"),
                this.btnWipeOut.labelDisplay.text = Locales.get("panel_sweep_btn_saodang", 1),
                this.btnWipeOutFive.labelDisplay.text = Locales.get("panel_sweep_btn_saodang", 5)
        },
        i.OnClickBtnClose = function(t) {
            this.close(),
                GuideManager.clearMask()
        },
        i.sweep = function(t) {
            if (UserData.getInstance().getPlayerLevel() < 15) return void Toast.launch("需要达到15级才能解锁");
            MainWorldManager.instance.currentSweepType = this._battleType,
                MainWorldManager.instance.currentSweepTimesType = t,
                MainWorldManager.instance.currentSweepCampaign = this._stageInfo;
            var e = 0 == t ? 1 : 2,
                a = 1 == e ? 1 : this.RealSweepCount;
            if (this._battleType == BattleType.BATTLE_TYPE_MAIN_PVE) {
                if (MainWorldManager.instance.FightCheck(this._stageInfo, a) == MainWorldManager.OilLimit) {
                    var i = ItemsManager.getInstance().getItemById(1076);
                    if (i && i.count > 0) {
                        var n = {};
                        n.title = Locales.get("panel_AlertLueduolingBuy_txt_comment_6"),
                            n.itemId = 1076,
                            WindowManager.getInstance().show(WindowManager.windowType.ItemUse, n)
                    } else WindowManager.getInstance().show(WindowManager.windowType.OilRefining);
                    return
                }
                MainWorldManager.instance.FightCheck(this._stageInfo) == MainWorldManager.CountLimit ? Toast.launch(Locales.get("panel_MainWorldStageSelectNormalPanel_txt_WindWord"), 16711680) : MainWorldManager.instance.sendNormalSweepBattle(this._stageInfo, this._campaignData, e)
            } else {
                if (MainWorldManager.instance.SpecialFightCheck(this._stageInfo.baseData, a) == MainWorldManager.OilLimit) {
                    var i = ItemsManager.getInstance().getItemById(1076);
                    if (i && i.count > 0) {
                        var n = {};
                        n.title = Locales.get("panel_AlertLueduolingBuy_txt_comment_6"),
                            n.itemId = 1076,
                            WindowManager.getInstance().show(WindowManager.windowType.ItemUse, n)
                    } else WindowManager.getInstance().show(WindowManager.windowType.OilRefining);
                    return
                }
                MainWorldManager.instance.SpecialFightCheck(this._stageInfo.baseData, a) == MainWorldManager.CountLimit ? Toast.launch(Locales.get("panel_MainWorldStageSelectNormalPanel_txt_WindWord"), 16711680) : MainWorldManager.instance.sendSpeSweepBattle(this._stageInfo, e)
            }
        },
        i.OnClickBtnWipeOut = function(t) {
            this.sweep(0),
                this.close()
        },
        i.OnClickBtnWipeOutFive = function(t) {
            this.sweep(1),
                this.close()
        },
        i.OnClickBtnBattle = function(t) {
            GuideManager.clearMask(),
                BattleManager.instance.BuyCheck(this._stageInfo, this._campaignData) && MainWorldManager.instance.sendNormalBattle(this._stageInfo, this._campaignData, this._rewardExp, this._rewardGold),
                this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowPVEConfirm, "WindowPVEConfirm");
var WindowPveTalking = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/PveTalkingSkin.exml"
            /*tpa=resource/eui_skins/PveTalkingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                this.Click.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBg, this),
                this._talkIndex = -1,
                this.nextTalk()
        },
        i.nextTalk = function() {
            if (this._talkIndex++, this._timer && (Utils.cancalDelayCall(this._timer), this._timer = null), this._talkIndex >= this._data.cfg.unlockpicture.length) this.Npc.visible = this.Self.visible = !1,
                this.close(),
                this._data.callback && Utils.call(this._data.callback, this._data.thisObj);
            else {
                var t = this._data.cfg.unlockpicture[this._talkIndex],
                    e = this._data.cfg.unlocktalk_l[this._talkIndex];
                1 == t ? (this.Npc.visible = !0, this.Self.visible = !1, this.txtNpcChat.text = e) : (this.Npc.visible = !1, this.Self.visible = !0, this.txtSelfChat.text = e, SUI.setTextureAsync(this.imgSelfHead, Path.GetHeadPicUrl(UserData.getInstance().getHead(), 0))),
                    this._timer = Utils.delayCall(3e3, this.nextTalk, this)
            }
        },
        i.onClickBg = function() {
            this.nextTalk()
        },
        i.init = function() {
            var t = this;
            this.imgEye.visible = !1,
                this._tween = egret.Tween.get(this.imgEye, {
                    loop: !0
                }),
                this._tween.wait(1500).call(function() {
                        t.imgEye.visible = !0
                    },
                    this).wait(200).call(function() {
                        t.imgEye.visible = !1
                    },
                    this)
        },
        i.clear = function() {
            this._timer && (Utils.cancalDelayCall(this._timer), this._timer = null),
                this._tween && egret.Tween.removeTweens(this.imgEye)
        },
        e
}(WindowBase);
egret.registerClass(WindowPveTalking, "WindowPveTalking");
var WindowPVP = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ZB_JingJiChangSkin.exml"
            /*tpa=resource/eui_skins/ZB_JingJiChangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.updataPanel = function() {
            this.txtMyRank.text = ArenaManager.instance.rankData.rank.toString();
            var t = new Date;
            t.setTime(UserData.getInstance().getServerTime());
            var e = 0;
            e = 22 - t.getHours() > 0 ? 3600 * (22 - t.getHours()) + 60 * (0 - t.getMinutes()) + (0 - t.getSeconds()) : 3600 * (46 - t.getHours()) + 60 * (0 - t.getMinutes()) + (0 - t.getSeconds()),
                this.leftRewardTime = e,
                this.leftRewardTime < 0 && (this.leftRewardTime = 86400 + this.leftRewardTime),
                this.txtRewardLeftTime.text = GlobalFunction.getHMSBySecond(this.leftRewardTime),
                this.txtScore.text = ArenaManager.instance.rankData.score.toString(),
                this.txtChallengeTime.text = ArenaManager.instance.rankData.remaincount.toString()
        },
        i.OnTick = function() {
            this.leftRewardTime && (this.leftRewardTime--, this.txtRewardLeftTime.text = GlobalFunction.getHMSBySecond(this.leftRewardTime))
        },
        i.updatePlayerList = function() {
            this.gpPlayers.removeChildren();
            var t = ArenaManager.instance.itemList,
                e = t.length,
                a = 301,
                i = (Math.ceil(e / 2) + 1) * a,
                n = new eui.Image;
            n.height = i,
                SUI.setTextureAsync(n, Path.uiUrl + "ZB_JJC_Bg.jpg"),
                n.fillMode = egret.BitmapFillMode.REPEAT,
                this.gpPlayers.addChild(n),
                80 == GuideManager.step && (e = 4, n.height = 800);
            for (var s = 0; e > s; ++s) {
                var r = t[s],
                    o = r.serverData,
                    l = new eui.Component;
                l.skinName = "resource/eui_skins/item/ZB_JingJiChang_2_Skin.exml"
                    /*tpa=resource/eui_skins/item/ZB_JingJiChang_2_Skin.exml*/
                    ,
                    s % 2 == 0 ? (l.x = 361, l.y = (Math.floor(s / 2) + 1) * a - 170) : (l.x = 39, l.y = (Math.floor(s / 2) + 1) * a - 40);
                var h = ArenanpcdataParser.GetInstance().getItemById(o.uid),
                    c = o.name ? o.name : "";
                h && (c = h.name_l);
                var d = o.modelid.length > 0 ? o.modelid[0] : 1,
                    g = ShipManager.getInstance().getShipPicByModelId(d);
                SUI.setTextureAsync(l.imgShip, g),
                    l.txtName.text = c,
                    l.txtLevel.text = o.level.toString() + "级",
                    l.txtRank.text = "第 " + o.rank.toString() + " 名",
                    SUI.setTextureAsync(l.imgHead, Path.GetHeadPicUrl(o.head ? o.head : 101, 1)),
                    l.txtBattlePoint.text = o.power.toString();
                var u = ArenaScoreDataLib.instance.getRankData(o.rank);
                if (o.uid == UserData.getInstance()._uid) {
                    l.enemy.visible = !1;
                    var p = VipParser.GetInstance().getItemById(UserData.getInstance()._vip).militaryHonourAdd;
                    p || (p = 0);
                    var m = void 0;
                    m = 0 != p ? u.honor + Math.ceil(u.honor * (p / 100)) : u.honor,
                        this.txtReward.text = Locales.get("curRankReward2", u.score, m),
                        l.txtName.textColor = 16776960
                } else l.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickPlayerItem, this),
                    l.userData = o,
                    l.self.visible = !1;
                l.xtjifen.text = "积分：" + u.score,
                    l.txtrongyu.text = "荣誉：" + u.honor,
                    this.gpPlayers.addChild(l)
            }
            this.gpPlayers.height = n.height
        },
        i.onClickPlayerItem = function(t) {
            81 == GuideManager.step && GuideManager.clearMask();
            var e = t.currentTarget,
                a = e.userData;
            if (a) {
                var i = ArenaManager.instance.rankData;
                if (a.rank > i.rank && a.rank > 10) Toast.launch(Locales.get("pvpchallengewarning"));
                else if (i.remaincount <= 0) {
                    var n = {};
                    n.title = Locales.get("使用挑战令可以增加挑战次数"),
                        n.itemId = 1121,
                        n.shopId = 22,
                        WindowManager.getInstance().show(WindowManager.windowType.ItemUse, n)
                } else ArenaManager.instance.setArena_value(e.txtName.text, a.power, a.camp, a.rank, i.rank, a.score, i.score, a.uid),
                    RequestManager.GetInstance().enterBattle(BattleType.BATTLE_TYPE_ARENA, a.uid, a.rank, i.rank)
            }
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                MainUI.instance.changeTopMode(topUIMode.simple),
                this.txtTitle.text = Locales.get("panel_active_game_arena_title"),
                this.txtRankList.text = Locales.get("panel_arena_btn_topten"),
                this.txtStore.text = Locales.get("panel_arena_charge"),
                this.txtCurRankReward.text = Locales.get("curRankReward"),
                this.txtRewardLeftTimeDesc.text = Locales.get("rewardLeftTime"),
                this.txtMyRankDesc.text = Locales.get("ui_globalCampBattle_ScoreList_myTitle"),
                this.txtScoreDesc.text = Locales.get("panel_arena_txt_comment_2"),
                this.txtChallengeTimeDesc.text = Locales.get("leftChallengeTimes"),
                this.tickTimer = new egret.Timer(1e3),
                this.tickTimer.addEventListener(egret.TimerEvent.TIMER, this.OnTick, this),
                this.tickTimer.start(),
                SUI.addClickEffect(this.btnStore),
                SUI.addClickEffect(this.btnRankList),
                SUI.addClickEffect(this.jiangLiImg),
                this.btnStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnStore, this),
                this.btnRankList.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRankList, this),
                this.jiangLiImg.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickBtnReward, this),
                this.scvPlayers.bounces = !1,
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceEnterArena, null, !0),
                this.txtReward.text = Locales.get("curRankReward2", 0, 0),
                SUI.setTextureAsync(this.imgMyRankBg, Path.uiUrl + "Bg_ranking.png"),
                79 == GuideManager.step && GuideManager.nextStep()
        },
        i.onClickBtnReward = function(t) {
            QiJvTouAlert.getInstance().showPVPReward()
        },
        i.OnClickBtnStore = function(t) {
            ConfigData.preLoadDats(["arenaExchangeData"], [ArenaexchangedataParser],
                function() {
                    WindowManager.getInstance().show(WindowManager.windowType.PVPExchange)
                })
        },
        i.OnClickBtnRankList = function(t) {
            RankListManager.getInstance().showRankWin(15)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {
            this.tickTimer && (this.tickTimer.stop(), this.tickTimer = void 0)
        },
        e
}(WindowBase);
egret.registerClass(WindowPVP, "WindowPVP");
var WindowPVPExchange = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ZB_JingJiChang_DuiHuanSkin.exml"
            /*tpa=resource/eui_skins/ZB_JingJiChang_DuiHuanSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.init = function() {
            this.btnStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnStore, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                EventManager.instance.addEventListener(EventTypes.ARENA_DATA, this.updatePanel, this),
                MainUI.instance.changeTopMode(topUIMode.simple),
                this.txtScoreDesc.text = Locales.get("panel_arena_txt_comment_2"),
                this.lstGoods.itemRenderer = PVPExchangeItemRenderer,
                this.scvGoods.viewport = this.lstGoods,
                ArenaManager.instance.rankData ? this.updatePanel() : RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceEnterArena, null, !0)
        },
        i.updatePanel = function() {
            this.txtScore.text = ArenaManager.instance.rankData.score;
            for (var t = [], e = 0, a = ArenaexchangedataParser.GetInstance().getDataArr(); e < a.length; e++) {
                var i = a[e],
                    n = ArenaManager.instance.rankData,
                    s = n && n.exchangelist && n.exchangelist.indexOf(i.id) >= 0;
                s || t.push(i)
            }
            t.sort(function(t, e) {
                return t.rank - e.rank
            });
            var r = !1;
            if (this.lstGoods.dataProvider)
                for (var o = 0; o < this.lstGoods.dataProvider.length; ++o) this.lstGoods.dataProvider.getItemAt(o) && t[o] && this.lstGoods.dataProvider.getItemAt(o).id != t[o].id && (r = !0);
            else r = !0;
            if (r) {
                var l = this.lstGoods.scrollV,
                    h = new eui.ArrayCollection(t);
                this.lstGoods.dataProvider = h,
                    this.lstGoods.validateNow(),
                    this.lstGoods.scrollV = l
            }
        },
        i.OnClickBtnStore = function(t) {},
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ARENA_DATA, this.updatePanel, this)
        },
        e.willOpen = !1,
        e
}(WindowBase);
egret.registerClass(WindowPVPExchange, "WindowPVPExchange");
var WindowPVPExchangeConfirm = function(t) {
    function e() {
        t.call(this, !0),
            this.curNum = 1,
            this.itemCost = 0,
            this.totalPoint = 0,
            this.skinName = "resource/eui_skins/ZB_JingJiChang_DuiHuan_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/ZB_JingJiChang_DuiHuan_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this.itemData = t,
                this.itemCost = t.money,
                this.totalPoint = t.totalMoney,
                this.getLimitCountFunc = t.getLimitCountFunc,
                this.txtSelfPoints.text = this.totalPoint.toString(),
                this.onConfirm = t.onConfirm,
                this.addItemCnt(0)
        },
        i.init = function() {
            this.btnAddOne.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnAddOne, this),
                this.btnAddTen.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnAddTen, this),
                this.btnCutOne.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnCutOne, this),
                this.btnCutTen.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnCutTen, this),
                this.btnBuyConfirm.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnBuyConfirm, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this)
        },
        i.addItemCnt = function(t) {
            t > 0 ? this.itemData.timeslimit < 0 ? (this.curNum + t) * this.itemCost <= this.totalPoint ? (this.curNum += t, this.txtNum.text = this.curNum.toString(), this.txtTotlePrice.text = (this.curNum * this.itemCost).toString()) : (Log.logZDY("积分不足"), Toast.launch(Locales.get("panel_DHtrade_wind_1"), 16777215)) : this.curNum + t <= this.getLimitCountFunc(this.itemData.id) ? (this.curNum + t) * this.itemCost <= this.totalPoint ? (this.curNum += t, this.txtNum.text = this.curNum.toString(), this.txtTotlePrice.text = (this.curNum * this.itemCost).toString()) : (Log.logZDY("积分不足"), Toast.launch(Locales.get("panel_DHtrade_wind_1"), 16777215)) : (Log.logZDY("已经达到当日购买数量限制"), Toast.launch(Locales.get("panel_DHtrade_wind_2"), 16777215)) : (this.curNum += t, this.curNum <= 0 && (this.curNum = 1), this.txtNum.text = this.curNum.toString(), this.txtTotlePrice.text = (this.curNum * this.itemCost).toString()),
                this.btnCutOne.visible = this.curNum >= 1,
                this.btnCutTen.visible = this.curNum >= 10
        },
        i.OnClickBtnAddOne = function(t) {
            this.addItemCnt(1)
        },
        i.OnClickBtnAddTen = function(t) {
            this.addItemCnt(10)
        },
        i.OnClickBtnCutOne = function(t) {
            this.addItemCnt(-1)
        },
        i.OnClickBtnCutTen = function(t) {
            this.addItemCnt(-10)
        },
        i.OnClickBtnBuyConfirm = function(t) {
            this.curNum > 0 && this.onConfirm && this.onConfirm(this.itemData.id, this.curNum),
                this.close()
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowPVPExchangeConfirm, "WindowPVPExchangeConfirm");
var WindowQiJvTou = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ZB_QiJuTouSkin.exml"
            /*tpa=resource/eui_skins/ZB_QiJuTouSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            WindowManager.getInstance().showWaiting(),
                this.initUI(),
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.tiaoZhanBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.paiHangImg.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.jiangLiImg.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.explainBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.clear = function() {
            WindowManager.getInstance().clearCache(WindowManager.windowType.QiJvTou),
                this.closeBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.tiaoZhanBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.paiHangImg.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.jiangLiImg.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.explainBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.closeBtn:
                    this.closeBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.tiaoZhanBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.paiHangImg.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.jiangLiImg.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.explainBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                        this.destroy();
                    break;
                case this.tiaoZhanBtn:
                    if (console.log("挑战"), 0 == this.canchallengetimes) {
                        Toast.launch("今日挑战次数已用尽");
                        break
                    }
                    if (this.usecash > UserData.getInstance().getRes(TypeDefine.RES.Diamond)) {
                        Toast.launch("钻石不足");
                        break
                    }
                    RequestManager.GetInstance().enterBattle(14, void 0, void 0);
                    break;
                case this.paiHangImg:
                    console.log("排行"),
                        0 == this.state ? RankListManager.getInstance().showRankWin(11) : 1 == this.state ? Toast.launch("活动暂未开启") : 2 == this.state ? Toast.launch("等级不够") : 3 == this.state && Toast.launch("配表异常");
                    break;
                case this.jiangLiImg:
                    console.log("奖励"),
                        QiJvTouAlert.getInstance().showRewardPage();
                    break;
                case this.explainBtn:
                    console.log("说明");
                    var e = "<font>" + Locales.get("panel_challengeship_desc_1") + "\n" + Locales.get("panel_challengeship_desc_2") + "\n" + Locales.get("panel_challengeship_desc_3") + "\n" + Locales.get("panel_challengeship_desc_4") + "\n" + Locales.get("panel_challengeship_desc_5") + "\n" + Locales.get("panel_challengeship_desc_6") + "</font>";
                    QiJvTouAlert.getInstance().showTxtDescPage("挑战七巨头", e)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("bigSevenReward"),
                ConfigData.preLoadDats(e, [BigsevenrewardParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                SUI.addClickEffect(this.paiHangImg),
                SUI.addClickEffect(this.jiangLiImg),
                SUI.setTextureAsync(this.bg, Path.backGroundImageUrl + "ZB_TZQJT_Bg.jpg"),
                this.sendArmadaData()
        },
        i.sendArmadaData = function() {
            var t = Transport.getPkg(ProtocolMgr.ID_DceArmadaData);
            Transport.instance.send(t)
        },
        i.handleArmadaData = function(t) {
            this.canchallengetimes = t.canchallengetimes,
                this.usecash = t.usecash,
                t.exploit,
                0 == t.res ? (this.tiaoZhanBtn.enabled = !0, this.txtCost.visible = !0, this.zhuanshiImg.visible = !0, this.currCostTxt.visible = !0, this.closeTxt.visible = !1, this.state = 0) : 1 == t.res ? (this.tiaoZhanBtn.enabled = !1, this.txtCost.visible = !1, this.zhuanshiImg.visible = !1, this.currCostTxt.visible = !1, this.closeTxt.visible = !0, this.state = 1) : 2 == t.res ? (Toast.launch("等级不够"), this.state = 2) : 3 == t.res && (Toast.launch("配表异常"), this.state = 3),
                0 == t.rank ? this.txtRank.text = "未上榜" : this.txtRank.text = "第" + t.rank + "名",
                this.txtDamage.text = t.totaldmgnum,
                this.txtReward.text = t.totalgold,
                this.txtBattleTimes.text = "今日可挑战" + t.canchallengetimes + "次",
                this.txtCost.text = t.usecash + "",
                t.canfreetimes > 0 ? this.freeTimesTxt.visible = !0 : this.freeTimesTxt.visible = !1,
                this.freeTimesTxt.text = "今日免费次数:" + t.canfreetimes
        },
        e
}(WindowBase);
egret.registerClass(WindowQiJvTou, "WindowQiJvTou");
var WindowQuickTanSuo = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/ChouJiang_TSXZ_KuaiSuSkin.exml"
            /*tpa=resource/eui_skins/ChouJiang_TSXZ_KuaiSuSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.btnSearch1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.btnSearch2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this),
                UserData.getInstance()._vip < 6 ? this.btnSearch1.enabled = !1 : this.v6Txt.text = "",
                UserData.getInstance()._vip < 10 ? this.btnSearch2.enabled = !1 : this.v10Txt.text = ""
        },
        i.clickHandler = function(t) {
            var e = t.currentTarget,
                a = 0;
            e == this.btnSearch1 ? a = 2 : e == this.btnSearch2 && (a = 5, WindowGaojiTanSuoReward.preGold = UserData.getInstance().getRes(TypeDefine.RES.Gold)),
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceSoul, {
                    type: a
                }, !1),
                this.closeHandler()
        },
        i.closeHandler = function(t) {
            void 0 === t && (t = null),
                this.close()
        },
        e
}(WindowBase);
egret.registerClass(WindowQuickTanSuo, "WindowQuickTanSuo");
var WindowRankList = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/PaiHangBangSkin.exml"
            /*tpa=resource/eui_skins/PaiHangBangSkin.exml*/
    }
    __extends(e, t);
    var a = __define,
        i = e,
        n = i.prototype;
    return a(n, "curCampType",
            function() {
                return this._curCampType
            },
            function(t) {
                this._curCampType = t;
                for (var e = [], a = 1; 3 >= a; ++a) {
                    var i = this._curCampType == a;
                    e.push({
                        name: Locales.get("panel_personinf_txt_camp_" + a),
                        camp: a,
                        state: i
                    })
                }
                this.listTitle.dataProvider = new eui.ArrayCollection(e)
            }),
        n.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        WindowManager.getInstance().hide(WindowManager.windowType.RankList)
                    },
                    this),
                this.initTitle(),
                this.scrolllerTotle.viewport = this.listTotle,
                this.scrolllerSingle.viewport = this.listSingle,
                this.grpTotle.visible = !1,
                this.grpSingle.visible = !0,
                this.txtSelfRanking.text = "我的排名：",
                this.txtScore.text = ""
        },
        n.setData = function(t) {
            0 == t.type ? (this.grpTotle.visible = !0, this.grpSingle.visible = !1, this.curList = this.listTotle, this.curRankType = t.type2, RankListManager.getInstance().sendListMsg(t.type2)) : 7 == t.type ? (this.curCampType = UserData.getInstance().getCamp(), this.grpTotle.visible = !0, this.grpSingle.visible = !1, this.curList = this.listTotle, this.curRankType = t.type, RankListManager.getInstance().sendListMsg(t.type)) : (this.grpTotle.visible = !1, this.grpSingle.visible = !0, this.curList = this.listSingle, this.curRankType = t.type, RankListManager.getInstance().sendListMsg(t.type))
        },
        n.updatePaper = function() {
            var t = new RankListData,
                e = [];
            switch (this.curRankType) {
                case 1:
                    t = RankListManager.getInstance().getDefendOilList(),
                        this.txtSelfRanking.text = "当前排名:" + t.myRank,
                        this.txtScore.text = "抵抗波数:" + t.myScore,
                        this.txtScore.x = this.imgBG.width - (this.txtScore.textWidth + 10),
                        this.imgPveStar.source = "";
                    break;
                case 2:
                    t = RankListManager.getInstance().getBattleOrdinary(),
                        this.txtSelfRanking.text = "当前排名:" + t.myRank,
                        this.txtScore.text = "副本进度:" + t.myScore,
                        this.imgPveStar.source = RES.getRes("iconyinxing_png"),
                        this.txtScore.x = this.imgPveStar.x - (this.txtScore.textWidth + 5);
                    break;
                case 3:
                    t = RankListManager.getInstance().getBattleSpecial(),
                        this.txtSelfRanking.text = "当前排名:" + t.myRank,
                        this.txtScore.text = "副本进度：" + t.myScore,
                        this.imgPveStar.source = RES.getRes("iconjinxing_png"),
                        this.txtScore.x = this.imgPveStar.x - (this.txtScore.textWidth + 5);
                    break;
                case 11:
                    t = RankListManager.getInstance().getWudijianduiList(),
                        this.txtSelfRanking.text = t.myRank ? "当前排名:" + t.myRank : "当前排名:",
                        this.txtScore.text = t.myScore ? "我的伤害：" + t.myScore : "我的伤害：",
                        this.txtScore.x = this.imgBG.width - (this.txtScore.textWidth + 10),
                        this.imgPveStar.source = "";
                    break;
                case 13:
                    t = RankListManager.getInstance().getLevelList(),
                        this.txtSelfRanking.text = "当前排名:" + t.myRank,
                        this.txtScore.text = "等级:" + t.myScore,
                        this.txtScore.x = this.imgBG.width - (this.txtScore.textWidth + 10),
                        this.imgPveStar.source = "";
                    break;
                case 14:
                    t = RankListManager.getInstance().getPowerList(),
                        this.txtSelfRanking.text = "当前排名:" + t.myRank,
                        this.txtScore.text = "战斗力:" + t.myScore,
                        this.txtScore.x = this.imgBG.width - (this.txtScore.textWidth + 10),
                        this.imgPveStar.source = "";
                    break;
                case 15:
                    t = RankListManager.getInstance().getArenaList(),
                        this.txtSelfRanking.text = "当前排名:" + t.myRank,
                        this.txtScore.text = "当前积分:" + t.myScore,
                        this.txtScore.x = this.imgBG.width - (this.txtScore.textWidth + 10),
                        this.imgPveStar.source = "";
                    break;
                case 16:
                    t = RankListManager.getInstance().getGuildList(),
                        this.txtSelfRanking.text = t.myRank ? "我的军团排名:" + t.myRank : "我的军团排名:暂无排名",
                        this.txtScore.text = t.myScore ? "军团建设:" + t.myScore : "军团建设:0",
                        this.txtScore.x = this.imgBG.width - (this.txtScore.textWidth + 10),
                        this.imgPveStar.source = "";
                    break;
                case 7:
                    t = RankListManager.getInstance().getCampBattleList(this.curCampType),
                        this.txtSelfRanking.text = t.myRank ? Locales.get("ui_globalCampBattle_RewardPanel_rankTile", t.myRank) : "排名：未上榜",
                        this.txtScore.text = Locales.get("ui_globalCampBattle_RewardPanel_zhangongTile", t.myScore),
                        this.txtScore.x = this.imgBG.width - (this.txtScore.textWidth + 10),
                        this.imgPveStar.source = ""
            }
            for (var a in t.listData) {
                var i = {};
                if (i.type = this.curRankType, i.uid = t.listData[a].uid, i.name = t.listData[a].name, i.rank = t.listData[a].rank, i.level = t.listData[a].level, i.score = t.listData[a].score, i.head = t.listData[a].head, i.power = t.listData[a].power, i.viplevel = t.listData[a].viplevel, i.camp = t.listData[a].camp, i.guildname = t.listData[a].guildname, i.militaryrank = t.listData[a].militaryrank, i.dmg = t.listData[a].dmg, i.membercount = t.listData[a].membercount, i.allMembercount = t.listData[a].allMembercount, 15 == this.curRankType) {
                    var n = ArenanpcdataParser.GetInstance().getItemById(i.uid);
                    n && (i.name = n.name_l)
                }
                e.push(i)
            }
            this.curList.dataProvider = new eui.ArrayCollection(e),
                this.curList.itemRenderer = RankItemRenderer
        },
        n.setPos = function() {
            this.titlePos = this.scrollerTitle.viewport.scrollH
        },
        n.initTitle = function(t) {
            void 0 === t && (t = 0),
                this.scrollerTitle.viewport = this.listTitle;
            var e = [{
                    name: "战斗力",
                    type: 0,
                    type2: 14,
                    state: !1
                },
                {
                    name: "等级",
                    type: 0,
                    type2: 13,
                    state: !1
                },
                {
                    name: "竞技场",
                    type: 0,
                    type2: 15,
                    state: !1
                },
                {
                    name: "军团",
                    type: 0,
                    type2: 16,
                    state: !1
                },
                {
                    name: "守卫油田",
                    type: 0,
                    type2: 1,
                    state: !1
                },
                {
                    name: "普通战役",
                    type: 0,
                    type2: 2,
                    state: !1
                },
                {
                    name: "精英战役",
                    type: 0,
                    type2: 3,
                    state: !1
                }
            ];
            for (var a in e) e[a].index = a,
                Number(a) == t ? e[a].state = !0 : e[a].state = !1;
            this.listTitle.dataProvider = new eui.ArrayCollection(e),
                this.listTitle.itemRenderer = RankTitleRenderer,
                this.scrollerTitle.viewport.validateNow(),
                this.scrollerTitle.viewport.scrollH = this.titlePos
        },
        n.closeClick = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.RankList)
        },
        e
}(WindowBase);
egret.registerClass(WindowRankList, "WindowRankList");
var RankTitleRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/PaiHangBang_title_Skin.exml"
            /*tpa=resource/eui_skins/item/PaiHangBang_title_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.btnTab.addEventListener(egret.TouchEvent.TOUCH_TAP, this.clickHandler, this)
        },
        i.dataChanged = function() {
            this.btnTab.label = this.data.name,
                this.btnTab.selected = this.data.state
        },
        i.clickHandler = function(t) {
            var e = WindowManager.getInstance().getWindow(WindowManager.windowType.RankList);
            if (this.data.camp) e && (e.curCampType = this.data.camp, e.updatePaper());
            else {
                var e = WindowManager.getInstance().getWindow(WindowManager.windowType.RankList);
                e && (e.setPos(), e.setData(this.data), e.initTitle(this.data.index))
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(RankTitleRenderer, "RankTitleRenderer");
var RankItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/PaiHangBang_1_Skin.exml"
            /*tpa=resource/eui_skins/item/PaiHangBang_1_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.btnViewFormat.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickView, this)
        },
        i.onClickView = function() {
            if (15 == this.data.type) {
                if (this.data.uid.length < 6) return void Toast.launch("无法查看该玩家阵容");
                var t = Transport.getPkg(ProtocolMgr.ID_DceScoutSoldier);
                t.uid = this.data.uid,
                    Transport.instance.send(t)
            }
        },
        i.dataChanged = function() {
            switch (this.grpGuild.visible = !1, this.grpNotGuild.visible = !1, this.grpBattlePoints.visible = !1, this.grpCommon.visible = !1, this.grpJingJiChang.visible = !1, this.grpPVE.visible = !1, this.grpCampBattle.visible = !1, this.data.type) {
                case 14:
                    this.grpGuild.visible = !1,
                        this.grpNotGuild.visible = !0,
                        this.grpBattlePoints.visible = !0,
                        this.grpCommon.visible = !1,
                        this.grpJingJiChang.visible = !1,
                        this.grpPVE.visible = !1,
                        this.txtBattlePoint.text = this.data.power;
                    break;
                case 13:
                    this.grpGuild.visible = !1,
                        this.grpNotGuild.visible = !0,
                        this.grpBattlePoints.visible = !1,
                        this.grpCommon.visible = !0,
                        this.grpJingJiChang.visible = !1,
                        this.grpPVE.visible = !1,
                        this.txtResult.text = this.data.level + "级";
                    break;
                case 15:
                    this.grpGuild.visible = !1,
                        this.grpNotGuild.visible = !0,
                        this.grpBattlePoints.visible = !1,
                        this.grpCommon.visible = !1,
                        this.grpJingJiChang.visible = !0,
                        this.grpPVE.visible = !1;
                    break;
                case 16:
                    this.grpGuild.visible = !0,
                        this.grpNotGuild.visible = !1,
                        this.grpBattlePoints.visible = !1,
                        this.grpCommon.visible = !1,
                        this.grpJingJiChang.visible = !1,
                        this.grpPVE.visible = !1;
                    break;
                case 1:
                    this.grpGuild.visible = !1,
                        this.grpNotGuild.visible = !0,
                        this.grpBattlePoints.visible = !1,
                        this.grpCommon.visible = !0,
                        this.grpJingJiChang.visible = !1,
                        this.grpPVE.visible = !1,
                        this.txtResult.text = this.data.score + "波";
                    break;
                case 2:
                    this.grpGuild.visible = !1,
                        this.grpNotGuild.visible = !0,
                        this.grpBattlePoints.visible = !1,
                        this.grpCommon.visible = !1,
                        this.grpJingJiChang.visible = !1,
                        this.grpPVE.visible = !0,
                        this.txtStarNum.text = this.data.score,
                        this.imgPveStar.source = RES.getRes("iconyinxing_png");
                    break;
                case 3:
                    this.grpGuild.visible = !1,
                        this.grpNotGuild.visible = !0,
                        this.grpBattlePoints.visible = !1,
                        this.grpCommon.visible = !1,
                        this.grpJingJiChang.visible = !1,
                        this.grpPVE.visible = !0,
                        this.txtStarNum.text = this.data.score,
                        this.imgPveStar.source = RES.getRes("iconjinxing_png");
                    break;
                case 7:
                    this.grpNotGuild.visible = !0,
                        this.grpCampBattle.visible = !0,
                        this.txtBattlePoint2.text = this.data.power.toString(),
                        this.txtPoint.text = "战功:" + this.data.score.toString();
                    break;
                case 11:
                    this.grpNotGuild.visible = !0,
                        this.grpCampBattle.visible = !0,
                        this.txtBattlePoint2.text = this.data.power.toString(),
                        this.txtPoint.text = "伤害:" + this.data.dmg.toString()
            }
            this.data.rank > 3 ? (this.imgBg.source = RES.getRes("panel_allGameRank_bg_small_4_png"), this.imgRanking.visible = !1, this.txtRanking.visible = !0, this.txtRanking.text = this.data.rank) : (this.imgBg.source = RES.getRes("panel_allGameRank_bg_small_" + this.data.rank + "_png"), this.imgRanking.visible = !0, this.txtRanking.visible = !1, this.imgRanking.source = RES.getRes(Path.resHeadUrl + "RankingList_" + this.data.rank + "_png")),
                this.imgHeadBg.source = RES.getRes(Path.resHeadUrl + "RankingList_headBG_" + this.data.camp + "_png"),
                16 == this.data.type ? (Utils.getImgByUrl(Path.guildUrl + "badge_" + this.data.head + ".png", this.imgHead), this.imgCamp1.source = Path.GetCampPicUrl(this.data.camp, 3), this.txtGuildMember.text = "成员:" + this.data.membercount + "/" + this.data.allMembercount, this.txtGuildLevel.text = this.data.level, this.txtGuildRes.text = this.data.score, "" != this.data.guildname ? this.txtGuildName.text = "[" + this.data.guildname + "]" : this.txtGuildName.text = "") : (Utils.getImgByUrl(Path.GetHeadPicUrl(this.data.head, 1), this.imgHead), this.txtLevel.text = this.data.level, this.imgMilir.source = MilitaryManager.GetInstance().getPicByRankLvl(this.data.militaryrank), this.txtName.text = this.data.name, this.imgCamp.source = Path.GetCampPicUrl(this.data.camp, 3), "" != this.data.guildname && null != this.data.guildname ? this.txtGuild.text = "[" + this.data.guildname + "]" : this.txtGuild.text = "")
        },
        e
}(eui.ItemRenderer);
egret.registerClass(RankItemRenderer, "RankItemRenderer");
var WindowRecharge = function(t) {
    function e() {
        t.call(this, !0),
            this._type = 0,
            this._vipLv = 0,
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/VipSkin.exml"
            /*tpa=resource/eui_skins/VipSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(e) {
            t.prototype.setData.call(this, e),
                this.Switch(e.type)
        },
        i.init = function() {
            t.prototype.init.call(this),
                this._vipLv = UserData.getInstance().getVipLevel(),
                WindowManager.getInstance().showWaiting(),
                this.scroller.viewport = this.rechargeContent,
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickClsoe, this),
                this.helpBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickHelp, this),
                this.switchBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickSwitch, this),
                this.leftBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickLeft, this),
                this.rightBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickRight, this),
                this.pic.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickPic, this),
                RechargeManager.instance.LoadTable(this.OnLoadTable, this),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.OnUserDataUpdate, this),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.Redraw, this)
        },
        i.clear = function() {
            UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.OnUserDataUpdate, this),
                EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.Redraw, this)
        },
        i.OnUserDataUpdate = function() {
            UserData.getInstance().updateActiveTip(),
                this.Redraw()
        },
        i.OnLoadTable = function() {
            WindowManager.getInstance().hideWaiting(),
                this.Redraw()
        },
        i.OnClickLeft = function() {
            this._vipLv--,
                this._vipLv < 0 && (this._vipLv = 0),
                this.Redraw()
        },
        i.OnClickRight = function() {
            this._vipLv++,
                this._vipLv > 15 && (this._vipLv = 15),
                this.Redraw()
        },
        i.OnClickSwitch = function() {
            this.Switch()
        },
        i.OnClickClsoe = function() {
            WindowManager.getInstance().hide(WindowManager.windowType.Recharge)
        },
        i.OnClickPic = function() {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                type: ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE
            })
        },
        i.OnClickHelp = function(t) {
            var e = "说明",
                a = "1.首充赠送仅第一次有效，额度越高赠送越多\n2.购买月卡也属于首充的范围\n3.如充值异常，请联系客服\n";
            QiJvTouAlert.getInstance().showTxtDescPage(e, a)
        },
        i.Switch = function(t) {
            void 0 === t && (t = -1), -1 == t ? this._type = 0 == this._type ? 1 : 0 : this._type = t,
                this._vipLv = UserData.getInstance().getVipLevel(),
                this.Redraw()
        },
        i.Redraw = function() {
            if (this.stage && RechargeManager.instance.cashDataArr && 0 != RechargeManager.instance.cashDataArr.length) {
                RechargeManager.instance.CanFirstRecharge ? (Utils.getImgByUrl("resource/assets/ui/Bg_FirstRecharge.jpg"
                        /*tpa=resource/assets/ui/Bg_FirstRecharge.jpg*/
                        , this.pic), this.rechargeContainer.addChildAt(this.pic, 0), this.scroller.height = 580) : (this.pic.parent && this.rechargeContainer.removeChild(this.pic), this.scroller.height = 768),
                    this.rechargeContainer.visible = 0 == this._type,
                    this.vipContainer.visible = 1 == this._type,
                    this.switchBtn.label = 0 == this._type ? "查看VIP" : "充值",
                    VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1) ? (this.bar.value = UserData.getInstance().totalbuy / VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1).costCash * 100, this.numTf.text = UserData.getInstance().totalbuy + "/" + VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1).costCash, this.descTf.text = "再充值" + (VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1).costCash - UserData.getInstance().totalbuy) + "钻石升级为Vip" + (UserData.getInstance().getVipLevel() + 1)) : (this.bar.value = 100, this.numTf.text = "MAX", this.descTf.text = "");
                var t = UserData.getInstance().getVipLevel().toString();
                if (2 == t.length ? (this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP" + t[0] + "_png"), "0" == t[1] ? this.imgVip2.source = RES.getRes("GUI_Homepage_Icon_VIP10_png") : this.imgVip2.source = RES.getRes("GUI_Homepage_Icon_VIP" + t[1] + "_png")) : ("0" == t[0] ? this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP10_png") : this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP" + t[0] + "_png"), this.imgVip2.source = null), 0 == this._type) {
                    for (; this.rechargeContent.numChildren > 0;) this.rechargeContent.removeChildAt(0);
                    for (var e in RechargeManager.instance.cashDataArr) {
                        var a = new RechargeCell;
                        a.data = RechargeManager.instance.cashDataArr[e],
                            this.rechargeContent.addChild(a),
                            a.Redraw()
                    }
                }
                if (1 == this._type) {
                    this.vipTf.text = "VIP" + this._vipLv + "礼包(商城中购买)",
                        this.scrollerVipRight.viewport.scrollV = 0;
                    for (var t = VipParser.GetInstance().getItemByField("level", this._vipLv).desc_l, i = [], n = 0; n < t.length; n++) "#" == t[n] && i.push(n);
                    for (var s = t,
                            r = 0; r < i.length; r += 2) {
                        var o = s.substring(i[r], i[r + 1] + 1),
                            l = "<font color='#" + o.substring(1, 7) + "'>" + o.substring(7, o.length - 1) + "</font>";
                        t = t.replace(o, l)
                    }
                    this.txtVipDec.textFlow = (new egret.HtmlTextParser).parser(t);
                    var h = this._vipLv + 1;
                    14 == this._vipLv ? h = 394 : 15 == this._vipLv && (h = 395);
                    for (var c = GiftdataParser.GetInstance().getDataArr(), d = [], g = 0; g < c.length; g++)
                        if (c[g].id == h) {
                            var u = {};
                            u.type = c[g].type,
                                u.id = c[g].item,
                                u.count = c[g].count,
                                d.push(u)
                        }
                    this.listVipBox.dataProvider = new eui.ArrayCollection(d),
                        this.listVipBox.itemRenderer = vipGiftItemRenderer
                }
            }
        },
        e
}(WindowBase);
egret.registerClass(WindowRecharge, "WindowRecharge");
var vipGiftItemRenderer = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/vipGiftSkin.exml"
            /*tpa=resource/eui_skins/item/vipGiftSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.dataChanged = function() {
            var t = GlobalFunction.getDropDataByTypeAndId(this.data.type, this.data.id, this.data.count);
            SUI.setTextureAsync(this.com.imgBg, QualitySystem.getItemSmallBack(t.quality)),
                SUI.setTextureAsync(this.com.imgIcon, t.icon),
                this.com.txtName.text = t.name,
                this.com.txtName.textColor = QualitySystem.getColorByQuality(t.quality),
                this.com.txtNum.text = t.count.toString()
        },
        e
}(eui.ItemRenderer);
egret.registerClass(vipGiftItemRenderer, "vipGiftItemRenderer");
var RechargeManager = function() {
    function t() {
        this.date = new Date
    }
    var e = __define,
        a = t,
        i = a.prototype;
    return i.LoadTable = function(t, e) {
            var a = this;
            void 0 === t && (t = null),
                void 0 === e && (e = null),
                ConfigData.preLoadDats(["cashData", "vip", "giftData"], [CashdataParser, VipParser, GiftdataParser],
                    function() {
                        a.cashDataArr = CashdataParser.GetInstance().getDataArr(),
                            a.vipArr = VipParser.GetInstance().getDataArr(),
                            t && t.apply(e),
                            UserData.getInstance().updateActiveTip()
                    },
                    this)
        },
        e(i, "CanFirstRecharge",
            function() {
                return UserData.getInstance().totalbuy <= 0 && ActivityManager.instance.activityData.first_recharge_open
            }),
        i.CanFirstRechargeByID = function(t) {
            return ActivityManager.instance.activityData.first_recharge_open && -1 == UserData.getInstance().firstrechargelist.indexOf(t)
        },
        i.HandleHeartBeat = function(t) {
            var e = this.date.getDate();
            if (this.date.setTime(1e3 * t), this.date.getDate() != e) {
                var a = Transport.getPkg(ProtocolMgr.ID_DceNewDay);
                Transport.instance.send(a)
            }
        },
        e(i, "isShowSpot",
            function() {
                var t = !1;
                if (UserData.getInstance().monthcarddate > 0 && !UserData.getInstance().monthcardreceived && (t = !0), this.cashDataArr) {
                    if (UserData.getInstance().monthcarddate > 0) {
                        var e = CashdataParser.GetInstance().getItemById(UserData.getInstance().monthcardid);
                        UserData.getInstance().monthcarddate <= e.renew && (t = !0)
                    }
                } else this.LoadTable();
                return t
            }),
        t.instance = new t,
        t
}();
egret.registerClass(RechargeManager, "RechargeManager");
var WindowRecharge2 = function(t) {
    function e() {
        t.call(this, !1),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/VipSkin.exml"
            /*tpa=resource/eui_skins/VipSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            Utils.getImgByUrl("resource/assets/ui/Bg_FirstRecharge.jpg"
                    /*tpa=resource/assets/ui/Bg_FirstRecharge.jpg*/
                    , this.btnFirstRecharge),
                WindowManager.getInstance().showWaiting(),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeClick, this),
                this.rechargeConfig = null,
                this.vipdata = null,
                this.giftData = null,
                this.scrollerRecharge.viewport = this.listRecharge,
                this.scrollerVipBox.viewport = this.listVipBox,
                this.scrollerVipRight.viewport = this.grpVipRight,
                this.grpRecharge.visible = !0,
                this.grpVip.visible = !1,
                this.btnViewVip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.changeView, this),
                this.btnLastVip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.lastOrNextVip, this),
                this.btnNextVip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.lastOrNextVip, this),
                this.btnHelp.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnInfo, this),
                this.btnFirstRecharge.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickFirstRecharge, this),
                this.initCashData(),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong.png"),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.Redraw, this),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.OnActivityDataUpdate, this)
        },
        i.OnClickFirstRecharge = function(t) {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                type: ActivityType.ACTIVITY_TYPE_FIRST_RECHARGE
            })
        },
        i.OnActivityDataUpdate = function() {
            this.Redraw()
        },
        i.OnClickBtnInfo = function(t) {
            var e = "说明",
                a = "1.首充赠送仅第一次有效，额度越高赠送越多\n2.购买月卡也属于首充的范围\n3.如充值异常，请联系客服邮箱:h5worldshipkefu@sincetimes.com\n";
            QiJvTouAlert.getInstance().showTxtDescPage(e, a)
        },
        i.Redraw = function() {
            null != this.stage && (this.initBar(), this.grpRecharge.visible ? (this.btnViewVip.label = "查看VIP", this.grpRecharge.visible = !0, this.grpVip.visible = !1, this.showRecharge()) : (this.btnViewVip.label = "充值", this.grpRecharge.visible = !1, this.grpVip.visible = !0, this.showVip(UserData.getInstance().getVipLevel())))
        },
        i.initBar = function() {
            VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1) ? (this.barRecharge.value = UserData.getInstance().totalbuy / VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1).costCash * 100, this.txtCurrentNum.text = UserData.getInstance().totalbuy + "/" + VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1).costCash, this.txtDesc.text = "再充值" + (VipParser.GetInstance().getItemByField("level", UserData.getInstance().getVipLevel() + 1).costCash - UserData.getInstance().totalbuy) + "钻石升级为Vip" + (UserData.getInstance().getVipLevel() + 1)) : (this.barRecharge.value = 100, this.txtCurrentNum.text = "MAX", this.txtDesc.text = "");
            var t = UserData.getInstance().getVipLevel().toString().split("");
            2 == t.length ? (this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP" + t[0] + "_png"), "0" == t[1] ? this.imgVip2.source = RES.getRes("GUI_Homepage_Icon_VIP10_png") : this.imgVip2.source = RES.getRes("GUI_Homepage_Icon_VIP" + t[1] + "_png")) : ("0" == t[0] ? this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP10_png") : this.imgVip1.source = RES.getRes("GUI_Homepage_Icon_VIP" + t[0] + "_png"), this.imgVip2.source = null)
        },
        i.initCashData = function() {
            var t = this;
            this.rechargeConfig || ConfigData.preLoadDats(["cashData", "vip", "giftData"], [CashdataParser, VipParser, GiftdataParser],
                function() {
                    t.rechargeConfig = CashdataParser.GetInstance().getDataArr(),
                        t.vipdata = VipParser.GetInstance().getDataArr(),
                        t.initComplete()
                })
        },
        i.lastOrNextVip = function(t) {
            if (t.target == this.btnNextVip) {
                if (15 == this.curVipNum) return;
                this.curVipNum++,
                    this.showVip(this.curVipNum)
            } else {
                if (0 == this.curVipNum) return;
                this.curVipNum--,
                    this.showVip(this.curVipNum)
            }
        },
        i.initComplete = function() {
            WindowManager.getInstance().hideWaiting(),
                this.initBar(),
                this.__cachedData && "vip" == this.__cachedData.type ? (this.btnViewVip.label = "充值", this.grpRecharge.visible = !1, this.grpVip.visible = !0, this.showVip(UserData.getInstance().getVipLevel())) : this.showRecharge()
        },
        i.showRecharge = function() {
            RechargeManager.instance.CanFirstRecharge ? (this.btnFirstRecharge.visible = !0, this.scrollerRecharge.top = 189) : (this.btnFirstRecharge.visible = !1, this.scrollerRecharge.top = 0),
                this.rechargeConfig.sort(function(t, e) {
                    return t.dayCount == e.dayCount ? t.id - e.id : t.dayCount - e.dayCount
                });
            for (var t = [], e = Math.floor(this.rechargeConfig.length / 2), a = this.rechargeConfig.slice(), i = 0; e > i; i++) {
                for (var n = [], s = 0; 2 > s; s++) n.push(a.shift());
                t.push(n)
            }
            a.length > 0 && t.push(a),
                this.listRecharge.dataProvider = new eui.ArrayCollection(t),
                this.listRecharge.itemRenderer = RechargeRenderer
        },
        i.showVip = function(t) {
            void 0 === t && (t = 0),
                this.txtVipTitle.text = "VIP" + t + "礼包(商城中购买)",
                this.curVipNum = t,
                this.scrollerVipRight.viewport.scrollV = 0;
            for (var e = VipParser.GetInstance().getItemByField("level", this.curVipNum).desc_l, a = [], i = 0; i < e.length; i++) "#" == e[i] && a.push(i);
            for (var n = e,
                    s = 0; s < a.length; s += 2) {
                var r = n.substring(a[s], a[s + 1] + 1),
                    o = "<font color='#" + r.substring(1, 7) + "'>" + r.substring(7, r.length - 1) + "</font>";
                e = e.replace(r, o)
            }
            this.txtVipDec.textFlow = (new egret.HtmlTextParser).parser(e);
            var l = t + 1;
            14 == t ? l = 394 : 15 == t && (l = 395),
                this.giftData = GiftdataParser.GetInstance().getDataArr();
            for (var h = [], c = 0; c < this.giftData.length; c++)
                if (this.giftData[c].id == l) {
                    var d = {};
                    d.type = this.giftData[c].type,
                        d.id = this.giftData[c].item,
                        d.count = this.giftData[c].count,
                        h.push(d)
                }
            this.listVipBox.dataProvider = new eui.ArrayCollection(h),
                this.listVipBox.itemRenderer = vipGiftItemRenderer
        },
        i.changeView = function(t) {
            this.grpRecharge.visible ? (this.btnViewVip.label = "充值", this.grpRecharge.visible = !1, this.grpVip.visible = !0, this.showVip(UserData.getInstance().getVipLevel())) : (this.btnViewVip.label = "查看VIP", this.grpRecharge.visible = !0, this.grpVip.visible = !1, this.showRecharge())
        },
        i.clear = function() {
            UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.Redraw, this),
                EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.OnActivityDataUpdate, this)
        },
        i.closeClick = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.Recharge)
        },
        e
}(WindowBase);
egret.registerClass(WindowRecharge2, "WindowRecharge2");
var RechargeRenderer = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.skinName = "resource/eui_skins/item/RechargeBar1Skin.exml"
            /*tpa=resource/eui_skins/item/RechargeBar1Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.ShowNotify = function() {},
        i.HideNotify = function() {},
        i.onComplete = function(t) {
            this.item0.visible = !1,
                this.item1.visible = !1,
                this.itemArr = [this.item0, this.item1],
                this.item0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickItem0, this),
                this.item1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickItem1, this)
        },
        i.onClickItem0 = function() {
            if (UserData.getInstance().monthcarddate > 0 && !UserData.getInstance().monthcardreceived) {
                var t = Transport.getPkg(ProtocolMgr.ID_DceMonthCard);
                Transport.instance.send(t)
            } else {
                var e = this.data[0];
                this.buy(e)
            }
        },
        i.onClickItem1 = function() {
            if (UserData.getInstance().monthcarddate > 0 && !UserData.getInstance().monthcardreceived) {
                var t = Transport.getPkg(ProtocolMgr.ID_DceMonthCard);
                Transport.instance.send(t)
            } else {
                var e = this.data[1];
                this.buy(e)
            }
        },
        i.buy = function(t) {
            PlatformManager.instance.pay(t.id.toString(), t.name_l, t.sale, 1, void 0)
        },
        i.dataChanged = function() {
            for (var t = 0; t < this.data.length; t++) {
                this.itemArr[t].visible = !0,
                    2 == this.data[t].state ? (this.itemArr[t].imgCorner.source = RES.getRes("jiaobiao1_png"), this.itemArr[t].txtCorner.text = "推荐") : 1 == this.data[t].state ? (this.itemArr[t].imgCorner.source = RES.getRes("jiaobiao2_png"), this.itemArr[t].txtCorner.text = "热卖") : (this.itemArr[t].imgCorner.source = null, this.itemArr[t].txtCorner.text = "");
                var e = this.data[t].name_l;
                e = e.replace(/[^0-9]/gi, "");
                for (var a = e.split("").reverse(), i = 0; 5 > i; i++) a[i] && 0 == this.data[t].dayCount ? (this.itemArr[t]["imgNum" + i].visible = !0, "0" == a[i] ? this.itemArr[t]["imgNum" + i].source = RES.getRes("GUI_Homepage_Icon_VIP10_png") : this.itemArr[t]["imgNum" + i].source = RES.getRes("GUI_Homepage_Icon_VIP" + a[i] + "_png")) : this.itemArr[t]["imgNum" + i].visible = !1;
                var n = GetPlatType();
                this.itemArr[t].txtCredit.text = this.data[t].sale + (n == PlatformType.PF_QQ ? "星星" : "元"),
                    this.itemArr[t].spotMonthCard.visible = !1,
                    this.data[t].dayCount > 0 ? (this.itemArr[t].imgTitle.source = RES.getRes("chongzhi_yuekaText_png"), this.itemArr[t].txtGift.text = "连续" + this.data[t].dayCount + "天可领取" + this.data[t].dayGet + "钻石", UserData.getInstance().monthcarddate > 0 ? (this.itemArr[t].txtGiftDesc.text = "剩余天数" + UserData.getInstance().monthcarddate, UserData.getInstance().monthcardreceived ? this.itemArr[t].txtCredit.text = "续费" : (this.itemArr[t].txtCredit.text = "领取", this.itemArr[t].spotMonthCard.visible = !0), UserData.getInstance().monthcarddate <= this.data[t].renew ? this.itemArr[t].spotMonthCard.visible = !0 : this.itemArr[t].spotMonthCard.visible = !1) : this.itemArr[t].txtGiftDesc.text = "月卡计入充值活动") : (this.itemArr[t].imgTitle.source = RES.getRes("chongzhi_zuanshiText_png"), this.itemArr[t].txtGift.text = "首充赠送" + this.data[t].firstGet + "钻石", this.itemArr[t].txtGiftDesc.text = "(仅限购一次)", RechargeManager.instance.CanFirstRecharge ? (this.itemArr[t].txtGift.visible = !0, this.itemArr[t].txtGiftDesc.visible = !0) : (this.itemArr[t].txtGift.visible = !1, this.itemArr[t].txtGiftDesc.visible = !1));
                var s = [];
                s.indexOf,
                    UserData.getInstance().firstrechargelist.indexOf(this.data[t].id) > 0 && (this.itemArr[t].txtGift.visible = !1, this.itemArr[t].txtGiftDesc.visible = !1),
                    Utils.getImgByUrl(Path.rechargeUrl + this.data[t].icon, this.itemArr[t].imgDiamond)
            }
            this.data.length < 2 && (this.item1.visible = !1)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(RechargeRenderer, "RechargeRenderer");
var vipGiftItemRenderer2 = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/vipGiftSkin.exml"
            /*tpa=resource/eui_skins/item/vipGiftSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.dataChanged = function() {
            var t = GlobalFunction.getDropDataByTypeAndId(this.data.type, this.data.id, this.data.count);
            SUI.setTextureAsync(this.com.imgBg, QualitySystem.getItemSmallBack(t.quality)),
                SUI.setTextureAsync(this.com.imgIcon, t.icon),
                this.com.txtName.text = t.name,
                this.com.txtName.textColor = QualitySystem.getColorByQuality(t.quality),
                this.com.txtNum.text = t.count.toString()
        },
        e
}(eui.ItemRenderer);
egret.registerClass(vipGiftItemRenderer2, "vipGiftItemRenderer2");
var WindowRoleInfo = function(t) {
    function e() {
        t.call(this, !0),
            this.myse = 888,
            this.skinName = "resource/eui_skins/juesexinxiSkin.exml"
            /*tpa=resource/eui_skins/juesexinxiSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.setBtnGroup.visible = !1,
                this.initLable(),
                this.initButton(),
                this.RoleInfoUpdate(),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.updateHandler, this)
        },
        i.updateHandler = function(t) {
            this.RoleInfoUpdate()
        },
        i.initLable = function() {
            this.roleInfoTxt.text = "角色信息",
                this.roleNameTxt.text = "玩家的名字",
                this.rolePowerTxt.text = "9999999",
                this.vipLevelTxt.text = "15",
                this.roleLevelTxt.text = "998级",
                this.experienceNumTxt.text = "999/100000",
                this.expProgressBar.value = 0,
                this.expProgressBar.slideDuration = 2e3,
                this.battleArrayTxt.text = "阵 容:",
                this.battleArrayNumTxt.text = "8/8",
                this.speedTxt.text = "速 度:",
                this.speedNumTxt.text = "777",
                this.campTxt.text = "阵 营:",
                this.campValueTxt.text = "秩 序",
                this.militaryRankTxt.text = "军 衔:",
                this.militaryRankValueTxt.text = "上校",
                this.diamondTxt.text = "钻 石:",
                this.diamondNumTxt.text = "888",
                this.goldCoinTxt.text = "金 币：",
                this.goldCoinNumTxt.text = "6666",
                this.technologyTxt.text = "科技点：",
                this.technologyNumTxt.text = "222",
                this.exploitTxt.text = "功勋点：",
                this.exploitNumTxt.text = "00000",
                this.iolTxt.text = "石 油:",
                this.iolNumTxt.text = "5555",
                this.iolRcoverTxt.text = "原油恢复时间：",
                this.iolRecoverTimeTxt.text = "00:00:00",
                this.iolAllRecoverTxt.text = "原油全部回满：",
                this.iolAllRecoverTimeTxt.text = "00:00:00",
                this.findJewelTxt.text = "寻宝令：",
                this.findJewelNumTxt.text = "3333",
                this.findJewelRecoverTxt.text = "寻宝令恢复时间：",
                this.findJewelRecoverTimeTxt.text = "00:00:00",
                this.findJewelRecoverTxt1.text = "寻宝令全部回满：",
                this.findJewelRecoverTimeTxt1.text = "已回满",
                this.uidTxt.text = "账号ID：5256223265401"
        },
        i.initButton = function() {
            this.setBtn.label = "设置",
                this.okBtn.label = "确定",
                this.changeNameBtn.label = "角色更名",
                this.changeHeadBtn.label = "更换头像",
                this.setBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.buttonClickHandler, this),
                this.okBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.buttonClickHandler, this),
                this.changeNameBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.buttonClickHandler, this),
                this.changeHeadBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.buttonClickHandler, this),
                this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.buttonClickHandler, this)
        },
        i.buttonClickHandler = function(t) {
            switch (t.currentTarget) {
                case this.setBtn:
                    this.setBtnGroup.visible = !this.setBtnGroup.visible;
                    break;
                case this.okBtn:
                    WindowManager.getInstance().hide(WindowManager.windowType.RoleInfo),
                        Log.s_logToScreen && WindowManager.getInstance().show(WindowManager.windowType.log, Log.s_logs.join("\n"));
                    break;
                case this.changeNameBtn:
                    var e = {};
                    e.type = 0,
                        WindowManager.getInstance().show(WindowManager.windowType.NameChange, e),
                        this.setBtnGroup.visible = !1;
                    break;
                case this.changeHeadBtn:
                    this.setBtnGroup.visible = !1,
                        WindowManager.getInstance().hide(WindowManager.windowType.RoleInfo),
                        WindowManager.getInstance().show(WindowManager.windowType.ChooseCamp, 2);
                    break;
                case this.closeBtn:
                    WindowManager.getInstance().hide(WindowManager.windowType.RoleInfo)
            }
        },
        i.RoleInfoUpdate = function() {
            var t = this;
            this.roleNameTxt.text = UserData.getInstance().getUserName(),
                this.rolePowerTxt.text = UserData.getInstance().getFightPower().toString(),
                this.vipLevelTxt.text = UserData.getInstance().getVipLevel().toString(),
                this.roleLevelTxt.text = UserData.getInstance().getPlayerLevel().toString() + "级";
            var e = UserData.getInstance().getExperience(),
                a = UserData.getInstance().getNextLevelNeedExp();
            this.experienceNumTxt.text = e + "/" + a,
                this.expProgressBar.value = 1,
                this.expProgressBar.value = e / a * 100;
            for (var i = 0,
                    n = 0,
                    s = 0; s < ShipManager.getInstance().soldierList.length; s++) "0" != ShipManager.getInstance().soldierList[s].shipid && n++;
            for (var r in ShipManager.getInstance().shipList)
                for (var o in ShipManager.getInstance().soldierList) ShipManager.getInstance().shipList[r].id == ShipManager.getInstance().soldierList[o].shipid.toString() && (i += ShipManager.getInstance().shipList[r].speed);
            this.battleArrayNumTxt.text = n.toString() + "/" + (UserData.getInstance().getCurPosNum() > 8 ? 8 : UserData.getInstance().getCurPosNum().toString()),
                this.speedTxt.text = "速 度:",
                this.speedNumTxt.text = i.toString(),
                Utils.getImgByUrl(Path.GetHeadPicUrl(UserData.getInstance().getHead(), 0), this.headImg);
            var l = UserData.getInstance().getCamp();
            if (1 == l ? this.campValueTxt.text = "正义" : 2 == l ? this.campValueTxt.text = "铁血" : this.campValueTxt.text = "荣耀", Utils.getImgByUrl(Path.GetCampPicUrl(l, 3), this.campImg), this.militaryRankValueTxt.text = MilitaryrankParser.GetInstance().getItemByField("id", UserData.getInstance().getMilitaryranktype()).name_l, Utils.getImgByUrl(MilitaryManager.GetInstance().getPicByRankLvl(UserData.getInstance().getMilitaryranktype()), this.militaryRankImg), this.diamondNumTxt.text = UserData.getInstance()._res[TypeDefine.RES.Diamond], this.goldCoinNumTxt.text = UserData.getInstance()._res[TypeDefine.RES.Gold], this.technologyNumTxt.text = UserData.getInstance().getTechpoints().toString(), this.exploitNumTxt.text = UserData.getInstance().getExploit().toString(), this.iolNumTxt.text = UserData.getInstance()._res[TypeDefine.RES.Oil], this.iolRcoverTxt.text = "原油恢复时间：", this.iolAllRecoverTxt.text = "原油全部回满：", UserData.getInstance()._res[TypeDefine.RES.Oil] >= UserData.getInstance().getMaxOil()) this.iolRecoverTimeTxt.text = "00:00:00",
                this.iolAllRecoverTimeTxt.text = "已回满",
                this.iolAllRecoverTimeTxt.textColor = 65280;
            else {
                var h = UserData.getInstance().getMaxOil() - UserData.getInstance()._res[TypeDefine.RES.Oil];
                UserData.getInstance().getOldServerTime() / 1e3 - UserData.getInstance().getLastRecoverTimeOil() < 0 ? this.oilTime = 300 : (this.oilTime = 300 - (UserData.getInstance().getOldServerTime() / 1e3 - UserData.getInstance().getLastRecoverTimeOil()), this.oilAllTime = 300 * h - (UserData.getInstance().getOldServerTime() / 1e3 - UserData.getInstance().getLastRecoverTimeOil())),
                    this.tickOilIndex = GameTick.registerHandler(function() {
                            t.oilTickUpdate()
                        },
                        1e3),
                    this.iolRecoverTimeTxt.text = GlobalFunction.getHMSBySecond(this.oilTime),
                    this.iolAllRecoverTimeTxt.text = GlobalFunction.getHMSBySecond(this.oilAllTime)
            }
            if (this.findJewelTxt.text = "寻宝令：", this.findJewelNumTxt.text = UserData.getInstance()._res[TypeDefine.RES.XunBaoLing].toString(), this.findJewelRecoverTxt.text = "寻宝令恢复时间：", this.findJewelRecoverTimeTxt.text = "00:00:00", this.findJewelRecoverTxt1.text = "寻宝令全部回满：", this.findJewelRecoverTimeTxt1.text = "已回满", UserData.getInstance()._res[TypeDefine.RES.XunBaoLing] >= UserData.getInstance().getMaxXunBaoLing()) this.findJewelRecoverTimeTxt.text = "00:00:00",
                this.findJewelRecoverTimeTxt1.text = "已回满",
                this.findJewelRecoverTimeTxt1.textColor = 65280;
            else {
                var c = UserData.getInstance().getMaxXunBaoLing() - UserData.getInstance()._res[TypeDefine.RES.XunBaoLing];
                UserData.getInstance().getOldServerTime() / 1e3 - UserData.getInstance().getLastelecrecoverytime() < 0 ? this.jewelTime = 1200 : (this.jewelTime = 1200 - (UserData.getInstance().getOldServerTime() / 1e3 - UserData.getInstance().getLastelecrecoverytime()), this.jewelAllTime = 1200 * c - (UserData.getInstance().getOldServerTime() / 1e3 - UserData.getInstance().getLastelecrecoverytime())),
                    this.tickJewelIndex = GameTick.registerHandler(function() {
                            t.jewelTickUpdate()
                        },
                        1e3),
                    this.findJewelRecoverTimeTxt.text = GlobalFunction.getHMSBySecond(this.jewelTime),
                    this.findJewelRecoverTimeTxt1.text = GlobalFunction.getHMSBySecond(this.jewelAllTime)
            }
            this.uidTxt.text = "账号ID：" + GameData.uid
        },
        i.oilTickUpdate = function() {
            if (this.oilTime > 0) this.oilTime--,
                this.iolRecoverTimeTxt.text = GlobalFunction.getHMSBySecond(this.oilTime);
            else {
                var t = parseInt(this.iolNumTxt.text);
                if (t < UserData.getInstance().getMaxOil()) {
                    var e = Transport.getPkg(ProtocolMgr.ID_DceUpdateOil);
                    Transport.instance.send(e),
                        this.oilTime = 300
                } else GameTick.removeHandler(this.tickOilIndex),
                    this.tickOilIndex = 0
            }
            this.oilAllTime > 0 ? (this.oilAllTime--, this.iolAllRecoverTimeTxt.text = GlobalFunction.getHMSBySecond(this.oilAllTime)) : (this.iolAllRecoverTimeTxt.text = "已回满", this.iolAllRecoverTimeTxt.textColor = 65280)
        },
        i.jewelTickUpdate = function() {
            if (this.jewelTime > 0) this.jewelTime--,
                this.findJewelRecoverTimeTxt.text = GlobalFunction.getHMSBySecond(this.jewelTime);
            else {
                var t = parseInt(this.findJewelNumTxt.text);
                if (t < UserData.getInstance().getMaxXunBaoLing()) {
                    var e = Transport.getPkg(ProtocolMgr.ID_DceUpdateElectric);
                    Transport.instance.send(e),
                        this.jewelTime = 1200
                } else GameTick.removeHandler(this.tickJewelIndex),
                    this.tickJewelIndex = 0
            }
            this.jewelAllTime > 0 ? (this.jewelAllTime--, this.findJewelRecoverTimeTxt1.text = GlobalFunction.getHMSBySecond(this.jewelAllTime)) : (this.findJewelRecoverTimeTxt1.text = "已回满", this.findJewelRecoverTimeTxt1.textColor = 65280)
        },
        i.clear = function() {
            UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.updateHandler, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowRoleInfo, "WindowRoleInfo");
var WindowShipArrange = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/zhuye_ZhenrongSkin.exml"
            /*tpa=resource/eui_skins/zhuye_ZhenrongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            var e = this;
            t.data && (this.scoutSoldier = t.data, this.friendBool = !0),
                ConfigData.preLoadList(["exp", "medalData", "captainData", "shipData", "parts", "skillData", "medalexpData", "trainData", "partsUpgradeData", "captainUpgradeData"],
                    function() {
                        e.initUI()
                    })
        },
        i.clear = function() {
            windowInited = !1,
                GameTick.removeHandler(this.tipTickId),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.SHIP_UPDATE, this.updateShipList, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.ArrangeWindow_shipSelected, this.setShipData, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.ShipDataUpdate, this.setShipData, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowChooseItem_chooseNewShip, this.setSoldier, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowChooseItem_chooseNewPart, this.setEquip, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowChooseItem_chooseNewMedal, this.setEquipSoul, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.SoldierList_update, this.updateSoldier, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.Souls_List_Refresh, this.updateShipList, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.Souls_List_Refresh, this.setShipData, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.PARTS_UPDATE, this.updateParts, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.MEDAL_PIECES, this.setSoulPanel, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.SOULS_UPDATE, this.setSoulPanel, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.SOULS_REMOUDLE, this.setSoulPanel, this)
        },
        i.initUI = function() {
            var t = this;
            if (this.friendBool || (34 == GuideManager.step || 45 == GuideManager.step || 70 == GuideManager.step || 125 == GuideManager.step || 133 == GuideManager.step ? GuideManager.nextStep() : GuideManager.step >= 40 && GuideManager.step < 45 && UserData.getInstance()._level >= 5 && GuideManager.nextStep(43)), this.spotCaptain.visible = !1, this.btnEquipAllPart.visible = this.btnRemoveAllPart.visible = !this.friendBool, MainUI.instance.changeTopMode(topUIMode["null"]), this.scroll.viewport = this.list, this.scroll.addEventListener(eui.ScrollerThrowEvent.CHANGE,
                    function(e) {
                        t.scrollX = t.scroll.viewport.scrollH
                    },
                    this), SUI.setTextureAsync(this.BgImg, Path.backGroundImageUrl + "game_big_ship_background.jpg"), UserData.getInstance()._level >= 40 || this.friendBool)
                for (var a = [Locales.get("DecEquipPanel_txt_btn_parts"), Locales.get("DecEquipPanel_txt_dec_btn")], i = 0; i < a.length; i++) {
                    var n = new eui.Button;
                    n.skinName = "resource/eui_skins/components/tabSkin.exml"
                        /*tpa=resource/eui_skins/components/tabSkin.exml*/
                        ,
                        n.x = 118 * i,
                        n.index = i,
                        n.label = a[i],
                        this.tabContainer.addChild(n),
                        n.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                        n.currentState = "up",
                        e.medalPage && 1 == i ? (n.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP)), e.medalPage = !1) : 0 == i && n.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP)),
                        1 == i && (this["tabBtnSpot" + (i + 1)] = new eui.Image(RES.getRes("GUI_Homepage_notice_png")), this["tabBtnSpot" + (i + 1)].x = 118 * i + 100, this.tabContainer.addChild(this["tabBtnSpot" + (i + 1)]))
                } else this.showPartPanel();
            egret.setTimeout(function() {
                        Utils.getImgByUrl(Path.uiUrl + "zhenrongxuanzhangchuantuzhi.jpg", t.imgBg)
                    },
                    this, 2e3),
                SUI.addClickEffect(this.btnArrange),
                this.btnQuickEquip.visible = this.btnSetCaption.visible = this.btnArrange.visible = this.labelArrange.visible = !this.friendBool,
                this.equipPanel1.index = 1,
                this.equipPanel2.index = 2,
                this.equipPanel3.index = 3,
                this.equipPanel4.index = 4,
                this.equipPanel1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showChooseEquip, this),
                this.equipPanel2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showChooseEquip, this),
                this.equipPanel3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showChooseEquip, this),
                this.equipPanel4.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showChooseEquip, this),
                this.captainPanel.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showChooseCaptain, this),
                this.btnEquipAllPart.addEventListener(egret.TouchEvent.TOUCH_TAP, this.autoEquipMedal, this),
                this.btnRemoveAllPart.addEventListener(egret.TouchEvent.TOUCH_TAP, this.autoRemoveMedal, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SHIP_UPDATE, this.updateShipList, this),
                this.updateShipList(),
                this.updateFormation(),
                this.btnArrange.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showFormatTeam, this),
                this.btnQuickEquip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.autoEquip, this),
                this.shipPic.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showChoosShip, this),
                this.infoGroup.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showChoosShip, this),
                this.btnSetCaption.addEventListener(egret.TouchEvent.TOUCH_TAP, this.setCaption, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.ArrangeWindow_shipSelected, this.setShipData, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.ShipDataUpdate, this.setShipData, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowChooseItem_chooseNewShip, this.setSoldier, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowChooseItem_chooseNewPart, this.setEquip, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowChooseItem_chooseNewMedal, this.setEquipSoul, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.SoldierList_update, this.updateSoldier, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.Souls_List_Refresh, this.updateShipList, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.Souls_List_Refresh, this.setShipData, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowChooseItem_chooseNewCaptain, this.setCaptainData, this),
                this.friendBool || (this.captainPanel.visible = UserData.getInstance()._level >= 50),
                SUI.addClickEffect(this.btnChangeShip),
                this.btnChangeShip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.changeShipHandler, this),
                71 != GuideManager.step || this.friendBool || egret.setTimeout(function() {
                        t.scroll.viewport.scrollH = 185
                    },
                    this, 100);
            var s = 5,
                r = 2,
                o = 2,
                l = 2,
                h = this.tipGroup.y;
            this.tipTickId = GameTick.registerHandler(function() {
                    t.tipGroup.visible && (t.tipGroup.y < h - 30 ? s = 5 : t.tipGroup.y > h + 30 && (s = -5), t.tipGroup.y += s);
                    for (var e = 1; 5 > e; e++) t["u" + e].visible && (t["u" + e].y < 35 ? r = 2 : t["u" + e].y > 55 && (r = -2), t["u" + e].y += r);
                    for (e = 1; 7 > e; e++) t["mu" + e].visible && (t["mu" + e].y < 35 ? o = 2 : t["mu" + e].y > 55 && (o = -2), t["mu" + e].y += o);
                    t.cu.visible && (t.cu.y < 35 ? l = 2 : t.cu.y > 55 && (l = -2), t.cu.y += l)
                },
                50)
        },
        i.setChangeShipPoint = function(t) {
            this.changeShipPoint.visible = t > 0,
                this.friendBool && (this.changeShipPoint.visible = !1)
        },
        i.changeShipHandler = function(t) {
            var e = ShipManager.getInstance().getEmptyShips();
            e.sort(function(t, e) {
                    var a = ConfigData.getDataByKey("shipData", t.shipid),
                        i = ConfigData.getDataByKey("shipData", e.shipid);
                    return 1e3 * Number(a.quality) + t.level > 1e3 * Number(i.quality) + e.level ? -1 : 1
                }),
                WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                    data: e,
                    type: WindowChooseItemType.ship,
                    pos: this.curPos
                })
        },
        i.showChoosShip = function(t) {
            this.friendBool ? WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: this.selectedShipData,
                type: shipInfoWindowType.preview
            }) : (35 == GuideManager.step && GuideManager.nextStep(), t.currentTarget == this.infoGroup ? WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                data: this.selectedShipData,
                type: OperateType.ship,
                index: 1
            }) : WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: this.selectedShipData,
                type: shipInfoWindowType.cultivate,
                battle: this.curPos
            }))
        },
        i.setSoldier = function(t) {
            var e = t.parames.id,
                a = t.parames.pos;
            this.curPos = a,
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceSetSoldier, {
                    shipid: e,
                    pos: a - 1
                })
        },
        i.setEquip = function(t) {
            var e = t.parames.id;
            t.parames.pos;
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceEquipParts, {
                partsid: e,
                pos: this.curPos - 1
            })
        },
        i.setEquipSoul = function(t) {
            var e = t.parames.id,
                a = t.parames.pos;
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceEquipSoul, {
                soulid: e,
                soldierpos: this.curPos - 1,
                pos: a
            })
        },
        i.setCaption = function(t) {
            var e = this.curPos - 1,
                a = ShipManager.getInstance().soldierList[e];
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceSetCaption, {
                captionid: a.shipid
            }, !0)
        },
        i.showFormatTeam = function() {
            WindowManager.getInstance().needShowWindow = !0,
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceGetTactic, null, !0)
        },
        i.showChooseCaptain = function(t) {
            if (UserData.getInstance()._level < 50) Toast.launch(Locales.get("caption_error"));
            else if (134 != GuideManager.step && 138 != GuideManager.step || this.friendBool || GuideManager.nextStep(), this.equipCaptain)
                if (this.friendBool) WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                    data: this.scoutSoldier.ship[this.curPos - 1].captain,
                    type: shipInfoWindowType.captainPreview
                });
                else {
                    var e = CaptainManager.getInstance().getPropoDataById(this.equipCaptain);
                    WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                        data: e,
                        type: shipInfoWindowType.captainInfo,
                        battle: CaptainData.captainlist
                    })
                }
            else this.friendBool || WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                data: CaptainData.captainlist,
                type: WindowChooseItemType.captain,
                ship: this.selectedShipData.id
            })
        },
        i.showChooseEquip = function(t) {
            var e, a = t.currentTarget.index;
            e = this.friendBool ? this.shipListData[this.curPos - 1] : ShipManager.getInstance().getShipById(this.shipListData[this.curPos - 1].shipid);
            var i = ShipManager.getInstance().shipCfg[e.shipid],
                n = i.shipType,
                s = this.getIdlePartsList(a, n);
            if (this["emptyEquip" + a].visible) this.friendBool || WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                data: s,
                type: WindowChooseItemType.parts
            });
            else if (this.friendBool) WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: this.scoutSoldier.ship[this.curPos - 1].parts.list[a - 1],
                type: shipInfoWindowType.partsPreview
            });
            else {
                var r = ShipManager.getInstance().soldierList[this.curPos - 1],
                    o = ShipManager.getInstance().getPartById(r.partslist[a - 1]);
                WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                    equipType: a,
                    data: o,
                    shipType: n,
                    type: shipInfoWindowType.partsInfo,
                    battle: s
                })
            }
        },
        i.onTabBarItemTap = function(t) {
            var e = t.currentTarget;
            e.currentState = "down",
                this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"),
                this.lastTab = e,
                0 == e.index ? this.showPartPanel() : (126 != GuideManager.step || this.friendBool || GuideManager.nextStep(), this.showMedalPanel())
        },
        i.autoEquip = function() {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceAutoEquipSoldier, {
                pos: this.curPos - 1
            }, !0)
        },
        i.autoEquipMedal = function() {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceAutoEquipSoul, {
                soldierpos: this.curPos - 1
            }, !1)
        },
        i.autoRemoveMedal = function() {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceUnAutoEquipSoul, {
                soldierpos: this.curPos - 1
            }, !1)
        },
        i.updateSoldier = function() {
            this.updateShipList(),
                GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ArrangeWindow_shipSelected, {
                    pos: this.curPos
                }))
        },
        i.updateFormation = function() {
            var t = ShipManager.getInstance().shipFormationList[ShipManager.getInstance().shipFormationSelect - 1];
            this.txtArrangeName.text = Locales.get("formationSet", Locales.get("formationName_" + t.id), t.level)
        },
        i.updateShipList = function() {
            var t = this;
            this.shipListData = this.getShips(),
                this.list.dataProvider = new eui.ArrayCollection(this.shipListData),
                this.list.itemRenderer = windowArrangeShipItem;
            for (var e = 0,
                    a = 0; a < this.shipListData.length; a++) "0" != this.shipListData[a].id && "0" != this.shipListData[a].shipid && e++;
            for (var a = 0; a < this.list.numElements; ++a) {
                var i = this.list.getElementAt(a);
                i && (this.shipListData[a].pos == this.curPos && (this.shipListData[a].selected = !0), i.data = this.shipListData[a], this.friendBool && (i.enabled = !1))
            }
            var n = UserData.getInstance().getCurPosNum();
            this.txtArrangeNum.text = e + "/" + (n > 8 ? 8 : n),
                egret.setTimeout(function() {
                        t.scrollX && (t.scroll.viewport.scrollH = t.scrollX)
                    },
                    this, 100)
        },
        i.setShipData = function(t) {
            t && t.parames && (this.curPos = t.parames.pos);
            var e, a, i = this.curPos - 1;
            if (this.friendBool ? (e = this.scoutSoldier.ship[i], a = e, this.tabBtnSpot2 && (this.tabBtnSpot2.visible = !1)) : (e = ShipManager.getInstance().soldierList[i], a = ShipManager.getInstance().getShipById(e.shipid)), a && a.shipid) {
                this.selectedShipData = a;
                var n = ConfigData.getDataByKey("shipData", a.shipid);
                this.metalTitleTxt.text = a.name,
                    this.txtShipName.text = ShipdataParser.GetInstance().getItemById(a.shipid).name_l,
                    this.txtShipName.textColor = QualitySystem.getColorByQuality(n.quality),
                    this.txtShipUserName.text = a.name,
                    this.lvTxt.text = a.level + "/" + UserData.getInstance().getMaxShipLevel(),
                    this.lifeTxt.text = a.maxhp.toString(),
                    this.fireTxt.text = a.attack.toString(),
                    this.speedTxt.text = a.speed.toString(),
                    this.defendTxt.text = a.firedefence.toString(),
                    this.exploTxt.text = a.explosiondefence.toString();
                var s = Math.floor(a.shipid / 1e4);
                Math.floor(a.shipid % 100);
                this.friendBool ? this.captionMark.visible = a.id == this.scoutSoldier.captionid : (this.captionMark.visible = a.id == ShipManager.getInstance().captionId, this.btnSetCaption.visible = !this.captionMark.visible, GameEventDispatcher.getInstance().addEventListener(GameEvent.PARTS_UPDATE, this.updateParts, this), GameEventDispatcher.getInstance().addEventListener(GameEvent.MEDAL_PIECES, this.setSoulPanel, this), GameEventDispatcher.getInstance().addEventListener(GameEvent.SOULS_UPDATE, this.setSoulPanel, this), GameEventDispatcher.getInstance().addEventListener(GameEvent.SOULS_REMOUDLE, this.setSoulPanel, this)),
                    SUI.setTextureAsync(this.imgCountry, Path.countryURL + "country_" + n.country + ".jpg"),
                    SUI.setTextureAsync(this.typeIcon, ShipManager.getInstance().getShipTypeIcon(s)),
                    SUI.setTextureAsync(this.shipPic, ShipManager.getInstance().getShipPicByType(a.shipid)),
                    this.txtShipUpgrade.text = "",
                    this.updateParts();
                var r = ConfigData.getDataByKey("skillData", a.skillid);
                this.txtSkillName1.textFlow = Utils.textFlowByStr(Locales.get("skillNameWithLevel", r.name_l, r.level));
                var o = ConfigData.getDataByKey("skillData", a.activeskillid);
                this.txtSkillName2.textFlow = Utils.textFlowByStr(Locales.get("skillNameWithLevel", o.name_l, o.level));
                var l = ConfigData.getDataByKey("skillData", a.circleskillid);
                this.txtSkillName3.textFlow = Utils.textFlowByStr(Locales.get("skillNameWithLevel", l.name_l, l.level)),
                    this.friendBool ? this.setCaptainData(new GameEvent(GameEvent.WindowChooseItem_chooseNewCaptain, {
                        id: e.captain && e.captain.id || null
                    })) : this.setCaptainData(new GameEvent(GameEvent.WindowChooseItem_chooseNewCaptain, {
                        id: e.captainid
                    })),
                    this.setSoulPanel(),
                    GuideManager.guideComplete ? RedPointManager.getShipUpdate(a) > 0 ? (this.tipGroup.visible = !0, this.tipTxt.text = "可升级") : RedPointManager.getShipRemodule(a) > 0 ? (this.tipGroup.visible = !0, this.tipTxt.text = "可改造") : RedPointManager.getShipSkill(a) > 0 ? (this.tipGroup.visible = !0, this.tipTxt.text = "可升级") : RedPointManager.getShipTrain(a) > 0 ? (this.tipGroup.visible = !0, this.tipTxt.text = "可训练") : this.tipGroup.visible = !1 : this.tipGroup.visible = !1,
                    RedPointManager.getPointShow({
                            quality: Number(n.quality)
                        },
                        RedPointType.ships) ? this.setChangeShipPoint(1) : this.setChangeShipPoint(0)
            }
        },
        i.updateParts = function() {
            var t, e, a = this.curPos - 1;
            this.friendBool ? (t = this.scoutSoldier.ship[a], e = t) : (t = ShipManager.getInstance().soldierList[a], e = ShipManager.getInstance().getShipById(t.shipid));
            for (var i = (ConfigData.getDataByKey("shipData", e.shipid), Math.floor(e.shipid / 1e4)), n = 1; 4 >= n; n++) {
                var s = void 0;
                if (s = this.friendBool ? t.parts.list[n - 1] : ShipManager.getInstance().getPartById(t.partslist[n - 1]), this["point" + n].visible = !1, s && s.partsid) {
                    var r = ConfigData.getDataByKey("parts", s.partsid);
                    this["txtEquipName" + n].text = PartsParser.GetInstance().getItemById(s.partsid).name_l,
                        this["txtEquipName" + n].textColor = QualitySystem.getColorByQuality(r.quality),
                        this["emptyEquip" + n].visible = !1,
                        this["equip" + n].visible = !0,
                        SUI.setTextureAsync(this["equipPic" + n], Path.partsIconURL + r.icon),
                        SUI.setTextureAsync(this["equipBg" + n], QualitySystem.getItemSmallBack(r.quality)),
                        this["txtLevel" + n].text = s.upgradelevel,
                        this["txtUpgrade" + n].text = s.remouldlevel,
                        this.friendBool || (this["point" + n].visible = RedPointManager.getPartRedPoint(s, n, i) > 0, this["u" + n].visible = RedPointManager.getPartUpdateBool(s, !0) > 0 && 0 == RedPointManager.getPartRemoduleBool(s) && !RedPointManager.getPointShow({
                                quality: Number(r.quality),
                                parts: s,
                                equipType: n,
                                shipType: i
                            },
                            RedPointType.parts), this["u" + n].visible && (this["point" + n].visible = !1))
                } else if (this["txtEquipName" + n].text = Locales.get("panel_parts_txt_parttype_" + n), this["txtEquipName" + n].textColor = 11250603, this["emptyEquip" + n].visible = !0, this["equip" + n].visible = !1, this.friendBool) this["point" + n].visible = !1;
                else {
                    this["point" + n].visible = !1;
                    var o = this.getIdlePartsList(n, i);
                    this["point" + n].visible = o.length > 0
                }
            }
        },
        i.setSoulPanel = function() {
            var t, e = this.curPos - 1;
            t = this.friendBool ? this.scoutSoldier.ship[e] : ShipManager.getInstance().soldierList[e];
            var a = null;
            this.friendBool || (a = ConfigData.getDataByKey("shipData", ShipManager.getInstance().getShipById(t.shipid).shipid), this.tabBtnSpot2 && (this.tabBtnSpot2.visible = ShipManager.getInstance().getMedalRedPoint(t) > 0)),
                this.soulTypeObj = {};
            for (var i = 0; 6 > i; i++) {
                var n;
                if (n = this.friendBool ? t.soullist.list[i] || null : ShipManager.getInstance().getSoulById(t.soullist[i]), n && "0" != n.id) {
                    this["part" + (i + 1)].visible = !0,
                        this["emptyPart" + (i + 1)].visible = !1;
                    var s = ConfigData.getDataByKey("medalData", n.soulid);
                    this["part" + (i + 1)].index = i,
                        this["part" + (i + 1)].hasEventListener(egret.TouchEvent.TOUCH_TAP) || this["part" + (i + 1)].addEventListener(egret.TouchEvent.TOUCH_TAP, this.showMedalHandler, this),
                        this.soulTypeObj[s.medalType] = !0,
                        Utils.getImgByUrl(Path.soulIconURL + s.icon, this["partPanel" + (i + 1)].pic),
                        this["partPanel" + (i + 1)].txtLevel.text = Utils.getMetalLvByExp(n.point, "exp" + s.exp),
                        this["partPanel" + (i + 1)].txtUpgrade.text = n.promotelvl,
                        Utils.getImgByUrl(QualitySystem.getItemSmallBack(s.quality), this["partPanel" + (i + 1)].bg),
                        this["txtPartName" + (i + 1)].text = MedaldataParser.GetInstance().getItemById(n.soulid).name_l,
                        this["txtPartName" + (i + 1)].textColor = QualitySystem.getColorByQuality(s.quality),
                        this["txtPartValue" + (i + 1)].text = BuffData.getBuffNameById(s.buff) + ":" + BuffData.getBuffValue(s, Utils.getMetalLvByExp(n.point, "exp" + s.exp)),
                        this["txtPartUgrade" + (i + 1)].text = BuffData.getBuffNameById(s.remouldType) + ":+" + SoulManager.getInstance().getPercentage(n.promotelvl, s.remouldValue),
                        this.friendBool ? this["spotPart" + (i + 1)].visible = !1 : (this["spotPart" + (i + 1)].visible = RedPointManager.getMedalRedPoint(a.shipType, n, s) > 0, this["mu" + (i + 1)].visible = RedPointManager.getMedalUpdateBool(n, !0) > 0 && 0 == RedPointManager.getMedalRemoduleBool(n) && !RedPointManager.getPointShow({
                                shipType: a.shipType,
                                soul: n,
                                quality: Number(s.quality),
                                exp: s.exp
                            },
                            RedPointType.medals), this["mu" + (i + 1)].visible && (this["spotPart" + (i + 1)].visible = !1))
                } else if (this["emptyPart" + (i + 1)].index = i, this["part" + (i + 1)].visible = !1, this["emptyPart" + (i + 1)].visible = !0, this["spotPart" + (i + 1)].visible = !1, !this.friendBool) {
                    var r = !0;
                    if (i > 2 && UserData.getInstance()._level < 10 * (i - 3) + 60 && (r = !1, this["txtEmptyDesc" + (i + 1)].text = 10 * (i - 3) + 60 + Locales.get("DecEquipPanel_txt_lock"), this["imgEmptyFlag" + (i + 1)].source = RES.getRes(Path.resHeadUrl + "zhenrong_locked_png")), r) {
                        this["emptyPart" + (i + 1)].hasEventListener(egret.TouchEvent.TOUCH_TAP) || this["emptyPart" + (i + 1)].addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectMedalHandler, this);
                        for (var o = this.getIdleSoulList(a.shipType), l = 0; l < o.length; l++) {
                            var s = ConfigData.getDataByKey("medalData", o[l].soulid);
                            if (!this.soulTypeObj[s.medalType]) {
                                this["spotPart" + (i + 1)].visible = !0;
                                break
                            }
                        }
                    }
                }
            }
        },
        i.getIdlePartsList = function(t, e) {
            for (var a = ShipManager.getInstance().getPartsByType(t, e), i = [], n = 0; n < a.length; n++) ShipManager.getInstance().isPartEquiped(a[n].id) || i.push(a[n]);
            return i.sort(function(t, e) {
                    var a = ConfigData.getDataByKey("parts", t.partsid),
                        i = ConfigData.getDataByKey("parts", e.partsid),
                        n = 1e4 * Number(a.quality) + 100 * t.remouldlevel + t.upgradelevel,
                        s = 1e4 * Number(i.quality) + 100 * e.remouldlevel + e.upgradelevel;
                    return n > s ? -1 : 1
                }),
                i
        },
        i.getIdleSoulList = function(t) {
            for (var e = ShipManager.getInstance().getGoodAtSoulList(t), a = [], i = 0; i < e.length; i++) {
                var n = ConfigData.getDataByKey("medalData", e[i].soulid);
                this.soulTypeObj[n.medalType] || 9 == n.medalType || ShipManager.getInstance().isMedalEquiped(e[i].id) || a.push(e[i])
            }
            var n = ConfigData.getAllData("medalData");
            return a.sort(function(t, e) {
                    var a = n[t.soulid],
                        i = n[e.soulid],
                        s = 1e4 * Number(a.quality) + 100 * t.promotelvl + t.point / 1e4,
                        r = 1e4 * Number(i.quality) + 100 * e.promotelvl + e.point / 1e4;
                    return s > r ? -1 : 1
                }),
                a
        },
        i.showMedalHandler = function(t) {
            var e = t.currentTarget.index;
            if (this.friendBool) WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                data: this.scoutSoldier.ship[this.curPos - 1].soullist.list[e],
                type: shipInfoWindowType.soulPreview
            });
            else {
                var a = ShipManager.getInstance().soldierList[this.curPos - 1],
                    i = ShipManager.getInstance().getSoulById(a.soullist[e]),
                    n = ConfigData.getDataByKey("shipData", ShipManager.getInstance().getShipById(a.shipid).shipid),
                    s = this.getIdleSoulList(n.shipType);
                WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                    data: i,
                    type: shipInfoWindowType.soulInfo,
                    battle: s,
                    pos: e
                })
            }
        },
        i.selectMedalHandler = function(t) {
            128 != GuideManager.step || this.friendBool || GuideManager.nextStep();
            var e = t.currentTarget.index,
                a = ShipManager.getInstance().soldierList[this.curPos - 1],
                i = ConfigData.getDataByKey("shipData", ShipManager.getInstance().getShipById(a.shipid).shipid),
                n = this.getIdleSoulList(i.shipType);
            WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                data: n,
                pos: e,
                type: WindowChooseItemType.medal
            })
        },
        i.setCaptainData = function(t) {
            var e = this;
            this.equipCaptain = t.parames.id;
            var a;
            if (this.equipCaptain) {
                var i = ConfigData.getDataByKey("captainData", this.equipCaptain);
                if (a = QualitySystem.getCaptainFrame(i.quality), this.captainPic.visible = !0, Utils.getImgByUrl(CaptainManager.getInstance().getCaptainPicById(i.picture, !0), this.captainPic,
                        function() {
                            e.captainPic.width = 108,
                                e.captainPic.height = 110
                        }), Utils.getImgByUrl(a, this.captainBg), Utils.getImgByUrl(QualitySystem.getCaptainSmallBack(i.quality), this.captainBg0), !this.friendBool) {
                    this.spotCaptain.visible = RedPointManager.getCaptainRedPoint(this.equipCaptain) > 0;
                    for (var n, s = 0; s < CaptainData.captainlist.length; s++) {
                        var r = CaptainData.captainlist[s];
                        if (r.id == this.equipCaptain) {
                            n = r;
                            break
                        }
                    }
                    n && (this.cu.visible = RedPointManager.getCaptainUpdate(n, !0) > 0 && 0 == RedPointManager.getCaptainRemodule(n) && !RedPointManager.getPointShow({
                            quality: Number(i.quality)
                        },
                        RedPointType.captain), this.cu.visible && (this.spotCaptain.visible = !1))
                }
            } else {
                this.captainPic.visible = !1,
                    this.captainBg.source = RES.getRes(Path.resHeadUrl + "tujian_fangkuangjianzhang_png"),
                    Utils.getImgByUrl(Path.itemBackURL + "tujian_fangkuangjianzhang.png", this.captainBg),
                    this.spotCaptain.visible = !1;
                for (var s = 0; s < CaptainData.captainlist.length; s++)
                    if (!ShipManager.getInstance().isCaptainEquiped(CaptainData.captainlist[s].id) && !this.friendBool) {
                        this.spotCaptain.visible = !0;
                        break
                    }
                this.cu.visible = !1
            }
            t.parames["new"] && RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceEquipCaptain, {
                captainid: this.equipCaptain,
                pos: this.curPos - 1
            }, !1)
        },
        i.getShips = function() {
            var t, e = [];
            t = this.friendBool ? this.scoutSoldier.ship : ShipManager.getInstance().soldierList;
            var a = t.length;
            (8 == GuideManager.step || 24 == GuideManager.step) && (a = 3);
            for (var i = 0; a > i; i++) {
                var n = {};
                if (n.pos = i + 1, n.shipid = t[i].shipid, n.friendBool = this.friendBool, 8 > i && t[i] && t[i].shipid && "0" != t[i].shipid && "0" != t[i].id) {
                    var s = this.friendBool ? t[i] : ShipManager.getInstance().getShipById(t[i].shipid),
                        r = ShipManager.getInstance().shipCfg[s.shipid];
                    n.id = r.id,
                        n.pic = ShipManager.getInstance().getShipPicByType(s.shipid),
                        n.typeIcon = ShipManager.getInstance().getShipTypeIcon(r.shipType),
                        n.bg = QualitySystem.getShipSmallBack(r.quality),
                        n.caption = s.id == ShipManager.getInstance().captionId
                }
                e.push(n)
            }
            return e
        },
        i.showPartPanel = function() {
            this.equipPanel.visible = !0,
                this.medalPanel.visible = !1
        },
        i.showMedalPanel = function() {
            this.equipPanel.visible = !1,
                this.medalPanel.visible = !0
        },
        e
}(WindowBase);
egret.registerClass(WindowShipArrange, "WindowShipArrange");
var windowInited = !1,
    windowArrangeShipItem = function(t) {
        function e() {
            t.call(this),
                this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
                this.skinName = "resource/eui_skins/item/zhuye_zhenrongzhanjianSkin.exml"
                /*tpa=resource/eui_skins/item/zhuye_zhenrongzhanjianSkin.exml*/
        }
        __extends(e, t);
        var a = (__define, e),
            i = a.prototype;
        return i.clear = function() {
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.ArrangeWindow_shipSelected, this.selectHandler, this)
            },
            i.createChildren = function() {
                this.addEventListener(egret.TouchEvent.TOUCH_TAP, this.selectShip, this),
                    GameEventDispatcher.getInstance().addEventListener(GameEvent.ArrangeWindow_shipSelected, this.selectHandler, this)
            },
            i.selectHandler = function(t) {
                t.parames.pos != this.data.pos && (this.data.selected = !1, this.select.visible = !1)
            },
            i.selectShip = function() {
                if (!(this.data.pos > 8))
                    if (this.data.shipid && "0" != this.data.shipid) e.selectedData && (e.selectedData.selected = !1),
                        this.select.visible = !0,
                        this.data.selected = !0,
                        e.selectedData = this.data,
                        GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ArrangeWindow_shipSelected, {
                            shipid: this.data.shipid,
                            pos: this.data.pos
                        }));
                    else if (!this.data.friendBool && UserData.getInstance().getCurPosNum() >= this.data.pos) {
                    (9 == GuideManager.step || 25 == GuideManager.step) && GuideManager.nextStep();
                    var t = ShipManager.getInstance().getEmptyShips();
                    t.sort(function(t, e) {
                            var a = ConfigData.getDataByKey("shipData", t.shipid),
                                i = ConfigData.getDataByKey("shipData", e.shipid);
                            return 1e3 * Number(a.quality) + t.level > 1e3 * Number(i.quality) + e.level ? -1 : 1
                        }),
                        WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                            data: t,
                            type: WindowChooseItemType.ship,
                            pos: this.data.pos
                        })
                }
            },
            i.dataChanged = function() {
                if (this.data)
                    if (this.data.shipid && "0" != this.data.shipid && this.data.pic) {
                        for (var t = (ConfigData.getDataByKey("shipData", this.data.id), 0); t < ShipManager.getInstance().soldierList.length; t++) {
                            var e = ShipManager.getInstance().soldierList[t];
                            if (this.data.shipid == e.shipid) {
                                this.point.visible = ShipManager.getInstance().getShipRedpoint(e) > 0;
                                break
                            }
                        }
                        SUI.setTextureAsync(this.pic, this.data.pic),
                            SUI.setTextureAsync(this.bg, this.data.bg),
                            SUI.setTextureAsync(this.typeIcon, this.data.typeIcon),
                            this.caption.visible = this.data.caption,
                            this.empty.visible = !1,
                            this.lockPanel.visible = !1,
                            this.pic.visible = !0,
                            this.typeIcon.visible = !0,
                            this.data.selected ? this.select.visible = !0 : this.select.visible = !1,
                            windowInited || (windowInited = !0, this.select.visible = !0, this.data.selected = !0, GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.ArrangeWindow_shipSelected, {
                                shipid: this.data.shipid,
                                pos: this.data.pos
                            })))
                    } else {
                        if (UserData.getInstance().getCurPosNum() >= this.data.pos) {
                            this.pic.visible = !1,
                                this.typeIcon.visible = !1,
                                SUI.setTextureAsync(this.bg, QualitySystem.getShipSmallBack(1)),
                                this.empty.visible = !0,
                                this.caption.visible = !1,
                                this.lockPanel.visible = !1,
                                (8 == GuideManager.step || 24 == GuideManager.step) && GuideManager.nextStep();
                            var a = ShipManager.getInstance().getEmptyShips();
                            this.point.visible = a.length > 0
                        } else {
                            this.pic.visible = !1,
                                this.typeIcon.visible = !1,
                                SUI.setTextureAsync(this.bg, QualitySystem.getShipSmallBack(1)),
                                this.empty.visible = !1,
                                this.caption.visible = !1,
                                this.lockPanel.visible = !0;
                            var i = ShipManager.getInstance().getShipPosLevel(this.data.pos);
                            this.txtOpenLevel.text = Locales.get("panel_pirate_text_disciple_lv_0", i),
                                this.point.visible = !1
                        }
                        this.select.visible = !1
                    }
                this.data.friendBool && (this.point.visible = !1)
            },
            e
    }(eui.ItemRenderer);
egret.registerClass(windowArrangeShipItem, "windowArrangeShipItem");
var WindowShipFactory = function(t) {
    function e() {
        t.call(this, !1),
            this.canSellPaperNum = 0,
            this.normalPiece = 0,
            this.highPiece = 0,
            this.pos = 0,
            this.pos2 = 0,
            this.skinName = "resource/eui_skins/ShipbuildingSkin.exml"
            /*tpa=resource/eui_skins/ShipbuildingSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["paperSaleData"],
                    function() {
                        t.initUI()
                    }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnSellAll.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnSell.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.secOKBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.secCloseBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.secCancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                (5 == GuideManager.step || 21 == GuideManager.step) && GuideManager.nextStep()
        },
        i.OnClickBtnClose = function(t) {
            var e = this;
            switch (t.currentTarget) {
                case this.btnClose:
                    MainUI.instance.changeTopMode(topUIMode.normal),
                        MainUI.instance.changeTopMode(topUIMode.normal),
                        this.close();
                    break;
                case this.btnSellAll:
                    this.huishouByQualityGroup.visible = !0,
                        this.ck1.selected = !1,
                        this.ck2.selected = !1,
                        this.ck3.selected = !1,
                        this.ck4.selected = !1,
                        this.ck5.selected = !1;
                    break;
                case this.btnSell:
                    this.setPos2();
                    for (var a = !1,
                            i = [], n = this.paperContainer.dataProvider, s = 0; s < n.length; s++) n.getItemAt(s).selectCount1 > 0 && (i.push(new PaperData(n.getItemAt(s)[1].id, n.getItemAt(s).selectCount1, !1)), 5 == n.getItemAt(s)[1].quality && (a = !0)),
                        n.getItemAt(s).selectCount2 > 0 && (i.push(new PaperData(n.getItemAt(s)[2].id, n.getItemAt(s).selectCount2, !1)), 5 == n.getItemAt(s)[2].quality && (a = !0));
                    a ? GameAlert.getInstance().show("提示", "指挥官,您想要分解的图纸中有橙色图纸,是否要继续分解?",
                        function() {
                            e.sendSalePaper(i),
                                GameAlert.getInstance().hide()
                        }) : this.sendSalePaper(i);
                    break;
                case this.secCloseBtn:
                    this.huishouByQualityGroup.visible = !1;
                    break;
                case this.secOKBtn:
                    ShipManager.getInstance().quailtyArr = [],
                        this.ck1.selected && ShipManager.getInstance().quailtyArr.push(1),
                        this.ck2.selected && ShipManager.getInstance().quailtyArr.push(2),
                        this.ck3.selected && ShipManager.getInstance().quailtyArr.push(3),
                        this.ck4.selected && ShipManager.getInstance().quailtyArr.push(4),
                        this.ck5.selected && ShipManager.getInstance().quailtyArr.push(5),
                        this.huishouByQualityGroup.visible = !1,
                        this.showSellPaperPanel();
                    break;
                case this.secCancelBtn:
                    this.huishouByQualityGroup.visible = !1
            }
        },
        i.sendSalePaper = function(t) {
            var e = Transport.getPkg(ProtocolMgr.ID_DceSalePaper);
            e.paperlist = t,
                Transport.instance.send(e)
        },
        i.handleSalePaper = function(t) {
            0 == t.res && Toast.launch("获得高级万能图纸" + this.highPiece + "张,普通万能图纸" + this.normalPiece + "张")
        },
        i.initUI = function() {
            MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.scroller.viewport = this.list,
                this.pos = 0,
                this.pos2 = 0,
                this.sellScroller.viewport = this.paperContainer;
            for (var t = [Locales.get("panel_shipyard_shipbuild_btn_building_name_1"), Locales.get("panel_paper_txt_changepanel_title_2")], e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 120 * e,
                    a.index = e,
                    a.label = t[e],
                    this.tabContainer.addChild(a),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "up",
                    0 == e && a.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
            }
            this.huishoutuzhi.visible = !1,
                this.groupBuildShip.visible = !0,
                this.btnChangeToSell.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnChangeToSellClick, this),
                this.btnReturn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.showBuildPanel, this),
                this.btnSellAll.label = "按品质回收",
                this.btnSell.label = "回收",
                this.setRedPoint2(),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.PaperDataUpdate, this.update, this)
        },
        i.onTabBarItemTap = function(t) {
            this.pos = 0;
            var e = t.currentTarget;
            e.currentState = "down",
                this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"),
                this.lastTab = e,
                0 == e.index ? this.setPaperPage() : this.setPiecePage()
        },
        i.update = function() {
            this.huishoutuzhi.visible ? this.showSellPaperPanel() : (this.setPos(), 0 == this.lastTab.index ? this.setPaperPage() : this.setPiecePage())
        },
        i.showBuildPanel = function() {
            MainUI.instance.setBottomVisible(!0),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.huishoutuzhi.visible = !1,
                this.groupBuildShip.visible = !0,
                this.huishouByQualityGroup.visible = !1,
                ShipManager.getInstance().quailtyArr = [],
                this.setPaperPage()
        },
        i.btnChangeToSellClick = function() {
            ShipManager.getInstance().quailtyArr.push(1),
                ShipManager.getInstance().quailtyArr.push(2),
                this.pos2 = 0,
                this.showSellPaperPanel()
        },
        i.showSellPaperPanel = function() {
            MainUI.instance.setBottomVisible(!1),
                MainUI.instance.changeTopMode(topUIMode["null"]),
                this.huishoutuzhi.visible = !0,
                this.groupBuildShip.visible = !1;
            var t = this.getSellPaperList();
            this.paperContainer.dataProvider = new eui.ArrayCollection(t),
                this.paperContainer.itemRenderer = ShipFactoryPaperItem,
                this.moveScroller2(this.pos2),
                this.updateSellPanel()
        },
        i.setPiecePage = function() {
            var t = this.getPaperPeiceList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = shipFactoryComposeItem,
                this.moveScroller(this.pos)
        },
        i.setPaperPage = function() {
            var t = this.getPaperList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = shipFactoryListItem,
                this.moveScroller(this.pos)
        },
        i.getPaperList = function() {
            for (var t = [], e = ShipManager.getInstance().papers, a = !1, i = !1, n = 0; n < e.length; n++) {
                var s = e[n],
                    r = ShipManager.getInstance().paperCfg[s.id],
                    o = {};
                o.id = s.id,
                    o.shipid = r.shipId,
                    o.isLock = s.islock,
                    o.icon = ShipManager.getInstance().getShipPicByType(r.shipId),
                    o.typeIcon = ShipManager.getInstance().getShipTypeIcon(r.shipType),
                    o.quality = Locales.get("labelQuality", r.quality),
                    o.qualityNum = r.quality,
                    o.qualityNum <= 2 && (a = !0),
                    o.qualityBg = QualitySystem.getShipSmallBack(r.quality),
                    o.num = Locales.get("labelOwnPaper", s.count.toString()),
                    o.shipName = ShipManager.getInstance().getShipNameByType(r.shipId),
                    o.own = ShipManager.getInstance().getShipByType(r.shipId),
                    void 0 == o.own && o.qualityNum >= 4 && (i = !0),
                    t.push(o)
            }
            if (t.sort(function(t, e) {
                    if (66 == GuideManager.step) {
                        if (105 == t.id) return -1;
                        if (105 == e.id) return 1
                    } else {
                        if (void 0 == t.own && void 0 == e.own) return e.qualityNum != t.qualityNum ? e.qualityNum - t.qualityNum : Number(e.id) - Number(t.id);
                        if (void 0 != t.own && void 0 != e.own) return e.qualityNum != t.qualityNum ? e.qualityNum - t.qualityNum : Number(e.id) - Number(t.id);
                        if (void 0 != t.own && void 0 == e.own) return -1;
                        if (void 0 == t.own && void 0 != e.own) return 1
                    }
                    return 1
                }), !GameData.skipShipGuide) {
                var o = {};
                o.id = -1,
                    o.lastOne = !0,
                    t.push(o)
            }
            this.redPoint.visible = a;
            var l = this.tabContainer.getChildAt(0);
            return l.redPoint.visible = i,
                t
        },
        i.getSellPaperList = function() {
            for (var t = [], e = [], a = ShipManager.getInstance().papers, i = 0, n = 0; n < a.length; n++) {
                var s = a[n];
                if (0 == s.islock) {
                    var r = ShipManager.getInstance().paperCfg[s.id],
                        o = {};
                    o.id = s.id,
                        o.icon = ShipManager.getInstance().getShipPicByType(r.shipId),
                        o.typeIcon = ShipManager.getInstance().getShipTypeIcon(r.shipType),
                        o.quality = r.quality,
                        o.qualityBg = QualitySystem.getPaperBack(r.quality),
                        o.num = s.count,
                        i += o.num,
                        o.shipName = ShipManager.getInstance().getShipNameByType(r.shipId),
                        o.own = ShipManager.getInstance().getShipByType(r.shipId),
                        o.isSelected = !1;
                    for (var l = 0; l < ShipManager.getInstance().quailtyArr.length; l++)
                        if (Number(o.quality) == ShipManager.getInstance().quailtyArr[l]) {
                            o.isSelected = !0;
                            break
                        }
                    t.push(o)
                }
            }
            t.sort(function(t, e) {
                    return void 0 == t.own && void 0 == e.own ? e.quality != t.quality ? e.quality - t.quality : Number(e.id) - Number(t.id) : void 0 != t.own && void 0 != e.own ? e.quality != t.quality ? e.quality - t.quality : Number(e.id) - Number(t.id) : void 0 != t.own && void 0 == e.own ? -1 : void 0 == t.own && void 0 != e.own ? 1 : void 0
                }),
                this.canSellPaperNum = i;
            for (var h = 0; h < t.length; h++) {
                var o = {};
                o[1] = t[h],
                    o.length = 1,
                    t[h].isSelected && (o.selectCount1 = t[h].num),
                    h + 1 < t.length && (h++, o[2] = t[h], o.length = 2, t[h].isSelected && (o.selectCount2 = t[h].num)),
                    e.push(o)
            }
            return e
        },
        i.setRedPoint2 = function() {
            for (var t = [], e = ShipManager.getInstance().paperPieces, a = 0; a < e.length; a++) {
                var i = e[a],
                    n = ShipManager.getInstance().paperPieceCfg[i.id],
                    s = ShipManager.getInstance().paperCfg[n.paperId],
                    r = {};
                r.id = i.id,
                    r.icon = ShipManager.getInstance().getShipPicByType(s.shipId),
                    r.typeIcon = ShipManager.getInstance().getShipTypeIcon(s.shipType),
                    r.quality = Locales.get("labelQuality", s.quality),
                    r.qualityNum = s.quality,
                    r.qualityBg = QualitySystem.getPaperBack(s.quality),
                    r.progress = Locales.get("labelProgress", i.count, s.pieceCount),
                    i.count >= s.pieceCount ? r.complete = !0 : r.complete = !1,
                    r.shipName = ShipManager.getInstance().getShipNameByType(s.shipId),
                    r.shipid = s.shipId,
                    r.own = ShipManager.getInstance().getShipByType(s.shipId),
                    t.push(r)
            }
            var o = this.tabContainer.getChildAt(1);
            if (o.redPoint.visible = !1, null != t && t.length > 0)
                for (var l = 0; l < t.length; l++)
                    if (t[l].complete) {
                        o.redPoint.visible = !0;
                        break
                    }
        },
        i.getPaperPeiceList = function() {
            for (var t = [], e = ShipManager.getInstance().paperPieces, a = 0; a < e.length; a++) {
                var i = e[a],
                    n = ShipManager.getInstance().paperPieceCfg[i.id],
                    s = ShipManager.getInstance().paperCfg[n.paperId],
                    r = {};
                r.id = i.id,
                    r.icon = ShipManager.getInstance().getShipPicByType(s.shipId),
                    r.typeIcon = ShipManager.getInstance().getShipTypeIcon(s.shipType),
                    r.quality = Locales.get("labelQuality", s.quality),
                    r.qualityNum = s.quality,
                    r.qualityBg = QualitySystem.getPaperBack(s.quality),
                    r.progress = Locales.get("labelProgress", i.count, s.pieceCount),
                    i.count >= s.pieceCount ? r.complete = !0 : r.complete = !1,
                    r.shipName = ShipManager.getInstance().getShipNameByType(s.shipId),
                    r.shipid = s.shipId,
                    r.own = ShipManager.getInstance().getShipByType(s.shipId),
                    t.push(r)
            }
            t.sort(function(t, e) {
                return 0 == t.complete && 0 == e.complete ? e.qualityNum != t.qualityNum ? e.qualityNum - t.qualityNum : Number(e.id) - Number(t.id) : 1 == t.complete && 1 == e.complete ? e.qualityNum != t.qualityNum ? e.qualityNum - t.qualityNum : Number(e.id) - Number(t.id) : 1 == t.complete && 0 == e.complete ? -1 : 0 == t.complete && 1 == e.complete ? 1 : void 0
            });
            var o = this.tabContainer.getChildAt(1);
            if (o.redPoint.visible = !1, null != t && t.length > 0)
                for (var l = 0; l < t.length; l++)
                    if (t[l].complete) {
                        o.redPoint.visible = !0;
                        break
                    }
            return t
        },
        i.updateSellPanel = function() {
            for (var t = this.paperContainer.dataProvider,
                    e = new Array,
                    a = 0; a < t.length; a++) t.getItemAt(a).selectCount1 > 0 && e.push({
                    id: t.getItemAt(a)[1].id,
                    count: t.getItemAt(a).selectCount1,
                    quality: t.getItemAt(a)[1].quality
                }),
                t.getItemAt(a).selectCount2 > 0 && e.push({
                    id: t.getItemAt(a)[2].id,
                    count: t.getItemAt(a).selectCount2,
                    quality: t.getItemAt(a)[2].quality
                });
            var i = 0;
            this.normalPiece = 0,
                this.highPiece = 0;
            for (var a = 0; a < e.length; a++) {
                i += e[a].count;
                var n = ConfigData.getDataByKey("paperSaleData", e[a].quality);
                n && (1 == n.type ? this.normalPiece += +n.count * e[a].count : this.highPiece += +n.count * e[a].count)
            }
            this.txtNum1.text = this.highPiece.toString(),
                this.txtNum2.text = this.normalPiece.toString(),
                this.txtSelected.text = Locales.get("selectNum", i.toString(), this.canSellPaperNum.toString())
        },
        i.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.PaperDataUpdate, this.update, this),
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnSellAll.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnSell.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.secOKBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.secCloseBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.secCancelBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this)
        },
        i.setPos = function() {
            this.pos = this.scroller.viewport.scrollV
        },
        i.moveScroller = function(t) {
            this.scroller.viewport.validateNow(),
                this.scroller.viewport.scrollV = t
        },
        i.setPos2 = function() {
            this.pos2 = this.sellScroller.viewport.scrollV
        },
        i.moveScroller2 = function(t) {
            this.sellScroller.viewport.validateNow(),
                this.sellScroller.viewport.scrollV = t
        },
        e
}(WindowBase);
egret.registerClass(WindowShipFactory, "WindowShipFactory");
var shipFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/ShipBuildingInformationBarSkin.exml"
            /*tpa=resource/eui_skins/item/ShipBuildingInformationBarSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {
            this._particle && this._particle.destroy()
        },
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this._particle && this._particle.destroy(), 105 == this.data.id && 66 == GuideManager.step && GuideManager.nextStep(), this.data.lastOne ? (this.skinName = "ShipBuildingInformationBar02Skin", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        GameData.skipShipGuide ? Toast.launch("此功能暂未开放，敬请期待!") : (WindowManager.getInstance().hideAll(), WindowShop.CURR_PAGE = WindowShop.PAPER_INDEX, WindowManager.getInstance().show(WindowManager.windowType.Shop))
                    },
                    this)) : (this.skinName = "resource/eui_skins/item/ShipBuildingInformationBarSkin.exml"
                    /*tpa=resource/eui_skins/item/ShipBuildingInformationBarSkin.exml*/
                    , this.data.isLock ? this.iconLock.source = "GUI_Shipbuilding_Icon_locked_png" : this.iconLock.source = "GUI_Shipbuilding_Icon_open_png", this.data.own ? (this.isOwned.visible = !0, this.btnBuild.visible = !1, this.txtPrice.visible = !1, this.iconPrice.visible = !1, this._particle && this._particle.destroy()) : (this.isOwned.visible = !1, this.btnBuild.visible = !0, this.txtPrice.visible = !0, this.iconPrice.visible = !0, this.data.qualityNum >= 4 ? this._particle = new ParticleDisplayObj(this.iconPicGroup, ParticleType.TrailingLight, ShapeType.Rectangle) : this._particle && this._particle.destroy()), this.txtName.textColor = QualitySystem.getColorByQuality(this.data.qualityNum), this.btnBuild.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.btnBuild.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            e.data.isLock || (UserData.getInstance().getRes(TypeDefine.RES.Gold) >= 1e3 ? (MakeShipAlert.getInstance().showMakeShip(e.data), 67 == GuideManager.step && GuideManager.nextStep()) : (Toast.launch("金币不足"), UserData.getInstance()._level >= 9 && (WindowManager.getInstance().show(WindowManager.windowType.BuJi), UserData.getInstance().sendDetailMessage())))
                        },
                        this), this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                                data: {
                                    shipid: e.data.shipid
                                },
                                type: shipInfoWindowType.preview
                            })
                        },
                        this), this.iconLock.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            RequestManager.GetInstance().RequestLockPaper(e.data.id, !e.data.isLock);
                            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.ShipFactory);
                            t && t.setPos()
                        },
                        this)), SUI.setTextureAsync(this.bg, this.data.qualityBg), SUI.setTextureAsync(this.iconPic, this.data.icon), SUI.setTextureAsync(this.typeIcon, this.data.typeIcon)))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(shipFactoryListItem, "shipFactoryListItem");
var shipFactoryComposeItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/ShipBuildingPaperPieceItemSkin.exml"
            /*tpa=resource/eui_skins/item/ShipBuildingPaperPieceItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {},
        i.dataChanged = function() {
            var t = this;
            this.data && (this.data.id = this.data.id, this.data.complete ? (this.imgComplete.source = "tongyong_lvkuang_png", this.txtHas.text = "收集完成", this.txtHas.textColor = 65280) : (this.imgComplete.source = "tongyong_hongkuang_png", this.txtHas.text = "收集不足", this.txtHas.textColor = 16711680), this.data.own ? this.isOwned.visible = !0 : this.isOwned.visible = !1, this.txtName.textColor = QualitySystem.getColorByQuality(this.data.qualityNum), SUI.setTextureAsync(this.qualityBg, this.data.qualityBg), SUI.setTextureAsync(this.iconPic, this.data.icon), SUI.setTextureAsync(this.typeIcon, this.data.typeIcon), this.iconPic.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                function() {
                    WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                        data: {
                            shipid: t.data.shipid
                        },
                        type: shipInfoWindowType.preview
                    })
                },
                this), this.imgComplete.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.imgComplete.addEventListener(egret.TouchEvent.TOUCH_TAP,
                function() {
                    ShipManager.getInstance().sendChargePaper(t.data.id, !1)
                },
                this))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(shipFactoryComposeItem, "shipFactoryComposeItem");
var ShipFactoryPaperItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/ShipBuildingPaperItemSkin.exml"
            /*tpa=resource/eui_skins/item/ShipBuildingPaperItemSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            t.prototype.createChildren.call(this)
        },
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data) {
                this.item1.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.item1.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function(t) {
                            e.data.selectCount1++,
                                e.data.selectCount1 > e.itemData1.num && (e.data.selectCount1 = 0),
                                e.txtNum1.text = e.itemData1.num - e.data.selectCount1,
                                e.data.selectCount1 > 0 ? e.btnDelete1.visible = !0 : e.btnDelete1.visible = !1,
                                e.data.selectCount1 == e.itemData1.num ? (e.selectAll1.visible = !0, e.groupNum1.visible = !1) : (e.selectAll1.visible = !1, e.groupNum1.visible = !0);
                            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.ShipFactory);
                            a.updateSellPanel()
                        },
                        this),
                    this.item2.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.item2.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function(t) {
                            e.data.selectCount2++,
                                e.data.selectCount2 > e.itemData2.num && (e.data.selectCount2 = 0),
                                e.txtNum2.text = e.itemData2.num - e.data.selectCount2,
                                e.data.selectCount2 > 0 ? e.btnDelete2.visible = !0 : e.btnDelete2.visible = !1,
                                e.data.selectCount2 == e.itemData2.num ? (e.selectAll2.visible = !0, e.groupNum2.visible = !1) : (e.selectAll2.visible = !1, e.groupNum2.visible = !0);
                            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.ShipFactory);
                            a.updateSellPanel()
                        },
                        this),
                    this.btnDelete1.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnDelete1.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function(t) {
                            t.stopImmediatePropagation(),
                                e.data.selectCount1--,
                                e.data.selectCount1 < 0 && (e.data.selectCount1 = 0),
                                e.txtNum1.text = e.itemData1.num - e.data.selectCount1,
                                e.data.selectCount1 > 0 ? e.btnDelete1.visible = !0 : e.btnDelete1.visible = !1,
                                e.data.selectCount1 == e.itemData1.num ? e.selectAll1.visible = !0 : (e.selectAll1.visible = !1, e.groupNum1.visible = !0);
                            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.ShipFactory);
                            a.updateSellPanel()
                        },
                        this),
                    this.btnDelete2.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnDelete2.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function(t) {
                            t.stopImmediatePropagation(),
                                e.data.selectCount2--,
                                e.data.selectCount2 < 0 && (e.data.selectCount2 = 0),
                                e.txtNum2.text = e.itemData2.num - e.data.selectCount2,
                                e.data.selectCount2 > 0 ? e.btnDelete2.visible = !0 : e.btnDelete2.visible = !1,
                                e.data.selectCount2 == e.itemData2.num ? e.selectAll2.visible = !0 : (e.selectAll2.visible = !1, e.groupNum2.visible = !0);
                            var a = WindowManager.getInstance().getWindow(WindowManager.windowType.ShipFactory);
                            a.updateSellPanel()
                        },
                        this);
                var a = this.data;
                if (this.data.selectCount1 || (this.data.selectCount1 = 0), this.data.selectCount2 || (this.data.selectCount2 = 0), a.length)
                    if (1 == a.length) this.item2.visible = !1,
                        this.itemData1 = a[1],
                        this.isOwn1.visible = this.itemData1.own,
                        this.txtNum1.text = this.itemData1.num - this.data.selectCount1,
                        SUI.setTextureAsync(this.qualityBg1, this.itemData1.qualityBg),
                        SUI.setTextureAsync(this.pic1, this.itemData1.icon),
                        SUI.setTextureAsync(this.iconType1, this.itemData1.typeIcon),
                        this.txtName1.text = this.itemData1.shipName,
                        this.txtName1.textColor = QualitySystem.getColorByQuality(this.itemData1.quality),
                        this.data.selectCount1 > 0 ? this.btnDelete1.visible = !0 : this.btnDelete1.visible = !1,
                        this.data.selectCount1 == this.itemData1.num ? this.selectAll1.visible = !0 : this.selectAll1.visible = !1,
                        this.itemData1.isSelected ? (this.selectAll1.visible = !0, this.btnDelete1.visible = !0, this.groupNum1.visible = !1) : (this.selectAll1.visible = !1, this.btnDelete1.visible = !1, this.groupNum1.visible = !0);
                    else {
                        this.item2.visible = !0,
                            this.itemData1 = a[1],
                            this.itemData2 = a[2];
                        for (var i = 1; 2 >= i; i++) this["isOwn" + i].visible = this["itemData" + i].own,
                            this["txtNum" + i].text = this["itemData" + i].num - this.data["selectCount" + i],
                            this["txtName" + i].text = this["itemData" + i].shipName,
                            this["txtName" + i].textColor = QualitySystem.getColorByQuality(this["itemData" + i].quality),
                            SUI.setTextureAsync(this["qualityBg" + i], this["itemData" + i].qualityBg),
                            SUI.setTextureAsync(this["pic" + i], this["itemData" + i].icon),
                            SUI.setTextureAsync(this["iconType" + i], this["itemData" + i].typeIcon),
                            this.data["selectCount" + i] > 0 ? this["btnDelete" + i].visible = !0 : this["btnDelete" + i].visible = !1,
                            this.data["selectCount" + i] == this["itemData" + i].num ? this["selectAll" + i].visible = !0 : this["selectAll" + i].visible = !1;
                        this.itemData1.isSelected ? (this.selectAll1.visible = !0, this.btnDelete1.visible = !0, this.groupNum1.visible = !1) : (this.selectAll1.visible = !1, this.btnDelete1.visible = !1, this.groupNum1.visible = !0),
                            this.itemData2.isSelected ? (this.selectAll2.visible = !0, this.btnDelete2.visible = !0, this.groupNum2.visible = !1) : (this.selectAll2.visible = !1, this.btnDelete2.visible = !1, this.groupNum2.visible = !0)
                    }
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(ShipFactoryPaperItem, "ShipFactoryPaperItem");
var shipInfoWindowType;
!
function(t) {
    t[t.cultivate = 0] = "cultivate",
        t[t.preview = 1] = "preview",
        t[t.handbook = 2] = "handbook",
        t[t.captainInfo = 3] = "captainInfo",
        t[t.captainPreview = 4] = "captainPreview",
        t[t.captainHandbook = 5] = "captainHandbook",
        t[t.partsInfo = 6] = "partsInfo",
        t[t.partsPreview = 7] = "partsPreview",
        t[t.soulInfo = 8] = "soulInfo",
        t[t.soulPreview = 9] = "soulPreview"
}(shipInfoWindowType || (shipInfoWindowType = {}));
var shipInfoItemType;
!
function(t) {
    t[t.name = 0] = "name",
        t[t.info = 1] = "info",
        t[t.skill = 2] = "skill",
        t[t.remould = 3] = "remould",
        t[t.history = 4] = "history",
        t[t.detail = 5] = "detail",
        t[t.weapon = 6] = "weapon",
        t[t.captainInfo = 7] = "captainInfo",
        t[t.captainCommand = 8] = "captainCommand",
        t[t.captainRank = 9] = "captainRank",
        t[t.captainintro = 10] = "captainintro",
        t[t.captainResume = 11] = "captainResume",
        t[t.partsInfo = 12] = "partsInfo",
        t[t.partsRemould = 13] = "partsRemould",
        t[t.partsResume = 14] = "partsResume",
        t[t.soulInfo = 15] = "soulInfo",
        t[t.soulRemould = 16] = "soulRemould",
        t[t.soulResume = 17] = "soulResume"
}(shipInfoItemType || (shipInfoItemType = {}));
var WindowShipInfo = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/zhanjianxinxiSkin.exml"
            /*tpa=resource/eui_skins/zhanjianxinxiSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            var a = this;
            e.instance = this,
                this.sData = t.data,
                this.infoType = t.type,
                this.battleData = t.battle,
                this.pos = t.pos,
                this.paramesData = t,
                ConfigData.preLoadList(["shipData", "shipModelData", "captainData", "parts", "medalData"],
                    function() {
                        a.initUI()
                    })
        },
        i.setStatusByKey = function(t, e, a) {
            var i, n;
            if (this.infoType == shipInfoWindowType.captainInfo ? i = ShipManager.getInstance().isCaptainEquiped(t) : this.infoType == shipInfoWindowType.partsInfo ? i = ShipManager.getInstance().isPartEquiped(t) : this.infoType == shipInfoWindowType.soulInfo ? i = ShipManager.getInstance().isMedalEquiped(t) : this.infoType == shipInfoWindowType.cultivate && (n = ShipManager.getInstance().isInArrange(t)), i) {
                var s = ShipManager.getInstance().getShipById(i);
                Number(s.shipid.toString().substr(3));
                this.equipTxt.text = Locales.get(e) + s.name
            } else n ? this.equipTxt.text = Locales.get("panel_marine_bench3") : this.equipTxt.text = Locales.get(a)
        },
        i.initUI = function() {
            var t = this;
            (47 == GuideManager.step || 74 == GuideManager.step) && GuideManager.nextStep(),
                this.vessel.removeChildren(),
                this.mainIcon.visible = !1,
                this.spotImage.visible = !1;
            var e;
            this.infoType == shipInfoWindowType.cultivate ? this.setStatusByKey(this.sData.id, "panel_marine_bench3", "free") : this.infoType == shipInfoWindowType.captainInfo ? this.setStatusByKey(this.sData.id, "panel_jianzhang_detail_comment_11", "panel_jianzhang_detail_comment_20") : this.infoType == shipInfoWindowType.partsInfo ? this.setStatusByKey(this.sData.id, "panel_jianzhang_detail_comment_11", "panel_jianzhang_detail_comment_20") : this.infoType == shipInfoWindowType.soulInfo ? this.setStatusByKey(this.sData.id, "panel_jianzhang_detail_comment_11", "panel_jianzhang_detail_comment_20") : this.equipTxt.text = "",
                this.infoType < 3 ? (e = ConfigData.getDataByKey("shipData", this.sData.shipid), Utils.getImgByUrl(ShipManager.getInstance().getShipPicByType(this.sData.shipid), this.icon), Utils.getImgByUrl(ShipManager.getInstance().getShipTypeIcon(e.shipType), this.typeImg), Utils.getImgByUrl(Path.countryURL + "country_" + e.country + ".jpg", this.countryImg), this.typeTxt.text = ShipdataParser.GetInstance().getItemById(this.sData.shipid).name_l, this.typeTxt.textColor = QualitySystem.getColorByQuality(e.quality), this.sData.id == ShipManager.getInstance().captionId ? this.mainIcon.visible = !0 : this.mainIcon.visible = !1) : this.infoType < 6 ? (e = ConfigData.getDataByKey("captainData", this.sData.id), this.typeImg.visible = !1, Utils.getImgByUrl(Path.captainIconURL + e.picture, this.icon), Utils.getImgByUrl(Path.countryURL + "country_" + e.country + ".jpg", this.countryImg), this.typeTxt.text = CaptaindataParser.GetInstance().getItemById(this.sData.id).name_l, this.typeTxt.textColor = QualitySystem.getColorByQuality(e.quality), this.icon.width = 234 * .7, this.icon.height = 325 * .7) : this.infoType < 8 ? (e = ConfigData.getDataByKey("parts", this.sData.partsid), this.typeImg.visible = !1, this.countryImg.visible = !1, Utils.getImgByUrl(Path.partsIconURL + e.icon, this.icon), this.typeTxt.text = PartsParser.GetInstance().getItemById(e.id).name_l, this.typeTxt.textColor = QualitySystem.getColorByQuality(e.quality), this.icon.width = this.icon.height = 210) : (e = ConfigData.getDataByKey("medalData", this.sData.soulid), this.typeImg.visible = !1, this.countryImg.visible = !1, Utils.getImgByUrl(Path.soulIconURL + e.icon_1, this.icon), this.icon.width = 274 * .7, this.icon.height = 294 * .7, this.typeTxt.text = MedaldataParser.GetInstance().getItemById(this.sData.soulid).name_l, this.typeTxt.textColor = QualitySystem.getColorByQuality(e.quality)),
                Utils.getImgByUrl(QualitySystem.getShipBack(e.quality), this.bgIcon,
                    function() {
                        t.bgIcon.width = 639,
                            t.bgIcon.height = 285
                    }),
                this.icon.x = (GameData.designWidth - this.icon.width) / 2;
            var a;
            this.infoType == shipInfoWindowType.cultivate ? a = 36 == GuideManager.step ? [shipInfoItemType.name, shipInfoItemType.info, shipInfoItemType.skill] : [shipInfoItemType.name, shipInfoItemType.info, shipInfoItemType.skill, shipInfoItemType.remould, shipInfoItemType.history] : this.infoType == shipInfoWindowType.preview ? a = [shipInfoItemType.info, shipInfoItemType.skill, shipInfoItemType.remould, shipInfoItemType.history] : this.infoType == shipInfoWindowType.handbook ? a = [shipInfoItemType.detail, shipInfoItemType.weapon, shipInfoItemType.history] : this.infoType == shipInfoWindowType.captainInfo ? a = [shipInfoItemType.captainInfo, shipInfoItemType.captainCommand, shipInfoItemType.captainRank, shipInfoItemType.captainintro] : this.infoType == shipInfoWindowType.captainPreview ? a = [shipInfoItemType.captainInfo, shipInfoItemType.captainCommand, shipInfoItemType.captainRank, shipInfoItemType.captainintro] : this.infoType == shipInfoWindowType.captainHandbook ? a = [shipInfoItemType.captainInfo, shipInfoItemType.captainResume] : this.infoType == shipInfoWindowType.partsInfo ? a = [shipInfoItemType.partsInfo, shipInfoItemType.partsRemould, shipInfoItemType.partsResume] : this.infoType == shipInfoWindowType.partsPreview ? a = [shipInfoItemType.partsInfo, shipInfoItemType.partsRemould, shipInfoItemType.partsResume] : this.infoType == shipInfoWindowType.soulInfo ? a = 9 == e.medalType ? [shipInfoItemType.soulInfo, shipInfoItemType.soulResume] : [shipInfoItemType.soulInfo, shipInfoItemType.soulRemould, shipInfoItemType.soulResume] : this.infoType == shipInfoWindowType.soulPreview && (a = 9 == e.medalType ? [shipInfoItemType.soulInfo, shipInfoItemType.soulResume] : [shipInfoItemType.soulInfo, shipInfoItemType.soulRemould, shipInfoItemType.soulResume]),
                this.itemList = [];
            var i;
            (this.infoType == shipInfoWindowType.cultivate || this.infoType == shipInfoWindowType.captainInfo || this.infoType == shipInfoWindowType.partsInfo || this.infoType == shipInfoWindowType.soulInfo) && (i = !0);
            for (var n = 0; n < a.length; n++) {
                var s = a[n],
                    r = void 0;
                n == a.length - 1 && (this.resizeBool = !0),
                    s == shipInfoItemType.name ? r = new ShipNameItem(this.sData) : s == shipInfoItemType.info || s == shipInfoItemType.captainInfo ? r = new ShipInfoItem(this.sData, s, i ? this : null) : s == shipInfoItemType.skill ? r = new ShipSkillItem(this.sData, i ? this : null) : s > 2 && 7 > s || s > 8 && 15 > s || s > 14 && 18 > s ? r = new ShipIntroduceItem(this.sData, s, i ? this : null) : s == shipInfoItemType.captainCommand && (r = new CaptainCommandItem(this.sData)),
                    this.vessel.addChild(r),
                    this.itemList.push(r)
            }
            if (this.reSizeItem(), this.battleData) {
                if (this.infoType == shipInfoWindowType.captainInfo) {
                    var o = ConfigData.getDataByKey("captainData", this.sData.id);
                    this.spotImage.visible = RedPointManager.getPointShow({
                            quality: Number(o.quality)
                        },
                        RedPointType.captain)
                } else if (this.infoType == shipInfoWindowType.cultivate) {
                    var o = ConfigData.getDataByKey("shipData", this.sData.shipid);
                    this.spotImage.visible = RedPointManager.getPointShow({
                            quality: Number(o.quality)
                        },
                        RedPointType.ships)
                } else if (this.infoType == shipInfoWindowType.partsInfo) {
                    var o = ConfigData.getDataByKey("parts", this.sData.partsid);
                    this.spotImage.visible = RedPointManager.getPointShow({
                            quality: Number(o.quality),
                            parts: this.sData,
                            equipType: this.paramesData.equipType,
                            shipType: this.paramesData.shipType
                        },
                        RedPointType.parts)
                } else if (this.infoType == shipInfoWindowType.soulInfo) {
                    var o = ConfigData.getDataByKey("medalData", this.sData.soulid);
                    this.spotImage.visible = RedPointManager.getPointShow({
                            quality: Number(o.quality),
                            medalType: o.medalType,
                            soul: this.sData
                        },
                        RedPointType.medals)
                }
                this.changeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.changeShipHandler, this),
                    this.scroller.height = 560
            } else this.changeGroup.visible = !1;
            this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this),
                75 == GuideManager.step && (this.scroller.viewport.scrollV = 300)
        },
        i.reSizeItem = function() {
            if (this.resizeBool) {
                for (var t, e = 1; e < this.itemList.length; e++) t = this.itemList[e - 1],
                    this.itemList[e].y = t.y + t.height;
                this.itemList.length > 0 && (t = this.itemList[this.itemList.length - 1], this.vessel.height = t.y + t.height)
            }
        },
        i.changeShipHandler = function(t) {
            if (this.infoType == shipInfoWindowType.partsInfo) WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                data: this.battleData,
                type: WindowChooseItemType.parts
            });
            else if (this.infoType == shipInfoWindowType.cultivate) {
                var e = ShipManager.getInstance().getEmptyShips();
                e.sort(function(t, e) {
                        var a = ConfigData.getDataByKey("shipData", t.shipid),
                            i = ConfigData.getDataByKey("shipData", e.shipid);
                        return 1e3 * Number(a.quality) + t.level > 1e3 * Number(i.quality) + e.level ? -1 : 1
                    }),
                    WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                        data: e,
                        type: WindowChooseItemType.ship,
                        pos: this.battleData
                    })
            } else this.infoType == shipInfoWindowType.captainInfo ? WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                data: CaptainData.captainlist,
                type: WindowChooseItemType.captain,
                ship: ShipManager.getInstance().isCaptainEquiped(this.sData.id)
            }) : this.infoType == shipInfoWindowType.soulInfo && WindowManager.getInstance().show(WindowManager.windowType.ChoosItem, {
                data: this.battleData,
                type: WindowChooseItemType.medal,
                pos: this.pos
            });
            this.closeHandler(null)
        },
        i.clear = function() {
            e.instance = null,
                WindowManager.getInstance().clearCache(WindowManager.windowType.ShipInfo)
        },
        i.closeHandler = function(t) {
            this.destroy()
        },
        e
}(WindowBase);
egret.registerClass(WindowShipInfo, "WindowShipInfo");
var WindowShipManager = function(t) {
    function e() {
        t.call(this, !1),
            this.pos = 0,
            this.skinName = "resource/eui_skins/commonListPageSkin.exml"
            /*tpa=resource/eui_skins/commonListPageSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {},
        i.update = function() {
            this.setPos(),
                "normal" == this.curPage ? this.showShipPage() : this.showSellPage()
        },
        i.init = function() {
            MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.scroller.viewport = this.list,
                this.pos = 0;
            for (var t = ["舰 船"], e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 118 * e,
                    a.index = e,
                    a.label = t[e],
                    this.tabContainer.addChild(a),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "down"
            }
            this.btnClose.visible = !0,
                this.btnChangeToSell.visible = !0,
                this.btnReturn.visible = !0,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnChangeToSell.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnSellClick, this),
                this.btnReturn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnReturnClick, this),
                this.showShipPage(),
                this.updateUserInfo(),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.updateUserInfo, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.ShipDataUpdate, this.update, this)
        },
        i.onTabBarItemTap = function(t) {
            this.pos = 0,
                this.moveScroller(this.pos)
        },
        i.updateUserInfo = function() {
            MainUI.instance.setSimpleLevelTopInfo(UserData.getInstance().getPlayerLevel(), UserData.getInstance().getExpPercent(), [{
                    resType: TypeDefine.RES.Oil,
                    num: UserData.getInstance().getRes(TypeDefine.RES.Oil)
                },
                {
                    resType: TypeDefine.RES.Gold,
                    num: UserData.getInstance().getRes(TypeDefine.RES.Gold)
                },
                {
                    resType: TypeDefine.RES.Diamond,
                    num: UserData.getInstance().getRes(TypeDefine.RES.Diamond)
                }
            ])
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.btnSellClick = function() {
            this.pos = 0,
                this.showSellPage()
        },
        i.showSellPage = function() {
            this.curPage = "sell",
                this.btnReturn.visible = !0,
                this.btnChangeToSell.visible = !1;
            var t = this.getShipList(!0);
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = shipRecycleItem,
                this.moveScroller(this.pos)
        },
        i.btnReturnClick = function() {
            this.pos = 0,
                this.showShipPage()
        },
        i.showShipPage = function() {
            this.curPage = "normal",
                this.btnChangeToSell.visible = !0,
                this.btnReturn.visible = !1;
            var t = this.getShipList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = shipManagerItem,
                this.moveScroller(this.pos)
        },
        i.getShipList = function(t) {
            void 0 === t && (t = !1);
            for (var e = [], a = ShipManager.getInstance().shipList, i = !1, n = 0; n < a.length; n++) {
                var s = a[n];
                if (0 == t || t && 0 == s.islock && 0 == ShipManager.getInstance().isInArrange(s.id)) {
                    var r = ShipManager.getInstance().shipCfg[s.shipid],
                        o = {};
                    o.shipPropData = s,
                        o.id = s.id,
                        o.isLock = s.islock,
                        o.pic = ShipManager.getInstance().getShipPicByType(s.shipid),
                        o.typeIcon = ShipManager.getInstance().getShipTypeIcon(r.shipType),
                        o.quality = Locales.get("labelQuality", r.quality),
                        o.qualityNum = r.quality,
                        o.url = QualitySystem.getShipSmallBack(r.quality),
                        o.level = Locales.get("labelShipLevel", s.level.toString(), UserData.getInstance().getPlayerLevel().toString()),
                        o.lv = s.level,
                        o.shipName = ShipManager.getInstance().getShipNameByType(s.shipid),
                        o.inTeam = ShipManager.getInstance().isInArrange(s.id),
                        o.usepropcount = s.traindata.usepropcount,
                        o.skillusepropcnt = s.skilldata.skillusepropcnt,
                        o.activeskillusepropcnt = s.skilldata.activeskillusepropcnt,
                        o.circleskillusepropcnt = s.skilldata.circleskillusepropcnt,
                        o.skillid = s.skillid,
                        o.remouldLv = ShipdataParser.GetInstance().getItemById(s.shipid).remouldLv,
                        o.shipid = s.shipid,
                        o.drawingId = ShipdataParser.GetInstance().getItemById(s.shipid).drawingId,
                        o.remouldId = ShipdataParser.GetInstance().getItemById(s.shipid).remouldId,
                        o.isShowRedPoint = !1,
                        e.push(o)
                }
            }
            if (e.sort(function(t, e) {
                    return 1 == t.inTeam && 1 == e.inTeam ? e.qualityNum != t.qualityNum ? e.qualityNum - t.qualityNum : e.lv != t.lv ? e.lv - t.lv : Number(e.id) - Number(t.id) : 0 == t.inTeam && 0 == e.inTeam ? e.qualityNum != t.qualityNum ? e.qualityNum - t.qualityNum : e.lv != t.lv ? e.lv - t.lv : Number(e.id) - Number(t.id) : 1 == t.inTeam && 0 == e.inTeam ? -1 : 0 == t.inTeam && 1 == e.inTeam ? 1 : void 0
                }), !t) {
                var o = {};
                o.lastOne = !0,
                    e.push(o)
            }
            var l = this.tabContainer.getChildAt(0);
            return l.redPoint.visible = i,
                e
        },
        i.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.ShipDataUpdate, this.update, this),
                UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.updateUserInfo, this)
        },
        i.setPos = function() {
            this.pos = this.scroller.viewport.scrollV
        },
        i.moveScroller = function(t) {
            this.scroller.viewport.validateNow(),
                this.scroller.viewport.scrollV = t
        },
        e
}(WindowBase);
egret.registerClass(WindowShipManager, "WindowShipManager");
var shipManagerItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/zhuyezhanjianxinxi01Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyezhanjianxinxi01Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowShipManager_ClickShowOperate, this.showPanelEventHandler, this)
        },
        i.showPanelEventHandler = function(t) {
            t.parames != this.data.id && this.panelOperate && (GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowShipManager_ClickShowOperate, this.showPanelEventHandler, this), this.height -= this.panelOperate.height, this.removeChild(this.panelOperate), this.panelOperate = void 0)
        },
        i.levelUp = function() {
            UserData.getInstance()._level >= 4 ? WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                data: this.data.shipPropData,
                type: OperateType.ship,
                index: 1
            }) : Toast.launch("该功能4级开放")
        },
        i.upgrade = function() {
            UserData.getInstance()._level >= 4 ? WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                data: this.data.shipPropData,
                type: OperateType.ship,
                index: 2
            }) : Toast.launch("该功能4级开放")
        },
        i.skill = function() {
            UserData.getInstance()._level >= 6 ? WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                data: this.data.shipPropData,
                type: OperateType.ship,
                index: 3
            }) : Toast.launch("该功能6级开放")
        },
        i.train = function() {
            UserData.getInstance()._level >= 15 ? WindowManager.getInstance().show(WindowManager.windowType.OperatePanel, {
                data: this.data.shipPropData,
                type: OperateType.ship,
                index: 4
            }) : Toast.launch("该功能15级开放")
        },
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastOne ? (this.skinName = "resource/eui_skins/item/ShipBuildingInformationBar02Skin.exml"
                    /*tpa=resource/eui_skins/item/ShipBuildingInformationBar02Skin.exml*/
                    , this.panelOperate && (this.height -= this.panelOperate.height, this.removeChild(this.panelOperate), this.panelOperate = void 0), this.txtDesc.text = "建造战舰", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            WindowManager.getInstance().hideAll();
                            var t = GameLayer.getInstance().pageLayer.getChildByName("HomeUI");
                            t.showBuildShipWindow()
                        },
                        this)) : (this.skinName = "resource/eui_skins/item/zhuyezhanjianxinxi01Skin.exml"
                    /*tpa=resource/eui_skins/item/zhuyezhanjianxinxi01Skin.exml*/
                    , this.data.isLock ? this.iconLock.source = "GUI_Shipbuilding_Icon_locked_png" : this.iconLock.source = "GUI_Shipbuilding_Icon_open_png", this.data.inTeam ? this.inTeamMark.visible = !0 : this.inTeamMark.visible = !1, this.data.isShowRedPoint ? this.btnMorePoint.visible = !0 : this.btnMorePoint.visible = !1, SUI.setTextureAsync(this.bg, this.data.url), SUI.setTextureAsync(this.iconPic, this.data.pic), this.btnShowPanel.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.btnShowPanel.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            e.panelOperate ? (e.height -= e.panelOperate.height, e.removeChild(e.panelOperate), e.panelOperate = void 0) : (e.panelOperate = new eui.Component, e.panelOperate.skinName = "resource/eui_skins/item/xialacaidananiu01Skin.exml"
                                /*tpa=resource/eui_skins/item/xialacaidananiu01Skin.exml*/
                                , e.addChild(e.panelOperate), e.panelOperate.y = e.height, e.panelOperate.btnLevelUp.addEventListener(egret.TouchEvent.TOUCH_TAP, e.levelUp, e), e.panelOperate.btnUpgrade.addEventListener(egret.TouchEvent.TOUCH_TAP, e.upgrade, e), e.panelOperate.btnSkill.addEventListener(egret.TouchEvent.TOUCH_TAP, e.skill, e), e.panelOperate.btnTrain.addEventListener(egret.TouchEvent.TOUCH_TAP, e.train, e), e.height = e.height + e.panelOperate.height, GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowShipManager_ClickShowOperate, e.showPanelEventHandler, e), GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowShipManager_ClickShowOperate, e.data.id)))
                        },
                        this), this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            var t = ShipManager.getInstance().getShipById(e.data.id);
                            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                                data: t,
                                type: shipInfoWindowType.cultivate
                            })
                        },
                        this), this.iconLock.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            RequestManager.GetInstance().RequestLockShip(e.data.id, !e.data.isLock);
                            var t = WindowManager.getInstance().getWindow(WindowManager.windowType.ShipManager);
                            t && t.setPos()
                        },
                        this)), this.txtName.textColor = QualitySystem.getColorByQuality(this.data.qualityNum)))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(shipManagerItem, "shipManagerItem");
var shipRecycleItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/zhuyejunjianInformationBar03Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyejunjianInformationBar03Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            var e = this;
            t.prototype.createChildren.call(this),
                this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        var t = ShipManager.getInstance().getShipById(e.data.id);
                        WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                            data: t,
                            type: shipInfoWindowType.cultivate
                        })
                    },
                    this),
                this.btnAdvance.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        RetiredAlert.getInstance().show(e.data, RetiredType.STRONGRETIRED)
                    },
                    this),
                this.btnNormal.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        RetiredAlert.getInstance().show(e.data, RetiredType.NORAMLRETIRED)
                    },
                    this)
        },
        i.dataChanged = function() {
            SUI.setTextureAsync(this.bg, this.data.url),
                SUI.setTextureAsync(this.iconPic, this.data.pic),
                this.txtName.textColor = QualitySystem.getColorByQuality(this.data.qualityNum)
        },
        e
}(eui.ItemRenderer);
egret.registerClass(shipRecycleItem, "shipRecycleItem");
var WindowShop = function(t) {
    function e() {
        t.call(this, !1),
            this.tickIndex2 = 0,
            this.tickIndex3 = 0,
            this.pos = 0,
            this.skinName = "resource/eui_skins/ShangCheng.exml"
            /*tpa=resource/eui_skins/ShangCheng.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            17 == GuideManager.step && GuideManager.nextStep(),
                WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnPaper.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnVipStore.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnCaptain.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnMedal.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                UserData.getInstance().registerActiveTip(this.spotPaper, "spy"),
                UserData.getInstance().registerActiveTip(this.spotVipStore, "vipgift"),
                UserData.getInstance().updateActiveTip()
        },
        i.clear = function() {
            this.btnPaper.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnStore.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnVipStore.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnCaptain.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                this.btnMedal.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this)
        },
        i.onTabBarItemTap = function(t) {
            switch (t.currentTarget) {
                case this.btnPaper:
                    this.selectToggleButton(e.PAPER_INDEX);
                    break;
                case this.btnStore:
                    this.selectToggleButton(e.STORE_INDEX);
                    break;
                case this.btnVipStore:
                    this.selectToggleButton(e.VIP_INDEX);
                    break;
                case this.btnCaptain:
                    this.selectToggleButton(e.CAPTAIN_INDEX);
                    break;
                case this.btnMedal:
                    this.selectToggleButton(e.MEDAL_INDEX)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("item"),
                e.push("spyBaseData"),
                e.push("shopData"),
                ConfigData.preLoadDats(e, [ItemParser, SpybasedataParser, ShopdataParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                GameData.skipShipGuide ? (this.selectToggleButton(e.STORE_INDEX), this.btnPaper.visible = !1, this.btnCaptain.visible = !1, this.btnMedal.visible = !1, this.btnStore.x = 0, this.btnVipStore.x = 118) : (this.selectToggleButton(e.CURR_PAGE), this.btnCaptain.visible = !1, this.btnMedal.visible = !1),
                this.commonScroller.viewport = this.commonList,
                this.showPage()
        },
        i.showPage = function() {
            this.pos = 0,
                this.commonScroller.viewport.scrollV = 0,
                e.CURR_PAGE == e.PAPER_INDEX ? ShopManager.getInstance().sendSpyData() : e.CURR_PAGE == e.STORE_INDEX ? ShopManager.getInstance().sendShopData(e.CURR_PAGE) : e.CURR_PAGE == e.VIP_INDEX ? ShopManager.getInstance().sendShopData(e.CURR_PAGE) : e.CURR_PAGE == e.CAPTAIN_INDEX || e.CURR_PAGE == e.MEDAL_INDEX
        },
        i.selectToggleButton = function(t) {
            var a = [];
            a = ShopManager.getInstance().versionSwitch ? [this.btnStore, this.btnVipStore] : [this.btnPaper, this.btnStore, this.btnVipStore, this.btnCaptain, this.btnMedal];
            for (var i = 0; i < a.length; i++) t == i ? a[i].currentState = "down" : a[i].currentState = "up";
            e.CURR_PAGE = t,
                this.showPage()
        },
        i.setVipPage = function(t) {
            var e = this.getVipPageList(t);
            this.commonList.dataProvider = new eui.ArrayCollection(e),
                this.commonList.itemRenderer = vipStoreFactoryListItem,
                this.moveScroller(this.pos)
        },
        i.getVipPageList = function(t) {
            for (var e = [], a = ShopdataParser.GetInstance().getDataArr(), i = 0; i < a.length; i++) {
                var n = {};
                if ("2" == a[i].type) {
                    n.id = a[i].id,
                        n.enable = a[i].enable,
                        n.itemType = a[i].itemType,
                        n.itemId = a[i].itemId,
                        n.name = a[i].name,
                        n.type = a[i].type,
                        n.saleValue = a[i].saleValue,
                        n.costType = a[i].costType,
                        n.order = a[i].order,
                        n.reqLevel = a[i].reqLevel,
                        n.reqVIPLevel = a[i].reqVIPLevel,
                        n.countLimit = a[i].countLimit,
                        n.countLimitweek = a[i].countLimitweek,
                        n.discount = a[i].discount;
                    var s = ItemParser.GetInstance().getItemById(n.itemId);
                    n.icon = Path.itemIconURL + s.icon,
                        n.quality = s.quality,
                        n.desc = s.desc_l;
                    var r = ItemsManager.getInstance().getItemById(Number(n.itemId));
                    if (r ? n.num = r.count : n.num = 0, n.hasBuyCount = 0, t.shopdata.oncebuyid)
                        for (var o = 0; o < t.shopdata.oncebuyid.length; o++)
                            if (t.shopdata.oncebuyid[o] == Number(n.id)) {
                                n.hasBuyCount = 1;
                                break
                            }
                    0 == n.hasBuyCount && 1 == n.enable && e.push(n)
                }
            }
            return e
        },
        i.setStorePage = function(t) {
            var e = this.getStorePageList(t);
            this.commonList.dataProvider = new eui.ArrayCollection(e),
                this.commonList.itemRenderer = storeFactoryListItem,
                this.moveScroller(this.pos)
        },
        i.getStorePageList = function(t) {
            for (var e = [], a = ShopdataParser.GetInstance().getDataArr(), i = 0; i < a.length; i++) {
                var n = {};
                if ("1" == a[i].type) {
                    n.id = a[i].id,
                        n.enable = a[i].enable,
                        n.itemType = a[i].itemType,
                        n.itemId = a[i].itemId,
                        n.name = a[i].name,
                        n.type = a[i].type,
                        n.saleValue = a[i].saleValue,
                        n.costType = a[i].costType,
                        n.order = a[i].order,
                        n.reqLevel = a[i].reqLevel,
                        n.reqVIPLevel = a[i].reqVIPLevel,
                        n.countLimit = a[i].countLimit,
                        n.countLimitweek = a[i].countLimitweek,
                        n.discount = a[i].discount;
                    var s = ItemParser.GetInstance().getItemById(n.itemId);
                    n.icon = Path.itemIconURL + s.icon,
                        n.quality = s.quality,
                        n.desc = s.desc_l;
                    var r = ItemsManager.getInstance().getItemById(Number(n.itemId));
                    if (r ? n.num = r.count : n.num = 0, n.hasBuyCount = 0, t.shopdata.todaybuylist)
                        for (var o = 0; o < t.shopdata.todaybuylist.length; o++)
                            if (t.shopdata.todaybuylist[o].id == Number(n.id)) {
                                n.hasBuyCount = t.shopdata.todaybuylist[o].count;
                                break
                            }
                    1 == n.enable && e.push(n)
                }
            }
            return e
        },
        i.setPaperPage = function(t) {
            var e = this.getPaperPageList(t);
            this.commonList.dataProvider = new eui.ArrayCollection(e),
                this.commonList.itemRenderer = paperFactoryListItem,
                this.moveScroller(this.pos)
        },
        i.getPaperPageList = function(t) {
            this.midprice = t.midprice,
                this.seniorprice = t.seniorprice,
                this.tenprice = t.tenprice,
                this.middiscount = t.middiscount,
                this.seniordiscount = t.seniordiscount,
                this.hasbuy2 = t.hasbuy2,
                this.hasbuy3 = t.hasbuy3;
            for (var e = t.lasttimelist,
                    a = [], i = SpybasedataParser.GetInstance().getDataArr(), n = 0; n < i.length; n++) {
                var s = {};
                s.id = i[n].id,
                    s.name = i[n].name_l,
                    s.icon = Path.npcURL + i[n].icon,
                    s.freeCount = i[n].freeCount,
                    s.cd = i[n].cd,
                    s.itemId = i[n].itemId,
                    s.itemId2 = i[n].itemId2,
                    s.credit = i[n].credit,
                    s.spyLv = i[n].spyLv,
                    s.color = i[n].color,
                    s.itemIcon = Path.item_sURL + i[n].itemIcon,
                    s.desc = i[n].desc,
                    s.midprice = this.midprice,
                    s.seniorprice = this.seniorprice,
                    s.tenprice = this.tenprice,
                    s.count = 0;
                var r = ItemsManager.getInstance().getItemById(Number(s.itemId));
                if (null != r && (s.count += r.count), "" != s.itemId2) {
                    var o = ItemsManager.getInstance().getItemById(Number(s.itemId2));
                    null != o && (s.count += o.count)
                }
                if (s.lasttime = 0, "2" == s.id) {
                    var l = Number(s.cd) - (UserData.getInstance().getOldServerTime() / 1e3 - e[1]);
                    0 == e[1] || 0 >= l ? s.lasttime = 0 : s.lasttime = l
                }
                if ("3" == s.id) {
                    var h = Number(s.cd) - (UserData.getInstance().getOldServerTime() / 1e3 - e[2]);
                    0 == e[2] || 0 >= h ? s.lasttime = 0 : s.lasttime = h
                }
                a.push(s)
            }
            return a
        },
        i.setPos = function() {
            this.pos = this.commonScroller.viewport.scrollV
        },
        i.moveScroller = function(t) {
            this.commonScroller.viewport.validateNow(),
                this.commonScroller.viewport.scrollV = t
        },
        e.PAPER_INDEX = 0,
        e.STORE_INDEX = 1,
        e.VIP_INDEX = 2,
        e.CAPTAIN_INDEX = 3,
        e.MEDAL_INDEX = 4,
        e.CURR_PAGE = 0,
        e
}(WindowBase);
egret.registerClass(WindowShop, "WindowShop");
var paperFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.tickIndex = 0,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/shangcheng_tegongSkin.exml"
            /*tpa=resource/eui_skins/item/shangcheng_tegongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {
            this.tickIndex > 0 && (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0),
                this.sunshine && (Utils.removeNode(this.sunshine.display), dragonBones.WorldClock.clock.remove(this.sunshine), this.sunshine = void 0),
                this.shuipao && (Utils.removeNode(this.shuipao.display), dragonBones.WorldClock.clock.remove(this.shuipao), this.shuipao = void 0),
                this.huoxing && (Utils.removeNode(this.huoxing.display), dragonBones.WorldClock.clock.remove(this.huoxing), this.huoxing = void 0),
                this.starlight && (Utils.removeNode(this.starlight.display), dragonBones.WorldClock.clock.remove(this.starlight), this.starlight = void 0),
                this.wordslight && (Utils.removeNode(this.wordslight.display), dragonBones.WorldClock.clock.remove(this.wordslight), this.wordslight = void 0),
                this.starlight2 && (Utils.removeNode(this.starlight2.display), dragonBones.WorldClock.clock.remove(this.starlight2), this.starlight2 = void 0),
                this.starlight3 && (Utils.removeNode(this.starlight3.display), dragonBones.WorldClock.clock.remove(this.starlight3), this.starlight3 = void 0),
                this.starlight4 && (Utils.removeNode(this.starlight4.display), dragonBones.WorldClock.clock.remove(this.starlight4), this.starlight4 = void 0)
        },
        i.updateTime = function() {
            return this.data && 0 == this.data.lasttime ? (GameTick.removeHandler(this.tickIndex), void(this.tickIndex = 0)) : void(this.txtTimeDesc.text = GlobalFunction.getHMSBySecond(--this.data.lasttime) + "后可以领取1个")
        },
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data) {
                if (!this.hasEventListener(egret.TouchEvent.TOUCH_TAP)) {
                    if (3 == this.data.id) {
                        if (!this.sunshine) {
                            var a = Path.effectUrl + "zhaomu_sunshine/zhaomu_sunshine.json",
                                i = Path.effectUrl + "zhaomu_sunshine/texture.json",
                                n = Path.effectUrl + "zhaomu_sunshine/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_sunshine", "normal",
                                function(t, a) {
                                    t && (e.sunshine || (e.addChild(t.display), t.display.x = 40, t.display.y = 55, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.sunshine = t))
                                },
                                this)
                        }
                    } else if (2 == this.data.id) {
                        if (!this.shuipao) {
                            var a = Path.effectUrl + "zhaomu_shuipao/zhaomu_shuipao.json",
                                i = Path.effectUrl + "zhaomu_shuipao/texture.json",
                                n = Path.effectUrl + "zhaomu_shuipao/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_shuipao", "normal",
                                function(t, a) {
                                    t && (e.shuipao || (e.addChild(t.display), t.display.x = 320, t.display.y = 95, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.shuipao = t))
                                },
                                this)
                        }
                    } else if (!this.huoxing) {
                        var a = Path.effectUrl + "zhaomu_huoxing/zhaomu_huoxing.json",
                            i = Path.effectUrl + "zhaomu_huoxing/texture.json",
                            n = Path.effectUrl + "zhaomu_huoxing/texture.png";
                        Utils.createDragonBone(a, i, n, "zhaomu_huoxing", "normal",
                            function(t, a) {
                                t && (e.huoxing || (e.addChild(t.display), t.display.x = 320, t.display.y = 95, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.huoxing = t))
                            },
                            this)
                    }
                    if (4 == this.data.id) {
                        if (!this.starlight) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight || (e.addChild(t.display), t.display.x = 322, t.display.y = 74, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight = t))
                                },
                                this)
                        }
                        if (!this.starlight2) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight2 || (e.addChild(t.display), t.display.x = 24, t.display.y = 134, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight2 = t))
                                },
                                this)
                        }
                    } else if (3 == this.data.id) {
                        if (!this.starlight) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight || (e.addChild(t.display), t.display.x = 39, t.display.y = 135, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight = t))
                                },
                                this)
                        }
                        if (!this.starlight2) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight2 || (e.addChild(t.display), t.display.x = 81, t.display.y = 34, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight2 = t))
                                },
                                this)
                        }
                        if (!this.starlight3) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight3 || (e.addChild(t.display), t.display.x = 88, t.display.y = 86, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight3 = t))
                                },
                                this)
                        }
                        if (!this.starlight4) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight4 || (e.addChild(t.display), t.display.x = 242, t.display.y = 114, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight4 = t))
                                },
                                this)
                        }
                    } else if (1 == this.data.id && !this.starlight) {
                        var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                            i = Path.effectUrl + "zhaomu_starlight/texture.json",
                            n = Path.effectUrl + "zhaomu_starlight/texture.png";
                        Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                            function(t, a) {
                                t && (e.starlight || (e.addChild(t.display), t.display.x = 172, t.display.y = 132, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight = t))
                            },
                            this)
                    }
                    this.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            if (!e.wordslight) {
                                var t = Path.effectUrl + "zhaomu_wordslight/zhaomu_wordslight.json",
                                    a = Path.effectUrl + "zhaomu_wordslight/texture.json",
                                    i = Path.effectUrl + "zhaomu_wordslight/texture.png";
                                Utils.createDragonBone(t, a, i, "zhaomu_wordslight", "normal",
                                    function(t, a) {
                                        t && (e.wordslight || (e.addChild(t.display), t.display.x = 340, t.display.y = 53, e.wordslight = t, t.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                                            function() {
                                                Utils.removeNode(e.wordslight.display),
                                                    dragonBones.WorldClock.clock.remove(e.wordslight),
                                                    e.wordslight = void 0
                                            },
                                            e)))
                                    },
                                    e)
                            }
                            e.data.count > 0 ? 0 != e.data.lasttime || 2 != e.data.id && 3 != e.data.id ? (console.log("派遣"), 2 == e.data.id || 4 == e.data.id ? ShopManager.getInstance().sendSpy(Number(e.data.id), 3, !1, e.data) : ShopSpyAlert.getInstance().showPaiQianPage(e.data), 18 == GuideManager.step && GuideManager.nextStep()) : (console.log("免费领取"), ShopManager.getInstance().sendBuySpyItem(Number(e.data.id), 1, 0)) : "" == e.data.credit ? Toast.launch(e.data.desc) : 0 == e.data.lasttime ? (console.log("免费领取"), ShopManager.getInstance().sendBuySpyItem(Number(e.data.id), 1, 0)) : (console.log("弹出购买道具界面"), ShopSpyAlert.getInstance().showBuySpyPage(e.data))
                        },
                        this)
                }
                this.data.count > 0 ? this.txtHaveItem.textColor = 16777215 : this.txtHaveItem.textColor = 16001803,
                    "" == this.data.freeCount && (this.txtTimeDesc.visible = !1),
                    ("2" == this.data.id || "3" == this.data.id) && (0 == this.data.lasttime ? (this.txtTimeDesc.text = "可领取", this.txtTimeDesc.textColor = 65280) : this.data.lasttime > 0 && (this.txtTimeDesc.text = GlobalFunction.getHMSBySecond(this.data.lasttime) + "后可以领取1个", this.txtTimeDesc.textColor = 16777215, 0 == this.tickIndex && (this.tickIndex = GameTick.registerHandler(function() {
                            e.updateTime()
                        },
                        1e3)))),
                    this.redPoint.visible = !1,
                    this.data.count > 0 ? this.redPoint.visible = !0 : "1" == this.data.id || "4" == this.data.id ? this.redPoint.visible = !1 : ("2" == this.data.id || "3" == this.data.id) && (0 == this.data.lasttime ? this.redPoint.visible = !0 : this.redPoint.visible = !1)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(paperFactoryListItem, "paperFactoryListItem");
var storeFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/shangcheng_storeSkin.exml"
            /*tpa=resource/eui_skins/item/shangcheng_storeSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data) {
                "2" == this.data.costType && (this.btnBuy.icon.source = "GUI_Homepage_Icon_32_png", this.alertMsg = "钻石不足,是否前往充值?", this.hasCoinCount = UserData.getInstance().getRes(TypeDefine.RES.Diamond)),
                    this.btnBuy.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnBuy.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            console.log("购买道具"),
                                e.hasCoinCount >= Number(e.data.saleValue) ? ShopSpyAlert.getInstance().showBuyItemPage(e.data) : GameAlert.getInstance().show("提示", e.alertMsg,
                                    function() {
                                        GameAlert.getInstance().hide(),
                                            WindowManager.getInstance().show(WindowManager.windowType.Recharge, {
                                                type: 0
                                            })
                                    })
                        },
                        this),
                    this.txtName.textColor = QualitySystem.getColorByQuality(this.data.quality),
                    this.data.num > 0 ? this.txtNum.textColor = 65280 : this.txtNum.textColor = 10461087;
                var a = this.itemCompent.imgMedal;
                SUI.setTextureAsync(a, this.data.icon);
                var i = QualitySystem.getItemSmallBack(this.data.quality);
                a = this.itemCompent.imgBg,
                    SUI.setTextureAsync(a, i),
                    this.btnBuy.label = this.data.saleValue,
                    "-1" == this.data.countLimit ? this.txtBuyLimit.text = "" : "-2" == this.data.countLimit ? this.txtBuyLimit.text = "每个玩家累计仅能购买1个" : this.txtBuyLimit.text = "今日可购买" + (Number(this.data.countLimit) - this.data.hasBuyCount) + "个",
                    "-1" == this.data.reqLevel ? (this.txtBuyCondition.text = "", this.txtBuyCondition.visible = !1, this.canBuy.visible = !0) : (this.txtBuyCondition.text = "需要等级" + this.data.reqLevel + "级", UserData.getInstance().getPlayerLevel() >= Number(this.data.reqLevel) ? (this.txtBuyCondition.visible = !1, this.canBuy.visible = !0) : (this.txtBuyCondition.visible = !0, this.canBuy.visible = !1))
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(storeFactoryListItem, "storeFactoryListItem");
var vipStoreFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/shangcheng_vipStoreSkin.exml"
            /*tpa=resource/eui_skins/item/shangcheng_vipStoreSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var t = this;
            if (this.data) {
                "2" == this.data.costType && (this.btnBuy.icon.source = "GUI_Homepage_Icon_32_png", this.alertMsg = "钻石不足,是否前往充值?", this.hasCoinCount = UserData.getInstance().getRes(TypeDefine.RES.Diamond)),
                    this.btnBuy.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.btnBuy.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            console.log("购买VIP礼包"),
                                t.hasCoinCount >= Number(t.data.saleValue) ? ShopManager.getInstance().sendBuy(Number(t.data.id), 1, "", t.data) : GameAlert.getInstance().show("提示", t.alertMsg,
                                    function() {
                                        GameAlert.getInstance().hide(),
                                            WindowManager.getInstance().show(WindowManager.windowType.Recharge, {
                                                type: 0
                                            })
                                    })
                        },
                        this),
                    this.btnBuy.label = this.data.saleValue;
                var e = this.itemCompent.imgMedal;
                SUI.setTextureAsync(e, this.data.icon);
                var a = QualitySystem.getItemSmallBack(this.data.quality);
                e = this.itemCompent.imgBg,
                    SUI.setTextureAsync(e, a)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(vipStoreFactoryListItem, "vipStoreFactoryListItem");
var WindowSignActivity = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/HuoDong_qiandao_Skin.exml"
            /*tpa=resource/eui_skins/HuoDong_qiandao_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                ActivityManager.instance.setImageByType(this.imgTitle, t.type),
                this.txtLog0.text = Locales.get("zz_viplv", UserData.getInstance().getVipLevel());
            var e = ActivityManager.instance.activityData.signined_array,
                a = 0;
            e && (a = e.length, a > 0 && 0 == e[a - 1] && (a -= 1)),
                this.txtLog.text = Locales.get("zz_signtimes", a);
            var i = 2;
            if (!this._initedList) {
                for (var n = 4,
                        s = 1,
                        r = 0,
                        o = 150,
                        l = 150,
                        h = 0; h < this._data.itemlist.length; ++h) {
                    var c = Math.floor(h / n),
                        d = h - c * n,
                        g = s + o * d + d * i,
                        u = r + l * c + c * i,
                        p = {
                            day: h + 1,
                            itemInfo: this._data.itemlist[h]
                        },
                        m = new SignItem(p);
                    m.x = g,
                        m.y = u,
                        this.gpReward.addChild(m)
                }
                this._initedList = !0
            }
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                SUI.setTextureAsync(this.imgBg, Path.backGroundImageUrl + "Bg_huodong.jpg"),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.updatePanel, this),
                this.gpReward.touchChildren = !0
        },
        i.updatePanel = function() {
            this.setData(this._data)
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.updatePanel, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowSignActivity, "WindowSignActivity");
var SignItem = function(t) {
    function e(e) {
        t.call(this),
            this._data = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.onComplete, this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.onClear, this),
            EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onDataChanged, this),
            this.skinName = "resource/eui_skins/item/HuoDong_Bar_qiandao_Skin.exml"
            /*tpa=resource/eui_skins/item/HuoDong_Bar_qiandao_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.onComplete = function() {
            this.VipDouble.touchChildren = !1,
                this.VipDouble.touchEnabled = !1,
                this.isCheck.touchEnabled = !1,
                this.isCheck.touchChildren = !1,
                this.Reward.touchChildren = !1,
                this.Reward.touchEnabled = !1,
                this.notVip.touchEnabled = !1,
                this.notVip.touchChildren = !1,
                this.redball.touchEnabled = !1,
                this.onDataChanged(),
                this.imgBg.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onClickSelf, this)
        },
        i.onClickSelf = function() {
            0 != this._data.itemInfo.params.length && 0 != this._data.itemInfo.params[0] && this._data.itemInfo.params[0] > UserData.getInstance().getVipLevel() ? WindowManager.getInstance().show(WindowManager.windowType.signConfirm, this._data) : RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                id: ActivityType.ACTIVITY_TYPE_SIGNIN,
                type: this._data.day
            })
        },
        i.onClear = function() {
            EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.onDataChanged, this)
        },
        i.onDataChanged = function() {
            var t = 1 == ActivityManager.instance.activityData.signin,
                e = this._data.itemInfo.items[0],
                a = GiftdataParser.GetInstance().getItemById(e.id),
                i = GlobalFunction.getDropDataByTypeAndId(a.type, a.item, a.count);
            SUI.setItemIcon(this.Reward, i),
                0 == this._data.itemInfo.params.length || 0 == this._data.itemInfo.params[0] ? this.VipDouble.visible = !1 : (this.VipDouble.visible = !0, this.txtVip.text = Locales.get("zz_vipDouble", this._data.itemInfo.params[0])),
                this.redball.visible = !1;
            var n = 0,
                s = 0;
            n = null == ActivityManager.instance.activityData.signined_array || this._data.day - 1 >= ActivityManager.instance.activityData.signined_array.length ? 0 : ActivityManager.instance.activityData.signined_array[this._data.day - 1],
                ActivityManager.instance.activityData.signined_array ? (s = ActivityManager.instance.activityData.signined_array.length, t || s++) : s = 1,
                this._data.day <= s ? 0 == n ? (this.isCheck.visible = !1, this.imgBg.touchEnabled = !0, this.notVip.visible = !1, this.redball.visible = !0) : 1 == n ? (this.isCheck.visible = !0, this.imgBg.touchEnabled = !1, this.notVip.visible = !1) : 2 == n && (this.isCheck.visible = !0, this.VipDouble.visible ? (this.notVip.visible = !0, this.imgBg.touchEnabled = !0, this._data.itemInfo.params[0] <= UserData.getInstance()._vip && (this.redball.visible = !0)) : (this.notVip.visible = !1, this.imgBg.touchEnabled = !1)) : (this.isCheck.visible = !1, this.imgBg.touchEnabled = !1, this.notVip.visible = !1)
        },
        e
}(eui.Component);
egret.registerClass(SignItem, "SignItem");
var WindowSignConfirm = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/HuoDong_TanKuangSkin.exml"
            /*tpa=resource/eui_skins/HuoDong_TanKuangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                this.txtVipDesc.text = Locales.get("zz_signTip", t.itemInfo.params[0]);
            var e = t.itemInfo.items[0],
                a = GiftdataParser.GetInstance().getItemById(e.id),
                i = GlobalFunction.getDropDataByTypeAndId(a.type, a.item, a.count);
            SUI.setItemIcon(this.Reward, i);
            var n = 0;
            n = null == ActivityManager.instance.activityData.signined_array || this._data.day - 1 >= ActivityManager.instance.activityData.signined_array.length ? 0 : ActivityManager.instance.activityData.signined_array[this._data.day - 1],
                2 == n && this._data.itemInfo.params[0] > UserData.getInstance()._vip && (this.btnGetNow.enabled = !1)
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnGetNow.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnGetNow, this),
                this.btnRecharge.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRecharge, this),
                this.txtTitle.text = Locales.get("zz_signReward"),
                this.btnRecharge.labelDisplay.text = Locales.get("zz_rechargeVIP"),
                this.btnGetNow.labelDisplay.text = Locales.get("zz_get")
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnGetNow = function(t) {
            var e = 0;
            e = null == ActivityManager.instance.activityData.signined_array || this._data.day - 1 >= ActivityManager.instance.activityData.signined_array.length ? 0 : ActivityManager.instance.activityData.signined_array[this._data.day - 1];
            var a = !0;
            if (2 == e && this._data.itemInfo.params[0] > UserData.getInstance()._vip && (a = !1), a) {
                var i = 0,
                    n = 1 == ActivityManager.instance.activityData.signin;
                ActivityManager.instance.activityData.signined_array ? (i = ActivityManager.instance.activityData.signined_array.length, n || i++) : i = 1,
                    RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                        id: ActivityType.ACTIVITY_TYPE_SIGNIN,
                        type: i
                    }),
                    this.close()
            } else Toast.launch("VIP等级不足，不能继续领取", 16711680)
        },
        i.OnClickBtnRecharge = function(t) {
            WindowManager.getInstance().show(WindowManager.windowType.Recharge),
                this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowSignConfirm, "WindowSignConfirm");
var WindowSoul = function(t) {
    function e() {
        t.call(this, !1),
            this.currPage = 0,
            this.dsListParts = [],
            this.pos = 0,
            this.skinName = "resource/eui_skins/zhuye_PeijianSkin.exml"
            /*tpa=resource/eui_skins/zhuye_PeijianSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnChangeToSell.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellByQualityBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCloseBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secOKBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck1.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck3.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck4.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.gotoSell = function() {
            this.btnChangeToSell.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
        },
        i.clear = function() {
            WindowManager.getInstance().getWindow(WindowManager.windowType.ShipArrange) && MainUI.instance.changeTopMode(topUIMode["null"]),
                this.btnChangeToSell.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnReturn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellByQualityBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.btnSellBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCloseBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secOKBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.secCancelBtn.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck1.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck2.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck3.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this),
                this.ck4.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTouchTapHandle, this)
        },
        i.onRefreshSoulsData = function() {
            1 == this.huishouGroup.visible ? this.setHuiShouPage() : (this.setPos(), this.setSoulPage(), this.getHuanYuanPageList())
        },
        i.onTouchTapHandle = function(t) {
            switch (t.currentTarget) {
                case this.ck1:
                    break;
                case this.ck2:
                    break;
                case this.ck3:
                    break;
                case this.ck4:
                    break;
                case this.secCloseBtn:
                    this.huishouByQualityGroup.visible = !1,
                        this.setCheckBoxState(!0);
                    break;
                case this.secCancelBtn:
                    this.huishouByQualityGroup.visible = !1,
                        this.setCheckBoxState(!0);
                    break;
                case this.secOKBtn:
                    SoulManager.getInstance().quailtyArr = [],
                        SoulManager.getInstance().reductionSoulsIds = [],
                        this.ck4.selected && SoulManager.getInstance().quailtyArr.push(4),
                        this.huishouByQualityGroup.visible = !1,
                        this.setCheckBoxState(!0),
                        this.setHuiShouPage();
                    break;
                case this.btnSellByQualityBtn:
                    this.huishouByQualityGroup.visible = !0,
                        this.ck1.selected = !1,
                        this.ck2.selected = !1,
                        this.ck3.selected = !1,
                        this.ck4.selected = !1,
                        this.setCheckBoxState(!1);
                    break;
                case this.btnSellBtn:
                    this.setPos(),
                        null != SoulManager.getInstance().reductionSoulsIds && SoulManager.getInstance().reductionSoulsIds.length > 0 ? RetiredAlert.getInstance().showSoulHuiShou() : Toast.launch("请至少选中1个勋章!");
                    break;
                case this.btnReturn:
                    this.pos = 0,
                        this.huishouGroup.visible = !1,
                        this.btnReturn.visible = !1,
                        this.btnChangeToSell.visible = !0,
                        MainUI.instance.setBottomVisible(!0),
                        this.tabContainer.visible = !0,
                        0 == this.currPage ? this.setSoulPage() : 1 == this.currPage && this.setHuanYuanPage(),
                        this.huishouByQualityGroup.visible = !1,
                        this.setCheckBoxState(!0);
                    break;
                case this.btnChangeToSell:
                    this.pos = 0,
                        this.huishouGroup.visible = !0,
                        this.btnReturn.visible = !0,
                        this.tabContainer.visible = !1,
                        this.btnChangeToSell.visible = !1,
                        MainUI.instance.setBottomVisible(!1),
                        SoulManager.getInstance().quailtyArr = [],
                        SoulManager.getInstance().reductionSoulsIds = [],
                        this.setHuiShouPage(),
                        SoulManager.getInstance().resetHuishouNum();
                    break;
                case this.btnClose:
                    WindowManager.getInstance().hide(WindowManager.windowType.Soul)
            }
        },
        i.setCheckBoxState = function(t) {
            this.ck1.visible = t,
                this.ck2.visible = t,
                this.ck3.visible = t,
                this.tx1.visible = t,
                this.tx2.visible = t,
                this.tx3.visible = t,
                t ? (this.ck4.x = 328, this.ck4.y = 181, this.tx4.x = 388, this.tx4.y = 190, this.txtDes.visible = !1) : (this.ck4.x = this.ck1.x, this.ck4.y = this.ck1.y, this.tx4.x = this.tx1.x, this.tx4.y = this.tx1.y, this.txtDes.visible = !0)
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("medalData"),
                e.push("shipData"),
                e.push("medalexpData"),
                ConfigData.preLoadDats(e, [MedaldataParser, ShipdataParser, MedalexpdataParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            this.pos = 0,
                WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.btnSellBtn.label = "分解",
                this.btnSellByQualityBtn.label = "按品质分解",
                this.btnChangeToSell.label = "分解",
                this.btnChangeToSell.icon.source = Path.panelUrl + "juesexinxi_gongxundian.png",
                this.huishouByQualityGroup.visible = !1,
                this.setCheckBoxState(!0),
                this.scroller.viewport = this.list,
                this.pos = 0;
            for (var t = ["勋章", "还原"], e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 120 * e,
                    a.index = e,
                    a.label = t[e],
                    this.tabContainer.addChild(a),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "up",
                    0 == e && a.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
            }
            this.getHuanYuanPageList()
        },
        i.onTabBarItemTap = function(t) {
            this.pos = 0;
            var e = t.currentTarget;
            e.currentState = "down",
                this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"),
                this.lastTab = e,
                0 == e.index ? (this.currPage = 0, this.setSoulPage()) : (this.currPage = 1, this.setHuanYuanPage())
        },
        i.setSoulPage = function() {
            var t = this.getSoulPageList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = soulsFactoryListItem,
                this.countLabel.text = "数量:" + (t.length - 1),
                this.countGroup.visible = !0,
                this.txtEmpty.visible = !1,
                this.moveScroller(this.pos)
        },
        i.setHuanYuanPage = function() {
            var t = this.getHuanYuanPageList();
            this.list.dataProvider = new eui.ArrayCollection(t),
                this.list.itemRenderer = soulsReduceFactoryListItem,
                this.countLabel.text = "数量:" + (t.length - 1),
                this.countGroup.visible = !0,
                0 == t.length ? this.txtEmpty.visible = !0 : this.txtEmpty.visible = !1,
                this.moveScroller(this.pos)
        },
        i.setHuiShouPage = function() {
            this.dsListParts = this.getHuiShouPageList(),
                this.list.dataProvider = new eui.ArrayCollection(this.dsListParts),
                this.list.itemRenderer = soulsSellListItem,
                this.txtEmpty.visible = !1,
                this.countGroup.visible = !1,
                this.moveScroller(this.pos)
        },
        i.getSoulPageList = function() {
            for (var t = [], e = ShipManager.getInstance().soulList, a = !1, i = 0; i < e.length; i++) {
                var n = e[i],
                    s = {};
                s.id = n.id,
                    s.soulid = n.soulid,
                    s.point = n.point,
                    s.equipedshipid = n.equipedshipid,
                    s.remouldlevel = n.promotelvl,
                    s.promotelvl = n.promotelvl,
                    s.islocked = n.islocked,
                    s.typeName = "勋章";
                var r = MedaldataParser.GetInstance().getItemById(n.soulid);
                s.name = r.name_l,
                    0 == s.remouldlevel ? s.nameInfo = MedaldataParser.GetInstance().getItemById(n.soulid).name_l : s.nameInfo = MedaldataParser.GetInstance().getItemById(n.soulid).name_l + " +" + s.remouldlevel,
                    s.quality = r.quality,
                    s.color = SoulManager.getInstance().setColor(s.quality),
                    s.qualityInfo = "品质:" + r.quality,
                    s.buff = r.buff,
                    s.buffValue = r.buffValue,
                    s.exp = r.exp,
                    s.medalType = r.medalType,
                    "9" == s.medalType ? s.upgradelevelInfo = "1级" : (n.point > 0 ? s.upgradelevel = Utils.getMetalLvByExp(n.point, "exp" + r.exp) : s.upgradelevel = 1, s.upgradelevelInfo = s.upgradelevel + "级"),
                    s.pic = SoulManager.getInstance().getSoulsPicById(r.icon),
                    9 == s.medalType ? (s.upgradeType = "经验", s.upgradeValue = s.exp, s.upgradeInfo = s.upgradeType + ":" + s.upgradeValue, s.remouldType = "", s.remouldValue = "", s.remouldInfo = "") : (s.upgradeType = BuffData.getBuffNameById(r.buff), s.upgradeValue = Math.floor(s.buffValue * s.upgradelevel), s.upgradeInfo = s.upgradeType + ":" + s.upgradeValue, s.remouldType = BuffData.getBuffNameById(r.remouldType), s.remouldValue = SoulManager.getInstance().getPercentage(s.remouldlevel, r.remouldValue), s.remouldInfo = s.remouldType + " +" + s.remouldValue);
                var o = ShipManager.getInstance().isMedalEquiped(s.id);
                if (void 0 == o || null == o) s.euqipedShip = "",
                    s.euqipedShipColor = 16711680;
                else
                    for (var l = 0; l < ShipManager.getInstance().shipList.length; l++)
                        if (o == ShipManager.getInstance().shipList[l].id) {
                            s.euqipedShip = ShipManager.getInstance().getShipNameByType(ShipManager.getInstance().shipList[l].shipid);
                            var h = ShipdataParser.GetInstance().getItemById(ShipManager.getInstance().shipList[l].shipid).quality;
                            s.euqipedShipColor = QualitySystem.getColorByQuality(h);
                            break
                        }
                s.isShowRedPoint = !1,
                    t.push(s)
            }
            if (t.sort(function(t, e) {
                    return "" == t.euqipedShip && "" == e.euqipedShip ? e.quality != t.quality ? e.quality - t.quality : Number(e.soulid) - Number(t.soulid) : "" != t.euqipedShip && "" != e.euqipedShip ? e.quality != t.quality ? e.quality - t.quality : Number(e.soulid) - Number(t.soulid) : "" != t.euqipedShip && "" == e.euqipedShip ? -1 : "" == t.euqipedShip && "" != e.euqipedShip ? 1 : void 0
                }), !GameData.skipShipGuide) {
                var s = {};
                s.id = -1,
                    s.lastOne = !0,
                    t.push(s)
            }
            var c = this.tabContainer.getChildAt(0);
            return c.redPoint.visible = a,
                t
        },
        i.getHuanYuanPageList = function() {
            for (var t = [], e = ShipManager.getInstance().soulList, a = 0; a < e.length; a++) {
                var i = e[a],
                    n = {};
                n.id = i.id,
                    n.soulid = i.soulid,
                    n.point = i.point,
                    n.equipedshipid = i.equipedshipid,
                    n.remouldlevel = i.promotelvl,
                    n.promotelvl = i.promotelvl,
                    n.islocked = i.islocked,
                    n.typeName = "勋章";
                var s = MedaldataParser.GetInstance().getItemById(i.soulid);
                n.name = s.name_l,
                    0 == n.remouldlevel ? n.nameInfo = MedaldataParser.GetInstance().getItemById(i.soulid).name_l : n.nameInfo = MedaldataParser.GetInstance().getItemById(i.soulid).name_l + " +" + n.remouldlevel,
                    n.quality = s.quality,
                    n.color = SoulManager.getInstance().setColor(n.quality),
                    n.qualityInfo = "品质:" + s.quality,
                    n.buff = s.buff,
                    n.buffValue = s.buffValue,
                    n.exp = s.exp,
                    n.medalType = s.medalType,
                    "9" == n.medalType ? n.upgradelevelInfo = "1级" : (i.point > 0 ? n.upgradelevel = Utils.getMetalLvByExp(i.point, "exp" + s.exp) : n.upgradelevel = 1, n.upgradelevelInfo = n.upgradelevel + "级"),
                    n.pic = SoulManager.getInstance().getSoulsPicById(s.icon),
                    n.upgradeType = BuffData.getBuffNameById(s.buff),
                    n.upgradeValue = Math.floor(n.buffValue * n.upgradelevel),
                    n.upgradeInfo = n.upgradeType + ":" + n.upgradeValue,
                    n.remouldType = BuffData.getBuffNameById(s.remouldType),
                    n.remouldValue = SoulManager.getInstance().getPercentage(n.remouldlevel, s.remouldValue),
                    n.remouldInfo = n.remouldType + " +" + n.remouldValue,
                    n.needCash = 200;
                var r = Utils.getListByKeyValue("soullist", n.id, ShipManager.getInstance().soldierList);
                0 == i.islocked && (i.promotelvl > 0 || n.upgradelevel > 1) && 0 == r.length && t.push(n)
            }
            if (t.sort(function(t, e) {
                    return e.quality != t.quality ? e.quality - t.quality : Number(e.soulid) - Number(t.soulid)
                }), !GameData.skipShipGuide) {
                var n = {};
                n.id = -1,
                    n.lastOne = !0,
                    t.push(n)
            }
            var o = this.tabContainer.getChildAt(1);
            return null != t && t.length > 1 ? o.redPoint.visible = !0 : o.redPoint.visible = !1,
                t
        },
        i.getHuiShouPageList = function() {
            this.dsListParts = [];
            for (var t = ShipManager.getInstance().soulList, e = 0, a = 0; a < t.length; a++) {
                var i = t[a],
                    n = {};
                n.id = i.id,
                    n.soulid = i.soulid,
                    n.point = i.point,
                    n.equipedshipid = i.equipedshipid,
                    n.remouldlevel = i.promotelvl,
                    n.promotelvl = i.promotelvl,
                    n.islocked = i.islocked,
                    n.typeName = "勋章";
                var s = MedaldataParser.GetInstance().getItemById(i.soulid);
                n.name = s.name_l,
                    0 == n.remouldlevel ? n.nameInfo = MedaldataParser.GetInstance().getItemById(i.soulid).name_l : n.nameInfo = MedaldataParser.GetInstance().getItemById(i.soulid).name_l + " +" + n.remouldlevel,
                    n.decomposepoints = MedaldataParser.GetInstance().getItemById(i.soulid).decomposepoints,
                    n.remouldCostPoint = MedaldataParser.GetInstance().getItemById(i.soulid).remouldCostPoint,
                    n.quality = s.quality,
                    n.color = SoulManager.getInstance().setColor(n.quality),
                    n.qualityInfo = "品质:" + s.quality,
                    n.buff = s.buff,
                    n.buffValue = s.buffValue,
                    n.exp = s.exp,
                    n.medalType = s.medalType,
                    "9" == n.medalType ? n.upgradelevelInfo = "1级" : (i.point > 0 ? n.upgradelevel = Utils.getMetalLvByExp(i.point, "exp" + s.exp) : n.upgradelevel = 1, n.upgradelevelInfo = n.upgradelevel + "级"),
                    n.pic = SoulManager.getInstance().getSoulsPicById(s.icon),
                    n.upgradeType = BuffData.getBuffNameById(s.buff),
                    n.upgradeValue = Math.floor(n.buffValue * n.upgradelevel),
                    n.upgradeInfo = n.upgradeType + ":" + n.upgradeValue,
                    n.remouldType = BuffData.getBuffNameById(s.remouldType),
                    n.remouldValue = SoulManager.getInstance().getPercentage(n.remouldlevel, s.remouldValue),
                    n.remouldInfo = n.remouldType + " +" + n.remouldValue,
                    n.point = i.point;
                var r = Utils.getListByKeyValue("soullist", n.id, ShipManager.getInstance().soldierList);
                if (n.isSelected = !1, 0 == i.islocked && 0 == r.length) {
                    if (null != SoulManager.getInstance().quailtyArr)
                        for (var o = 0; o < SoulManager.getInstance().quailtyArr.length; o++)
                            if (Number(n.quality) == SoulManager.getInstance().quailtyArr[o]) {
                                n.isSelected = !0,
                                    SoulManager.getInstance().reductionSoulsIds.push(n.id),
                                    e += 1;
                                break
                            }
                            "9" != n.medalType && n.quality >= 4 && this.dsListParts.push(n)
                }
            }
            return this.dsListParts.sort(function(t, e) {
                    return e.quality != t.quality ? e.quality - t.quality : Number(e.soulid) - Number(t.soulid)
                }),
                SoulManager.getInstance().setHuishouTxtNum(e),
                this.dsListParts
        },
        i.setHuiShouNum = function(t) {
            this.sellCountLabel.text = "已选数量:" + t + "/" + this.dsListParts.length
        },
        i.setPos = function() {
            this.pos = this.scroller.viewport.scrollV
        },
        i.moveScroller = function(t) {
            this.scroller.viewport.validateNow(),
                this.scroller.viewport.scrollV = t
        },
        e
}(WindowBase);
egret.registerClass(WindowSoul, "WindowSoul");
var soulsFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowSoulsManager_ClickShowOperate, this.showPanelEventHandler, this)
        },
        i.showPanelEventHandler = function(t) {
            t.parames != this.data.id && this.panelOperate && (GameEventDispatcher.getInstance().removeEventListener(GameEvent.WindowSoulsManager_ClickShowOperate, this.showPanelEventHandler, this), this.height -= this.panelOperate.height, this.removeChild(this.panelOperate), this.panelOperate = void 0)
        },
        i.remould = function() {
            WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                data: this.data,
                type: partMetalType.metals,
                index: 2
            })
        },
        i.upgrade = function() {
            WindowManager.getInstance().show(WindowManager.windowType.PartMetals, {
                data: this.data,
                type: partMetalType.metals,
                index: 1
            })
        },
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastOne ? (this.skinName = "ShipBuildingInformationBar02Skin", this.txtDesc.text = "获取勋章", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        WindowManager.getInstance().hideAll(),
                            WindowManager.getInstance().show(WindowManager.windowType.tansuo)
                    },
                    this)) : (this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml"
                    /*tpa=resource/eui_skins/item/zhuyepeijianxinxi01Skin.exml*/
                    , SUI.setTextureAsync(this.iconPic, this.data.pic), SUI.setTextureAsync(this.iconBg, Path.itemBackURL + "itemBack_item_sml_" + this.data.quality + ".png"), this.data.islocked ? this.iconLock.source = "GUI_Shipbuilding_Icon_locked_png" : this.iconLock.source = "GUI_Shipbuilding_Icon_open_png", this.data.isShowRedPoint ? this.btnMorePoint.visible = !0 : this.btnMorePoint.visible = !1, this.btnShowPanel.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.btnShowPanel.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            e.panelOperate ? (e.height -= e.panelOperate.height, e.removeChild(e.panelOperate), e.panelOperate = void 0) : (e.panelOperate = new eui.Component, e.panelOperate.skinName = "resource/eui_skins/item/xialacaidananiu02Skin.exml"
                                /*tpa=resource/eui_skins/item/xialacaidananiu02Skin.exml*/
                                , e.addChild(e.panelOperate), e.panelOperate.y = e.height, e.panelOperate.x = 0, 9 == e.data.medalType ? (e.panelOperate.btnRemould.enabled = !1, e.panelOperate.btnUpgrade.enabled = !1) : (e.panelOperate.btnRemould.enabled = !0, e.panelOperate.btnUpgrade.enabled = !0), e.panelOperate.btnRemould.addEventListener(egret.TouchEvent.TOUCH_TAP, e.remould, e), e.panelOperate.btnUpgrade.addEventListener(egret.TouchEvent.TOUCH_TAP, e.upgrade, e), e.height = e.height + e.panelOperate.height, GameEventDispatcher.getInstance().addEventListener(GameEvent.WindowSoulsManager_ClickShowOperate, e.showPanelEventHandler, e), GameEventDispatcher.getInstance().dispatchEvent(new GameEvent(GameEvent.WindowSoulsManager_ClickShowOperate, e.data.id)))
                        },
                        this), this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                                data: e.data,
                                type: shipInfoWindowType.soulInfo
                            })
                        },
                        this), this.iconLock.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            RequestManager.GetInstance().requestLockSoul(e.data.id, !e.data.islocked)
                        },
                        this)), "" == this.data.euqipedShip ? this.txtEuqipedIn.visible = !1 : this.txtEuqipedIn.visible = !0))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(soulsFactoryListItem, "soulsFactoryListItem");
var soulsReduceFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastOne ? (this.skinName = "ShipBuildingInformationBar02Skin", this.txtDesc.text = "获取勋章", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        WindowManager.getInstance().hideAll(),
                            WindowManager.getInstance().show(WindowManager.windowType.tansuo)
                    },
                    this)) : (this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml"
                    /*tpa=resource/eui_skins/item/zhuyepeijianxinxi02Skin.exml*/
                    , SUI.setTextureAsync(this.iconPic, this.data.pic), SUI.setTextureAsync(this.iconBg, Path.itemBackURL + "itemBack_item_sml_" + this.data.quality + ".png"), this.reduceBtn.hasEventListener(egret.TouchEvent.TOUCH_TAP) || (this.reduceBtn.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            RetiredAlert.getInstance().showSoulHuanYuan(e.data)
                        },
                        this), this.iconPic.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            WindowManager.getInstance().show(WindowManager.windowType.ShipInfo, {
                                data: e.data,
                                type: shipInfoWindowType.soulInfo
                            })
                        },
                        this))))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(soulsReduceFactoryListItem, "soulsReduceFactoryListItem");
var soulsSellListItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml"
            /*tpa=resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml*/
            ,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {},
        i.dataChanged = function() {
            var e = this;
            t.prototype.dataChanged.call(this),
                this.data && (this.data.lastOne ? (this.skinName = "ShipBuildingInformationBar02Skin", this.txtDesc.text = "获取勋章", SUI.setTextureAsync(this.bgImg, Path.uiUrl + "GetMore.jpg"), this.bgImg.hasEventListener(egret.TouchEvent.TOUCH_TAP) || this.bgImg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        MainUI.instance.setBottomVisible(!0),
                            WindowManager.getInstance().hideAll(),
                            WindowManager.getInstance().show(WindowManager.windowType.tansuo)
                    },
                    this)) : (this.skinName = "resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml"
                    /*tpa=resource/eui_skins/item/zhuyepeijianxinxi03Skin.exml*/
                    , SUI.setTextureAsync(this.iconPic, this.data.pic), SUI.setTextureAsync(this.iconBg, Path.itemBackURL + "itemBack_item_sml_" + this.data.quality + ".png"), this.checkBoxBtn.hasEventListener(egret.Event.CHANGE) || this.checkBoxBtn.addEventListener(egret.Event.CHANGE,
                        function() {
                            if (SoulManager.getInstance().setHuishouNum(e.data.id, e.checkBoxBtn.selected), SoulManager.getInstance().setListItemSelectedState(e.data.id, e.checkBoxBtn.selected), e.checkBoxBtn.selected) SoulManager.getInstance().reductionSoulsIds.push(e.data.id);
                            else {
                                for (var t = [], a = SoulManager.getInstance().reductionSoulsIds.length - 1; a >= 0; --a) console.log(SoulManager.getInstance().reductionSoulsIds[a]),
                                    e.data.id != SoulManager.getInstance().reductionSoulsIds[a] && t.push(SoulManager.getInstance().reductionSoulsIds[a]);
                                SoulManager.getInstance().reductionSoulsIds = t
                            }
                        },
                        this)))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(soulsSellListItem, "soulsSellListItem");
var WindowSpeak = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/SpeakPopSkin.exml"
            /*tpa=resource/eui_skins/SpeakPopSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.cancelClick, this),
                this.btnCancel.addEventListener(egret.TouchEvent.TOUCH_TAP, this.cancelClick, this),
                this.btnSend.addEventListener(egret.TouchEvent.TOUCH_TAP, this.sendClick, this),
                this.editLabel.prompt = "可以输入60字",
                this.editLabel.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this)
        },
        i.editLabelHandler = function(t) {
            var e = Utils.filterStr(this.editLabel.text);
            this.editLabel.text = e[0]
        },
        i.cancelClick = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.Speak)
        },
        i.setData = function(t) {
            this._data = t,
                this._data.name && (this.txtTitle.text = "对[" + this._data.name + "]留言")
        },
        i.sendClick = function(t) {
            if (this._data.uid && this.editLabel.text.length > 0) {
                var e = Transport.getPkg(ProtocolMgr.ID_DceSendMail);
                e.uid = this._data.uid,
                    e.text = this.editLabel.text,
                    Transport.instance.send(e)
            }
        },
        e
}(WindowBase);
egret.registerClass(WindowSpeak, "WindowSpeak");
var WindowStageCountBuy = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/goumaiyuanyou.exml"
            /*tpa=resource/eui_skins/goumaiyuanyou.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.closeBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickCloseBtn, this),
                this.buyBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBuyBtn, this),
                this.cancelBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickCancelBtn, this),
                this.cancelBtn.labelDisplay.text = Locales.get("alert_cancel"),
                this.buyBtn.labelDisplay.text = Locales.get("panel_activity_tuangou_text_17"),
                this.infoTxt1.text = Locales.get("zz_buyDesc"),
                this.titleTxt.text = Locales.get("panel_guard_biwu_refresh_show_text_4")
        },
        i.setData = function(t) {
            this.stageOpt = t;
            var e = t.baseData.resetCost[t.serverData.todaybuyCnt];
            this.infoTxt0.textFlow = Utils.textFlowByStr(Locales.get("zz_stageBuyDesc1", e));
            var a = t.baseData.resetCount - t.serverData.todaybuyCnt;
            this.infoTxt2.textFlow = Utils.textFlowByStr(Locales.get("zz_stageBuyDesc2", a))
        },
        i.OnClickCloseBtn = function(t) {
            this.close()
        },
        i.OnClickBuyBtn = function(t) {
            RequestManager.GetInstance().DResetStageCount(this.stageOpt.baseData.id),
                this.close()
        },
        i.OnClickCancelBtn = function(t) {
            this.close()
        },
        i.clear = function() {},
        e
}(WindowBase);
egret.registerClass(WindowStageCountBuy, "WindowStageCountBuy");
var WindowStore = function(t) {
    function e() {
        t.call(this, !1),
            this.pos = 0,
            this.skinName = "resource/eui_skins/commonListPageSkin.exml"
            /*tpa=resource/eui_skins/commonListPageSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.initUI()
        },
        i.initUI = function() {
            MainUI.instance.changeTopMode(topUIMode.simple, [TypeDefine.RES.Oil, TypeDefine.RES.Gold, TypeDefine.RES.Diamond, TypeDefine.RES.XunBaoLing]),
                this.scroller.viewport = this.list;
            var t = [];
            t = GameData.skipShipGuide ? [Locales.get("panel_bag_btn_allitem"), Locales.get("panel_bag_btn_material")] : [Locales.get("panel_bag_btn_allitem"), Locales.get("panel_bag_btn_material"), Locales.get("panel_bag_btn_chests")];
            for (var e = 0; e < t.length; e++) {
                var a = new eui.Button;
                a.skinName = "resource/eui_skins/components/tabSkin.exml"
                    /*tpa=resource/eui_skins/components/tabSkin.exml*/
                    ,
                    a.x = 118 * e,
                    a.index = e,
                    a.depth = t.length - e - 1,
                    a.label = t[e],
                    this.tabContainer.addChildAt(a, 0),
                    a.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this),
                    a.currentState = "up",
                    0 == e && a.dispatchEvent(new egret.TouchEvent(egret.TouchEvent.TOUCH_TAP))
            }
        },
        i.onTabBarItemTap = function(t) {
            this.pos = 0;
            var e = t.currentTarget;
            e.currentState = "down",
                this.lastTab && this.lastTab != e && (this.lastTab.currentState = "up"),
                this.lastTab = e,
                this.setPage(e.index),
                this.moveScroller(this.pos)
        },
        i.setPage = function(t, e) {
            if (void 0 === e && (e = !1), this.curPage != t || e) {
                this.curPage = t;
                for (var a = ItemsManager.getInstance().getListByType(t), i = [], n = 0; n < a.length; n++) {
                    var s = a[n];
                    if (s.count > 0) {
                        var r = ItemParser.GetInstance().getItemById(s.id);
                        if (1 == r.luckyBoxType) continue;
                        var o = {};
                        o.id = s.id,
                            o.icon = Path.itemIconURL + r.icon,
                            o.desc = r.desc_l,
                            o.quality = r.quality,
                            o.num = s.count,
                            o.name = r.name_l,
                            o.canUse = 3 != r.type,
                            o.useTen = 1 == r.useten,
                            i.push(o)
                    }
                }
                for (var l = 0,
                        h = a; l < h.length; l++) {
                    var s = h[l],
                        r = ItemParser.GetInstance().getItemById(s.id);
                    if (1 == r.luckyBoxType) {
                        for (var c = !1,
                                d = 0,
                                g = i; d < g.length; d++) {
                            var u = g[d];
                            if (u.id == r.twinLukcyBoxId) {
                                u.num += s.count,
                                    c = !0;
                                break
                            }
                        }
                        if (!c) {
                            var o = {};
                            o.id = s.id,
                                o.icon = Path.itemIconURL + r.icon,
                                o.desc = r.desc_l,
                                o.quality = r.quality,
                                o.num = s.count,
                                o.name = r.name_l,
                                o.canUse = 3 != r.type,
                                o.useTen = 1 == r.useten,
                                i.push(o)
                        }
                    }
                }
                this.list.dataProvider = new eui.ArrayCollection(i),
                    this.list.itemRenderer = storeItem
            }
        },
        i.updatePage = function() {
            this.setPos(),
                this.setPage(this.curPage, !0),
                this.moveScroller(this.pos)
        },
        i.clear = function() {},
        i.setPos = function() {
            this.pos = this.scroller.viewport.scrollV
        },
        i.moveScroller = function(t) {
            this.scroller.viewport.validateNow(),
                this.scroller.viewport.scrollV = t
        },
        e
}(WindowBase);
egret.registerClass(WindowStore, "WindowStore");
var storeItem = function(t) {
    function e() {
        t.call(this),
            this.skinName = "resource/eui_skins/item/cangkuxinxiSkin.exml"
            /*tpa=resource/eui_skins/item/cangkuxinxiSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.createChildren = function() {
            var e = this;
            t.prototype.createChildren.call(this),
                this.btnUse.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        1018 == e.data.id || 1014 == e.data.id ? e.data.id = 1101 : 1019 == e.data.id || 1015 == e.data.id ? e.data.id = 1102 : 1020 == e.data.id || 1016 == e.data.id ? e.data.id = 1103 : (1021 == e.data.id || 1017 == e.data.id) && (e.data.id = 1104),
                            ItemsManager.getInstance().bagitemUseById(e.data.id),
                            egret.log("click use:" + e.data.id)
                    },
                    this),
                this.btnFirst.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        ItemsManager.getInstance().bagitemUseById(e.data.id),
                            egret.log("click use:" + e.data.id)
                    },
                    this),
                this.btnSecond.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        ItemsManager.getInstance().bagitemUseById(e.data.id, 1),
                            egret.log("click use:" + e.data.id)
                    },
                    this)
        },
        i.dataChanged = function() {
            this.data && (this.data.canUse && !this.data.useTen ? (this.btnUse.visible = !0, this.btnFirst.visible = !1, this.btnSecond.visible = !1) : this.data.canUse && this.data.useTen ? (this.btnUse.visible = !1, this.btnFirst.visible = !0, this.btnSecond.visible = !0) : (this.btnUse.visible = !1, this.btnFirst.visible = !1, this.btnSecond.visible = !1), SUI.setTextureAsync(this.iconBg, "resource/assets/ui/ui_common/itemBack/itemBack_item_sml_" + this.data.quality + ".png"), SUI.setTextureAsync(this.icon, this.data.icon), this.txtName.textColor = QualitySystem.getColorByQuality(this.data.quality))
        },
        e
}(eui.ItemRenderer);
egret.registerClass(storeItem, "storeItem");
var WindowStrategy = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/GongLveSkin.exml"
            /*tpa=resource/eui_skins/GongLveSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeClick, this),
                this.scroller.viewport = this.group,
                this.Redraw()
        },
        i.closeClick = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.Strategy)
        },
        i.Redraw = function() {
            var t = this.CreateText("strategy_part0");
            this.group.addChild(t);
            for (var a = 1; 9 > a; a++) {
                var i = this.CreateCell(a);
                this.group.addChild(i)
            }
            for (var n = 1; n < e.NUM_MAX; n++) {
                var s = "strategy_part" + n,
                    r = Locales.get(s);
                if (s == r) break;
                var o = this.CreateText(s);
                this.group.addChild(o)
            }
        },
        i.CreateText = function(t) {
            var e = new eui.Label;
            e.size = 20,
                e.lineSpacing = 8;
            var a = Locales.get(t).split("&&"),
                i = a[0],
                n = a[1];
            return e.fontFamily = "黑体",
                e.textFlow = [{
                        text: "※" + i + "※\n",
                        style: {
                            size: 20,
                            textColor: 16620303,
                            bold: !0
                        }
                    },
                    {
                        text: "" + n,
                        style: {
                            size: 20,
                            textColor: 16777215
                        }
                    }
                ],
                e.width = 480,
                e
        },
        i.CreateString = function(t) {
            var e = "",
                a = Locales.get(t).split("&&"),
                i = a[0],
                n = a[1];
            return e = '<font color="#FD9B0F" >※' + i + "※</font>\n" + n
        },
        i.CreateCell = function(t) {
            var e = new eui.Group,
                a = new eui.Image;
            a.width = 35,
                a.height = 29,
                e.addChild(a),
                SUI.setTextureAsync(a, ShipManager.getInstance().getShipTypeIcon(t));
            var i = new eui.Label;
            i.size = 20,
                i.text = Locales.get("GlobalSystem_ShipType_" + t),
                i.textColor = 65535,
                e.addChild(i),
                i.fontFamily = "黑体";
            var n = new eui.HorizontalLayout;
            return n.verticalAlign = egret.HorizontalAlign.CENTER,
                n.paddingLeft = 55,
                e.layout = n,
                e
        },
        e.NUM_MAX = 100,
        e
}(WindowBase);
egret.registerClass(WindowStrategy, "WindowStrategy");
var WindowSystemSet = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/XiTongSkin.exml"
            /*tpa=resource/eui_skins/XiTongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.editLabelMessage.addEventListener(egret.Event.CHANGE, this.editLabelHandler, this),
                this.initBtn(),
                this.msgCloseBtn.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnCliskMsg, this),
                this.msgScroller.viewport = this.msgGroup
        },
        i.initBtn = function() {
            AudioManager.instance.isMusicOn ? (this.btnMusicSwitch.selected = !0, this.btnMusicSwitch.label = "关闭") : (this.btnMusicSwitch.selected = !1, this.btnMusicSwitch.label = "开启"),
                AudioManager.instance.isEffectOn ? (this.btnSoundSwitch.selected = !0, this.btnSoundSwitch.label = "关闭") : (this.btnSoundSwitch.selected = !1, this.btnSoundSwitch.label = "开启"),
                PlatformManager.instance.isSupportSubscribe() ? (this.btnSendLink.visible = !0, this.btnSendLink.label = "关注", this.infoTf.text = "欢迎关注" + PlatformManager.instance.GetPlatName(), this.txtSendLinkReward.text = "关注可领取奖励，仅可领取一次") : PlatformManager.instance.isSupportToDesktop() ? (this.btnSendLink.visible = !0, this.btnSendLink.label = "发送", this.infoTf.text = "发送快捷方式到桌面", this.txtSendLinkReward.text = "首次发送获得100钻石奖励") : (this.btnSendLink.visible = !1, this.infoTf.text = "战舰帝国-大决战", this.txtSendLinkReward.text = "首款H5写实海战策略游戏"),
                PlatformManager.instance.isSupportShare() ? this.btnLeaveMessage.parent.addChild(this.btnShare) : this.btnShare.parent && this.btnShare.parent.removeChild(this.btnShare),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeClick, this),
                this.btnMusicSwitch.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnSoundSwitch.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnSendLink.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnLeaveMessage.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnClose2.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnCancel.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnChangeAccount.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnShare.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnSend.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnCheckInviteCode.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnCheckInviteCode0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this),
                this.btnViewNotice.addEventListener(egret.TouchEvent.TOUCH_TAP, this.btnClick, this)
        },
        i.editLabelHandler = function(t) {
            var e = Utils.filterStr(this.editLabelMessage.text);
            this.editLabelMessage.text = e[0]
        },
        i.btnClick = function(t) {
            switch (t.target) {
                case this.btnSendLink:
                    PlatformManager.instance.isSupportSubscribe() ? PlatformManager.instance.Subscribe() : this.grpSendLink.visible = !this.grpSendLink.visible;
                    break;
                case this.btnSoundSwitch:
                    this.btnSoundSwitch.selected ? (this.btnSoundSwitch.label = "关闭", AudioManager.instance.isEffectOn = !0) : (this.btnSoundSwitch.label = "开启", AudioManager.instance.isEffectOn = !1);
                    break;
                case this.btnMusicSwitch:
                    this.btnMusicSwitch.selected ? (this.btnMusicSwitch.label = "关闭", AudioManager.instance.isMusicOn = !0) : (this.btnMusicSwitch.label = "开启", AudioManager.instance.isMusicOn = !1);
                    break;
                case this.btnChangeAccount:
                    PlatformManager.instance.isSupportSwitchAccount() ? (WindowManager.getInstance().hide(WindowManager.windowType.System), Transport.instance.closeSocket(), PlatformManager.instance.switchAccount()) : Toast.launch("此平台不支持切换账号");
                    break;
                case this.btnViewNotice:
                    ResLoader.instance.preLoadResList(["resource/assets/broadcast/msg.json"
                            /*tpa=resource/assets/broadcast/msg.json*/
                        ],
                        function(t) {
                            this.msgContainer.visible = !1,
                                t && (this.msg = t[0], this.msg && this.msg.content && "" != this.msg.content && (this.msgTitleTf.text = this.msg.title || "公告", this.msgCloseBtn.label = this.msg.closeBtnTf || "收到", this.msgContent.textFlow = (new egret.HtmlTextParser).parser(this.msg.content), this.msgContainer.visible = !0))
                        },
                        this);
                    break;
                case this.btnCheckInviteCode:
                    Toast.launch("该邀请码无效");
                    break;
                case this.btnCheckInviteCode0:
                    var e = Transport.getPkg(ProtocolMgr.ID_DceExchangeCode);
                    e.code = this.editLabelInviteCode0.text,
                        Transport.instance.send(e);
                    break;
                case this.btnLeaveMessage:
                    this.grpMessage.visible = !this.grpMessage.visible;
                    break;
                case this.btnCancel:
                    this.grpMessage.visible = !1;
                    break;
                case this.btnConfirm:
                    break;
                case this.btnClose2:
                    this.grpSendLink.visible = !1;
                    break;
                case this.btnSend:
                    PlatformManager.instance.ToDesktop();
                    break;
                case this.btnShare:
                    PlatformManager.instance.share()
            }
        },
        i.closeClick = function(t) {
            WindowManager.getInstance().hide(WindowManager.windowType.System)
        },
        i.OnCliskMsg = function(t) {
            this.msg && this.msg.canClose && (this.msgContainer.visible = !1)
        },
        e
}(WindowBase);
egret.registerClass(WindowSystemSet, "WindowSystemSet");
var WindowTansuo = function(t) {
    function e() {
        t.call(this, !0),
            this.oldListLen = 0,
            this.skinName = "resource/eui_skins/ChouJiang_TanSuoXunZhangSkin.exml"
            /*tpa=resource/eui_skins/ChouJiang_TanSuoXunZhangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            ConfigData.preLoadList(["medalsalvageData", "medalexpData", "medalData"],
                function() {
                    t.initUI()
                })
        },
        i.initUI = function() {
            this.listLen = 100,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this),
                this.btnClose0.addEventListener(egret.TouchEvent.TOUCH_TAP, this.infoHandler, this),
                this.btnSearch.addEventListener(egret.TouchEvent.TOUCH_TAP, this.seachHandler, this),
                this.btnQuickSearch.addEventListener(egret.TouchEvent.TOUCH_TAP, this.seachHandler, this),
                this.btnHighSearch.addEventListener(egret.TouchEvent.TOUCH_TAP, this.seachHandler, this),
                this.btnJumpEquip.addEventListener(egret.TouchEvent.TOUCH_TAP, this.euipHandler, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.Souls_List_Refresh, this.refreshSoluScene, this),
                GameEventDispatcher.getInstance().addEventListener(GameEvent.UserData_Update, this.userDataRefresh, this),
                this.refreshSoluScene(),
                this.userDataRefresh(),
                UserData.getInstance()._vip < 6 ? this.btnQuickSearch.enabled = !1 : this.txtNeedVip.text = "",
                Utils.getImgByUrl(Path.backGroundImageUrl + "Bg_l_searchMeadal.jpg", this.bg)
        },
        i.euipHandler = function(t) {
            UserData.getInstance()._level < 40 ? Toast.launch(Locales.get("panel_active_game_campBattle_desc_2_2", 40)) : (WindowShipArrange.medalPage = !0, MainUI.instance.bottomUI.showShipArrange())
        },
        i.userDataRefresh = function() {
            this.txtCoinNum.text = Utils.rnum(UserData.getInstance().getRes(TypeDefine.RES.Gold)),
                this.txtDiamondNum.text = Utils.rnum(UserData.getInstance().getRes(TypeDefine.RES.Diamond))
        },
        i.refreshSoluScene = function(t) {
            void 0 === t && (t = null);
            var e = ShipManager.getInstance().soulList;
            this.listIndex = e.length > this.listLen ? e.length - this.listLen : 0;
            var a = Number(ConfigData.getDataByKey("medalsalvageData", SoulManager.soulScene).cost);
            this.txtCost.text = a.toString(),
                a > UserData.getInstance().getRes(TypeDefine.RES.Gold) ? this.txtCost.textColor = 16711680 : this.txtCost.textColor = 16777215;
            for (var i = 1; 6 > i; i++) {
                var n = this["Frame" + i];
                this.initBool || (Utils.getImgByUrl(Path.searchMedalUrl + "SearchScene_" + i + ".png", n.imgUp), Utils.getImgByUrl(Path.searchMedalUrl + "SearchScene_" + i + ".png", n.imgDown)),
                    n.ImShadow.visible = !0,
                    n.imgUp.visible = !1,
                    n.imgDown.visible = !0
            }
            this.initBool = !0;
            var s = this["Frame" + SoulManager.soulScene];
            s.ImShadow.visible = !1,
                s.imgUp.visible = !0,
                s.imgDown.visible = !1,
                this.initMedalList(!0),
                this.oldListLen = e.length
        },
        i.initMedalList = function(t) {
            for (var e = this,
                    a = ShipManager.getInstance().soulList, i = a.length - 1, n = a.length - this.oldListLen, s = i; s > this.listIndex; s--) {
                var r = this.vessel.getChildByName(a[s].id);
                r ? t && (r.x += 110 * n) : (r = new TansuoMedalItem(a[s]), r.update = 0, r.name = a[s].id, this.vessel.addChild(r), r.x = 110 * (i - s))
            }
            this.Reward.viewport.scrollH = 0;
            var o = !0;
            0 != this.listIndex ? this.listIndex -= this.listLen : o = !1,
                this.listIndex < 0 && (this.listIndex = 0),
                o && egret.setTimeout(function() {
                        e.initMedalList(!1)
                    },
                    this, 500)
        },
        i.closeHandler = function(t) {
            GameEventDispatcher.getInstance().removeEventListener(GameEvent.UserData_Update, this.userDataRefresh, this),
                GameEventDispatcher.getInstance().removeEventListener(GameEvent.Souls_List_Refresh, this.refreshSoluScene, this),
                this.close()
        },
        i.infoHandler = function(t) {
            QiJvTouAlert.getInstance().showTxtDescPage(Locales.get("DecDescPanel_txt_title"), Locales.get("DecDescPanel_txt"))
        },
        i.seachHandler = function(t) {
            var e = t.currentTarget;
            PiecesManager.getInstance().medalPieces.length >= 300 ? Toast.launch(Locales.get("DecGeneratePanel_txt_tips_count_limit")) : e == this.btnSearch ? Number(ConfigData.getDataByKey("medalsalvageData", SoulManager.soulScene).cost) > UserData.getInstance().getRes(TypeDefine.RES.Gold) ? (Toast.launch(Locales.get("DecGeneratePanel_txt_tips_gold_not_enough")), MainUI.instance.bottomUI.showHomeByForce(), WindowManager.getInstance().show(WindowManager.windowType.BuJi)) : RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceSoul, {
                type: 1
            }, !1) : e == this.btnQuickSearch ? WindowManager.getInstance().show(WindowManager.windowType.tansuoQuick) : e == this.btnHighSearch && (SoulManager.soulScene > 2 ? Toast.launch(Locales.get("DecGeneratePanel_txt_tips_senior")) : WindowManager.getInstance().show(WindowManager.windowType.tansuoGaoJi))
        },
        e
}(WindowBase);
egret.registerClass(WindowTansuo, "WindowTansuo");
var TansuoMedalItem = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/components/itemCommon3Skin.exml"
            /*tpa=resource/eui_skins/components/itemCommon3Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this.initUI()
        },
        i.initUI = function() {
            var t = this.iData.soulid,
                e = ConfigData.getDataByKey("medalData", t);
            Utils.getImgByUrl(QualitySystem.getItemSmallBack(e.quality), this.imgBg),
                Utils.getImgByUrl(Path.soulIconURL + "Medal_" + e.id + "_i.png", this.imgIcon),
                this.txtName.text = MedaldataParser.GetInstance().getItemById(t).name_l,
                this.txtNum.text = "Lv" + Utils.getMetalLvByExp(this.iData.point, "exp" + e.exp),
                this.txtName.textColor = QualitySystem.getColorByQuality(e.quality)
        },
        e
}(eui.Component);
egret.registerClass(TansuoMedalItem, "TansuoMedalItem");
var WindowTaskReward = function(t) {
    function e() {
        t.call(this, !0),
            this.skinName = "resource/eui_skins/RenWuBaoXiangSkin.exml"
            /*tpa=resource/eui_skins/RenWuBaoXiangSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            var e = this;
            this.taskData = t,
                ConfigData.preLoadList(["giftData", "item"],
                    function() {
                        e.initUI()
                    }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.closeHandler, this),
                this.btnTake.addEventListener(egret.TouchEvent.TOUCH_TAP, this.takeHandler, this),
                this.btnTake.enabled = this.taskData.getBool
        },
        i.takeHandler = function(t) {
            this.closeHandler(null),
                RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceGetTaskReward, {
                    index: Number(this.taskData.index) + 1,
                    type: 1
                }, !1)
        },
        i.closeHandler = function(t) {
            this.close()
        },
        i.initUI = function() {
            var t = ConfigData.getAllData("giftData"),
                e = [];
            for (var a in t) "length" != a && Number(t[a].id) == Number(this.taskData.id) && e.push(t[a]);
            for (var i = 0; i < e.length; i++) {
                var n = new ItemTaskReward(e[i]);
                n.x = 100 * i,
                    this.vessel.addChild(n)
            }
        },
        e
}(WindowBase);
egret.registerClass(WindowTaskReward, "WindowTaskReward");
var ItemTaskReward = function(t) {
    function e(e) {
        t.call(this),
            this.iData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.init, this),
            this.skinName = "resource/eui_skins/components/itemCommon3Skin.exml"
            /*tpa=resource/eui_skins/components/itemCommon3Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = GlobalFunction.getDropDataByTypeAndId(this.iData.type, this.iData.item);
            this.txtName.text = t.name,
                this.txtNum.text = Utils.rnum(this.iData.count),
                Utils.getImgByUrl(QualitySystem.getItemSmallBack(t.quality || 1), this.imgBg),
                Utils.getImgByUrl(t.icon, this.imgIcon)
        },
        e
}(eui.Component);
egret.registerClass(ItemTaskReward, "ItemTaskReward");
var WindowTeGong = function(t) {
    function e() {
        t.call(this, !1),
            this.skinName = "resource/eui_skins/ChouJiang_TeGongSkin.exml"
            /*tpa=resource/eui_skins/ChouJiang_TeGongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this)
        },
        i.clear = function() {
            this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this)
        },
        i.onTabBarItemTap = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    WindowManager.getInstance().hide(WindowManager.windowType.TeGong)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("item"),
                e.push("spyBaseData"),
                ConfigData.preLoadDats(e, [ItemParser, SpybasedataParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting()
        },
        e
}(WindowBase);
egret.registerClass(WindowTeGong, "WindowTeGong");
var WindowUpgrade = function(t) {
    function e() {
        t.call(this, !0),
            this._needBlock = !0,
            this.skinName = "resource/eui_skins/ShengJiSkin.exml"
            /*tpa=resource/eui_skins/ShengJiSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            if (this.guideDelayStep = 0, this._data = t, this._data.isLevelUp) {
                5 == Number(this._data.to) && SceneManager.instance.curSceneType != SceneType.BATTLE ? GuideManager.step < 41 && (this.guideDelayStep = 41) : 10 == Number(this._data.to) ? this.guideDelayStep = 65 : 12 == Number(this._data.to) ? this.guideDelayStep = 78 : 15 == Number(this._data.to) ? this.guideDelayStep = 91 : 17 == Number(this._data.to) ? this.guideDelayStep = 96 : 19 == Number(this._data.to) ? this.guideDelayStep = 102 : 25 == Number(this._data.to) ? this.guideDelayStep = 112 : 30 == Number(this._data.to) ? this.guideDelayStep = 116 : 40 == Number(this._data.to) ? this.guideDelayStep = 124 : 50 == Number(this._data.to) && (this.guideDelayStep = 132),
                    this.GrandeUp.visible = !1,
                    this.LevelUp.visible = !0;
                var e = ExpParser.GetInstance().getItemById(this._data.to),
                    a = ExpParser.GetInstance().getItemById(this._data.to - 1);
                this.txtCongratulation.text = Locales.get("zz_levelup", this._data.to),
                    this.txtTitle.text = Locales.get("zz_leveluptitle", this._data.to),
                    this.txtReward.text = Locales.get("zz_recoverOil", e.restoreOil),
                    e.poslevel != a.poslevel ? this.txtReward2.text = Locales.get("zz_sendShip", e.poslevel) : (this.txtReward2.visible = !1, this.txtReward3.y = this.txtReward2.y),
                    "" != e.desc_l ? this.txtReward3.textFlow = Utils.textFlowByStr(e.desc_l) : this.txtReward3.text = ""
            } else {
                this.GrandeUp.visible = !0,
                    this.LevelUp.visible = !1;
                var i = MilitaryrankParser.GetInstance().getItemByField("id", this._data.to),
                    n = MilitaryrankParser.GetInstance().getItemById(i.index - 1);
                SUI.setTextureAsync(this.imgOldRank, Path.GetRankIconUrl(n.index)),
                    this.txtOldRank.text = n.name_l,
                    SUI.setTextureAsync(this.imgNewRank, Path.GetRankIconUrl(i.index)),
                    this.txtNewRank.text = i.name_l,
                    this.txtCongratulation0.text = Locales.get("zz_militaryUp", i.name_l),
                    this.txtTitle.text = Locales.get("zz_militaryUpTitle", i.name_l)
            }
            AudioManager.instance.playSound(AudioManager.SOUND_BATTLE_LVL_UP),
                GuideManager.showGuider(!1)
        },
        i.init = function() {
            var t = this;
            this.gpCtrl.visible = !1,
                SUI.setTextureAsync(this.imgBg, Path.uiUrl + "Upgrade_Bg.png"),
                SUI.setTextureAsync(this.imgArrow, Path.uiUrl + "Upgrade_Arrow.png"),
                this.touchBg.addEventListener(egret.TouchEvent.TOUCH_TAP,
                    function() {
                        t.close(),
                            t.guideDelayStep > 0 && (GuideManager.nextStep(t.guideDelayStep), t.guideDelayStep = 0)
                    },
                    this);
            var e = [Path.effectUrl + "shengjitexiao/shengjitexiao.json", Path.effectUrl + "shengjitexiao/texture.json", Path.effectUrl + "shengjitexiao/texture.png"];
            ResLoader.instance.preLoadResList(e,
                function(e) {
                    var a = e[2],
                        i = e[1],
                        n = e[0];
                    if (a && i && n) {
                        var s = new dragonBones.EgretFactory;
                        s.addDragonBonesData(dragonBones.DataParser.parseDragonBonesData(n)),
                            s.addTextureAtlas(new dragonBones.EgretTextureAtlas(a, i));
                        var r = s.buildArmature("shengjitexiao");
                        dragonBones.WorldClock.clock.add(r),
                            t.gpCenter.addChild(r.display),
                            r.animation.gotoAndPlay("normal", void 0, void 0, 1),
                            Utils.delayCall(500,
                                function() {
                                    t.gpCtrl.visible = !0
                                },
                                t);
                        var o = (++SUI.tagInc).toString();
                        ResLoader.instance.addRef(Path.effectUrl + "shengjitexiao/texture.png", o),
                            r.display.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                                function() {
                                    ResLoader.instance.clearTag(o)
                                },
                                void 0),
                            t._armature = r,
                            t.imgLight.visible = !1,
                            Utils.delayCall(500,
                                function() {
                                    t.imgLight.visible = !0,
                                        SUI.setTextureAsync(t.imgLight, Path.uiUrl + "Upgrade_Light.png"),
                                        egret.Tween.removeTweens(t.imgLight);
                                    var e = t.imgLight.rotation,
                                        a = egret.Tween.get(t.imgLight, {
                                            loop: !0
                                        });
                                    a.to({
                                            rotation: e + 360
                                        },
                                        6e3)
                                },
                                t)
                    }
                },
                this)
        },
        i.clear = function() {
            GuideManager.showGuider(!0),
                this._armature && (dragonBones.WorldClock.clock.remove(this._armature), this._armature = null)
        },
        e
}(WindowBase);
egret.registerClass(WindowUpgrade, "WindowUpgrade");
var WindowWaiting = function(t) {
    function e() {
        var e = this;
        t.call(this),
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE,
                function() {
                    e.hasEventListener(egret.Event.ENTER_FRAME) && e.removeEventListener(egret.Event.ENTER_FRAME, e.runLoading, e)
                },
                this),
            this.addEventListener(egret.Event.ADDED_TO_STAGE,
                function() {
                    e._txProgress && (e._txProgress.text = ""),
                        e.addEventListener(egret.Event.ENTER_FRAME, e.runLoading, e)
                },
                this),
            this.once(egret.Event.ADDED_TO_STAGE, this.init, this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            this._bg = new egret.Shape,
                this._bg.graphics.beginFill(0, .5),
                this._bg.graphics.drawRect(0, 0, this.stage.stageWidth, this.stage.stageHeight),
                this._bg.graphics.endFill(),
                this.addChild(this._bg),
                this._bg.touchEnabled = !0,
                this._loadingRun = new egret.Bitmap(RES.getRes(Path.resHeadUrl + "loading_run_png")),
                this.addChild(this._loadingRun),
                this._loadingRun.anchorOffsetX = .5 * this._loadingRun.width,
                this._loadingRun.anchorOffsetY = .5 * this._loadingRun.height,
                this._loadingRun.x = .5 * this.stage.stageWidth,
                this._loadingRun.y = .5 * this.stage.stageHeight,
                this._txProgress = new egret.TextField,
                this._txProgress.textAlign = egret.HorizontalAlign.CENTER,
                this._txProgress.verticalAlign = egret.VerticalAlign.MIDDLE,
                this._txProgress.x = .5 * this.stage.stageWidth - 100,
                this._txProgress.width = 200,
                this._txProgress.y = .5 * this.stage.stageHeight - 100,
                this._txProgress.height = 200,
                this._txProgress.size = 14,
                this._txProgress.stroke = 1,
                this._txProgress.strokeColor = 0,
                this.addChild(this._txProgress)
        },
        i.runLoading = function(t) {
            this._loadingRun && (this._loadingRun.rotation += 3)
        },
        i.setProgress = function(t, e) {
            this._txProgress && (this._txProgress.text = Math.round(t / e * 100) + "%")
        },
        e
}(egret.DisplayObjectContainer);
egret.registerClass(WindowWaiting, "WindowWaiting");
var WindowWarshipHandbookTabType;
!
function(t) {
    t[t.TAB_WARSHIP = 0] = "TAB_WARSHIP",
        t[t.TAB_MEDAL = 1] = "TAB_MEDAL",
        t[t.TAB_CAPTAIN = 2] = "TAB_CAPTAIN"
}(WindowWarshipHandbookTabType || (WindowWarshipHandbookTabType = {}));
var ItemData = function() {
    function t(t, e) {
        this.userData = t,
            this.have = e
    }
    var e = (__define, t);
    e.prototype;
    return t
}();
egret.registerClass(ItemData, "ItemData");
var WindowWarshipHandbook = function(t) {
    function e() {
        t.call(this, !1),
            this.ownedPaperIds = [],
            this.ownedCaptainIds = [],
            this.ownedMedalIds = [],
            this.paperBuffMap = {},
            this.captainBuffMap = {},
            this.medalBuffMap = {},
            this.skinName = "resource/eui_skins/Tujian.exml"
            /*tpa=resource/eui_skins/Tujian.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            MainUI.instance.changeTopMode(topUIMode.simpleLevel),
                this.setProgress(0, 1),
                this.btnDetails.labelDisplay.text = Locales.get("zz_handbook1"),
                this.btnCaptain.labelDisplay.text = Locales.get("panel_jianzhang_btn_2"),
                this.btnMedal.labelDisplay.text = Locales.get("panel_plunder_txt_ckb_5"),
                this.btnWarship.labelDisplay.text = Locales.get("zz_warship");
            var t = new eui.ArrayCollection;
            this.lstCenter.dataProvider = t,
                this.lstCenter.itemRenderer = MedalInfoItemRenderer,
                this.lstCenter.useVirtualLayout = !0,
                this.scvCenter.viewport = this.lstCenter,
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnDetails.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnDetails, this),
                this.btnCaptain.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnCaptain, this),
                this.btnMedal.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnMedal, this),
                this.btnWarship.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnWarship, this),
                RequestManager.GetInstance().RequestHandbookInfo(),
                this.tabBtns = [],
                this.tabBtns.push(this.btnWarship),
                this.tabBtns.push(this.btnMedal),
                this.tabBtns.push(this.btnCaptain),
                this.GotoTab(WindowWarshipHandbookTabType.TAB_WARSHIP)
        },
        i.setData = function(t) {
            this.ownedPaperIds = [];
            for (var e = 0; e < t.ownedpaper.length; ++e) this.ownedPaperIds.push(t.ownedpaper[e]);
            this.ownedCaptainIds = [];
            for (var e = 0; e < t.ownedcaptainpaper.length; ++e) this.ownedCaptainIds.push(t.ownedcaptainpaper[e]);
            this.ownedMedalIds = [];
            for (var e = 0; e < t.ownedsoulpaper.length; ++e) this.ownedMedalIds.push(t.ownedsoulpaper[e]);
            this.GotoTab(this.currentTab, !0)
        },
        i.GotoTab = function(t, e) {
            if (void 0 === e && (e = !1), this.currentTab !== t || e) {
                for (var a = 0; 3 > a; ++a) {
                    var i = this.tabBtns[a];
                    t == a ? i.currentState = "down" : i.currentState = "up"
                }
                WindowWarshipHandbookTabType.TAB_WARSHIP == t ? this.ShowWarshipPanel() : WindowWarshipHandbookTabType.TAB_MEDAL == t ? this.ShowMedalPanel() : WindowWarshipHandbookTabType.TAB_CAPTAIN == t && this.ShowCaptainPanel(),
                    this.currentTab = t
            }
        },
        i.setProgress = function(t, e) {
            this.imgProgress.width = this.imgProgressBg.width * t / e,
                this.txtProgress.text = Locales.get("panel_atlas_main_panel_txt_progress", t.toString(), e.toString())
        },
        i.ConstructWarshipData = function() {
            var t = PaperdataParser.GetInstance().getDatas();
            this.warshipConfigDatas = new Array;
            for (var e in t) {
                var a = t[e],
                    i = new ItemData(a, !1);
                this.warshipConfigDatas.push(i)
            }
            this.warshipConfigDatas.sort(function(t, e) {
                return t.userData.order - e.userData.order
            })
        },
        i.UpdateWarshipData = function() {
            if (this.paperBuffMap = new Object, this.warshipConfigDatas)
                for (var t = 0,
                        e = this.warshipConfigDatas; t < e.length; t++) {
                    var a = e[t];
                    this.ownedPaperIds.indexOf(a.userData.id) >= 0 && (a.have = !0, void 0 === this.paperBuffMap[a.userData.buffType] ? this.paperBuffMap[a.userData.buffType] = a.userData.buffValue : this.paperBuffMap[a.userData.buffType] += a.userData.buffValue)
                }
        },
        i.UpdateWarshipPanel = function() {
            for (var t = [], e = this.warshipConfigDatas.length, a = this.warshipConfigDatas.length / 3, i = 0; a > i; ++i) {
                var n = [],
                    s = 3 * i;
                e > s && n.push(this.warshipConfigDatas[s]),
                    e > s + 1 && n.push(this.warshipConfigDatas[s + 1]),
                    e > s + 2 && n.push(this.warshipConfigDatas[s + 2]),
                    t.push(n)
            }
            for (var r = 0,
                    o = 0,
                    l = this.warshipConfigDatas; o < l.length; o++) {
                var h = l[o];
                h.have && r++
            }
            this.setProgress(r, this.warshipConfigDatas.length);
            var c = new eui.ArrayCollection(t);
            this.lstCenter.dataProvider = c,
                this.lstCenter.itemRenderer = WarshipInfoItemRender,
                this.lstCenter.useVirtualLayout = !0,
                this.scvCenter.viewport = this.lstCenter
        },
        i.ShowWarshipPanel = function() {
            var t = this;
            this.btnDetails.labelDisplay.text = Locales.get("zz_handbook1"),
                this.warshipConfigDatas ? (this.UpdateWarshipData(), this.UpdateWarshipPanel()) : ConfigData.preLoadDats(["paperData", "shipModelData", "shipData"], [PaperdataParser, ShipmodeldataParser, ShipdataParser],
                    function() {
                        t.ConstructWarshipData(),
                            t.UpdateWarshipData(),
                            t.UpdateWarshipPanel()
                    })
        },
        i.ConstructMedalData = function() {
            var t = MedaldataParser.GetInstance().getDatas();
            this.medalConfigDatas = new Array;
            for (var e in t) {
                var a = t[e];
                if (a.collectbuff) {
                    var i = new ItemData(a, !1);
                    this.medalConfigDatas.push(i)
                }
            }
            this.medalConfigDatas.sort(function(t, e) {
                return t.userData.collectid - e.userData.collectid
            })
        },
        i.UpdateMedalData = function() {
            if (this.medalBuffMap = new Object, this.medalConfigDatas)
                for (var t = 0,
                        e = this.medalConfigDatas; t < e.length; t++) {
                    var a = e[t];
                    this.ownedMedalIds.indexOf(a.userData.id) >= 0 && (a.have = !0, void 0 === this.medalBuffMap[a.userData.collectbuff] ? this.medalBuffMap[a.userData.collectbuff] = a.userData.collectbuffvalue : this.medalBuffMap[a.userData.collectbuff] += a.userData.collectbuffvalue)
                }
        },
        i.UpdateMedalPanel = function() {
            for (var t = [], e = this.medalConfigDatas.length, a = this.medalConfigDatas.length / 3, i = 0; a > i; ++i) {
                var n = [],
                    s = 3 * i;
                e > s && n.push(this.medalConfigDatas[s]),
                    e > s + 1 && n.push(this.medalConfigDatas[s + 1]),
                    e > s + 2 && n.push(this.medalConfigDatas[s + 2]),
                    t.push(n)
            }
            for (var r = 0,
                    o = 0,
                    l = this.medalConfigDatas; o < l.length; o++) {
                var h = l[o];
                h.have && r++
            }
            this.setProgress(r, this.medalConfigDatas.length);
            var c = new eui.ArrayCollection(t);
            this.lstCenter.dataProvider = c,
                this.lstCenter.itemRenderer = MedalInfoItemRenderer,
                this.lstCenter.useVirtualLayout = !0,
                this.scvCenter.viewport = this.lstCenter
        },
        i.ShowMedalPanel = function() {
            var t = this;
            this.btnDetails.labelDisplay.text = Locales.get("zz_handbook2"),
                void 0 == this.medalConfigDatas ? ConfigData.preLoadDats(["medalData"], [MedaldataParser],
                    function(e) {
                        t.ConstructMedalData(),
                            t.UpdateMedalData(),
                            t.UpdateMedalPanel()
                    }) : (this.UpdateMedalData(), this.UpdateMedalPanel())
        },
        i.ConstructCaptainData = function() {
            var t = CaptaindataParser.GetInstance().getDatas();
            CaptaincollectionParser.GetInstance().getDatas();
            this.captainConfigDatas = new Array;
            for (var e in t) {
                var a = t[e],
                    i = CaptaincollectionParser.GetInstance().getItemById(a.id),
                    n = {
                        captainData: a,
                        detailData: i
                    },
                    s = new ItemData(n, !1);
                this.captainConfigDatas.push(s)
            }
            this.captainConfigDatas.sort(function(t, e) {
                return t.userData.detailData.order - e.userData.detailData.order
            })
        },
        i.UpdateCaptainData = function() {
            if (this.captainBuffMap = new Object, this.captainConfigDatas)
                for (var t = 0,
                        e = this.captainConfigDatas; t < e.length; t++) {
                    var a = e[t];
                    this.ownedCaptainIds.indexOf(a.userData.captainData.id) >= 0 && (a.have = !0, void 0 === this.captainBuffMap[a.userData.detailData.collectbuff] ? this.captainBuffMap[a.userData.detailData.collectbuff] = a.userData.detailData.collectbuffvalue : this.captainBuffMap[a.userData.detailData.collectbuff] += a.userData.detailData.collectbuffvalue)
                }
        },
        i.UpdateCaptainPanel = function() {
            for (var t = [], e = this.captainConfigDatas.length, a = this.captainConfigDatas.length / 3, i = 0; a > i; ++i) {
                var n = [],
                    s = 3 * i;
                e > s && n.push(this.captainConfigDatas[s]),
                    e > s + 1 && n.push(this.captainConfigDatas[s + 1]),
                    e > s + 2 && n.push(this.captainConfigDatas[s + 2]),
                    t.push(n)
            }
            for (var r = 0,
                    o = 0,
                    l = this.captainConfigDatas; o < l.length; o++) {
                var h = l[o];
                h.have && r++
            }
            this.setProgress(r, this.captainConfigDatas.length);
            var c = new eui.ArrayCollection(t);
            this.lstCenter.dataProvider = c,
                this.lstCenter.itemRenderer = CaptainInfoItemRenderer,
                this.lstCenter.useVirtualLayout = !0,
                this.scvCenter.viewport = this.lstCenter
        },
        i.ShowCaptainPanel = function() {
            var t = this;
            this.btnDetails.labelDisplay.text = Locales.get("zz_handbook3"),
                void 0 == this.captainConfigDatas ? ConfigData.preLoadDats(["captainData", "captainCollection"], [CaptaindataParser, CaptaincollectionParser],
                    function() {
                        t.ConstructCaptainData(),
                            t.UpdateCaptainData(),
                            t.UpdateCaptainPanel()
                    }) : (this.UpdateCaptainData(), this.UpdateCaptainPanel())
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnDetails = function(t) {
            var e = new Object;
            e.type = this.currentTab,
                this.currentTab === WindowWarshipHandbookTabType.TAB_WARSHIP ? e.data = this.paperBuffMap : this.currentTab === WindowWarshipHandbookTabType.TAB_MEDAL ? e.data = this.medalBuffMap : this.currentTab === WindowWarshipHandbookTabType.TAB_CAPTAIN && (e.data = this.captainBuffMap),
                WindowManager.getInstance().show(WindowManager.windowType.HandbookProperty, e)
        },
        i.OnClickBtnCaptain = function(t) {
            this.GotoTab(WindowWarshipHandbookTabType.TAB_CAPTAIN)
        },
        i.OnClickBtnMedal = function(t) {
            this.GotoTab(WindowWarshipHandbookTabType.TAB_MEDAL)
        },
        i.OnClickBtnWarship = function(t) {
            this.GotoTab(WindowWarshipHandbookTabType.TAB_WARSHIP)
        },
        i.clear = function() {
            this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnDetails.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnDetails, this),
                this.btnCaptain.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnCaptain, this),
                this.btnMedal.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnMedal, this),
                this.btnWarship.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnWarship, this)
        },
        e
}(WindowBase);
egret.registerClass(WindowWarshipHandbook, "WindowWarshipHandbook");
var WindowZhaoMuCaptain = function(t) {
    function e() {
        t.call(this, !1),
            this.juniorcaptain = 0,
            this.seniorcaptain = 0,
            this.hasexchangetimes = 0,
            this.juniorlasttime = 0,
            this.seniorlasttime = 0,
            this.juniorfirstbuyaward = !1,
            this.seniorfirstbuyaward = !1,
            this.juniordiscount = !1,
            this.seniordiscount = !1,
            this.skinName = "resource/eui_skins/ChouJiang_TeGongSkin.exml"
            /*tpa=resource/eui_skins/ChouJiang_TeGongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.init = function() {
            var t = this;
            WindowManager.getInstance().showWaiting(),
                this.preloadConfigs(function() {
                    t.initUI()
                }),
                UserData.getInstance().addEventListener(GameEvent.UserData_Update, this.updateUserInfo, this),
                this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this)
        },
        i.clear = function() {
            MainUI.instance.setBottomVisible(!0),
                UserData.getInstance().removeEventListener(GameEvent.UserData_Update, this.updateUserInfo, this),
                this.btnClose.removeEventListener(egret.TouchEvent.TOUCH_TAP, this.onTabBarItemTap, this)
        },
        i.onTabBarItemTap = function(t) {
            switch (t.currentTarget) {
                case this.btnClose:
                    WindowManager.getInstance().hide(WindowManager.windowType.ZhaoMuCaptain)
            }
        },
        i.preloadConfigs = function(t) {
            var e = [];
            e.push("item"),
                e.push("spyBaseData"),
                e.push("CaptainRecruitData"),
                ConfigData.preLoadDats(e, [ItemParser, SpybasedataParser, CaptainrecruitdataParser],
                    function() {
                        t()
                    })
        },
        i.initUI = function() {
            WindowManager.getInstance().hideWaiting(),
                MainUI.instance.changeTopMode(topUIMode["null"]),
                MainUI.instance.setBottomVisible(!1),
                SUI.setTextureAsync(this.bgImg, Path.backGroundImageUrl + "BG_zhaomujianzhang.jpg"),
                this.txtNum.text = UserData.getInstance().getRes(TypeDefine.RES.Diamond).toString(),
                this.scroller.viewport = this.list,
                ShopManager.getInstance().sendDseCaptainData()
        },
        i.updateUserInfo = function() {
            this.txtNum.text = UserData.getInstance().getRes(TypeDefine.RES.Diamond).toString()
        },
        i.setPageData = function(t) {
            var e = this.getPaperPageList(t);
            this.list.dataProvider = new eui.ArrayCollection(e),
                this.list.itemRenderer = zhaoMuCaptainFactoryListItem
        },
        i.getPaperPageList = function(t) {
            this.juniorcaptain = t.juniorcaptain,
                this.seniorcaptain = t.seniorcaptain,
                this.hasexchangetimes = t.hasexchangetimes,
                this.juniorlasttime = t.juniorlasttime,
                this.seniorlasttime = t.seniorlasttime,
                this.juniorfirstbuyaward = t.juniorfirstbuyaward,
                this.seniorfirstbuyaward = t.seniorfirstbuyaward,
                this.juniordiscount = t.juniordiscount,
                this.seniordiscount = t.seniordiscount;
            for (var e = [], a = CaptainrecruitdataParser.GetInstance().getDataArr(), i = 0; i < a.length; i++) {
                var n = {};
                n.id = a[i].id,
                    n.name = a[i].name_l,
                    n.icon = Path.npcURL + "Recruit_" + a[i].id + ".png",
                    n.freeCount = a[i].freeCount,
                    n.cd = a[i].cd,
                    n.itemId = a[i].itemId,
                    n.itemId2 = a[i].freeItemId,
                    n.credit = a[i].credit,
                    1 == n.id ? n.itemIcon = Path.item_sURL + "zml_lv_x.png" : 2 == n.id ? n.itemIcon = Path.item_sURL + "zml_lan_x.png" : 3 == n.id ? n.itemIcon = Path.item_sURL + "zml_z_x.png" : 4 == n.id && (n.itemIcon = Path.item_sURL + "zml_c_x.png"),
                    1 == a[i].id ? n.desc = "数量不足,招募令会在战役的精英关卡中产出" : 4 == a[i].id ? n.desc = "数量不足,王牌招募令会在各种活动中产出" : n.desc = "",
                    n.midprice = 80,
                    n.seniorprice = 280,
                    n.tenprice = 2680,
                    n.count = 0;
                var s = ItemsManager.getInstance().getItemById(Number(n.itemId));
                if (null != s && (n.count += s.count), -1 != n.itemId2) {
                    var r = ItemsManager.getInstance().getItemById(Number(n.itemId2));
                    null != r && (n.count += r.count)
                }
                if (n.lasttime = 0, "2" == n.id) {
                    var o = n.cd - (UserData.getInstance().getOldServerTime() / 1e3 - this.juniorlasttime);
                    0 == this.juniorlasttime || 0 >= o ? n.lasttime = 0 : n.lasttime = o
                }
                if ("3" == n.id) {
                    var l = Number(n.cd) - (UserData.getInstance().getOldServerTime() / 1e3 - this.seniorlasttime);
                    0 == this.seniorlasttime || 0 >= l ? n.lasttime = 0 : n.lasttime = l
                }
                e.push(n)
            }
            return e
        },
        e
}(WindowBase);
egret.registerClass(WindowZhaoMuCaptain, "WindowZhaoMuCaptain");
var zhaoMuCaptainFactoryListItem = function(t) {
    function e() {
        t.call(this),
            this.tickIndex = 0,
            this.addEventListener(egret.Event.REMOVED_FROM_STAGE, this.clear, this),
            this.skinName = "resource/eui_skins/item/shangcheng_tegongSkin.exml"
            /*tpa=resource/eui_skins/item/shangcheng_tegongSkin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.clear = function() {
            this.tickIndex > 0 && (GameTick.removeHandler(this.tickIndex), this.tickIndex = 0),
                this.redcircle && (Utils.removeNode(this.redcircle.display), dragonBones.WorldClock.clock.remove(this.redcircle), this.redcircle = void 0),
                this.starlight && (Utils.removeNode(this.starlight.display), dragonBones.WorldClock.clock.remove(this.starlight), this.starlight = void 0),
                this.starlight2 && (Utils.removeNode(this.starlight2.display), dragonBones.WorldClock.clock.remove(this.starlight2), this.starlight2 = void 0),
                this.starlight3 && (Utils.removeNode(this.starlight3.display), dragonBones.WorldClock.clock.remove(this.starlight3), this.starlight3 = void 0),
                this.redcircle2 && (Utils.removeNode(this.redcircle2.display), dragonBones.WorldClock.clock.remove(this.redcircle2), this.redcircle2 = void 0),
                this.redcircle3 && (Utils.removeNode(this.redcircle3.display), dragonBones.WorldClock.clock.remove(this.redcircle3), this.redcircle3 = void 0),
                this.redcircle4 && (Utils.removeNode(this.redcircle4.display), dragonBones.WorldClock.clock.remove(this.redcircle4), this.redcircle4 = void 0)
        },
        i.updateTime = function() {
            return this.data && 0 == this.data.lasttime ? (GameTick.removeHandler(this.tickIndex), void(this.tickIndex = 0)) : void(this.txtTimeDesc.text = GlobalFunction.getHMSBySecond(--this.data.lasttime) + "后可以领取1个")
        },
        i.dataChanged = function() {
            var e = this;
            if (t.prototype.dataChanged.call(this), this.data) {
                if (!this.hasEventListener(egret.TouchEvent.TOUCH_TAP)) {
                    if (4 == this.data.id) {
                        if (!this.starlight) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight || (e.addChild(t.display), t.display.x = 342, t.display.y = 90, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight = t))
                                },
                                this)
                        }
                        if (!this.starlight2) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight2 || (e.addChild(t.display), t.display.x = 153, t.display.y = 154, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight2 = t))
                                },
                                this)
                        }
                        if (!this.starlight3) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight3 || (e.addChild(t.display), t.display.x = 204, t.display.y = 150, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight3 = t))
                                },
                                this)
                        }
                    } else if (3 == this.data.id) {
                        if (!this.starlight) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight || (e.addChild(t.display), t.display.x = 140, t.display.y = 156, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight = t))
                                },
                                this)
                        }
                        if (!this.starlight2) {
                            var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                                i = Path.effectUrl + "zhaomu_starlight/texture.json",
                                n = Path.effectUrl + "zhaomu_starlight/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                                function(t, a) {
                                    t && (e.starlight2 || (e.addChild(t.display), t.display.x = 167, t.display.y = 130, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight2 = t))
                                },
                                this)
                        }
                    } else if (2 == this.data.id && !this.starlight) {
                        var a = Path.effectUrl + "zhaomu_starlight/zhaomu_starlight.json",
                            i = Path.effectUrl + "zhaomu_starlight/texture.json",
                            n = Path.effectUrl + "zhaomu_starlight/texture.png";
                        Utils.createDragonBone(a, i, n, "zhaomu_starlight", "normal",
                            function(t, a) {
                                t && (e.starlight || (e.addChild(t.display), t.display.x = 140, t.display.y = 132, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.starlight = t))
                            },
                            this)
                    }
                    if (1 == this.data.id) {
                        if (!this.redcircle) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle || (e.addChild(t.display), t.display.x = 490, t.display.y = 95, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle = t))
                                },
                                this)
                        }
                        if (!this.redcircle2) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle2 || (e.addChild(t.display), t.display.x = 590, t.display.y = 140, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle2 = t))
                                },
                                this)
                        }
                        if (!this.redcircle3) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle3 || (e.addChild(t.display), t.display.x = 185, t.display.y = 135, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle3 = t))
                                },
                                this)
                        }
                    } else if (2 == this.data.id) {
                        if (!this.redcircle) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle || (e.addChild(t.display), t.display.x = 200, t.display.y = 80, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle = t))
                                },
                                this)
                        }
                        if (!this.redcircle2) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle2 || (e.addChild(t.display), t.display.x = 430, t.display.y = 125, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle2 = t))
                                },
                                this)
                        }
                    } else if (3 == this.data.id) {
                        if (!this.redcircle) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle || (e.addChild(t.display), t.display.x = 520, t.display.y = 62, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle = t))
                                },
                                this)
                        }
                        if (!this.redcircle2) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle2 || (e.addChild(t.display), t.display.x = 420, t.display.y = 50, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle2 = t))
                                },
                                this)
                        }
                        if (!this.redcircle3) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle3 || (e.addChild(t.display), t.display.x = 300, t.display.y = 135, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle3 = t))
                                },
                                this)
                        }
                    } else if (4 == this.data.id) {
                        if (!this.redcircle) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle || (e.addChild(t.display), t.display.x = 320, t.display.y = 162, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle = t))
                                },
                                this)
                        }
                        if (!this.redcircle2) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle2 || (e.addChild(t.display), t.display.x = 490, t.display.y = 120, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle2 = t))
                                },
                                this)
                        }
                        if (!this.redcircle3) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle3 || (e.addChild(t.display), t.display.x = 400, t.display.y = 55, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle3 = t))
                                },
                                this)
                        }
                        if (!this.redcircle4) {
                            var a = Path.effectUrl + "zhaomu_redcircle/zhaomu_redcircle.json",
                                i = Path.effectUrl + "zhaomu_redcircle/texture.json",
                                n = Path.effectUrl + "zhaomu_redcircle/texture.png";
                            Utils.createDragonBone(a, i, n, "zhaomu_redcircle", "normal",
                                function(t, a) {
                                    t && (e.redcircle4 || (e.addChild(t.display), t.display.x = 250, t.display.y = 150, t.animation.gotoAndPlay("normal", void 0, void 0, 0), e.redcircle4 = t))
                                },
                                this)
                        }
                    }
                    this.addEventListener(egret.TouchEvent.TOUCH_TAP,
                        function() {
                            if (!e.wordslight) {
                                var t = Path.effectUrl + "zhaomu_wordslight/zhaomu_wordslight.json",
                                    a = Path.effectUrl + "zhaomu_wordslight/texture.json",
                                    i = Path.effectUrl + "zhaomu_wordslight/texture.png";
                                Utils.createDragonBone(t, a, i, "zhaomu_wordslight", "normal",
                                    function(t, a) {
                                        t && (e.wordslight || (e.addChild(t.display), t.display.x = 340, t.display.y = 90, e.wordslight = t, t.addEventListener(dragonBones.AnimationEvent.COMPLETE,
                                            function() {
                                                Utils.removeNode(e.wordslight.display),
                                                    dragonBones.WorldClock.clock.remove(e.wordslight),
                                                    e.wordslight = void 0
                                            },
                                            e)))
                                    },
                                    e)
                            }
                            e.data.count > 0 ? 0 != e.data.lasttime || 2 != e.data.id && 3 != e.data.id ? (console.log("派遣"), 2 == e.data.id || 4 == e.data.id ? ShopManager.getInstance().sendRecruitCaptain(e.data.id, 1, e.data) : ShopSpyAlert.getInstance().showZhaoMuPage(e.data)) : (console.log("免费领取"), 2 == e.data.id ? ShopManager.getInstance().sendBuyRecruitItem(1, 1, 0) : 3 == e.data.id && ShopManager.getInstance().sendBuyRecruitItem(2, 1, 0)) : -1 == e.data.credit ? Toast.launch(e.data.desc) : 0 == e.data.lasttime ? (console.log("免费领取"), 2 == e.data.id ? ShopManager.getInstance().sendBuyRecruitItem(1, 1, 0) : 3 == e.data.id && ShopManager.getInstance().sendBuyRecruitItem(2, 1, 0)) : (console.log("弹出购买道具界面"), ShopSpyAlert.getInstance().showBuyCaptainPage(e.data))
                        },
                        this)
                }
                this.data.count > 0 ? this.txtHaveItem.textColor = 16777215 : this.txtHaveItem.textColor = 16001803,
                    "" == this.data.freeCount && (this.txtTimeDesc.visible = !1),
                    "2" == this.data.id || "3" == this.data.id ? 0 == this.data.lasttime ? (this.txtTimeDesc.text = "可领取", this.txtTimeDesc.textColor = 65280) : this.data.lasttime > 0 && (this.txtTimeDesc.text = GlobalFunction.getHMSBySecond(this.data.lasttime) + "后可以领取1个", this.txtTimeDesc.textColor = 16777215, 0 == this.tickIndex && (this.tickIndex = GameTick.registerHandler(function() {
                            e.updateTime()
                        },
                        1e3))) : this.txtTimeDesc.visible = !1,
                    this.redPoint.visible = !1,
                    this.data.count > 0 ? this.redPoint.visible = !0 : "1" == this.data.id || "4" == this.data.id ? this.redPoint.visible = !1 : ("2" == this.data.id || "3" == this.data.id) && (0 == this.data.lasttime ? this.redPoint.visible = !0 : this.redPoint.visible = !1)
            }
        },
        e
}(eui.ItemRenderer);
egret.registerClass(zhaoMuCaptainFactoryListItem, "zhaoMuCaptainFactoryListItem");
var WindowActivityLoginReward = function(t) {
    function e() {
        t.call(this, !0),
            this._tabIndex = 1,
            this.skinName = "resource/eui_skins/HuoDong_denglu_Skin.exml"
            /*tpa=resource/eui_skins/HuoDong_denglu_Skin.exml*/
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.setData = function(t) {
            this._data = t,
                SUI.setTextureAsync(this.imgShow, Path.GetActivityIcon(this._data.icon));
            var e = UserData.getInstance().getServerTime(),
                a = new Date(e);
            a.setHours(24, 0, 0, 0),
                this._endTime = a.valueOf(),
                ActivityManager.instance.setImageByType(this.imgTitle, t.type);
            var i = 1e3 * UserData.getInstance().regtime,
                n = new Date(i);
            n.setDate(n.getDate() + 4),
                n.setHours(24, 0, 0, 0),
                this._data.end_time.time = Math.floor(n.valueOf() / 1e3),
                e > 1e3 * this._data.end_time.time && this.close();
            var s = Utils.getDateByNum(i, timeType.FORMATDATE),
                r = Utils.getDateByNum(1e3 * this._data.end_time.time, timeType.FORMATDATE);
            this.txtTime.text = Locales.get("zz_activitytime1", s, r),
                this.updatePanel(),
                this._requesting = !1
        },
        i.updatePanel = function() {
            var t = UserData.getInstance().getServerTime(),
                e = Utils.getDayDiff(1e3 * UserData.getInstance().regtime, t),
                a = e;
            this.txtDesc.textFlow = Utils.textFlowByStr(Locales.get("zz_loginrewarddesc" + (e + 1))),
                this.btnTakeReward.enabled = !0,
                2 == this._tabIndex ? (e++, this.btnViewTomorrow.currentState = "down", this.btnViewToday.currentState = "up", this.btnViewToday.touchEnabled = !0, this.btnViewTomorrow.touchEnabled = !1, this.btnTakeReward.enabled = !1, this.btnRecharge.enabled = !1) : (this.btnViewTomorrow.currentState = "up", this.btnViewToday.currentState = "down", this.btnViewToday.touchEnabled = !1, this.btnViewTomorrow.touchEnabled = !0),
                4 == a && (this.btnViewTomorrow.visible = !1, this.btnViewToday.x = this.btnViewTomorrow.x, this.btnViewToday.y = this.btnViewTomorrow.y);
            var i = this._data.itemlist[e];
            this._curRewardInfo = i;
            var n = !1;
            i.items[0].id == i.items[1].id && (n = !0);
            var s = this._icons[e];
            if (n) {
                this.txtRewardName0.visible = !0,
                    this.Reward1.visible = !0,
                    this.Reward2.visible = !1,
                    this.txtRewardDesc.visible = !1,
                    SUI.setTextureAsync(this.imgRewardLight, Path.uiUrl + "Upgrade_Light.png");
                var r = GiftdataParser.GetInstance().getItemById(i.items[0].id),
                    o = GlobalFunction.getDropDataByTypeAndId(r.type, r.item, r.count);
                SUI.setTextureAsync(this.imgReward, s[0]);
                var l = o.name;
                o.count > 1 && (l += "x" + o.count),
                    this.txtRewardName.text = l,
                    o.quality && (this.txtRewardName.textColor = QualitySystem.getColorByQuality(o.quality)),
                    SUI.setTextureAsync(this.imgDouble, Path.activityUrl + "denglujiusong_jianglifanbei.png"),
                    this.imgDouble.visible = !0,
                    this.txtRecharge.text = "充点小钱领双倍！"
            } else {
                this.Reward1.visible = !1,
                    this.Reward2.visible = !0,
                    this.imgDouble.visible = !1,
                    this.txtRewardDesc.visible = !0,
                    this.txtRewardName0.visible = !1,
                    this.txtRewardDesc.text = "充值6元额外送",
                    SUI.setTextureAsync(this.imgRewardLight1, Path.uiUrl + "Upgrade_Light.png"),
                    SUI.setTextureAsync(this.imgRewardLight3, Path.uiUrl + "Upgrade_Light.png");
                var r = GiftdataParser.GetInstance().getItemById(i.items[0].id),
                    o = GlobalFunction.getDropDataByTypeAndId(r.type, r.item, r.count);
                SUI.setTextureAsync(this.imgReward3, s[0]);
                var l = o.name;
                o.count > 1 && (l += "x" + o.count),
                    this.txtRewardName3.text = l,
                    o.quality && (this.txtRewardName3.textColor = QualitySystem.getColorByQuality(o.quality)),
                    r = GiftdataParser.GetInstance().getItemById(i.items[1].id),
                    o = GlobalFunction.getDropDataByTypeAndId(r.type, r.item, r.count),
                    SUI.setTextureAsync(this.imgReward1, s[1]),
                    l = o.name,
                    o.count > 1 && (l += "x" + o.count),
                    this.txtRewardName1.text = l,
                    o.quality && (this.txtRewardName1.textColor = QualitySystem.getColorByQuality(o.quality)),
                    this.txtRecharge.text = "充点小钱玩一玩！"
            }
            if (2 == this._tabIndex) this.btnRecharge.labelDisplay.text = "充值6元",
                this._canGet2 = !1;
            else {
                var h = ActivityManager.instance.activityData.login_charge_gift[a];
                ActivityManager.instance.activityData.login_charge_cash[a] > 1 ? (this.btnRecharge.labelDisplay.text = "领取", 0 == h || 1 == h ? (this._canGet2 = !0, this.btnRecharge.enabled = !0) : (this._canGet2 = !1, this.btnRecharge.enabled = !1)) : (this.btnRecharge.labelDisplay.text = "充值6元", this._canGet2 = !1, this.btnRecharge.enabled = !0),
                    (1 == h || 3 == h) && (this.btnTakeReward.enabled = !1)
            }
            this.onTick()
        },
        i.init = function() {
            this.btnClose.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnClose, this),
                this.btnViewTomorrow.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnViewTomorrow, this),
                this.btnViewToday.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnViewToday, this),
                this.btnTakeReward.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnTakeReward, this),
                this.btnRecharge.addEventListener(egret.TouchEvent.TOUCH_TAP, this.OnClickBtnRecharge, this),
                SUI.setTextureAsync(this.imgBg, Path.backGroundImageUrl + "Bg_huodong.jpg"),
                SUI.setTextureAsync(this.imgL, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgR, Path.uiUrl + "Activity/Bg_title_huodong2.png"),
                SUI.setTextureAsync(this.imgSkip, Path.uiUrl + "Activity/Activity_fengetiao.png"),
                EventManager.instance.addEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.updatePanel, this),
                this._ticker = new egret.Timer(1e3),
                this._ticker.addEventListener(egret.TimerEvent.TIMER, this.onTick, this),
                this._ticker.start(),
                this._icons = [],
                this._icons.push(["resource/assets/Panel/GUI_Homepage_Icon_14.png"
                    /*tpa=resource/assets/Panel/GUI_Homepage_Icon_14.png*/
                    , "resource/assets/Icon/recharge/zuanshi2.png"
                    /*tpa=resource/assets/Icon/recharge/zuanshi2.png*/
                ]),
                this._icons.push(["resource/assets/ShipIcons/y_1_2alsj.png"
                    /*tpa=resource/assets/ShipIcons/y_1_2alsj.png*/
                    , "resource/assets/ShipIcons/y_3_2sw.png"
                    /*tpa=resource/assets/ShipIcons/y_3_2sw.png*/
                ]),
                this._icons.push(["resource/assets/Icon/parts/ranqilunji.png"
                    /*tpa=resource/assets/Icon/parts/ranqilunji.png*/
                ]),
                this._icons.push(["resource/assets/Icon/medal/Medal_51001_l.png"
                    /*tpa=resource/assets/Icon/medal/Medal_51001_l.png*/
                ]),
                this._icons.push(["resource/assets/Icon/captain/Churchill.png"
                    /*tpa=resource/assets/Icon/captain/Churchill.png*/
                    , "resource/assets/Icon/captain/Mountbatten.png"
                    /*tpa=resource/assets/Icon/captain/Mountbatten.png*/
                ])
        },
        i.onTick = function() {
            if (!this._requesting) {
                var t = UserData.getInstance().getServerTime();
                if (t > this._endTime) return this._requesting = !0,
                    void RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivityWebData, {
                        type: ActivityType.ACTIVITY_TYPE_LOGINGIFT
                    });
                var e = new Date(this._endTime),
                    a = e.valueOf() - t,
                    i = Math.floor(a / 1e3),
                    n = Utils.getTimeString(i);
                1 == this._tabIndex ? this.txtLeftTime.text = n + "后结束" : this.txtLeftTime.text = n + "后可领取"
            }
        },
        i.changeTab = function(t, e) {
            (t != this._tabIndex || e) && (this._tabIndex = t, this.updatePanel())
        },
        i.OnClickBtnClose = function(t) {
            this.close()
        },
        i.OnClickBtnViewTomorrow = function(t) {
            this.changeTab(2)
        },
        i.OnClickBtnViewToday = function(t) {
            this.changeTab(1)
        },
        i.OnClickBtnTakeReward = function(t) {
            RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                id: ActivityType.ACTIVITY_TYPE_LOGINGIFT,
                type: 1
            })
        },
        i.OnClickBtnRecharge = function(t) {
            this._canGet2 ? RequestManager.GetInstance().RequestMsg(ProtocolMgr.ID_DceActivity, {
                id: ActivityType.ACTIVITY_TYPE_LOGINGIFT,
                type: 2
            }) : WindowManager.getInstance().show(WindowManager.windowType.Recharge)
        },
        i.clear = function() {
            EventManager.instance.removeEventListener(EventTypes.ACTIVITY_DATA_UPDATE, this.updatePanel, this),
                this._ticker && (this._ticker.stop(), this._ticker = void 0)
        },
        e
}(WindowBase);
egret.registerClass(WindowActivityLoginReward, "WindowActivityLoginReward");
var ZhanDouLiMarquee = function(t) {
    function e(e) {
        t.call(this),
            this.myData = e,
            this.addEventListener(eui.UIEvent.COMPLETE, this.OnComplete, this),
            this.skinName = "resource/eui_skins/ZhanDouLiSkin.exml"
            /*tpa=resource/eui_skins/ZhanDouLiSkin.exml*/
            ,
            this.x = (GameData.designWidth - this.width) / 2,
            this.y = GameData.designHeight / 3,
            Main.instance.addChild(this)
    }
    __extends(e, t);
    var a = (__define, e),
        i = a.prototype;
    return i.OnComplete = function() {
            var t = this;
            this.txtChange.text = this.myData.change,
                this.stepNumList = [],
                this.numList = [];
            for (var e = Math.abs(this.myData.point), a = Math.abs(this.myData.point - this.myData.change), i = e.toString().length, n = 0; i > n; n++) {
                var s = Number(e.toString().substr(n, 1));
                this.numList.push(s),
                    this.stepNumList.push(Number(a.toString().substr(n, 1)))
            }
            this.txtBattlePoint.text = this.myData.point,
                this.myData.change < 0 ? (this.addTxt = "-", this.txtChange.textColor = 16711680, this.imgChange.source = RES.getRes(Path.resHeadUrl + "zhanjianyangcheng_jianxia_png")) : (this.addTxt = "+", this.txtChange.textColor = 65280),
                this.tickId = GameTick.registerHandler(function() {
                        t.txtBattlePoint.text = t.stepNumList.join("");
                        for (var e = 0,
                                a = 0; a < t.stepNumList.length; a++) t.stepNumList[a] = t.stepNumList[a] + 1,
                            t.stepNumList[a] > t.numList[a] && (t.stepNumList[a] = t.numList[a], e += 1);
                        e >= t.stepNumList.length && (GameTick.removeHandler(t.tickId), t.hold())
                    },
                    50)
        },
        i.hold = function() {
            var t = this;
            egret.Tween.get(this).wait(500).to({
                    y: this.y - 100,
                    alpha: 0
                },
                500).call(function() {
                Main.instance.removeChild(t)
            })
        },
        e
}(eui.Component);
egret.registerClass(ZhanDouLiMarquee, "ZhanDouLiMarquee");